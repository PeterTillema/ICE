    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\ti84pce.inc"
Listing for file "ice.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\defines.asm"
    1 00:0000 -  -  -  -  tempToken               .equ pixelShadow+00
    2 00:0000 -  -  -  -  tempToken2              .equ pixelShadow+01
    3 00:0000 -  -  -  -  InputStartData          .equ pixelShadow+02
    4 00:0000 -  -  -  -  RandStartData           .equ pixelShadow+05
    5 00:0000 -  -  -  -  PauseStartData          .equ pixelShadow+08
    6 00:0000 -  -  -  -  MeanStartData           .equ pixelShadow+11
    7 00:0000 -  -  -  -  KeypadStartData         .equ pixelShadow+14
    8 00:0000 -  -  -  -  RootStartData           .equ pixelShadow+17
    9 00:0000 -  -  -  -  PrevProgramPtr          .equ pixelShadow+20
   10 00:0000 -  -  -  -  SetBASICVarPtr          .equ pixelShadow+23
   11 00:0000 -  -  -  -  GetBASICVarPtr          .equ pixelShadow+26
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  stack                   .equ pixelShadow+00100
   14 00:0000 -  -  -  -  output                  .equ pixelShadow+01100
   15 00:0000 -  -  -  -  programNamesStack       .equ pixelShadow+03000
   16 00:0000 -  -  -  -  labelStack              .equ pixelShadow+03000
   17 00:0000 -  -  -  -  gotoStack               .equ pixelShadow+04000
   18 00:0000 -  -  -  -  programDataOffsetStack  .equ pixelShadow+05000
   19 00:0000 -  -  -  -  tempStringsStack        .equ pixelShadow+06500
   20 00:0000 -  -  -  -  tempListsStack          .equ pixelShadow+08000
   21 00:0000 -  -  -  -  programDataData         .equ pixelShadow+16000
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  tempArg1                .equ saveSScreen+15000
   24 00:0000 -  -  -  -  tempArg2                .equ pixelShadow+16000
   25 00:0000 -  -  -  -  tempArg3                .equ pixelShadow+17000
   26 00:0000 -  -  -  -  tempArg4                .equ pixelShadow+18000
   27 00:0000 -  -  -  -  tempArg5                .equ pixelShadow+19000
   28 00:0000 -  -  -  -  tempArg6                .equ pixelShadow+20000
   29 00:0000 -  -  -  -  
   30 00:0000 -  -  -  -  startTab                .equ saveSScreen
   31 00:0000 -  -  -  -  debugStart              .equ plotSScreen+10000
   32 00:0000 -  -  -  -  
   33 00:0000 -  -  -  -  program                 .equ vRAM+(320*240)
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  fProgram1               .equ -30h
   36 00:0000 -  -  -  -  comp_with_libs          .equ 0                        ; used if compile with C libs
   37 00:0000 -  -  -  -  good_compilation        .equ 1                        ; used if compilation is succesfull
   38 00:0000 -  -  -  -  has_already_input       .equ 2                        ; only once the "Input" routine
   39 00:0000 -  -  -  -  has_already_rand        .equ 3                        ; only once the "rand" routine
   40 00:0000 -  -  -  -  has_already_pause       .equ 4                        ; only once the "Pause" routine
   41 00:0000 -  -  -  -  has_already_mean        .equ 5                        ; only once the "mean()" routine
   42 00:0000 -  -  -  -  has_already_keypad      .equ 6                        ; only once the scanning the keypad
   43 00:0000 -  -  -  -  used_code               .equ 7                        ; DefineSprite( must be in front of all the code
   44 00:0000 -  -  -  -  
   45 00:0000 -  -  -  -  fProgram2               .equ -31h
   46 00:0000 -  -  -  -  has_already_root        .equ 0                        ; only once the "Sqrt(" routine
   47 00:0000 -  -  -  -  has_already_setvar      .equ 1                        ; only once the "SetBASICVar(" routine
   48 00:0000 -  -  -  -  has_already_getvar      .equ 2                        ; only once the "GetBASICVar(" routine
   49 00:0000 -  -  -  -  has_already_debug       .equ 3                        ; only once the routine to insert Lbl/Goto in the debug section
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  fExpression1            .equ -40h
   52 00:0000 -  -  -  -  prev_is_number          .equ 0                        ; used if a number consists of more digits
   53 00:0000 -  -  -  -  chain_operators         .equ 1                        ; used if the calculation is needed for another calculation
   54 00:0000 -  -  -  -  last_token_is_ret       .equ 2                        ; used if last token is "Return"
   55 00:0000 -  -  -  -  op_is_last_one          .equ 3                        ; used if the operator is the last of that line
   56 00:0000 -  -  -  -  output_is_number        .equ 4                        ; used if the calculation is only a single number, loop-statements can be 
   57 00:0000 -  -  -  -  ans_set_z_flag          .equ 5                        ; used if the previous calculation sets the zero flag, useful for loop/conditions
   58 00:0000 -  -  -  -  need_push               .equ 6                        ; used if Ans may not be overwritten
   59 00:0000 -  -  -  -  output_is_string        .equ 7                        ; used for strings
   60 00:0000 -  -  -  -  
   61 00:0000 -  -  -  -  fExpression2            .equ -41h
   62 00:0000 -  -  -  -  use_mean_routine        .equ 0                        ; used if the function is mean()
   63 00:0000 -  -  -  -  last_token_was_not      .equ 1                        ; used if the last token is "not(", which can be optimized at If/Repeat/While
   64 00:0000 -  -  -  -  
   65 00:0000 -  -  -  -  fExpression3            .equ -42h
   66 00:0000 -  -  -  -  triggered_a_comma       .equ 0                        ; used if a comma is entered outside parens, used by functions
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  fFunction1              .equ -50h
   69 00:0000 -  -  -  -  arg1_is_small           .equ 4                        ; used in C functions
   70 00:0000 -  -  -  -  function_implemented    .equ 4                        ; used if C function is implemented
   71 00:0000 -  -  -  -  arg2_is_small           .equ 3                        ; used in C functions
   72 00:0000 -  -  -  -  arg3_is_small           .equ 2                        ; used in C functions
   73 00:0000 -  -  -  -  arg4_is_small           .equ 1                        ; used in C functions
   74 00:0000 -  -  -  -  arg5_is_small           .equ 0                        ; used in C functions
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  fFunction2              .equ -51h
   77 00:0000 -  -  -  -  negative_for_step       .equ 0                        ; used for the step in a For loop
   78 00:0000 -  -  -  -  for_step_is_number      .equ 1                        ; used for the step in a For loop
   79 00:0000 -  -  -  -  end_point_is_number     .equ 2                        ; used for the end point in a For loop
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  fAlways1                .equ -52h
   82 00:0000 -  -  -  -  displayed_det           .equ 0                        ; used if the text of a det( function is displayed in the statusbar
   83 00:0000 -  -  -  -  modified_iy             .equ 1                        ; used if iy is modified by a C routine
   84 00:0000 -  -  -  -  debug_on                .equ 2                        ; used if the user wants to debug
   85 00:0000 -  -  -  -  
   86 00:0000 -  -  -  -  typeNumber              .equ 0
   87 00:0000 -  -  -  -  typeVariable            .equ 1
   88 00:0000 -  -  -  -  typeChainPush           .equ 2
   89 00:0000 -  -  -  -  typeChainAns            .equ 3
   90 00:0000 -  -  -  -  typeReturnValue         .equ 4                        ;    getKey, rand
   91 00:0000 -  -  -  -  typeList                .equ 5
   92 00:0000 -  -  -  -  typeOSList              .equ 6
   93 00:0000 -  -  -  -  typeString              .equ 7
   94 00:0000 -  -  -  -  typeFunction            .equ 00111111b
   95 00:0000 -  -  -  -  typeOperator            .equ 00011111b
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  ChainPush               .equ 0
   98 00:0000 -  -  -  -  ChainAns                .equ 1
   99 00:0000 -  -  -  -  ChainListPush           .equ 2
  100 00:0000 -  -  -  -  ChainListAns            .equ 3
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  OutputInBC              .equ 0
  103 00:0000 -  -  -  -  OutputInDE              .equ 1
  104 00:0000 -  -  -  -  OutputInHL              .equ 2
  105 00:0000 -  -  -  -  
  106 00:0000 -  -  -  -  OutputIsInDE            .equ 0
  107 00:0000 -  -  -  -  OutputIsInHL            .equ 1
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ;---------------------------;
  110 00:0000 -  -  -  -  ;----- User Variables ------;
  111 00:0000 -  -  -  -  ;---------------------------;
  112 00:0000 -  -  -  -  Str0                    .equ saveSScreen+15500
  113 00:0000 -  -  -  -  Str1                    .equ saveSScreen+16000
  114 00:0000 -  -  -  -  Str2                    .equ saveSScreen+16500
  115 00:0000 -  -  -  -  Str3                    .equ saveSScreen+17000
  116 00:0000 -  -  -  -  Str4                    .equ saveSScreen+17500
  117 00:0000 -  -  -  -  Str5                    .equ saveSScreen+18000
  118 00:0000 -  -  -  -  Str6                    .equ saveSScreen+18500
  119 00:0000 -  -  -  -  Str7                    .equ saveSScreen+19000
  120 00:0000 -  -  -  -  Str8                    .equ saveSScreen+19500
  121 00:0000 -  -  -  -  Str9                    .equ saveSScreen+20000
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  L1                      .equ saveSScreen
  124 00:0000 -  -  -  -  L2                      .equ cmdPixelShadow
  125 00:0000 -  -  -  -  L3                      .equ pixelShadow2
  126 00:0000 -  -  -  -  L4                      .equ plotSScreen
  127 00:0000 -  -  -  -  L5                      .equ pixelShadow
  128 00:0000 -  -  -  -  L6                      .equ L1+10000
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ; IX offsets
  131 00:0000 -  -  -  -  vA                      .equ 0
  132 00:0000 -  -  -  -  vB                      .equ 3
  133 00:0000 -  -  -  -  vC                      .equ 6
  134 00:0000 -  -  -  -  vD                      .equ 9
  135 00:0000 -  -  -  -  vE                      .equ 12
  136 00:0000 -  -  -  -  vF                      .equ 15
  137 00:0000 -  -  -  -  vG                      .equ 18
  138 00:0000 -  -  -  -  vH                      .equ 21
  139 00:0000 -  -  -  -  vI                      .equ 24
  140 00:0000 -  -  -  -  vJ                      .equ 27
  141 00:0000 -  -  -  -  vK                      .equ 30
  142 00:0000 -  -  -  -  vL                      .equ 33
  143 00:0000 -  -  -  -  vM                      .equ 36
  144 00:0000 -  -  -  -  vN                      .equ 39
  145 00:0000 -  -  -  -  vO                      .equ 42
  146 00:0000 -  -  -  -  vP                      .equ 45
  147 00:0000 -  -  -  -  vQ                      .equ 48
  148 00:0000 -  -  -  -  vR                      .equ 51
  149 00:0000 -  -  -  -  vS                      .equ 54
  150 00:0000 -  -  -  -  vT                      .equ 57
  151 00:0000 -  -  -  -  vU                      .equ 60
  152 00:0000 -  -  -  -  vV                      .equ 63
  153 00:0000 -  -  -  -  vW                      .equ 66
  154 00:0000 -  -  -  -  vX                      .equ 69
  155 00:0000 -  -  -  -  vY                      .equ 72
  156 00:0000 -  -  -  -  vZ                      .equ 75
  157 00:0000 -  -  -  -  vtheta                  .equ 78
  158 00:0000 -  -  -  -  
  159 00:0000 -  -  -  -  rand1                   .equ 81
  160 00:0000 -  -  -  -  rand2                   .equ 84
  161 00:0000 -  -  -  -  rand3                   .equ 87
  162 00:0000 -  -  -  -  rand4                   .equ 90
  163 00:0000 -  -  -  -  
  164 00:0000 -  -  -  -  debugPtr                .equ 93
Listing for file "ice.asm"
    3 00:0000 -  -  -  -  
    4 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    5 00:0002 -  -  -  -  .org UserMem
    6 D1:A881 -  -  -  -  
    7 D1:A881 -  -  -  -  start:
    8 D1:A881 DD E5 -  -      push    ix
    9 D1:A883 ED 73 29 B0 
              D1 -  -  -  	ld	    (backupSP), sp
   10 D1:A888 2A 17 23 D0 	ld	    hl, (begPC)
   11 D1:A88C 22 43 B0 D1 	ld	    (backupBegPC), hl
   12 D1:A890 2A 1A 23 D0 	ld	    hl, (curPC)
   13 D1:A894 22 4B B0 D1 	ld	    (backupCurPC), hl
   14 D1:A898 2A 1D 23 D0 	ld	    hl, (endPC)
   15 D1:A89C 22 53 B0 D1 	ld	    (backupEndPC), hl
   16 D1:A8A0 CD 48 08 02 	call	_RunIndicOff
   17 D1:A8A4 CD 9E BC D1 	call	InstallHooks
   18 D1:A8A8 -  -  -  -  GUI:
   19 D1:A8A8 3E 27 -  -  	ld	    a, lcdBpp8
   20 D1:A8AA 32 18 00 E3 	ld	    (mpLcdCtrl), a
   21 D1:A8AE 21 00 02 E3 	ld	    hl, mpLcdPalette
   22 D1:A8B2 06 00 -  -  	ld	    b, 0
   23 D1:A8B4 50 -  -  -  _:	ld	    d, b
   24 D1:A8B5 78 -  -  -  	ld	    a, b
   25 D1:A8B6 E6 C0 -  -  	and	    011000000b
   26 D1:A8B8 CB 3A -  -  	srl	    d
   27 D1:A8BA 1F -  -  -  	rra
   28 D1:A8BB 5F -  -  -  	ld	    e, a
   29 D1:A8BC 3E 1F -  -  	ld	    a, 000011111b
   30 D1:A8BE A0 -  -  -  	and	    b
   31 D1:A8BF B3 -  -  -  	or	    a, e
   32 D1:A8C0 77 -  -  -  	ld	    (hl), a
   33 D1:A8C1 23 -  -  -  	inc	    hl
   34 D1:A8C2 72 -  -  -  	ld	    (hl), d
   35 D1:A8C3 23 -  -  -  	inc	    hl
   36 D1:A8C4 04 -  -  -  	inc	    b
   37 D1:A8C5 20 ED -  -  	jr	    nz, -_
   38 D1:A8C7 21 00 00 D4 	ld	    hl, vRAM
   39 D1:A8CB 36 BD -  -  	ld	    (hl), 189
   40 D1:A8CD E5 -  -  -  	push	hl
   41 D1:A8CE D1 -  -  -  	pop	    de
   42 D1:A8CF 13 -  -  -  	inc	    de
   43 D1:A8D0 01 80 0C 00 	ld	    bc, 320*10
   44 D1:A8D4 ED B0 -  -  	ldir
   45 D1:A8D6 36 00 -  -  	ld	    (hl), 0
   46 D1:A8D8 01 40 01 00 	ld	    bc, 320
   47 D1:A8DC ED B0 -  -  	ldir
   48 D1:A8DE 36 FF -  -  	ld	    (hl), 255
   49 D1:A8E0 01 3F 1E 01 	ld	    bc, 320*229-1
   50 D1:A8E4 ED B0 -  -  	ldir
   51 D1:A8E6 FD CB D0 CE 	set	    good_compilation, (iy+fProgram1)
   52 D1:A8EA FD CB AE 8E 	res	    modified_iy, (iy+fAlways1)
   53 D1:A8EE FD CB AE 96     res     debug_on, (iy+fAlways1);
   54 D1:A8F2 21 FC EE D1 	ld	    hl, ICEName
   55 D1:A8F6 3E 01 -  -  	ld	    a, 1
   56 D1:A8F8 32 3A B8 D1 	ld	    (TextYPos_ASM), a
   57 D1:A8FC C6 14 -  -  	add	    a, 20
   58 D1:A8FE 32 09 B8 D1 	ld	    (TextXPos_ASM), a
   59 D1:A902 CD A3 B0 D1 	call	PrintString
   60 D1:A906 21 3A B8 D1 	ld	    hl, TextYPos_ASM
   61 D1:A90A 34 -  -  -  	inc	    (hl)
   62 D1:A90B 34 -  -  -  	inc	    (hl)
   63 D1:A90C 2A 9D 25 D0 	ld	    hl, (progPtr)
   64 D1:A910 -  -  -  -  FindPrograms:
   65 D1:A910 CD 38 BC D1 	call	FindNextGoodVar
   66 D1:A914 20 34 -  -  	jr	nz, StopFindingPrograms
   67 D1:A916 E5 -  -  -  	push	hl
   68 D1:A917 3A 3A B8 D1             ld	    a, (TextYPos_ASM)
   69 D1:A91B C6 0A -  -              add	    a, 10
   70 D1:A91D 38 28 -  -              jr	    c, +_
   71 D1:A91F 32 3A B8 D1             ld	    (TextYPos_ASM), a
   72 D1:A923 21 0A 00 00             ld	    hl, 10
   73 D1:A927 22 09 B8 D1             ld	    (TextXPos_ASM), hl
   74 D1:A92B 21 54 EC D1             ld	    hl, AmountOfPrograms
   75 D1:A92F 34 -  -  -              inc	    (hl)
   76 D1:A930 CD 98 1F 02             call	_ChkInRAM
   77 D1:A934 3E 23 -  -              ld	    a, '#'
   78 D1:A936 DC 07 B8 D1             call	c, _PrintChar_ASM
   79 D1:A93A 2A 3C EC D1             ld	    hl, (ProgramNamesPtr)
   80 D1:A93E 11 F8 FF FF             ld	    de, -8
   81 D1:A942 19 -  -  -              add	    hl, de
   82 D1:A943 CD A3 B0 D1             call	PrintString
   83 D1:A947 E1 -  -  -  _:	pop	hl
   84 D1:A948 18 C6 -  -  	jr	    FindPrograms
   85 D1:A94A -  -  -  -  StopFindingPrograms:
   86 D1:A94A 3E 0D -  -  	ld	    a, 13
   87 D1:A94C 32 3A B8 D1 	ld	    (TextYPos_ASM), a
   88 D1:A950 21 01 00 00 	ld	    hl, 1
   89 D1:A954 22 09 B8 D1 	ld	    (TextXPos_ASM), hl
   90 D1:A958 3A 54 EC D1 	ld	    a, (AmountOfPrograms)
   91 D1:A95C B7 -  -  -  	or	    a, a
   92 D1:A95D CA 53 AF D1 	jp	    z, NoProgramsError
   93 D1:A961 32 D2 A9 D1 	ld	    (AmountPrograms), a
   94 D1:A965 2E 01 -  -  	ld	    l, 1
   95 D1:A967 -  -  -  -  PrintCursor:
   96 D1:A967 5D -  -  -  	ld	    e, l
   97 D1:A968 16 0A -  -  	ld	    d, 10
   98 D1:A96A ED 5C -  -  	mlt	    de
   99 D1:A96C 1C -  -  -  	inc	    e
  100 D1:A96D 1C -  -  -  	inc	    e
  101 D1:A96E 1C -  -  -  	inc	    e
  102 D1:A96F 7B -  -  -  	ld	    a, e
  103 D1:A970 32 3A B8 D1 	ld	    (TextYPos_ASM), a
  104 D1:A974 AF -  -  -  	xor	    a, a
  105 D1:A975 32 5F B8 D1 	ld	    (color), a
  106 D1:A979 3C -  -  -  	inc	    a
  107 D1:A97A 32 09 B8 D1 	ld	    (TextXPos_ASM), a
  108 D1:A97E 3E 3E -  -  	ld	    a, '>'
  109 D1:A980 CD 07 B8 D1 	call	_PrintChar_ASM
  110 D1:A984 3E FF -  -  	ld	    a, 255
  111 D1:A986 32 5F B8 D1 	ld	    (color), a
  112 D1:A98A 3E 01 -  -  	ld	    a, 1
  113 D1:A98C 32 09 B8 D1 	ld	    (TextXPos_ASM), a
  114 D1:A990 E5 -  -  -  _:	push	hl
  115 D1:A991 CD 4C 01 02             call	_GetCSC
  116 D1:A995 E1 -  -  -  	pop	    hl
  117 D1:A996 B7 -  -  -  	or	    a, a
  118 D1:A997 28 F7 -  -  	jr	    z, -_
  119 D1:A999 FE 04 -  -  	cp	    a, skUp
  120 D1:A99B 28 26 -  -  	jr	    z, PressedUp
  121 D1:A99D FE 01 -  -  	cp	    a, skDown
  122 D1:A99F 28 2F -  -  	jr	    z, PressedDown
  123 D1:A9A1 FE 0F -  -  	cp	    a, skClear
  124 D1:A9A3 CA 32 B0 D1 	jp	    z, StopProgram
  125 D1:A9A7 FE 09 -  -      cp      a, skEnter
  126 D1:A9A9 28 08 -  -      jr      z, PressedEnter
  127 D1:A9AB FE 0A -  -      cp      a, skAdd
  128 D1:A9AD 20 E1 -  -  	jr	    nz, -_
  129 D1:A9AF -  -  -  -  PressedPlus:
  130 D1:A9AF FD CB AE D6     set     debug_on, (iy+fAlways1)
  131 D1:A9B3 -  -  -  -  PressedEnter:
  132 D1:A9B3 2D -  -  -  	dec	    l
  133 D1:A9B4 26 08 -  -  	ld	    h, 8
  134 D1:A9B6 ED 6C -  -  	mlt	    hl
  135 D1:A9B8 11 AD 3D D0 	ld	    de, ProgramNamesStack-1
  136 D1:A9BC 19 -  -  -  	add	    hl, de
  137 D1:A9BD CD 20 03 02 	call	_Mov9ToOP1
  138 D1:A9C1 18 1B -  -  	jr	    StartParsing
  139 D1:A9C3 -  -  -  -  PressedUp:
  140 D1:A9C3 7D -  -  -  	ld	    a, l
  141 D1:A9C4 3D -  -  -  	dec	    a
  142 D1:A9C5 28 C9 -  -  	jr	    z, -_
  143 D1:A9C7 2D -  -  -  	dec	    l
  144 D1:A9C8 3E 17 -  -  	ld	    a, 23
  145 D1:A9CA CD 07 B8 D1 	call	_PrintChar_ASM
  146 D1:A9CE 18 97 -  -  	jr	    PrintCursor
  147 D1:A9D0 -  -  -  -  PressedDown:
  148 D1:A9D0 7D -  -  -  	ld	    a, l
  149 D1:A9D1 -  -  -  -  AmountPrograms = $+1
  150 D1:A9D1 FE 00 -  -  	cp	    a, 0
  151 D1:A9D3 28 BB -  -  	jr	    z, -_
  152 D1:A9D5 2C -  -  -  	inc	    l
  153 D1:A9D6 3E 17 -  -  	ld	    a, 23
  154 D1:A9D8 CD 07 B8 D1 	call	_PrintChar_ASM
  155 D1:A9DC 18 89 -  -  	jr	    PrintCursor
  156 D1:A9DE -  -  -  -  StartParsing:
  157 D1:A9DE 3E 05 -  -  	ld	    a, ProgObj
  158 D1:A9E0 32 F8 05 D0 	ld	    (OP1), a
  159 D1:A9E4 CD 0C 05 02 _:	call	_ChkFindSym
  160 D1:A9E8 30 07 -  -  	jr	    nc, +_
  161 D1:A9EA 21 F8 05 D0 	ld	    hl, OP1
  162 D1:A9EE 34 -  -  -  	inc	    (hl)
  163 D1:A9EF 18 F3 -  -  	jr	    -_
  164 D1:A9F1 CD 98 1F 02 _:	call	_ChkInRAM
  165 D1:A9F5 30 0A -  -  	jr	    nc, +_
  166 D1:A9F7 EB -  -  -  	ex	    de, hl
  167 D1:A9F8 11 09 00 00 	ld	    de, 9
  168 D1:A9FC 19 -  -  -  	add	    hl, de
  169 D1:A9FD 5E -  -  -  	ld	    e, (hl)
  170 D1:A9FE 19 -  -  -  	add	    hl, de
  171 D1:A9FF 23 -  -  -  	inc	    hl
  172 D1:AA00 EB -  -  -  	ex	    de, hl
  173 D1:AA01 01 00 00 00 _:	ld	    bc, 0
  174 D1:AA05 EB -  -  -  	ex	    de, hl
  175 D1:AA06 4E -  -  -  	ld	    c, (hl)																;	BC = program length
  176 D1:AA07 23 -  -  -  	inc	    hl
  177 D1:AA08 46 -  -  -  	ld	    b, (hl)
  178 D1:AA09 23 -  -  -  	inc	    hl
  179 D1:AA0A 22 1A 23 D0 	ld	    (curPC), hl
  180 D1:AA0E 22 17 23 D0 	ld	    (begPC), hl
  181 D1:AA12 09 -  -  -  	add	    hl, bc
  182 D1:AA13 2B -  -  -  	dec	    hl
  183 D1:AA14 22 1D 23 D0 	ld	    (endPC), hl
  184 D1:AA18 CD 8E B0 D1 	call	PrintCompilingProgram
  185 D1:AA1C FD 36 D0 01 	ld	    (iy+fProgram1), 1
  186 D1:AA20 FD 36 CF 00 	ld	    (iy+fProgram2), 0
  187 D1:AA24 21 1B F1 D1 	ld	    hl, CData
  188 D1:AA28 ED 5B 39 EC 
              D1 -  -  -  	ld	    de, (programPtr)
  189 D1:AA2D 01 79 00 00 	ld	    bc, CData2 - CData
  190 D1:AA31 ED B0 -  -  	ldir
  191 D1:AA33 ED 53 39 EC 
              D1 -  -  -  	ld	    (programPtr), de
  192 D1:AA38 CD AD B0 D1 	call	PreScanPrograms
  193 D1:AA3C 3E CD -  -  	ld	    a, 0CDh
  194 D1:AA3E 21 48 08 02 	ld	    hl, _RunIndicOff
  195 D1:AA42 CD 5A AC D1 	call	InsertAHL															;	call _RunIndicOff
  196 D1:AA46 2A 39 EC D1 	ld	    hl, (programPtr)
  197 D1:AA4A 11 8E 7C FC 	ld	    de, 4+4+5+UserMem-program
  198 D1:AA4E 19 -  -  -  	add	    hl, de
  199 D1:AA4F CD 5A AC D1 	call	InsertAHL															;	call *
  200 D1:AA53 01 FD 21 80 	ld	    bc, 08021FDh
  201 D1:AA57 11 00 D0 C3 	ld	    de, 0C3D000h
  202 D1:AA5B 21 3C 1A 02 	ld	    hl, _DrawStatusBar
  203 D1:AA5F CD 9C AC D1 	call	InsertBCDEHL														;	ld iy, flags \ jp _DrawStatusBar
  204 D1:AA63 2A 39 EC D1 	ld	    hl, (programPtr)
  205 D1:AA67 22 0A 32 D0 	ld	    (PrevProgramPtr), hl
  206 D1:AA6B 3A 58 EC D1 	ld	    a, (amountOfCRoutines)
  207 D1:AA6F B7 -  -  -  	or	    a, a
  208 D1:AA70 20 0C -  -  	jr	    nz, CompileProgramFull
  209 D1:AA72 FD CB D0 86 	res	    comp_with_libs, (iy+fProgram1)
  210 D1:AA76 21 05 2C D5 	ld	    hl, program+5
  211 D1:AA7A 22 39 EC D1 	ld	    (programPtr), hl
  212 D1:AA7E -  -  -  -  CompileProgramFull:
  213 D1:AA7E 3A 5F EC D1 	ld	    a, (AmountOfSubPrograms)
  214 D1:AA82 B7 -  -  -  	or	    a, a
  215 D1:AA83 20 22 -  -  	jr	    nz, SkipGetProgramName
  216 D1:AA85 21 60 EC D1 	ld	    hl, varname
  217 D1:AA89 CD EC B1 D1 	call	GetProgramName
  218 D1:AA8D 21 F9 05 D0 	ld	    hl, OP1+1
  219 D1:AA91 11 61 EC D1 	ld	    de, varname+1
  220 D1:AA95 06 08 -  -  	ld	    b, 8
  221 D1:AA97 -  -  -  -  CheckNames:
  222 D1:AA97 1A -  -  -  	ld	    a, (de)
  223 D1:AA98 B7 -  -  -  	or	    a, a
  224 D1:AA99 28 07 -  -  	jr	    z, CheckNamesSameLength
  225 D1:AA9B BE -  -  -  	cp	    a, (hl)
  226 D1:AA9C 20 09 -  -  	jr	    nz, GoodProgramName
  227 D1:AA9E 23 -  -  -  	inc	    hl
  228 D1:AA9F 13 -  -  -  	inc	    de
  229 D1:AAA0 10 F5 -  -  	djnz	CheckNames
  230 D1:AAA2 -  -  -  -  CheckNamesSameLength:
  231 D1:AAA2 BE -  -  -  	cp	    a, (hl)
  232 D1:AAA3 CA 75 AF D1 	jp	    z, SameNameError
  233 D1:AAA7 -  -  -  -  GoodProgramName:
  234 D1:AAA7 -  -  -  -  SkipGetProgramName:
  235 D1:AAA7 -  -  -  -  ParseProgramUntilEnd:
  236 D1:AAA7 -  -  -  -  CompileLoop:
  237 D1:AAA7 AF -  -  -  	xor	    a, a
  238 D1:AAA8 FD 77 C0 -  	ld	    (iy+fExpression1), a
  239 D1:AAAB FD 77 BF -  	ld	    (iy+fExpression2), a
  240 D1:AAAE FD 77 BE -  	ld	    (iy+fExpression3), a
  241 D1:AAB1 FD 77 B0 -  	ld	    (iy+fFunction1), a
  242 D1:AAB4 FD 77 AF -  	ld	    (iy+fFunction2), a
  243 D1:AAB7 32 55 EC D1 	ld	    (openedParensE), a
  244 D1:AABB 32 56 EC D1 	ld	    (openedParensF), a
  245 D1:AABF CD 28 10 02 	call	_IncFetch
  246 D1:AAC3 32 F6 31 D0 	ld	(tempToken), a
  247 D1:AAC7 38 58 -  -  	jr	c, FindGotos
  248 D1:AAC9 FE D4 -  -  	cp	a, tEnd
  249 D1:AACB 20 10 -  -  	jr	nz, ++_
  250 D1:AACD 21 59 EC D1 _:	ld	hl, amountOfEnds
  251 D1:AAD1 7E -  -  -  	ld	a, (hl)
  252 D1:AAD2 35 -  -  -  	dec	(hl)
  253 D1:AAD3 B7 -  -  -  	or	a, a
  254 D1:AAD4 CA 93 AF D1 	jp	z, EndError
  255 D1:AAD8 3A F6 31 D0 	ld	a, (tempToken)
  256 D1:AADC C9 -  -  -  	ret
  257 D1:AADD FE D0 -  -  _:	cp	a, tElse
  258 D1:AADF 28 EC -  -  	jr	z, --_
  259 D1:AAE1 CD 35 B2 D1 	call	ParseLine
  260 D1:AAE5 2A 1A 23 D0 	ld	hl, (curPC)
  261 D1:AAE9 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  262 D1:AAEE B7 -  -  -  	or	a, a
  263 D1:AAEF ED 52 -  -  	sbc	hl, de
  264 D1:AAF1 01 40 01 00 	ld	bc, 320
  265 D1:AAF5 CD 54 01 00 	call	__imulu
  266 D1:AAF9 E5 -  -  -  	push	hl
  267 D1:AAFA 2A 1D 23 D0 		ld	hl, (endPC)
  268 D1:AAFE B7 -  -  -  		or	a, a
  269 D1:AAFF ED 52 -  -  		sbc	hl, de
  270 D1:AB01 23 -  -  -  		inc	hl
  271 D1:AB02 E5 -  -  -  		push	hl
  272 D1:AB03 C1 -  -  -  		pop	bc
  273 D1:AB04 E1 -  -  -  	pop	hl
  274 D1:AB05 CD 40 01 00 	call	__idivu
  275 D1:AB09 E5 -  -  -  	push	hl
  276 D1:AB0A C1 -  -  -  	pop	bc
  277 D1:AB0B 78 -  -  -  	ld	a, b
  278 D1:AB0C B1 -  -  -  	or	a, c
  279 D1:AB0D 28 10 -  -  	jr	z, +_
  280 D1:AB0F 21 00 13 D5 	ld	hl, vRAM+(320*220)
  281 D1:AB13 36 00 -  -  	ld	(hl), 0
  282 D1:AB15 E5 -  -  -  	push	hl
  283 D1:AB16 D1 -  -  -  	pop	de
  284 D1:AB17 13 -  -  -  	inc	de
  285 D1:AB18 0B -  -  -  	dec	bc
  286 D1:AB19 78 -  -  -  	ld	a, b
  287 D1:AB1A B1 -  -  -  	or	a, c
  288 D1:AB1B 28 8A -  -  	jr	z, CompileLoop
  289 D1:AB1D ED B0 -  -  	ldir
  290 D1:AB1F 18 86 -  -  _:	jr	CompileLoop
  291 D1:AB21 -  -  -  -  FindGotos:
  292 D1:AB21 21 59 EC D1 	ld	hl, amountOfEnds
  293 D1:AB25 7E -  -  -  	ld	a, (hl)
  294 D1:AB26 B7 -  -  -  	or	a, a
  295 D1:AB27 28 02 -  -  	jr	z, +_
  296 D1:AB29 35 -  -  -  	dec	(hl)
  297 D1:AB2A C9 -  -  -  	ret
  298 D1:AB2B 21 5F EC D1 _:	ld	hl, AmountOfSubPrograms
  299 D1:AB2F 7E -  -  -  	ld	a, (hl)
  300 D1:AB30 35 -  -  -  	dec	(hl)
  301 D1:AB31 B7 -  -  -  	or	a, a
  302 D1:AB32 C0 -  -  -  	ret	nz
  303 D1:AB33 -  -  -  -  FindGotosLoop:
  304 D1:AB33 2A 42 EC D1 	ld	hl, (gotoPtr)
  305 D1:AB37 11 96 41 D0 	ld	de, gotoStack
  306 D1:AB3B B7 -  -  -  	or	a, a
  307 D1:AB3C ED 52 -  -  	sbc	hl, de
  308 D1:AB3E 28 4F -  -  	jr	z, AddDataToProgramData												;	have we finished all the Goto's?
  309 D1:AB40 19 -  -  -  	add	hl, de
  310 D1:AB41 2B -  -  -  	dec	hl
  311 D1:AB42 2B -  -  -  	dec	hl
  312 D1:AB43 2B -  -  -  	dec	hl
  313 D1:AB44 E5 -  -  -  	push	hl
  314 D1:AB45 ED 27 -  -  		ld	hl, (hl)
  315 D1:AB47 EB -  -  -  		ex	de, hl															;	de = pointer to goto data
  316 D1:AB48 2A 3F EC D1 		ld	hl, (labelPtr)
  317 D1:AB4C -  -  -  -  FindLabels:
  318 D1:AB4C 01 AE 3D D0 		ld	bc, labelStack
  319 D1:AB50 B7 -  -  -  		or	a, a
  320 D1:AB51 ED 42 -  -  		sbc	hl, bc
  321 D1:AB53 CA 9F AF D1 		jp	z, LabelError				;	have we finished all the Lbl's?
  322 D1:AB57 09 -  -  -  		add	hl, bc
  323 D1:AB58 2B -  -  -  		dec	hl
  324 D1:AB59 2B -  -  -  		dec	hl
  325 D1:AB5A 2B -  -  -  		dec	hl																;	hl = pointer to label
  326 D1:AB5B -  -  -  -  FindLabel:
  327 D1:AB5B E5 -  -  -  		push	hl
  328 D1:AB5C D5 -  -  -  			push	de
  329 D1:AB5D ED 27 -  -  				ld	hl, (hl)													;	hl = pointer to label data
  330 D1:AB5F CD D2 AE D1 				call	CompareStrings		;	is it the right label?
  331 D1:AB63 D1 -  -  -  			pop	de
  332 D1:AB64 E1 -  -  -  		pop	hl
  333 D1:AB65 20 22 -  -  		jr	nz, LabelNotRightOne
  334 D1:AB67 -  -  -  -  RightLabel:
  335 D1:AB67 2B -  -  -  		dec	hl
  336 D1:AB68 2B -  -  -  		dec	hl
  337 D1:AB69 2B -  -  -  		dec	hl
  338 D1:AB6A ED 27 -  -  		ld	hl, (hl)
  339 D1:AB6C 11 81 7C FC 		ld	de, UserMem-program
  340 D1:AB70 19 -  -  -  		add	hl, de
  341 D1:AB71 EB -  -  -  		ex	de, hl															;	de points to label memory
  342 D1:AB72 E1 -  -  -  	pop	hl																	;	hl = pointer to goto
  343 D1:AB73 2B -  -  -  	dec	hl
  344 D1:AB74 2B -  -  -  	dec	hl
  345 D1:AB75 2B -  -  -  	dec	hl
  346 D1:AB76 ED 27 -  -  	ld	hl, (hl)																;	hl = pointer to jump to
  347 D1:AB78 ED 1F -  -  	ld	(hl), de
  348 D1:AB7A 2A 42 EC D1 	ld	hl, (gotoPtr)
  349 D1:AB7E 11 FA FF FF 	ld	de, -6
  350 D1:AB82 19 -  -  -  	add	hl, de																;	get next Goto
  351 D1:AB83 22 42 EC D1 	ld	(gotoPtr), hl
  352 D1:AB87 18 AA -  -  	jr	FindGotosLoop
  353 D1:AB89 -  -  -  -  LabelNotRightOne:
  354 D1:AB89 2B -  -  -  		dec	hl
  355 D1:AB8A 2B -  -  -  		dec	hl
  356 D1:AB8B 2B -  -  -  		dec	hl
  357 D1:AB8C 18 BE -  -  		jr	FindLabels
  358 D1:AB8E -  -  -  -  StopFindLabels:
  359 D1:AB8E E1 -  -  -  	pop	hl
  360 D1:AB8F -  -  -  -  AddDataToProgramData:
  361 D1:AB8F FD CB C0 56 	bit	last_token_is_ret, (iy+fExpression1)
  362 D1:AB93 20 06 -  -  	jr	nz, +_
  363 D1:AB95 3E C9 -  -  	ld	a, 0C9h
  364 D1:AB97 CD 26 AD D1 	call	InsertA															;	ret
  365 D1:AB9B 2A 4E EC D1 _:	ld	hl, (programDataDataPtr)
  366 D1:AB9F 01 76 70 D0 	ld	bc, programDataData
  367 D1:ABA3 B7 -  -  -  	or	a, a
  368 D1:ABA4 ED 42 -  -  	sbc	hl, bc
  369 D1:ABA6 E5 -  -  -  	push	hl
  370 D1:ABA7 C1 -  -  -  	pop	bc																	;	bc = data length
  371 D1:ABA8 28 3D -  -  	jr	z, CreateProgram														;	check IF there is data
  372 D1:ABAA ED 5B 39 EC 
              D1 -  -  -  	ld	de, (programPtr)
  373 D1:ABAF 21 76 70 D0 	ld	hl, programDataData
  374 D1:ABB3 B7 -  -  -  	or	a, a
  375 D1:ABB4 ED 52 -  -  	sbc	hl, de
  376 D1:ABB6 E5 -  -  -  	push	hl
  377 D1:ABB7 19 -  -  -  		add	hl, de
  378 D1:ABB8 ED B0 -  -  		ldir																;	move the data to the end of the program
  379 D1:ABBA ED 53 39 EC 
              D1 -  -  -  		ld	(programPtr), de
  380 D1:ABBF D1 -  -  -  	pop	de
  381 D1:ABC0 2A 45 EC D1 	ld	hl, (programDataOffsetPtr)
  382 D1:ABC4 -  -  -  -  AddDataLoop:																;	update all the pointers pointing to data
  383 D1:ABC4 01 7E 45 D0 	ld	bc, programDataOffsetStack
  384 D1:ABC8 B7 -  -  -  	or	a, a
  385 D1:ABC9 ED 42 -  -  	sbc	hl, bc
  386 D1:ABCB 28 1A -  -  	jr	z, CreateProgram														;	no more pointers left
  387 D1:ABCD 09 -  -  -  	add	hl, bc
  388 D1:ABCE 2B -  -  -  	dec	hl
  389 D1:ABCF 2B -  -  -  	dec	hl
  390 D1:ABD0 2B -  -  -  	dec	hl
  391 D1:ABD1 E5 -  -  -  	push	hl
  392 D1:ABD2 ED 27 -  -  		ld	hl, (hl)															;	complicated stuff XD
  393 D1:ABD4 E5 -  -  -  		push	hl
  394 D1:ABD5 ED 27 -  -  			ld	hl, (hl)
  395 D1:ABD7 B7 -  -  -  			or	a, a
  396 D1:ABD8 ED 52 -  -  			sbc	hl, de
  397 D1:ABDA 01 81 7C FC 			ld	bc, UserMem-program
  398 D1:ABDE 09 -  -  -  			add	hl, bc
  399 D1:ABDF E5 -  -  -  			push	hl
  400 D1:ABE0 C1 -  -  -  			pop	bc
  401 D1:ABE1 E1 -  -  -  		pop	hl
  402 D1:ABE2 ED 0F -  -  		ld	(hl), bc															;	ld (XXXXXX), hl
  403 D1:ABE4 E1 -  -  -  	pop	hl
  404 D1:ABE5 18 DD -  -  	jr	AddDataLoop
  405 D1:ABE7 -  -  -  -  CreateProgram:
  406 D1:ABE7 21 60 EC D1 	ld	hl, varname
  407 D1:ABEB CD 20 03 02 	call	_Mov9ToOP1
  408 D1:ABEF CD 0C 05 02 	call	_ChkFindSym
  409 D1:ABF3 38 13 -  -  	jr	c, ++_
  410 D1:ABF5 CD 98 1F 02 	call	_ChkInRAM
  411 D1:ABF9 30 09 -  -  	jr	nc, +_
  412 D1:ABFB CD 48 14 02 	call	_Arc_Unarc
  413 D1:ABFF 01 05 00 00 	ld	bc, 5
  414 D1:AC03 09 -  -  -  	add	hl, bc
  415 D1:AC04 CD 88 05 02 _:	call	_DelVar
  416 D1:AC08 2A 39 EC D1 _:	ld	hl, (programPtr)
  417 D1:AC0C 01 00 2C D5 	ld	bc, program
  418 D1:AC10 B7 -  -  -  	or	a, a
  419 D1:AC11 ED 42 -  -  	sbc	hl, bc
  420 D1:AC13 E5 -  -  -  	push	hl
  421 D1:AC14 01 11 00 00 		ld	bc, 17
  422 D1:AC18 09 -  -  -  		add	hl, bc
  423 D1:AC19 E5 -  -  -  		push	hl
  424 D1:AC1A CD 1C 05 02 			call	_EnoughMem
  425 D1:AC1E 21 B9 EE D1 			ld	hl, NotEnoughMem
  426 D1:AC22 DA A3 AF D1 			jp	c, DispFinalString
  427 D1:AC26 E1 -  -  -  		pop	hl
  428 D1:AC27 01 F1 FF FF 		ld	bc, -15
  429 D1:AC2B 09 -  -  -  		add	hl, bc
  430 D1:AC2C CD 34 13 02 		call	_CreateProtProg
  431 D1:AC30 C1 -  -  -  	pop	bc
  432 D1:AC31 13 -  -  -  	inc	de
  433 D1:AC32 13 -  -  -  	inc	de
  434 D1:AC33 21 00 2C D5 	ld	hl, program
  435 D1:AC37 EB -  -  -  	ex	de, hl
  436 D1:AC38 36 EF -  -  	ld	(hl), tExtTok														;	insert header
  437 D1:AC3A 23 -  -  -  	inc	hl
  438 D1:AC3B 36 7B -  -  	ld	(hl), tAsm84CeCmp
  439 D1:AC3D 23 -  -  -  	inc	hl
  440 D1:AC3E EB -  -  -  	ex	de, hl
  441 D1:AC3F ED B0 -  -  	ldir																	;	insert the program data
  442 D1:AC41 21 F3 EC D1 	ld	hl, GoodCompileMessage
  443 D1:AC45 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  444 D1:AC49 C3 A3 AF D1 	jp	DispFinalString														;	DONE :D :D :D
  445 D1:AC4D -  -  -  -  
  446 D1:AC4D -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\routines.asm"
    1 D1:AC4D -  -  -  -  InsertBCDEAHL:
    2 D1:AC4D E5 -  -  -  	push    hl
    3 D1:AC4E C5 -  -  -  	        push	bc
    4 D1:AC4F E1 -  -  -  	        pop     hl
    5 D1:AC50 CD 5E AC D1 	        call    InsertHL
    6 D1:AC54 EB -  -  -  	        ex      de, hl
    7 D1:AC55 CD 5E AC D1 	        call    InsertHL
    8 D1:AC59 E1 -  -  -  	pop     hl
    9 D1:AC5A -  -  -  -  InsertAHL:
   10 D1:AC5A CD 26 AD D1 	call	InsertA
   11 D1:AC5E -  -  -  -  InsertHL:
   12 D1:AC5E D5 -  -  -  	push	de
   13 D1:AC5F EB -  -  -  		ex	de, hl
   14 D1:AC60 2A 39 EC D1 		ld	hl, (programPtr)
   15 D1:AC64 ED 1F -  -  		ld	(hl), de
   16 D1:AC66 23 -  -  -  		inc	hl
   17 D1:AC67 23 -  -  -  		inc	hl
   18 D1:AC68 23 -  -  -  		inc	hl
   19 D1:AC69 22 39 EC D1 		ld	(programPtr), hl
   20 D1:AC6D D1 -  -  -  	pop	de
   21 D1:AC6E C9 -  -  -  	ret
   22 D1:AC6F -  -  -  -  	
   23 D1:AC6F -  -  -  -  InsertBC:
   24 D1:AC6F 2A 39 EC D1 	ld hl, (programPtr)
   25 D1:AC73 70 -  -  -  	ld (hl), b
   26 D1:AC74 23 -  -  -  	inc hl
   27 D1:AC75 71 -  -  -  	ld (hl), c
   28 D1:AC76 23 -  -  -  	inc hl
   29 D1:AC77 22 39 EC D1 	ld (programPtr), hl
   30 D1:AC7B C9 -  -  -  	ret
   31 D1:AC7C -  -  -  -  	
   32 D1:AC7C -  -  -  -  InsertCallHL:
   33 D1:AC7C 3E CD -  -  	ld	a, 0CDh
   34 D1:AC7E 18 DA -  -  	jr	InsertAHL
   35 D1:AC80 -  -  -  -  	
   36 D1:AC80 -  -  -  -  InsertHIXC:
   37 D1:AC80 26 27 -  -  	ld	h, 027h
   38 D1:AC82 06 03 -  -  	ld	b, 3
   39 D1:AC84 ED 4C -  -  	mlt	bc
   40 D1:AC86 79 -  -  -  	ld	a, c
   41 D1:AC87 18 07 -  -  	jr	InsertFinalIX
   42 D1:AC89 -  -  -  -  InsertIXE:
   43 D1:AC89 26 17 -  -  	ld	h, 017h
   44 D1:AC8B -  -  -  -  InsertIX:
   45 D1:AC8B 16 03 -  -  	ld	d, 3
   46 D1:AC8D ED 5C -  -  	mlt	de
   47 D1:AC8F 7B -  -  -  	ld	a, e
   48 D1:AC90 -  -  -  -  InsertFinalIX:
   49 D1:AC90 2E DD -  -  	ld	l, 0DDh
   50 D1:AC92 CD 70 1D 02 	call	_SetHLUToA
   51 D1:AC96 18 C6 -  -  	jr	InsertHL								; ld hl/de/bc, (ix+*)
   52 D1:AC98 -  -  -  -  InsertIXC:
   53 D1:AC98 26 07 -  -  	ld	h, 007h
   54 D1:AC9A 18 EF -  -  	jr	InsertIX
   55 D1:AC9C -  -  -  -  
   56 D1:AC9C -  -  -  -  InsertBCDEHL:
   57 D1:AC9C E5 -  -  -  	push	hl
   58 D1:AC9D C5 -  -  -  		push	bc
   59 D1:AC9E E1 -  -  -  		pop	hl
   60 D1:AC9F CD 5E AC D1 		call	InsertHL
   61 D1:ACA3 E1 -  -  -  	pop	hl
   62 D1:ACA4 18 04 -  -  	jr	InsertDEHL
   63 D1:ACA6 -  -  -  -  InsertADEHL:
   64 D1:ACA6 CD 26 AD D1 	call	InsertA
   65 D1:ACAA -  -  -  -  InsertDEHL:
   66 D1:ACAA EB -  -  -  	ex	de, hl
   67 D1:ACAB CD 5E AC D1 	call	InsertHL
   68 D1:ACAF EB -  -  -  	ex	de, hl
   69 D1:ACB0 18 AC -  -  	jr	InsertHL
   70 D1:ACB2 -  -  -  -  	
   71 D1:ACB2 -  -  -  -  MaybeInsertIYFlags:
   72 D1:ACB2 FD CB AE 4E 	bit	modified_iy, (iy+fAlways1)
   73 D1:ACB6 C8 -  -  -  	ret	z
   74 D1:ACB7 FD CB AE 8E 	res	modified_iy, (iy+fAlways1)
   75 D1:ACBB 3E FD -  -  	ld	a, 0FDh
   76 D1:ACBD CD 26 AD D1 	call	InsertA									; ld iy, flags
   77 D1:ACC1 3E 21 -  -  	ld	a, 021h
   78 D1:ACC3 21 80 00 D0 	ld	hl, flags
   79 D1:ACC7 C3 5A AC D1 	jp	InsertAHL								; ld iy, flags
   80 D1:ACCB -  -  -  -  	
   81 D1:ACCB -  -  -  -  MaybeChangeHLToDE:
   82 D1:ACCB 3A 5D EC D1 	ld	a, (ExprOutput)
   83 D1:ACCF B7 -  -  -  _:	or	a, a
   84 D1:ACD0 C8 -  -  -  	ret	z
   85 D1:ACD1 3E EB -  -  	ld	a, 0EBh
   86 D1:ACD3 18 51 -  -  	jr	InsertA									; ex de, hl
   87 D1:ACD5 -  -  -  -  	
   88 D1:ACD5 -  -  -  -  MaybeChangeDEToHL:
   89 D1:ACD5 3A 5D EC D1 	ld	a, (ExprOutput)
   90 D1:ACD9 EE 01 -  -  	xor	a, 1
   91 D1:ACDB 18 F2 -  -  	jr	-_
   92 D1:ACDD -  -  -  -  	
   93 D1:ACDD -  -  -  -  CGetArgumentLast:
   94 D1:ACDD 3E C2 -  -  	ld	a, 0C2h
   95 D1:ACDF 18 02 -  -  	jr	+_
   96 D1:ACE1 -  -  -  -  CGetArgument:
   97 D1:ACE1 3E CA -  -  	ld	a, 0CAh
   98 D1:ACE3 32 F8 AC D1 _:	ld	(CGetArgumentLastOrNot), a
   99 D1:ACE7 22 39 EC D1 	ld	(programPtr), hl
  100 D1:ACEB F5 -  -  -  	push	af
  101 D1:ACEC CD 28 10 02 		call	_IncFetch
  102 D1:ACF0 CD 83 B2 D1 		call	ParseExpression
  103 D1:ACF4 FD CB BE 46 		bit	triggered_a_comma, (iy+fExpression3)
  104 D1:ACF8 -  -  -  -  CGetArgumentLastOrNot:
  105 D1:ACF8 CA 47 AF D1 		jp	z, ErrorSyntax
  106 D1:ACFC 2A 39 EC D1 		ld	hl, (programPtr)
  107 D1:AD00 F1 -  -  -  	pop	af
  108 D1:AD01 28 14 -  -  	jr	z, InsertPushHLDE
  109 D1:AD03 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  110 D1:AD07 28 0E -  -  	jr	z, InsertPushHLDE
  111 D1:AD09 2B -  -  -  	dec	hl
  112 D1:AD0A 2B -  -  -  	dec	hl
  113 D1:AD0B 22 39 EC D1 	ld	(programPtr), hl
  114 D1:AD0F 2B -  -  -  	dec	hl
  115 D1:AD10 2B -  -  -  	dec	hl
  116 D1:AD11 36 2E -  -  	ld	(hl), 02Eh								; ld l, *
  117 D1:AD13 23 -  -  -  	inc	hl
  118 D1:AD14 ED 17 -  -  	ld	de, (hl)
  119 D1:AD16 73 -  -  -  	ld	(hl), e
  120 D1:AD17 -  -  -  -  InsertPushHLDE:
  121 D1:AD17 3A 5E EC D1 	ld	a, (ExprOutput2)
  122 D1:AD1B -  -  -  -  	;or	a, a
  123 D1:AD1B -  -  -  -  	;jr	nz, +_
  124 D1:AD1B -  -  -  -  	;ld	hl, (programPtr)
  125 D1:AD1B -  -  -  -  	;dec	hl
  126 D1:AD1B -  -  -  -  	;ld	(programPtr), hl
  127 D1:AD1B 87 -  -  -  _:	add	a, a
  128 D1:AD1C 87 -  -  -  	add	a, a
  129 D1:AD1D 87 -  -  -  	add	a, a
  130 D1:AD1E 87 -  -  -  	add	a, a
  131 D1:AD1F C6 D5 -  -  	add	a, 0D5h
  132 D1:AD21 2A 39 EC D1 	ld	hl, (programPtr)
  133 D1:AD25 23 -  -  -  	inc	hl
  134 D1:AD26 -  -  -  -  InsertA:
  135 D1:AD26 E5 -  -  -  	push	hl
  136 D1:AD27 2A 39 EC D1 		ld	hl, (programPtr)
  137 D1:AD2B 77 -  -  -  		ld	(hl), a
  138 D1:AD2C 23 -  -  -  		inc	hl
  139 D1:AD2D 22 39 EC D1 		ld	(programPtr), hl
  140 D1:AD31 E1 -  -  -  	pop	hl
  141 D1:AD32 C9 -  -  -  	ret
  142 D1:AD33 -  -  -  -  
  143 D1:AD33 -  -  -  -  CAddArgument:
  144 D1:AD33 C5 -  -  -  	push	bc
  145 D1:AD34 B7 -  -  -  		or	a, a
  146 D1:AD35 ED 42 -  -  		sbc	hl, bc
  147 D1:AD37 E5 -  -  -  		push	hl
  148 D1:AD38 C1 -  -  -  		pop	bc
  149 D1:AD39 E1 -  -  -  	pop	hl
  150 D1:AD3A ED B0 -  -  	ldir
  151 D1:AD3C C9 -  -  -  	ret
  152 D1:AD3D -  -  -  -  	
  153 D1:AD3D -  -  -  -  InsertProgramPtrToDataOffset:
  154 D1:AD3D D5 -  -  -  	push	de
  155 D1:AD3E 2A 45 EC D1 		ld	hl, (programDataOffsetPtr)
  156 D1:AD42 ED 5B 39 EC 
              D1 -  -  -  		ld	de, (programPtr)
  157 D1:AD47 ED 1F -  -  		ld	(hl), de
  158 D1:AD49 23 -  -  -  		inc	hl
  159 D1:AD4A 23 -  -  -  		inc	hl
  160 D1:AD4B 23 -  -  -  		inc	hl
  161 D1:AD4C 22 45 EC D1 		ld	(programDataOffsetPtr), hl
  162 D1:AD50 D1 -  -  -  	pop	de
  163 D1:AD51 C9 -  -  -  	ret
  164 D1:AD52 -  -  -  -  	
  165 D1:AD52 -  -  -  -  GetFunction:
  166 D1:AD52 C5 -  -  -  	push	bc
  167 D1:AD53 D5 -  -  -  		push	de
  168 D1:AD54 CD 5B AD D1 			call	GetRightFunction
  169 D1:AD58 D1 -  -  -  		pop	de
  170 D1:AD59 C1 -  -  -  	pop	bc
  171 D1:AD5A C9 -  -  -  	ret
  172 D1:AD5B -  -  -  -  	
  173 D1:AD5B -  -  -  -  GetRightFunction:
  174 D1:AD5B 05 -  -  -  	dec	b
  175 D1:AD5C CA A0 AD D1 	jp	z, GetFunctionWithOutputInDE
  176 D1:AD60 05 -  -  -  	dec	b
  177 D1:AD61 C2 08 AE D1 	jp	nz, GetFunctionWithOutputInBC
  178 D1:AD65 -  -  -  -  GetFunctionWithOutputInHL:
  179 D1:AD65 FE AD -  -  	cp	a, tGetKey
  180 D1:AD67 20 12 -  -  	jr	nz, FunctionHLNotGetKey
  181 D1:AD69 21 4C 01 02 	ld	hl, _GetCSC
  182 D1:AD6D CD 7C AC D1 	call	InsertCallHL								; call _GetCSC
  183 D1:AD71 3E B7 -  -  	ld	a, 0B7h
  184 D1:AD73 21 ED 62 6F 	ld	hl, 06F62EDh
  185 D1:AD77 C3 5A AC D1 	jp	InsertAHL								; or a \ sbc hl, hl \ ld l, a
  186 D1:AD7B -  -  -  -  FunctionHLNotGetKey:
  187 D1:AD7B FE AB -  -  	cp	a, trand
  188 D1:AD7D 20 19 -  -  	jr	nz, FunctionHLGetKeyFast
  189 D1:AD7F 3E D5 -  -  	ld	a, 0D5h
  190 D1:AD81 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  191 D1:AD85 C4 26 AD D1 	call	nz, InsertA								; push de
  192 D1:AD89 CD 9A AE D1 	call	InsertRandRoutine
  193 D1:AD8D FD CB C0 76 	bit	need_push, (iy+fExpression1)
  194 D1:AD91 C8 -  -  -  	ret	z
  195 D1:AD92 3E D1 -  -  	ld	a, 0D1h
  196 D1:AD94 C3 26 AD D1 	jp	InsertA									; pop de
  197 D1:AD98 -  -  -  -  FunctionHLGetKeyFast:
  198 D1:AD98 CD 3D AE D1 	call	InsertKeypadRoutine1
  199 D1:AD9C C3 62 AE D1 	jp	InsertKeypadRoutine2
  200 D1:ADA0 -  -  -  -  GetFunctionWithOutputInDE:
  201 D1:ADA0 FE AD -  -  	cp	a, tGetKey
  202 D1:ADA2 20 2D -  -  	jr	nz, FunctionDENotGetKey
  203 D1:ADA4 3E E5 -  -  	ld	a, 0E5h
  204 D1:ADA6 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  205 D1:ADAA C4 26 AD D1 	call	nz, InsertA								; push hl
  206 D1:ADAE 21 4C 01 02 	ld	hl, _GetCSC
  207 D1:ADB2 CD 7C AC D1 	call	InsertCallHL								; call _GetCSC
  208 D1:ADB6 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  209 D1:ADBA 28 06 -  -  	jr	z, $+8
  210 D1:ADBC 3E E1 -  -  	ld	a, 0E1h
  211 D1:ADBE CD 26 AD D1 	call	InsertA									; pop hl
  212 D1:ADC2 3E 11 -  -  	ld	a, 011h
  213 D1:ADC4 CD 26 AD D1 	call	InsertA									; ld de, *
  214 D1:ADC8 AF -  -  -  	xor	a, a
  215 D1:ADC9 21 00 00 5F 	ld	hl, 05F0000h
  216 D1:ADCD C3 5A AC D1 	jp	InsertAHL								; ld de, 0 \ ld e, a
  217 D1:ADD1 -  -  -  -  FunctionDENotGetKey:
  218 D1:ADD1 FE AB -  -  	cp	a, trand
  219 D1:ADD3 20 1F -  -  	jr	nz, FunctionDEGetKeyFast
  220 D1:ADD5 3E E5 -  -  	ld	a, 0E5h
  221 D1:ADD7 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  222 D1:ADDB C4 26 AD D1 	call	nz, InsertA								; push hl
  223 D1:ADDF CD 9A AE D1 	call	InsertRandRoutine
  224 D1:ADE3 -  -  -  -  FunctionDEGetKeyEnd:
  225 D1:ADE3 3E EB -  -  	ld	a, 0EBh
  226 D1:ADE5 CD 26 AD D1 	call	InsertA									; ex de, hl
  227 D1:ADE9 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  228 D1:ADED C8 -  -  -  	ret	z
  229 D1:ADEE 3E E1 -  -  	ld	a, 0E1h
  230 D1:ADF0 C3 26 AD D1 	jp	InsertA									; pop hl
  231 D1:ADF4 -  -  -  -  FunctionDEGetKeyFast:
  232 D1:ADF4 CD 3D AE D1 	call	InsertKeypadRoutine1
  233 D1:ADF8 3E E5 -  -  	ld	a, 0E5h
  234 D1:ADFA FD CB C0 76 	bit	need_push, (iy+fExpression1)
  235 D1:ADFE C4 26 AD D1 	call	nz, InsertA								; push hl
  236 D1:AE02 CD 62 AE D1 	call	InsertKeypadRoutine2
  237 D1:AE06 18 DB -  -  	jr	FunctionDEGetKeyEnd
  238 D1:AE08 -  -  -  -  GetFunctionWithOutputInBC:
  239 D1:AE08 FE AD -  -  	cp	a, tGetKey
  240 D1:AE0A 20 17 -  -  	jr	nz, FunctionBCNotGetKey
  241 D1:AE0C 21 4C 01 02 	ld	hl, _GetCSC
  242 D1:AE10 CD 7C AC D1 	call	InsertCallHL								; call _GetCSC
  243 D1:AE14 3E 01 -  -  	ld	a, 001h
  244 D1:AE16 CD 26 AD D1 	call	InsertA									; ld bc, *
  245 D1:AE1A AF -  -  -  	xor	a, a
  246 D1:AE1B 21 00 00 4F 	ld	hl, 04F0000h
  247 D1:AE1F C3 5A AC D1 	jp	InsertAHL								; ld bc, 0 \ ld c, a
  248 D1:AE23 -  -  -  -  FunctionBCNotGetKey:
  249 D1:AE23 FE AB -  -  	cp	a, trand
  250 D1:AE25 20 0C -  -  	jr	nz, FunctionBCGetKeyFast
  251 D1:AE27 CD 9A AE D1 	call	InsertRandRoutine
  252 D1:AE2B -  -  -  -  FunctionBCHLToBC:
  253 D1:AE2B 06 E5 -  -  	ld	b, 0E5h
  254 D1:AE2D 0E C1 -  -  	ld	c, 0C1h
  255 D1:AE2F C3 6F AC D1 	jp	InsertBC								; push hl \ pop bc
  256 D1:AE33 -  -  -  -  FunctionBCGetKeyFast:
  257 D1:AE33 CD 3D AE D1 	call	InsertKeypadRoutine1
  258 D1:AE37 CD 62 AE D1 	call	InsertKeypadRoutine2
  259 D1:AE3B 18 EE -  -  	jr	FunctionBCHLToBC
  260 D1:AE3D -  -  -  -  	
  261 D1:AE3D -  -  -  -  InsertKeypadRoutine1:
  262 D1:AE3D 47 -  -  -  	ld	b, a
  263 D1:AE3E 3E 06 -  -  	ld	a, 006h
  264 D1:AE40 CD 26 AD D1 	call	InsertA									; ld b, *
  265 D1:AE44 78 -  -  -  	ld	a, b									; A = ((A >> 3) & 7) << 1
  266 D1:AE45 3D -  -  -  	dec	a									; A = (A >> 2) & 7 << 1
  267 D1:AE46 0F -  -  -  	rrca										; A = (A >> 2) & 14
  268 D1:AE47 0F -  -  -  	rrca
  269 D1:AE48 E6 0E -  -  	and	a, 00001110b
  270 D1:AE4A 4F -  -  -  	ld	c, a
  271 D1:AE4B 3E 1E -  -  	ld	a, (keyData + 14) & 0FFh
  272 D1:AE4D 91 -  -  -  	sub	a, c
  273 D1:AE4E 47 -  -  -  	ld	b, a
  274 D1:AE4F 0E 0E -  -  	ld	c, 00Eh
  275 D1:AE51 CD 6F AC D1 	call	InsertBC								; ld b, X \ ld c, *
  276 D1:AE55 78 -  -  -  	ld	a, b
  277 D1:AE56 E6 07 -  -  	and	a, 000000111b
  278 D1:AE58 47 -  -  -  	ld	b, a
  279 D1:AE59 AF -  -  -  	xor	a, a
  280 D1:AE5A 37 -  -  -  	scf
  281 D1:AE5B 17 -  -  -  _:	rla
  282 D1:AE5C 10 FD -  -  	djnz	-_
  283 D1:AE5E C3 26 AD D1 	jp	InsertA									; ld c, X
  284 D1:AE62 -  -  -  -  	
  285 D1:AE62 -  -  -  -  InsertKeypadRoutine2:
  286 D1:AE62 3E CD -  -  	ld	a, 0CDh
  287 D1:AE64 CD 26 AD D1 	call	InsertA									; call *
  288 D1:AE68 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  289 D1:AE6C 2A 04 32 D0 	ld	hl, (KeypadStartData)
  290 D1:AE70 FD CB D0 76 	bit	has_already_keypad, (iy+fProgram1)
  291 D1:AE74 C2 5E AC D1 	jp	nz, InsertHL								; call XXXXXX
  292 D1:AE78 2A 4E EC D1 	ld	hl, (programDataDataPtr)
  293 D1:AE7C 22 04 32 D0 	ld	(KeypadStartData), hl
  294 D1:AE80 E5 -  -  -  	push	hl
  295 D1:AE81 D1 -  -  -  	pop	de
  296 D1:AE82 CD 5E AC D1 	call	InsertHL								; call *
  297 D1:AE86 21 FD EF D1 	ld	hl, KeypadRoutine
  298 D1:AE8A 01 14 00 00 	ld	bc, KeypadRoutineEnd - KeypadRoutine
  299 D1:AE8E ED B0 -  -  	ldir
  300 D1:AE90 ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  301 D1:AE95 FD CB D0 F6 	set	has_already_keypad, (iy+fProgram1)
  302 D1:AE99 C9 -  -  -  	ret
  303 D1:AE9A -  -  -  -  	
  304 D1:AE9A -  -  -  -  InsertRandRoutine:
  305 D1:AE9A 3E CD -  -  	ld	a, 0CDh
  306 D1:AE9C CD 26 AD D1 	call	InsertA									; call *
  307 D1:AEA0 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  308 D1:AEA4 2A FB 31 D0 	ld	hl, (RandStartData)
  309 D1:AEA8 FD CB D0 5E 	bit	has_already_rand, (iy+fProgram1)
  310 D1:AEAC C2 5E AC D1 	jp	nz, InsertHL								; call XXXXXX
  311 D1:AEB0 2A 4E EC D1 	ld	hl, (programDataDataPtr)
  312 D1:AEB4 22 FB 31 D0 	ld	(RandStartData), hl
  313 D1:AEB8 E5 -  -  -  	push	hl
  314 D1:AEB9 D1 -  -  -  	pop	de
  315 D1:AEBA CD 5E AC D1 	call	InsertHL								; call XXXXXX
  316 D1:AEBE 21 81 EF D1 	ld	hl, RandRoutine
  317 D1:AEC2 01 36 00 00 	ld	bc, RandRoutineEnd - RandRoutine
  318 D1:AEC6 ED B0 -  -  	ldir
  319 D1:AEC8 ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  320 D1:AECD FD CB D0 DE 	set	has_already_rand, (iy+fProgram1)
  321 D1:AED1 C9 -  -  -  	ret
  322 D1:AED2 -  -  -  -  	
  323 D1:AED2 -  -  -  -  CompareStrings:
  324 D1:AED2 1A -  -  -  	ld	a, (de)
  325 D1:AED3 FE 3F -  -  	cp	a, tEnter
  326 D1:AED5 C8 -  -  -  	ret	z
  327 D1:AED6 BE -  -  -  	cp	a, (hl)
  328 D1:AED7 23 -  -  -  	inc	hl
  329 D1:AED8 13 -  -  -  	inc	de
  330 D1:AED9 C0 -  -  -  	ret	nz
  331 D1:AEDA 18 F6 -  -  	jr	CompareStrings
  332 D1:AEDC -  -  -  -  	
  333 D1:AEDC -  -  -  -  SubError:
  334 D1:AEDC 3E 2D -  -  	ld	a, '-'
  335 D1:AEDE 18 4D -  -  	jr	DispOperatorErrorString
  336 D1:AEE0 -  -  -  -  AddError:
  337 D1:AEE0 3E 2B -  -  	ld	a, '+'
  338 D1:AEE2 18 49 -  -  	jr	DispOperatorErrorString
  339 D1:AEE4 -  -  -  -  DivError:
  340 D1:AEE4 3E 2F -  -  	ld	a, '/'
  341 D1:AEE6 18 45 -  -  	jr	DispOperatorErrorString
  342 D1:AEE8 -  -  -  -  MulError:
  343 D1:AEE8 3E 2A -  -  	ld	a, '*'
  344 D1:AEEA 18 41 -  -  	jr	DispOperatorErrorString
  345 D1:AEEC -  -  -  -  	
  346 D1:AEEC -  -  -  -  GLETError:
  347 D1:AEEC 3A F7 31 D0 	ld	a, (tempToken2)
  348 D1:AEF0 FE 6E -  -  	cp	a, tGE
  349 D1:AEF2 0E 19 -  -  	ld	c, 019h
  350 D1:AEF4 28 36 -  -  	jr	z, DispOperatorErrorString2
  351 D1:AEF6 FE 6D -  -  	cp	a, tLE
  352 D1:AEF8 0E 17 -  -  	ld	c, 017h
  353 D1:AEFA 28 30 -  -  	jr	z, DispOperatorErrorString2
  354 D1:AEFC FE 6C -  -  	cp	a, tGT
  355 D1:AEFE 0E 3E -  -  	ld	c, '>'
  356 D1:AF00 28 2A -  -  	jr	z, DispOperatorErrorString2
  357 D1:AF02 3E 3C -  -  	ld	a, '<'
  358 D1:AF04 18 27 -  -  	jr	DispOperatorErrorString
  359 D1:AF06 -  -  -  -  
  360 D1:AF06 -  -  -  -  NEQError:
  361 D1:AF06 3A F7 31 D0 	ld	a, (tempToken2)
  362 D1:AF0A FE 6A -  -  	cp	a, tEq
  363 D1:AF0C 3E 3D -  -  	ld	a, '='
  364 D1:AF0E 28 1D -  -  	jr	z, DispOperatorErrorString
  365 D1:AF10 3E 18 -  -  	ld	a, 018h
  366 D1:AF12 18 19 -  -  	jr	DispOperatorErrorString
  367 D1:AF14 -  -  -  -  XORANDError:
  368 D1:AF14 3A F7 31 D0 	ld	a, (tempToken2)
  369 D1:AF18 FE 3C -  -  	cp	a, tOr
  370 D1:AF1A 0E 7C -  -  	ld	c, '|'
  371 D1:AF1C 28 0E -  -  	jr	z, DispOperatorErrorString2
  372 D1:AF1E FE 3D -  -  	cp	a, tXor
  373 D1:AF20 0E 5E -  -  	ld	c, '^'
  374 D1:AF22 28 08 -  -  	jr	z, DispOperatorErrorString2
  375 D1:AF24 3E 26 -  -  	ld	a, '&'
  376 D1:AF26 18 05 -  -  	jr	DispOperatorErrorString
  377 D1:AF28 -  -  -  -  StoError:
  378 D1:AF28 3E 1C -  -  	ld	a, 01Ch
  379 D1:AF2A 18 01 -  -  	jr	DispOperatorErrorString
  380 D1:AF2C -  -  -  -  	
  381 D1:AF2C -  -  -  -  DispOperatorErrorString2:
  382 D1:AF2C 79 -  -  -  	ld	a, c
  383 D1:AF2D -  -  -  -  DispOperatorErrorString:
  384 D1:AF2D F5 -  -  -  	push	af
  385 D1:AF2E CD 6D B0 D1 		call	ClearScreen
  386 D1:AF32 21 CC EC D1 		ld	hl, ErrorMessageStandard
  387 D1:AF36 CD A3 B0 D1 		call	PrintString
  388 D1:AF3A F1 -  -  -  	pop	af
  389 D1:AF3B CD 07 B8 D1 	call	_PrintChar_ASM
  390 D1:AF3F 3E 27 -  -  	ld	a, '\''
  391 D1:AF41 CD 07 B8 D1 	call	_PrintChar_ASM
  392 D1:AF45 18 74 -  -  	jr	ReturnToOS
  393 D1:AF47 -  -  -  -  	
  394 D1:AF47 -  -  -  -  ErrorSyntax:
  395 D1:AF47 21 0B EE D1 	ld	hl, SyntaxErrorMessage
  396 D1:AF4B 18 56 -  -  	jr	DispFinalString
  397 D1:AF4D -  -  -  -  MismatchError:
  398 D1:AF4D 21 79 EE D1 	ld	hl, MismatchErrorMessage
  399 D1:AF51 18 50 -  -  	jr	DispFinalString
  400 D1:AF53 -  -  -  -  NoProgramsError:
  401 D1:AF53 21 09 ED D1 	ld	hl, NoProgramsMessage
  402 D1:AF57 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  403 D1:AF5B 18 46 -  -  	jr	DispFinalString
  404 D1:AF5D -  -  -  -  InvalidTokenError:
  405 D1:AF5D 21 1C ED D1 	ld	hl, InvalidTokenMessage
  406 D1:AF61 18 40 -  -  	jr	DispFinalString
  407 D1:AF63 -  -  -  -  InvalidNameLength:
  408 D1:AF63 21 51 ED D1 	ld	hl, InvalidNameLengthMessage
  409 D1:AF67 18 3A -  -  	jr	DispFinalString
  410 D1:AF69 -  -  -  -  ErrorNotFound:
  411 D1:AF69 21 CC ED D1 	ld	hl, NotFoundMessage
  412 D1:AF6D 18 34 -  -  	jr	DispFinalString
  413 D1:AF6F -  -  -  -  ErrorUsedCode:
  414 D1:AF6F 21 40 EE D1 	ld	hl, UsedCodeMessage
  415 D1:AF73 18 2E -  -  	jr	DispFinalString
  416 D1:AF75 -  -  -  -  SameNameError:
  417 D1:AF75 21 68 ED D1 	ld	hl, SameNameMessage
  418 D1:AF79 18 28 -  -  	jr	DispFinalString
  419 D1:AF7B -  -  -  -  FunctionError:
  420 D1:AF7B 21 A4 ED D1 	ld	hl, FunctionFunctionMessage
  421 D1:AF7F 18 22 -  -  	jr	DispFinalString
  422 D1:AF81 -  -  -  -  UnknownError:
  423 D1:AF81 21 91 EE D1 	ld	hl, UnknownMessage
  424 D1:AF85 18 1C -  -  	jr	DispFinalString
  425 D1:AF87 -  -  -  -  WrongSpriteDataError:
  426 D1:AF87 21 8F ED D1 	ld	hl, WrongSpriteDataMessgae
  427 D1:AF8B 18 16 -  -  	jr	DispFinalString
  428 D1:AF8D -  -  -  -  ImplementError:
  429 D1:AF8D 21 DF ED D1 	ld	hl, ImplementMessage
  430 D1:AF91 18 10 -  -  	jr	DispFinalString
  431 D1:AF93 -  -  -  -  EndError:
  432 D1:AF93 21 E4 EC D1 	ld	hl, EndErrorMessage
  433 D1:AF97 18 0A -  -  	jr	DispFinalString
  434 D1:AF99 -  -  -  -  ErrorTooLargeLoop:
  435 D1:AF99 21 26 EE D1 	ld	hl, TooLargeLoopMessage
  436 D1:AF9D 18 04 -  -  	jr	DispFinalString
  437 D1:AF9F -  -  -  -  LabelError:
  438 D1:AF9F 21 CE EE D1 	ld	hl, LabelErrorMessage
  439 D1:AFA3 -  -  -  -  DispFinalString:
  440 D1:AFA3 01 01 00 00 	ld bc, 1
  441 D1:AFA7 ED 43 09 B8 
              D1 -  -  -  	ld	(TextXPos_ASM), bc
  442 D1:AFAC 3E 15 -  -  	ld	a, 21
  443 D1:AFAE 32 3A B8 D1 	ld	(TextYPos_ASM), a
  444 D1:AFB2 AF -  -  -  	xor	a, a
  445 D1:AFB3 32 5F B8 D1 	ld	(color), a
  446 D1:AFB7 CD A3 B0 D1 	call	PrintString
  447 D1:AFBB -  -  -  -  ReturnToOS:
  448 D1:AFBB FD CB D0 4E 	bit	good_compilation, (iy+fProgram1)
  449 D1:AFBF 20 51 -  -  	jr	nz, SkipDisplayLineNumber
  450 D1:AFC1 3E 1E -  -  	ld	a, 30
  451 D1:AFC3 32 3A B8 D1 	ld	(TextYPos_ASM), a
  452 D1:AFC7 21 01 00 00 	ld	hl, 1
  453 D1:AFCB 22 09 B8 D1 	ld	(TextXPos_ASM), hl
  454 D1:AFCF 21 6A EE D1 	ld	hl, LineNumber
  455 D1:AFD3 CD A3 B0 D1 	call	PrintString
  456 D1:AFD7 2A 1A 23 D0 	ld	hl, (curPC)
  457 D1:AFDB ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  458 D1:AFE0 B7 -  -  -  	or	a, a
  459 D1:AFE1 ED 52 -  -  	sbc	hl, de
  460 D1:AFE3 E5 -  -  -  	push	hl
  461 D1:AFE4 C1 -  -  -  	pop	bc
  462 D1:AFE5 ED 62 -  -  	sbc	hl, hl
  463 D1:AFE7 23 -  -  -  	inc	hl
  464 D1:AFE8 EB -  -  -  	ex	de, hl
  465 D1:AFE9 -  -  -  -  GetAmountOfLines:
  466 D1:AFE9 78 -  -  -  	ld	a, b
  467 D1:AFEA B1 -  -  -  	or	a, c
  468 D1:AFEB 28 09 -  -  	jr	z, GetAmountOfLinesStop
  469 D1:AFED 3E 3F -  -  	ld	a, tEnter
  470 D1:AFEF ED B1 -  -  	cpir
  471 D1:AFF1 20 03 -  -  	jr	nz, GetAmountOfLinesStop
  472 D1:AFF3 13 -  -  -  	inc	de
  473 D1:AFF4 18 F3 -  -  	jr	GetAmountOfLines
  474 D1:AFF6 -  -  -  -  GetAmountOfLinesStop:
  475 D1:AFF6 EB -  -  -  	ex	de, hl
  476 D1:AFF7 AF -  -  -  	xor	a
  477 D1:AFF8 11 18 06 D0 	ld	de, OP3+10
  478 D1:AFFC 12 -  -  -  	ld	(de), a
  479 D1:AFFD -  -  -  -  NumberToStringLoop:
  480 D1:AFFD 3E 0A -  -  	ld	a, 10
  481 D1:AFFF CD 90 1D 02 	call	_DivHLByA
  482 D1:B003 C6 30 -  -  	add	a, t0
  483 D1:B005 1B -  -  -  	dec	de
  484 D1:B006 12 -  -  -  	ld	(de), a
  485 D1:B007 19 -  -  -  	add	hl, de
  486 D1:B008 B7 -  -  -  	or	a, a
  487 D1:B009 ED 52 -  -  	sbc	hl, de
  488 D1:B00B 20 F0 -  -  	jr	nz, NumberToStringLoop
  489 D1:B00D EB -  -  -  	ex	de, hl
  490 D1:B00E CD A3 B0 D1 	call	PrintString
  491 D1:B012 -  -  -  -  SkipDisplayLineNumber:
  492 D1:B012 3E E6 -  -  	ld	a, 230
  493 D1:B014 32 3A B8 D1 	ld	(TextYPos_ASM), a
  494 D1:B018 21 55 00 00 	ld	hl, 85
  495 D1:B01C 22 09 B8 D1 	ld	(TextXPos_ASM), hl
  496 D1:B020 21 27 EF D1 	ld	hl, PressKey
  497 D1:B024 CD A3 B0 D1 	call	PrintString
  498 D1:B028 -  -  -  -  backupSP = $+1
  499 D1:B028 31 00 00 00 	ld	    sp, 0
  500 D1:B02C DD E1 -  -      pop     ix
  501 D1:B02E CD 8C 0D 02 	call	_GetKey
  502 D1:B032 -  -  -  -  StopProgram:
  503 D1:B032 2A 1A 23 D0 	ld	    hl, (curPC)
  504 D1:B036 ED 5B 17 23 
              D0 -  -  -  	ld	    de, (begPC)
  505 D1:B03B 37 -  -  -  	scf
  506 D1:B03C ED 52 -  -  	sbc	    hl, de
  507 D1:B03E 40 22 E3 08 	ld.sis	(errOffset - 0D00000h), hl
  508 D1:B042 -  -  -  -  backupBegPC = $+1
  509 D1:B042 21 00 00 00 	ld	hl, 0
  510 D1:B046 22 17 23 D0 	ld	(begPC), hl
  511 D1:B04A -  -  -  -  backupCurPC = $+1
  512 D1:B04A 21 00 00 00 	ld	hl, 0
  513 D1:B04E 22 1A 23 D0 	ld	(curPC), hl
  514 D1:B052 -  -  -  -  backupEndPC = $+1
  515 D1:B052 21 00 00 00 	ld	hl, 0
  516 D1:B056 22 1D 23 D0 	ld	(endPC), hl
  517 D1:B05A CD 08 08 02 	call	_ClrLCDFull
  518 D1:B05E CD 28 08 02 	call	_HomeUp
  519 D1:B062 3E 2D -  -  	ld	a, lcdBpp16
  520 D1:B064 32 18 00 E3 	ld	(mpLcdCtrl), a
  521 D1:B068 CD 3C 1A 02 	call	_DrawStatusBar
  522 D1:B06C C9 -  -  -  	ret
  523 D1:B06D -  -  -  -  ;	bit	good_compilation, (iy+fProgram1)
  524 D1:B06D -  -  -  -  ;	ret	nz
  525 D1:B06D -  -  -  -  ;#include "editor.asm"
  526 D1:B06D -  -  -  -  	
  527 D1:B06D -  -  -  -  ClearScreen:
  528 D1:B06D 21 00 0F D4 	ld	hl, vRAM+(320*12)
  529 D1:B071 36 FF -  -  	ld	(hl), 255
  530 D1:B073 E5 -  -  -  	push	hl
  531 D1:B074 D1 -  -  -  	pop	de
  532 D1:B075 13 -  -  -  	inc	de
  533 D1:B076 01 FF 1C 01 	ld	bc, 320*228-1
  534 D1:B07A ED B0 -  -  	ldir
  535 D1:B07C 03 -  -  -  	inc	bc
  536 D1:B07D ED 43 09 B8 
              D1 -  -  -  	ld	(TextXPos_ASM), bc
  537 D1:B082 3E 0C -  -  	ld	a, 12
  538 D1:B084 32 3A B8 D1 	ld	(TextYPos_ASM), a
  539 D1:B088 AF -  -  -  	xor	a, a
  540 D1:B089 32 5F B8 D1 	ld	(color), a
  541 D1:B08D C9 -  -  -  	ret
  542 D1:B08E -  -  -  -  	
  543 D1:B08E -  -  -  -  PrintCompilingProgram:
  544 D1:B08E AF -  -  -  	xor	a, a
  545 D1:B08F 32 01 06 D0 	ld	(OP1+9), a
  546 D1:B093 CD 6D B0 D1 	call	ClearScreen
  547 D1:B097 21 E9 EE D1 	ld	hl, StartParseMessage
  548 D1:B09B CD A3 B0 D1 	call	PrintString
  549 D1:B09F 21 F9 05 D0 	ld	hl, OP1+1
  550 D1:B0A3 -  -  -  -  	
  551 D1:B0A3 -  -  -  -  PrintString:
  552 D1:B0A3 7E -  -  -  	ld	a, (hl)
  553 D1:B0A4 23 -  -  -  	inc	hl
  554 D1:B0A5 B7 -  -  -  	or	a, a
  555 D1:B0A6 C4 07 B8 D1 	call	nz, _PrintChar_ASM
  556 D1:B0AA 20 F7 -  -  	jr	nz, PrintString
  557 D1:B0AC C9 -  -  -  	ret
  558 D1:B0AD -  -  -  -  	
  559 D1:B0AD -  -  -  -  PreScanPrograms:
  560 D1:B0AD 2A 1D 23 D0 	ld	hl, (endPC)
  561 D1:B0B1 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  562 D1:B0B6 B7 -  -  -  	or	a, a
  563 D1:B0B7 ED 52 -  -  	sbc	hl, de
  564 D1:B0B9 23 -  -  -  	inc	hl
  565 D1:B0BA E5 -  -  -  	push	hl
  566 D1:B0BB C1 -  -  -  	pop	bc
  567 D1:B0BC 2A 1A 23 D0 	ld	hl, (curPC)
  568 D1:B0C0 -  -  -  -  ScanLoop:
  569 D1:B0C0 78 -  -  -  	ld	a, b
  570 D1:B0C1 B1 -  -  -  	or	a, c
  571 D1:B0C2 C8 -  -  -  	ret	z
  572 D1:B0C3 7E -  -  -  	ld	a, (hl)
  573 D1:B0C4 CD AC 04 02 	call	_IsA2ByteTok
  574 D1:B0C8 20 02 -  -  	jr	nz, +_
  575 D1:B0CA 23 -  -  -  	inc	hl
  576 D1:B0CB 0B -  -  -  	dec	bc
  577 D1:B0CC 23 -  -  -  _:	inc	hl
  578 D1:B0CD 0B -  -  -  	dec	bc
  579 D1:B0CE FE B3 -  -  	cp	a, tDet
  580 D1:B0D0 28 2D -  -  	jr	z, ScanFoundDet
  581 D1:B0D2 FE D8 -  -  	cp	a, tPause
  582 D1:B0D4 28 13 -  -  	jr	z, ScanFoundPause
  583 D1:B0D6 FE BC -  -  	cp	a, tSqrt
  584 D1:B0D8 28 1A -  -  	jr	z, ScanFoundRoot
  585 D1:B0DA FE DC -  -  	cp	a, tInput
  586 D1:B0DC 20 E2 -  -  	jr	nz, ScanLoop
  587 D1:B0DE -  -  -  -  ScanFoundInput:
  588 D1:B0DE 3A 5A EC D1 	ld	a, (amountOfInput)
  589 D1:B0E2 3C -  -  -  	inc	a
  590 D1:B0E3 32 5A EC D1 	ld	(amountOfInput), a
  591 D1:B0E7 18 D7 -  -  	jr	ScanLoop
  592 D1:B0E9 -  -  -  -  ScanFoundPause:
  593 D1:B0E9 3A 5B EC D1 	ld	a, (amountOfPause)
  594 D1:B0ED 3C -  -  -  	inc	a
  595 D1:B0EE 32 5B EC D1 	ld	(amountOfPause), a
  596 D1:B0F2 18 CC -  -  	jr	ScanLoop
  597 D1:B0F4 -  -  -  -  ScanFoundRoot:
  598 D1:B0F4 3A 5C EC D1 	ld	a, (amountOfRoot)
  599 D1:B0F8 3C -  -  -  	inc	a
  600 D1:B0F9 32 5C EC D1 	ld	(amountOfRoot), a
  601 D1:B0FD 18 C1 -  -  	jr	ScanLoop
  602 D1:B0FF -  -  -  -  ScanFoundDet:
  603 D1:B0FF 7E -  -  -  	ld	a, (hl)
  604 D1:B100 D6 30 -  -  	sub	a, t0
  605 D1:B102 38 BC -  -  	jr	c, ScanLoop
  606 D1:B104 FE 0A -  -  	cp	a, t9-t0+1
  607 D1:B106 30 B8 -  -  	jr	nc, ScanLoop
  608 D1:B108 11 00 00 00 	ld	de, 0
  609 D1:B10C 5F -  -  -  	ld	e, a
  610 D1:B10D 23 -  -  -  	inc	hl
  611 D1:B10E 0B -  -  -  	dec	bc
  612 D1:B10F 78 -  -  -  	ld	a, b
  613 D1:B110 B1 -  -  -  	or	a, c
  614 D1:B111 28 21 -  -  	jr	z, FoundRightCFunction
  615 D1:B113 7E -  -  -  	ld	a, (hl)
  616 D1:B114 FE 2B -  -  	cp	a, tComma
  617 D1:B116 28 1C -  -  	jr	z, FoundRightCFunction
  618 D1:B118 FE 3F -  -  	cp	a, tEnter
  619 D1:B11A 28 18 -  -  	jr	z, FoundRightCFunction
  620 D1:B11C D6 30 -  -  	sub	a, t0
  621 D1:B11E 38 14 -  -  	jr	c, FoundRightCFunction
  622 D1:B120 FE 0A -  -  	cp	a, t9-t0+1
  623 D1:B122 30 10 -  -  	jr	nc, FoundRightCFunction
  624 D1:B124 E5 -  -  -  	push	hl
  625 D1:B125 EB -  -  -  		ex	de, hl
  626 D1:B126 29 -  -  -  		add	hl, hl
  627 D1:B127 E5 -  -  -  		push	hl
  628 D1:B128 D1 -  -  -  		pop	de
  629 D1:B129 29 -  -  -  		add	hl, hl
  630 D1:B12A 29 -  -  -  		add	hl, hl
  631 D1:B12B 19 -  -  -  		add	hl, de
  632 D1:B12C 11 00 00 00 		ld	de, 0
  633 D1:B130 5F -  -  -  		ld	e, a
  634 D1:B131 19 -  -  -  		add	hl, de
  635 D1:B132 EB -  -  -  		ex	de, hl
  636 D1:B133 E1 -  -  -  	pop	hl
  637 D1:B134 -  -  -  -  FoundRightCFunction:
  638 D1:B134 E5 -  -  -  	push	hl
  639 D1:B135 EB -  -  -  		ex	de, hl
  640 D1:B136 11 54 00 00 		ld	de, AMOUNT_OF_C_FUNCTIONS
  641 D1:B13A B7 -  -  -  		or	a, a
  642 D1:B13B ED 52 -  -  		sbc	hl, de
  643 D1:B13D 30 1F -  -  		jr	nc,  WrongCFunction
  644 D1:B13F 19 -  -  -  		add	hl, de
  645 D1:B140 EB -  -  -  		ex	de, hl
  646 D1:B141 21 6A EC D1 		ld	hl, usedCroutines
  647 D1:B145 19 -  -  -  		add	hl, de
  648 D1:B146 7E -  -  -  		ld	a, (hl)
  649 D1:B147 B7 -  -  -  		or	a
  650 D1:B148 20 14 -  -  		jr	nz, FunctionAlreadyInProgram
  651 D1:B14A -  -  -  -  AddCFunctionToProgram:
  652 D1:B14A 3A 58 EC D1 		ld	a, (amountOfCRoutines)
  653 D1:B14E 3C -  -  -  		inc	a
  654 D1:B14F 77 -  -  -  		ld	(hl), a
  655 D1:B150 32 58 EC D1 		ld	(amountOfCRoutines), a
  656 D1:B154 3E C3 -  -  		ld	a, 0C3h
  657 D1:B156 D5 -  -  -  		push	de
  658 D1:B157 E1 -  -  -  		pop	hl
  659 D1:B158 29 -  -  -  		add	hl, hl
  660 D1:B159 19 -  -  -  		add	hl, de
  661 D1:B15A CD 5A AC D1 		call	InsertAHL																; jp *
  662 D1:B15E -  -  -  -  FunctionAlreadyInProgram:
  663 D1:B15E -  -  -  -  WrongCFunction:
  664 D1:B15E E1 -  -  -  	pop	hl
  665 D1:B15F C3 C0 B0 D1 	jp	ScanLoop
  666 D1:B163 -  -  -  -  
  667 D1:B163 -  -  -  -  GetSpriteData:
  668 D1:B163 B7 -  -  -  	or	a, a
  669 D1:B164 ED 52 -  -  	sbc	hl, de
  670 D1:B166 C8 -  -  -  	ret	z
  671 D1:B167 19 -  -  -  	add	hl, de
  672 D1:B168 1A -  -  -  	ld	a, (de)
  673 D1:B169 D6 30 -  -  	sub	a, t0
  674 D1:B16B DA 87 AF D1 	jp	c, WrongSpriteDataError
  675 D1:B16F FE 11 -  -  	cp	a, tA-t0
  676 D1:B171 38 0A -  -  	jr	c, +_
  677 D1:B173 D6 11 -  -  	sub	a, tA-t0
  678 D1:B175 FE 06 -  -  	cp	a, tG-tA
  679 D1:B177 D2 87 AF D1 	jp	nc, WrongSpriteDataError
  680 D1:B17B C6 0A -  -  	add	a, 10
  681 D1:B17D 87 -  -  -  _:	add	a, a
  682 D1:B17E 87 -  -  -  	add	a, a
  683 D1:B17F 87 -  -  -  	add	a, a
  684 D1:B180 87 -  -  -  	add	a, a
  685 D1:B181 DD 67 -  -  	ld	ixh, a
  686 D1:B183 13 -  -  -  	inc	de
  687 D1:B184 B7 -  -  -  	or	a
  688 D1:B185 ED 52 -  -  	sbc	hl, de
  689 D1:B187 CA 47 AF D1 	jp	z, ErrorSyntax
  690 D1:B18B 19 -  -  -  	add	hl, de
  691 D1:B18C 1A -  -  -  	ld	a, (de)
  692 D1:B18D D6 30 -  -  	sub	t0
  693 D1:B18F DA 87 AF D1 	jp	c, WrongSpriteDataError
  694 D1:B193 FE 11 -  -  	cp	a, tA-t0
  695 D1:B195 38 0A -  -  	jr	c, +_
  696 D1:B197 D6 11 -  -  	sub	a, tA-t0
  697 D1:B199 FE 06 -  -  	cp	a, tG-tA
  698 D1:B19B D2 87 AF D1 	jp	nc, WrongSpriteDataError
  699 D1:B19F C6 0A -  -  	add	a, 10
  700 D1:B1A1 DD B4 -  -  _:	or	a, ixh
  701 D1:B1A3 02 -  -  -  	ld	(bc), a
  702 D1:B1A4 03 -  -  -  	inc	bc
  703 D1:B1A5 13 -  -  -  	inc	de
  704 D1:B1A6 18 BB -  -  	jr	GetSpriteData
  705 D1:B1A8 -  -  -  -  	
  706 D1:B1A8 -  -  -  -  UpdateSpritePointers:
  707 D1:B1A8 C5 -  -  -  	push	bc
  708 D1:B1A9 2A 39 EC D1 		ld	hl, (programPtr)
  709 D1:B1AD ED 5B 0A 32 
              D0 -  -  -  		ld	de, (PrevProgramPtr)
  710 D1:B1B2 B7 -  -  -  		or	a, a
  711 D1:B1B3 ED 52 -  -  		sbc	hl, de
  712 D1:B1B5 EB -  -  -  		ex	de, hl
  713 D1:B1B6 01 F4 FF FF 		ld	bc, -12
  714 D1:B1BA 09 -  -  -  		add	hl, bc
  715 D1:B1BB E5 -  -  -  		push	hl
  716 D1:B1BC ED 27 -  -  			ld	hl, (hl)
  717 D1:B1BE 19 -  -  -  			add	hl, de
  718 D1:B1BF EB -  -  -  			ex	de, hl
  719 D1:B1C0 E1 -  -  -  		pop	hl
  720 D1:B1C1 ED 1F -  -  		ld	(hl), de
  721 D1:B1C3 FD CB AE 56         bit     debug_on, (iy+fAlways1);
  722 D1:B1C7 28 21 -  -          jr      z, +_
  723 D1:B1C9 2A 39 EC D1         ld      hl, (programPtr)
  724 D1:B1CD 01 B5 7C FC         ld      bc, DebugCodeEnd - DebugCode - 3 - program + UserMem
  725 D1:B1D1 09 -  -  -          add     hl, bc
  726 D1:B1D2 CD 7C AC D1         call    InsertCallHL
  727 D1:B1D6 ED 5B 39 EC 
              D1 -  -  -          ld      de, (programPtr)
  728 D1:B1DB 21 CF F0 D1         ld      hl, DebugCode
  729 D1:B1DF 01 37 00 00         ld      bc, DebugCodeEnd - DebugCode
  730 D1:B1E3 ED B0 -  -          ldir
  731 D1:B1E5 ED 53 39 EC 
              D1 -  -  -          ld      (programPtr), de
  732 D1:B1EA C1 -  -  -  _:	pop	bc
  733 D1:B1EB C9 -  -  -  	ret
  734 D1:B1EC -  -  -  -  	
  735 D1:B1EC -  -  -  -  GetProgramName:
  736 D1:B1EC E5 -  -  -  	push	hl
  737 D1:B1ED CD 28 10 02 		call	_IncFetch
  738 D1:B1F1 E1 -  -  -  	pop	hl
  739 D1:B1F2 DA 63 AF D1 	jp	c, InvalidNameLength
  740 D1:B1F6 23 -  -  -  	inc	hl
  741 D1:B1F7 FE 3F -  -  	cp	a, tEnter
  742 D1:B1F9 CA 63 AF D1 	jp	z, InvalidNameLength
  743 D1:B1FD FE 41 -  -  	cp	a, tA
  744 D1:B1FF DA 5D AF D1 	jp	c, InvalidTokenError
  745 D1:B203 FE 5C -  -  	cp	a, ttheta+1
  746 D1:B205 D2 5D AF D1 	jp	nc, InvalidTokenError
  747 D1:B209 77 -  -  -  	ld	(hl), a
  748 D1:B20A 1E 08 -  -  	ld	e, 8
  749 D1:B20C -  -  -  -  GetProgramNameLoop:
  750 D1:B20C E5 -  -  -  	push	hl
  751 D1:B20D CD 28 10 02 		call	_IncFetch
  752 D1:B211 E1 -  -  -  	pop	hl
  753 D1:B212 23 -  -  -  	inc	hl
  754 D1:B213 36 00 -  -  	ld	(hl), 0
  755 D1:B215 D8 -  -  -  	ret	c
  756 D1:B216 FE 3F -  -  	cp	a, tEnter
  757 D1:B218 C8 -  -  -  	ret	z
  758 D1:B219 FE 30 -  -  	cp	a, t0
  759 D1:B21B DA 5D AF D1 _:	jp	c, InvalidTokenError
  760 D1:B21F FE 3A -  -  	cp	a, t9+1
  761 D1:B221 38 0A -  -  	jr	c, +_
  762 D1:B223 FE 41 -  -  	cp	a, tA
  763 D1:B225 38 F4 -  -  	jr	c, -_
  764 D1:B227 FE 5C -  -  	cp	a, ttheta+1
  765 D1:B229 D2 5D AF D1 	jp	nc, InvalidTokenError
  766 D1:B22D 77 -  -  -  _:	ld	(hl), a
  767 D1:B22E 1D -  -  -  	dec	e
  768 D1:B22F 20 DB -  -  	jr	nz, GetProgramNameLoop
  769 D1:B231 C3 63 AF D1 	jp	InvalidNameLength
Listing for file "ice.asm"
  447 D1:B235 -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
    1 D1:B235 -  -  -  -  ParseLine:
    2 D1:B235 CD 2C 10 02 	call	_CurFetch
    3 D1:B239 FE 3F -  -  	cp	a, tEnter
    4 D1:B23B C8 -  -  -  	ret	z
    5 D1:B23C 21 FC EA D1 	ld	hl, FunctionsSingle
    6 D1:B240 01 10 00 00 	ld	bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B244 ED B1 -  -  	cpir
    8 D1:B246 20 2F -  -  	jr	nz, ParseExpression2
    9 D1:B248 FE 62 -  -  	cp	a, tVarOut
   10 D1:B24A 28 10 -  -  	jr	z, +_
   11 D1:B24C FE 2C -  -  	cp	a, tii
   12 D1:B24E 28 0C -  -  	jr	z, +_
   13 D1:B250 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   14 D1:B254 FD CB D0 FE 	set	used_code, (iy+fProgram1)
   15 D1:B258 CC A8 B1 D1 	call	z, UpdateSpritePointers
   16 D1:B25C 3A 56 EC D1 _:	ld	a, (openedParensF)
   17 D1:B260 B7 -  -  -  	or	a, a
   18 D1:B261 C2 7B AF D1 	jp	nz, FunctionError
   19 D1:B265 FD 77 B0 -  	ld	(iy+fFunction1), a
   20 D1:B268 FD 77 AF -  	ld	(iy+fFunction2), a
   21 D1:B26B 06 03 -  -  	ld	b, 3
   22 D1:B26D ED 4C -  -  	mlt	bc
   23 D1:B26F 21 0C EB D1 	ld	hl, FunctionsSingleStart
   24 D1:B273 09 -  -  -  	add	hl, bc
   25 D1:B274 ED 27 -  -  	ld	hl, (hl)
   26 D1:B276 E9 -  -  -  	jp	(hl)
   27 D1:B277 -  -  -  -  	
   28 D1:B277 -  -  -  -  ParseExpression2:
   29 D1:B277 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   30 D1:B27B FD CB D0 FE 	set	used_code, (iy+fProgram1)
   31 D1:B27F CC A8 B1 D1 	call	z, UpdateSpritePointers
   32 D1:B283 -  -  -  -  ParseExpression:
   33 D1:B283 21 5A 32 D0 	ld	hl, stack
   34 D1:B287 22 33 EC D1 	ld	(stackPtr), hl
   35 D1:B28B 21 42 36 D0 	ld	hl, output
   36 D1:B28F 22 36 EC D1 	ld	(outputPtr), hl
   37 D1:B293 AF -  -  -  	xor	a, a
   38 D1:B294 32 55 EC D1 	ld	(openedParensE), a
   39 D1:B298 FD 77 C0 -  	ld	(iy+fExpression1), a
   40 D1:B29B FD 77 BF -  	ld	(iy+fExpression2), a
   41 D1:B29E FD 77 BE -  	ld	(iy+fExpression3), a
   42 D1:B2A1 CD 2C 10 02 	call	_CurFetch
   43 D1:B2A5 -  -  -  -  MainLoopResCarryFlag:
   44 D1:B2A5 B7 -  -  -  	or	a, a	
   45 D1:B2A6 -  -  -  -  MainLoop:
   46 D1:B2A6 32 F6 31 D0 	ld	(tempToken), a
   47 D1:B2AA DA 39 B6 D1 	jp	c, StopParsing
   48 D1:B2AE FE 30 -  -  	cp	a, t0
   49 D1:B2B0 38 45 -  -  	jr	c, NotANumber
   50 D1:B2B2 FE 3A -  -  	cp	a, t9+1
   51 D1:B2B4 30 41 -  -  	jr	nc, NotANumber
   52 D1:B2B6 -  -  -  -  ANumber:
   53 D1:B2B6 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\number.asm"
    1 D1:B2B6 2A 36 EC D1 	ld	hl, (outputPtr)
    2 D1:B2BA FD CB C0 46 	bit	prev_is_number, (iy+fExpression1)
    3 D1:B2BE FD CB C0 C6 	set	prev_is_number, (iy+fExpression1)
    4 D1:B2C2 28 1A -  -  	jr	z, AddNumberToStack
    5 D1:B2C4 -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B2C4 2B -  -  -  	dec	hl
    7 D1:B2C5 2B -  -  -  	dec	hl
    8 D1:B2C6 2B -  -  -  	dec	hl
    9 D1:B2C7 E5 -  -  -  	push	hl
   10 D1:B2C8 ED 27 -  -  		ld	hl, (hl)
   11 D1:B2CA 29 -  -  -  		add	hl, hl											;	HL * 10
   12 D1:B2CB E5 -  -  -  		push	hl
   13 D1:B2CC D1 -  -  -  		pop	de
   14 D1:B2CD 29 -  -  -  		add	hl, hl
   15 D1:B2CE 29 -  -  -  		add	hl, hl
   16 D1:B2CF 19 -  -  -  		add	hl, de
   17 D1:B2D0 D6 30 -  -  		sub	a, t0											;	HL + <number>
   18 D1:B2D2 11 00 00 00 		ld	de, 0
   19 D1:B2D6 5F -  -  -  		ld	e, a
   20 D1:B2D7 19 -  -  -  		add	hl, de
   21 D1:B2D8 D1 -  -  -  	pop	de
   22 D1:B2D9 EB -  -  -  	ex	de, hl
   23 D1:B2DA ED 1F -  -  	ld	(hl), de
   24 D1:B2DC 18 13 -  -  	jr	NumberStop
   25 D1:B2DE -  -  -  -  AddNumberToStack:
   26 D1:B2DE 36 00 -  -  	ld	(hl), typeNumber
   27 D1:B2E0 23 -  -  -  	inc	hl
   28 D1:B2E1 D6 30 -  -  	sub	a, t0												;	new number
   29 D1:B2E3 -  -  -  -  InsertAndUpdatePointer
   30 D1:B2E3 11 00 00 00 	ld	de, 0
   31 D1:B2E7 5F -  -  -  	ld	e, a
   32 D1:B2E8 ED 1F -  -  	ld	(hl), de
   33 D1:B2EA -  -  -  -  UpdatePointer:
   34 D1:B2EA 23 -  -  -  	inc	hl
   35 D1:B2EB 23 -  -  -  	inc	hl
   36 D1:B2EC 23 -  -  -  	inc	hl
   37 D1:B2ED 22 36 EC D1 	ld	(outputPtr), hl
   38 D1:B2F1 -  -  -  -  NumberStop:
   39 D1:B2F1 CD 28 10 02 	call	_IncFetch
   40 D1:B2F5 18 AF -  -  	jr	MainLoop
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   54 D1:B2F7 -  -  -  -  
   55 D1:B2F7 -  -  -  -  NotANumber:
   56 D1:B2F7 FD CB C0 86 	res	prev_is_number, (iy+fExpression1)
   57 D1:B2FB FE 41 -  -  	cp	a, tA
   58 D1:B2FD 38 0F -  -  	jr	c, NotAVariable
   59 D1:B2FF FE 5C -  -  	cp	a, ttheta+1
   60 D1:B301 30 0B -  -  	jr	nc, NotAVariable
   61 D1:B303 -  -  -  -  AVariable:
   62 D1:B303 2A 36 EC D1 	ld	hl, (outputPtr)
   63 D1:B307 36 01 -  -  	ld	(hl), typeVariable
   64 D1:B309 23 -  -  -  	inc	hl
   65 D1:B30A D6 41 -  -  	sub	a, tA
   66 D1:B30C 18 D5 -  -  	jr	InsertAndUpdatePointer
   67 D1:B30E -  -  -  -  NotAVariable:
   68 D1:B30E 21 C0 EA D1 	ld	hl, operators_booleans
   69 D1:B312 01 0F 00 00 	ld	bc, 15
   70 D1:B316 ED B1 -  -  	cpir
   71 D1:B318 20 75 -  -  	jr	nz, NotABoolean
   72 D1:B31A -  -  -  -  ABoolean:
   73 D1:B31A -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operator.asm"
    1 D1:B31A 21 F3 EB D1 	ld	hl, precedence
    2 D1:B31E 09 -  -  -  	add	hl, bc
    3 D1:B31F 5E -  -  -  	ld	e, (hl)										;	e = precedence of current token
    4 D1:B320 FE 04 -  -  	cp	a, tStore
    5 D1:B322 CC D2 B7 D1 	call	z, MoveStackEntryToOutput
    6 D1:B326 -  -  -  -  CheckOperator:
    7 D1:B326 2A 33 EC D1 	ld	hl, (stackPtr)
    8 D1:B32A 01 5A 32 D0 	ld	bc, stack
    9 D1:B32E B7 -  -  -  	or	a, a
   10 D1:B32F ED 42 -  -  	sbc	hl, bc
   11 D1:B331 28 41 -  -  	jr	z, InsertBoolean
   12 D1:B333 09 -  -  -  	add	hl, bc
   13 D1:B334 2B -  -  -  	dec	hl
   14 D1:B335 2B -  -  -  	dec	hl
   15 D1:B336 2B -  -  -  	dec	hl
   16 D1:B337 2B -  -  -  	dec	hl
   17 D1:B338 7E -  -  -  	ld	a, (hl)
   18 D1:B339 FE 1F -  -  	cp	a, typeOperator
   19 D1:B33B 20 37 -  -  	jr	nz, InsertBoolean
   20 D1:B33D 23 -  -  -  	inc	hl
   21 D1:B33E 7E -  -  -  	ld	a, (hl)
   22 D1:B33F 21 C0 EA D1 	ld	hl, operators_booleans
   23 D1:B343 01 0F 00 00 	ld	bc, 15
   24 D1:B347 ED B1 -  -  	cpir
   25 D1:B349 21 02 EC D1 	ld	hl, precedence2
   26 D1:B34D 09 -  -  -  	add	hl, bc
   27 D1:B34E 7E -  -  -  	ld	a, (hl)										;	a = precedence of last token on stack
   28 D1:B34F BB -  -  -  	cp	a, e											;	if a <= e then move
   29 D1:B350 38 22 -  -  	jr	c, InsertBoolean
   30 D1:B352 -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B352 7B -  -  -  	ld	a, e											;	save for the precedence of current token
   32 D1:B353 ED 5B 36 EC 
              D1 -  -  -  	ld	de, (outputPtr)
   33 D1:B358 2A 33 EC D1 	ld	hl, (stackPtr)
   34 D1:B35C 2B -  -  -  	dec	hl
   35 D1:B35D 2B -  -  -  	dec	hl
   36 D1:B35E 2B -  -  -  	dec	hl
   37 D1:B35F 2B -  -  -  	dec	hl
   38 D1:B360 22 33 EC D1 	ld	(stackPtr), hl
   39 D1:B364 ED A0 -  -  	ldi
   40 D1:B366 ED A0 -  -  	ldi
   41 D1:B368 ED A0 -  -  	ldi
   42 D1:B36A ED A0 -  -  	ldi
   43 D1:B36C ED 53 36 EC 
              D1 -  -  -  	ld	(outputPtr), de
   44 D1:B371 5F -  -  -  	ld	e, a
   45 D1:B372 18 B2 -  -  	jr	CheckOperator
   46 D1:B374 -  -  -  -  InsertBoolean:
   47 D1:B374 2A 33 EC D1 	ld	hl, (stackPtr)
   48 D1:B378 36 1F -  -  	ld	(hl), typeOperator
   49 D1:B37A 23 -  -  -  	inc	hl
   50 D1:B37B 3A F6 31 D0 	ld	a, (tempToken)
   51 D1:B37F 77 -  -  -  	ld	(hl), a
   52 D1:B380 23 -  -  -  	inc	hl
   53 D1:B381 23 -  -  -  	inc	hl
   54 D1:B382 23 -  -  -  	inc	hl
   55 D1:B383 22 33 EC D1 	ld	(stackPtr), hl
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   74 D1:B387 -  -  -  -  
   75 D1:B387 -  -  -  -  ReturnToLoop:
   76 D1:B387 CD 28 10 02 	call	_IncFetch
   77 D1:B38B C3 A6 B2 D1 	jp	MainLoop
   78 D1:B38F -  -  -  -  NotABoolean:
   79 D1:B38F FE 2B -  -  	cp	a, tComma
   80 D1:B391 28 06 -  -  	jr	z, CloseArgument
   81 D1:B393 FE 11 -  -  	cp	a, tRParen
   82 D1:B395 C2 28 B4 D1 	jp	nz, NotACommaOrRParen
   83 D1:B399 -  -  -  -  CloseArgument:
   84 D1:B399 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\closing.asm"
    1 D1:B399 21 55 EC D1 	ld	hl, openedParensE
    2 D1:B39D 47 -  -  -  	ld	b, a
    3 D1:B39E 7E -  -  -  	ld	a, (hl)
    4 D1:B39F B7 -  -  -  	or	a, a
    5 D1:B3A0 28 6D -  -  	jr	z, MismatchedParens
    6 D1:B3A2 78 -  -  -  	ld	a, b
    7 D1:B3A3 FE 2B -  -  	cp	a, tComma
    8 D1:B3A5 28 01 -  -  	jr	z, +_
    9 D1:B3A7 35 -  -  -  	dec	(hl)
   10 D1:B3A8 2A 33 EC D1 _:	ld	hl, (stackPtr)
   11 D1:B3AC 01 5A 32 D0 	ld	bc, stack
   12 D1:B3B0 B7 -  -  -  	or	a, a
   13 D1:B3B1 ED 42 -  -  	sbc	hl, bc
   14 D1:B3B3 28 52 -  -  	jr	z, StopMovingForArgument2
   15 D1:B3B5 09 -  -  -  	add	hl, bc
   16 D1:B3B6 2B -  -  -  	dec	hl
   17 D1:B3B7 2B -  -  -  	dec	hl
   18 D1:B3B8 2B -  -  -  	dec	hl
   19 D1:B3B9 2B -  -  -  	dec	hl
   20 D1:B3BA 7E -  -  -  	ld	a, (hl)
   21 D1:B3BB FE 3F -  -  	cp	a, typeFunction
   22 D1:B3BD 28 23 -  -  	jr	z, StopMovingForArgument
   23 D1:B3BF FE 1F -  -  	cp	a, typeOperator
   24 D1:B3C1 20 06 -  -  	jr	nz, +_
   25 D1:B3C3 23 -  -  -  	inc	hl
   26 D1:B3C4 7E -  -  -  	ld	a, (hl)
   27 D1:B3C5 2B -  -  -  	dec	hl
   28 D1:B3C6 B7 -  -  -  	or	a, a
   29 D1:B3C7 28 19 -  -  	jr	z, StopMovingForArgument
   30 D1:B3C9 22 33 EC D1 _:	ld	(stackPtr), hl
   31 D1:B3CD ED 5B 36 EC 
              D1 -  -  -  	ld	de, (outputPtr)
   32 D1:B3D2 ED A0 -  -  	ldi
   33 D1:B3D4 ED A0 -  -  	ldi
   34 D1:B3D6 ED A0 -  -  	ldi
   35 D1:B3D8 ED A0 -  -  	ldi
   36 D1:B3DA ED 53 36 EC 
              D1 -  -  -  	ld	(outputPtr), de
   37 D1:B3DF 18 C7 -  -  	jr	--_
   38 D1:B3E1 09 -  -  -  _:	add	hl, bc
   39 D1:B3E2 -  -  -  -  StopMovingForArgument:
   40 D1:B3E2 3A F6 31 D0 	ld	a, (tempToken)
   41 D1:B3E6 FE 2B -  -  	cp	a, tComma
   42 D1:B3E8 28 1D -  -  	jr	z, StopMovingForArgument2
   43 D1:B3EA 22 33 EC D1 	ld	(stackPtr), hl
   44 D1:B3EE 23 -  -  -  	inc	hl
   45 D1:B3EF 7E -  -  -  	ld	a, (hl)
   46 D1:B3F0 FE 10 -  -  	cp	a, tLParen
   47 D1:B3F2 28 13 -  -  	jr	z, StopMovingForArgument2
   48 D1:B3F4 2B -  -  -  	dec	hl
   49 D1:B3F5 ED 5B 36 EC 
              D1 -  -  -  	ld	de, (outputPtr)
   50 D1:B3FA ED A0 -  -  	ldi
   51 D1:B3FC ED A0 -  -  	ldi
   52 D1:B3FE ED A0 -  -  	ldi
   53 D1:B400 ED A0 -  -  	ldi
   54 D1:B402 ED 53 36 EC 
              D1 -  -  -  	ld	(outputPtr), de
   55 D1:B407 -  -  -  -  StopMovingForArgument2:
   56 D1:B407 CD 28 10 02 	call	_IncFetch
   57 D1:B40B C3 A6 B2 D1 	jp	MainLoop
   58 D1:B40F -  -  -  -  MismatchedParens:
   59 D1:B40F 3A 56 EC D1 	ld	a, (openedParensF)
   60 D1:B413 B7 -  -  -  	or	a, a
   61 D1:B414 CA 4D AF D1 	jp	z, MismatchError
   62 D1:B418 3A F6 31 D0 	ld	a, (tempToken)
   63 D1:B41C FE 2B -  -  	cp	a, tComma
   64 D1:B41E 20 04 -  -  	jr	nz, +_
   65 D1:B420 FD CB BE C6 	set	triggered_a_comma, (iy+fExpression3)
   66 D1:B424 C3 39 B6 D1 _:	jp	StopParsing
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   85 D1:B428 -  -  -  -  
   86 D1:B428 -  -  -  -  NotACommaOrRParen:
   87 D1:B428 FE 08 -  -  	cp	a, tLBrace
   88 D1:B42A C2 BA B4 D1 	jp	nz, NotAList
   89 D1:B42E -  -  -  -  AList:
   90 D1:B42E -  -  -  -  #include "list.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\list.asm"
    1 D1:B42E 2A 36 EC D1 	ld	hl, (outputPtr)
    2 D1:B432 36 05 -  -  	ld	(hl), typeList
    3 D1:B434 23 -  -  -  	inc	hl
    4 D1:B435 ED 5B 4B EC 
              D1 -  -  -  	ld	de, (tempListsPtr)
    5 D1:B43A ED 1F -  -  	ld	(hl), de
    6 D1:B43C ED 53 9C B4 
              D1 -  -  -  	ld	(ListLengthSMC), de
    7 D1:B441 23 -  -  -  	inc	hl
    8 D1:B442 23 -  -  -  	inc	hl
    9 D1:B443 23 -  -  -  	inc	hl
   10 D1:B444 22 36 EC D1 	ld	(outputPtr), hl
   11 D1:B448 EB -  -  -  	ex	de, hl
   12 D1:B449 23 -  -  -  	inc	hl
   13 D1:B44A 23 -  -  -  	inc	hl
   14 D1:B44B 23 -  -  -  	inc	hl
   15 D1:B44C 22 4B EC D1 	ld	(tempListsPtr), hl
   16 D1:B450 -  -  -  -  ListStart:
   17 D1:B450 B7 -  -  -  	or	a, a
   18 D1:B451 ED 62 -  -  	sbc	hl, hl
   19 D1:B453 -  -  -  -  ListLoop:
   20 D1:B453 E5 -  -  -  	push	hl
   21 D1:B454 CD 28 10 02 		call	_IncFetch
   22 D1:B458 E1 -  -  -  	pop	hl
   23 D1:B459 FE 30 -  -  	cp	a, t0
   24 D1:B45B 38 14 -  -  	jr	c, ListNotNumber
   25 D1:B45D FE 3A -  -  	cp	a, t9+1
   26 D1:B45F 30 10 -  -  	jr	nc, ListNotNumber
   27 D1:B461 D6 30 -  -  	sub	a, t0
   28 D1:B463 29 -  -  -  	add	hl, hl
   29 D1:B464 E5 -  -  -  	push	hl
   30 D1:B465 D1 -  -  -  	pop	de
   31 D1:B466 29 -  -  -  	add	hl, hl
   32 D1:B467 29 -  -  -  	add	hl, hl
   33 D1:B468 19 -  -  -  	add	hl, de
   34 D1:B469 11 00 00 00 	ld	de, 0
   35 D1:B46D 5F -  -  -  	ld	e, a
   36 D1:B46E 19 -  -  -  	add	hl, de
   37 D1:B46F 18 E2 -  -  	jr	ListLoop
   38 D1:B471 -  -  -  -  ListNotNumber:
   39 D1:B471 FE 2B -  -  	cp	a, tComma
   40 D1:B473 20 10 -  -  	jr	nz, ListNotNumberOrComma
   41 D1:B475 EB -  -  -  	ex	de, hl
   42 D1:B476 2A 4B EC D1 	ld	hl, (tempListsPtr)
   43 D1:B47A ED 1F -  -  	ld	(hl), de
   44 D1:B47C 23 -  -  -  	inc	hl
   45 D1:B47D 23 -  -  -  	inc	hl
   46 D1:B47E 23 -  -  -  	inc	hl
   47 D1:B47F 22 4B EC D1 	ld	(tempListsPtr), hl
   48 D1:B483 18 CB -  -  	jr	ListStart
   49 D1:B485 -  -  -  -  ListNotNumberOrComma:
   50 D1:B485 FE 09 -  -  	cp	a, tRBrace
   51 D1:B487 28 04 -  -  	jr	z, ListStop
   52 D1:B489 FE 04 -  -  	cp	a, tStore
   53 D1:B48B 20 25 -  -  	jr	nz, ListError
   54 D1:B48D -  -  -  -  ListStop:
   55 D1:B48D EB -  -  -  	ex	de, hl
   56 D1:B48E 2A 4B EC D1 	ld	hl, (tempListsPtr)
   57 D1:B492 ED 1F -  -  	ld	(hl), de
   58 D1:B494 23 -  -  -  	inc	hl
   59 D1:B495 23 -  -  -  	inc	hl
   60 D1:B496 23 -  -  -  	inc	hl
   61 D1:B497 22 4B EC D1 	ld	(tempListsPtr),  hl
   62 D1:B49B -  -  -  -  ListLengthSMC = $+1
   63 D1:B49B 11 00 00 00 	ld	de, 0
   64 D1:B49F 2B -  -  -  	dec	hl
   65 D1:B4A0 2B -  -  -  	dec	hl
   66 D1:B4A1 2B -  -  -  	dec	hl
   67 D1:B4A2 B7 -  -  -  	or	a, a
   68 D1:B4A3 ED 52 -  -  	sbc	hl, de
   69 D1:B4A5 EB -  -  -  	ex	de, hl
   70 D1:B4A6 ED 1F -  -  	ld	(hl), de
   71 D1:B4A8 FE 04 -  -  	cp	a, tStore
   72 D1:B4AA C4 28 10 02 	call	nz, _IncFetch
   73 D1:B4AE C3 A6 B2 D1 	jp	MainLoop
   74 D1:B4B2 -  -  -  -  ListError:
   75 D1:B4B2 21 2F ED D1 	ld	hl, InvalidListArgumentMessage
   76 D1:B4B6 C3 A3 AF D1 	jp	DispFinalString
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\parse.asm"
   91 D1:B4BA -  -  -  -  
   92 D1:B4BA -  -  -  -  NotAList:
   93 D1:B4BA FE 5D -  -  	cp	a, tVarLst
   94 D1:B4BC 20 4E -  -  	jr	nz, NotAnOSList
   95 D1:B4BE -  -  -  -  AnOSList:
   96 D1:B4BE CD 28 10 02 	call	_IncFetch
   97 D1:B4C2 FE 06 -  -  	cp	a, 6
   98 D1:B4C4 D2 5D AF D1 	jp	nc, InvalidTokenError
   99 D1:B4C8 4F -  -  -  	ld	c, a
  100 D1:B4C9 06 03 -  -  	ld	b, 3
  101 D1:B4CB ED 4C -  -  	mlt	bc
  102 D1:B4CD 21 11 EC D1 	ld	hl, lists
  103 D1:B4D1 09 -  -  -  	add	hl, bc
  104 D1:B4D2 ED 27 -  -  	ld	hl, (hl)
  105 D1:B4D4 EB -  -  -  	ex	de, hl
  106 D1:B4D5 2A 36 EC D1 	ld	hl, (outputPtr)
  107 D1:B4D9 36 06 -  -  	ld	(hl), typeOSList
  108 D1:B4DB 23 -  -  -  	inc	hl
  109 D1:B4DC ED 1F -  -  	ld	(hl), de
  110 D1:B4DE 23 -  -  -  	inc	hl
  111 D1:B4DF 23 -  -  -  	inc	hl
  112 D1:B4E0 23 -  -  -  	inc	hl
  113 D1:B4E1 22 36 EC D1 	ld	(outputPtr), hl
  114 D1:B4E5 CD 28 10 02 	call	_IncFetch
  115 D1:B4E9 FE 10 -  -  	cp	a, tLParen
  116 D1:B4EB C2 A5 B2 D1 	jp	nz, MainLoopResCarryFlag
  117 D1:B4EF 21 55 EC D1 	ld	hl, openedParensE
  118 D1:B4F3 34 -  -  -  	inc	(hl)
  119 D1:B4F4 2A 33 EC D1 	ld	hl, (stackPtr)
  120 D1:B4F8 36 1F -  -  	ld	(hl), typeOperator
  121 D1:B4FA 23 -  -  -  	inc	hl
  122 D1:B4FB 36 00 -  -  	ld	(hl), 0
  123 D1:B4FD 23 -  -  -  	inc	hl
  124 D1:B4FE 23 -  -  -  	inc	hl
  125 D1:B4FF 23 -  -  -  	inc	hl
  126 D1:B500 22 33 EC D1 	ld	(stackPtr), hl
  127 D1:B504 CD 28 10 02 	call	_IncFetch
  128 D1:B508 C3 A6 B2 D1 	jp	MainLoop
  129 D1:B50C -  -  -  -  NotAnOSList:
  130 D1:B50C FE 2A -  -  	cp	a, tString
  131 D1:B50E 20 53 -  -  	jr	nz, NotAString
  132 D1:B510 -  -  -  -  AString:
  133 D1:B510 2A 36 EC D1 	ld	hl, (outputPtr)
  134 D1:B514 36 07 -  -  	ld	(hl), typeString
  135 D1:B516 23 -  -  -  	inc	hl
  136 D1:B517 ED 5B 48 EC 
              D1 -  -  -  	ld	de, (tempStringsPtr)
  137 D1:B51C ED 1F -  -  	ld	(hl), de
  138 D1:B51E 23 -  -  -  	inc	hl
  139 D1:B51F 23 -  -  -  	inc	hl
  140 D1:B520 23 -  -  -  	inc	hl
  141 D1:B521 22 36 EC D1 	ld	(outputPtr), hl
  142 D1:B525 -  -  -  -  StringLoop:
  143 D1:B525 CD 28 10 02 	call	_IncFetch
  144 D1:B529 38 2C -  -  	jr	c, StringStop2
  145 D1:B52B FE 3F -  -  	cp	a, tEnter
  146 D1:B52D 28 28 -  -  	jr	z, StringStop2
  147 D1:B52F FE 2A -  -  	cp	a, tString
  148 D1:B531 28 1E -  -  	jr	z, StringStop
  149 D1:B533 FE 04 -  -  	cp	a, tStore
  150 D1:B535 28 1A -  -  	jr	z, StringStop
  151 D1:B537 CD AC 04 02 	call	_IsA2ByteTok
  152 D1:B53B 20 06 -  -  	jr	nz, +_
  153 D1:B53D 23 -  -  -  	inc	hl
  154 D1:B53E 22 1A 23 D0 	ld	(curPC), hl
  155 D1:B542 2B -  -  -  	dec	hl
  156 D1:B543 D5 -  -  -  _:	push	de
  157 D1:B544 CD 70 08 02 		call	_Get_Tok_Strng
  158 D1:B548 D1 -  -  -  	pop	de
  159 D1:B549 21 0E 06 D0 	ld	hl, OP3
  160 D1:B54D ED B0 -  -  	ldir
  161 D1:B54F 18 D4 -  -  	jr	StringLoop
  162 D1:B551 -  -  -  -  StringStop:
  163 D1:B551 FE 3F -  -  	cp	a, tEnter
  164 D1:B553 C4 28 10 02 	call	nz, _IncFetch
  165 D1:B557 -  -  -  -  StringStop2:
  166 D1:B557 EB -  -  -  	ex	de, hl
  167 D1:B558 36 00 -  -  	ld	(hl), 0
  168 D1:B55A 23 -  -  -  	inc	hl
  169 D1:B55B 22 48 EC D1 	ld	(tempStringsPtr), hl
  170 D1:B55F C3 A6 B2 D1 	jp	MainLoop
  171 D1:B563 -  -  -  -  NotAString:
  172 D1:B563 FE 3F -  -  	cp	a, tEnter
  173 D1:B565 CA 39 B6 D1 	jp	z, StopParsing
  174 D1:B569 21 DD EA D1 	ld	hl, FunctionsWithReturnValue
  175 D1:B56D 01 0A 00 00 	ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B571 ED B1 -  -  	cpir
  177 D1:B573 C2 5D AF D1 	jp	nz, InvalidTokenError
  178 D1:B577 FE AD -  -  	cp	a, tGetKey
  179 D1:B579 28 0A -  -  	jr	z, AddFunctionToOutput
  180 D1:B57B FE 0D -  -  	cp	a, tSqr
  181 D1:B57D 28 06 -  -  	jr	z, AddFunctionToOutput
  182 D1:B57F FE AB -  -  	cp	a, trand
  183 D1:B581 C2 13 B6 D1 	jp	nz, AddFunctionToStack
  184 D1:B585 -  -  -  -  AddFunctionToOutput:
  185 D1:B585 2A 36 EC D1 	ld	hl, (outputPtr)
  186 D1:B589 1E 04 -  -  	ld	e, typeReturnValue
  187 D1:B58B FE 0D -  -  	cp	a, tSqr
  188 D1:B58D 20 02 -  -  	jr	nz, +_
  189 D1:B58F 1E 3F -  -  	ld	e, typeFunction
  190 D1:B591 73 -  -  -  _:	ld	(hl), e
  191 D1:B592 23 -  -  -  	inc	hl
  192 D1:B593 77 -  -  -  	ld	(hl), a
  193 D1:B594 23 -  -  -  	inc	hl
  194 D1:B595 23 -  -  -  	inc	hl
  195 D1:B596 23 -  -  -  	inc	hl
  196 D1:B597 22 36 EC D1 	ld	(outputPtr), hl
  197 D1:B59B FE AD -  -  	cp	a, tGetKey
  198 D1:B59D C2 87 B3 D1 	jp	nz, ReturnToLoop
  199 D1:B5A1 CD 28 10 02 	call	_IncFetch
  200 D1:B5A5 DA A6 B2 D1 	jp	c, MainLoop
  201 D1:B5A9 FE 10 -  -  	cp	a, tLParen
  202 D1:B5AB C2 A5 B2 D1 	jp	nz, MainLoopResCarryFlag
  203 D1:B5AF CD 28 10 02 	call	_IncFetch
  204 D1:B5B3 DA 47 AF D1 _:	jp	c, ErrorSyntax
  205 D1:B5B7 FE 3F -  -  	cp	a, tEnter
  206 D1:B5B9 CA 47 AF D1 	jp	z, ErrorSyntax
  207 D1:B5BD D6 30 -  -  	sub	a, t0
  208 D1:B5BF 38 F2 -  -  	jr	c, -_
  209 D1:B5C1 FE 0A -  -  	cp	a, t9-t0+1
  210 D1:B5C3 D2 47 AF D1 _:	jp	nc, ErrorSyntax
  211 D1:B5C7 11 00 00 00 	ld	de, 0
  212 D1:B5CB 5F -  -  -  	ld	e, a
  213 D1:B5CC CD 28 10 02 	call	_IncFetch
  214 D1:B5D0 38 35 -  -  	jr	c, AddGetKeyDirect
  215 D1:B5D2 FE 3F -  -  	cp	a, tEnter
  216 D1:B5D4 28 31 -  -  	jr	z, AddGetKeyDirect
  217 D1:B5D6 FE 11 -  -  	cp	a, tRParen
  218 D1:B5D8 28 29 -  -  	jr	z, +_
  219 D1:B5DA FE 04 -  -  	cp	a, tStore
  220 D1:B5DC 28 29 -  -  	jr	z, AddGetKeyDirect
  221 D1:B5DE D6 30 -  -  	sub	a, t0
  222 D1:B5E0 38 D1 -  -  	jr	c, --_
  223 D1:B5E2 FE 0A -  -  	cp	a, t9-t0+1
  224 D1:B5E4 30 DD -  -  	jr	nc, -_
  225 D1:B5E6 D5 -  -  -  	push	de
  226 D1:B5E7 E1 -  -  -  	pop	hl
  227 D1:B5E8 29 -  -  -  	add	hl, hl
  228 D1:B5E9 29 -  -  -  	add	hl, hl
  229 D1:B5EA 19 -  -  -  	add	hl, de
  230 D1:B5EB 29 -  -  -  	add	hl, hl
  231 D1:B5EC 5F -  -  -  	ld	e, a
  232 D1:B5ED 19 -  -  -  	add	hl, de
  233 D1:B5EE EB -  -  -  	ex	de, hl
  234 D1:B5EF CD 28 10 02 	call	_IncFetch
  235 D1:B5F3 38 12 -  -  	jr	c, AddGetKeyDirect
  236 D1:B5F5 FE 3F -  -  	cp	a, tEnter
  237 D1:B5F7 28 0E -  -  	jr	z, AddGetKeyDirect
  238 D1:B5F9 FE 04 -  -  	cp	a, tStore
  239 D1:B5FB 28 0A -  -  	jr	z, AddGetKeyDirect
  240 D1:B5FD FE 11 -  -  	cp	a, tRParen
  241 D1:B5FF C2 47 AF D1 	jp	nz, ErrorSyntax
  242 D1:B603 CD 28 10 02 _:	call	_IncFetch
  243 D1:B607 -  -  -  -  AddGetKeyDirect:
  244 D1:B607 2A 36 EC D1 	ld	hl, (outputPtr)
  245 D1:B60B 2B -  -  -  	dec	hl
  246 D1:B60C 2B -  -  -  	dec	hl
  247 D1:B60D 2B -  -  -  	dec	hl
  248 D1:B60E 73 -  -  -  	ld	(hl), e
  249 D1:B60F C3 A6 B2 D1 	jp	MainLoop
  250 D1:B613 -  -  -  -  AddFunctionToStack:
  251 D1:B613 21 55 EC D1 	ld	hl, openedParensE
  252 D1:B617 34 -  -  -  	inc	(hl)
  253 D1:B618 CD AC 04 02 	call	_IsA2ByteTok
  254 D1:B61C CC 28 10 02 	call	z, _IncFetch
  255 D1:B620 47 -  -  -  	ld	b, a
  256 D1:B621 2A 33 EC D1 	ld	hl, (stackPtr)
  257 D1:B625 3A F6 31 D0 	ld	a, (tempToken)
  258 D1:B629 36 3F -  -  	ld	(hl), typeFunction
  259 D1:B62B 23 -  -  -  	inc	hl
  260 D1:B62C 77 -  -  -  	ld	(hl), a
  261 D1:B62D 23 -  -  -  	inc	hl
  262 D1:B62E 70 -  -  -  	ld	(hl), b
  263 D1:B62F 23 -  -  -  	inc	hl
  264 D1:B630 23 -  -  -  	inc	hl
  265 D1:B631 22 33 EC D1 	ld	(stackPtr), hl
  266 D1:B635 C3 87 B3 D1 	jp	ReturnToLoop
  267 D1:B639 -  -  -  -  StopParsing:																;	move stack to output
  268 D1:B639 CD D2 B7 D1 	call	MoveStackEntryToOutput
  269 D1:B63D 2A 36 EC D1 	ld	hl, (outputPtr)
  270 D1:B641 11 42 36 D0 	ld	de, output
  271 D1:B645 B7 -  -  -  	or	a, a
  272 D1:B646 ED 52 -  -  	sbc	hl, de
  273 D1:B648 E5 -  -  -  	push	hl
  274 D1:B649 C1 -  -  -  	pop	bc																	;	BC / 4 is amount of elements in the stack
  275 D1:B64A D5 -  -  -  	push	de
  276 D1:B64B E1 -  -  -  	pop	hl
  277 D1:B64C 3E 01 -  -  	ld	a, OutputIsInHL
  278 D1:B64E 32 5D EC D1 	ld	(ExprOutput), a
  279 D1:B652 32 5E EC D1 	ld	(ExprOutput2), a
  280 D1:B656 78 -  -  -  	ld	a, b
  281 D1:B657 B1 -  -  -  	or	a, c
  282 D1:B658 FE 04 -  -  	cp	a, 4
  283 D1:B65A D8 -  -  -  	ret	c
  284 D1:B65B CA 6A B7 D1 	jp	z, ParseSingleArgument
  285 D1:B65F -  -  -  -  Loop:
  286 D1:B65F AF -  -  -  	xor	a, a
  287 D1:B660 FD 77 C0 -  	ld	(iy+fExpression1), a
  288 D1:B663 FD 77 BF -  	ld	(iy+fExpression2), a
  289 D1:B666 ED 42 -  -  	sbc	hl, bc
  290 D1:B668 11 42 36 D0 	ld	de, output
  291 D1:B66C ED 52 -  -  	sbc	hl, de
  292 D1:B66E CA 47 AF D1 	jp	z, ErrorSyntax
  293 D1:B672 19 -  -  -  	add	hl, de
  294 D1:B673 09 -  -  -  	add	hl, bc
  295 D1:B674 E5 -  -  -  	push	hl
  296 D1:B675 21 0C 00 00 		ld	hl, 12
  297 D1:B679 B7 -  -  -  		or	a, a
  298 D1:B67A ED 42 -  -  		sbc	hl, bc
  299 D1:B67C 20 04 -  -  		jr	nz, +_
  300 D1:B67E FD CB C0 DE 		set	op_is_last_one, (iy+fExpression1)
  301 D1:B682 E1 -  -  -  _:	pop	hl
  302 D1:B683 78 -  -  -  	ld	a, b
  303 D1:B684 B1 -  -  -  	or	a, c
  304 D1:B685 FE 04 -  -  	cp	a, 4
  305 D1:B687 CA 60 B7 D1 	jp	z, StopParseExpression
  306 D1:B68B 7E -  -  -  	ld	a, (hl)
  307 D1:B68C FE 1F -  -  	cp	a, typeOperator
  308 D1:B68E 28 5B -  -  	jr	z, ExpressOperator
  309 D1:B690 FE 3F -  -  	cp	a, typeFunction
  310 D1:B692 28 06 -  -  	jr	z, ExpressFunction
  311 D1:B694 23 -  -  -  	inc	hl
  312 D1:B695 23 -  -  -  	inc	hl
  313 D1:B696 23 -  -  -  	inc	hl
  314 D1:B697 23 -  -  -  	inc	hl
  315 D1:B698 18 C5 -  -  	jr	Loop
  316 D1:B69A -  -  -  -  ExpressFunction:
  317 D1:B69A 23 -  -  -  	inc	hl																	;	function = a
  318 D1:B69B 7E -  -  -  	ld	a, (hl)
  319 D1:B69C 2B -  -  -  	dec	hl
  320 D1:B69D C5 -  -  -  	push	bc
  321 D1:B69E E5 -  -  -  		push	hl
  322 D1:B69F CD A1 C5 D1 			call	ExecuteFunction
  323 D1:B6A3 D1 -  -  -  		pop	de
  324 D1:B6A4 D5 -  -  -  		push	de
  325 D1:B6A5 E1 -  -  -  		pop	hl
  326 D1:B6A6 23 -  -  -  		inc	hl
  327 D1:B6A7 23 -  -  -  		inc	hl
  328 D1:B6A8 23 -  -  -  		inc	hl
  329 D1:B6A9 23 -  -  -  		inc	hl
  330 D1:B6AA 3A 57 EC D1 		ld	a, (amountOfArguments)
  331 D1:B6AE 3D -  -  -  		dec	a
  332 D1:B6AF 28 07 -  -  		jr	z, ++_
  333 D1:B6B1 47 -  -  -  		ld	b, a
  334 D1:B6B2 1B -  -  -  _:		dec	de
  335 D1:B6B3 1B -  -  -  		dec	de
  336 D1:B6B4 1B -  -  -  		dec	de
  337 D1:B6B5 1B -  -  -  		dec	de
  338 D1:B6B6 10 FA -  -  		djnz	-_
  339 D1:B6B8 C1 -  -  -  _:	pop	bc
  340 D1:B6B9 D5 -  -  -  	push	de
  341 D1:B6BA C5 -  -  -  		push	bc
  342 D1:B6BB E5 -  -  -  			push	hl
  343 D1:B6BC ED B0 -  -  				ldir
  344 D1:B6BE E1 -  -  -  			pop	hl
  345 D1:B6BF C1 -  -  -  		pop	bc
  346 D1:B6C0 D1 -  -  -  	pop	de
  347 D1:B6C1 EB -  -  -  	ex	de, hl
  348 D1:B6C2 09 -  -  -  	add	hl, bc
  349 D1:B6C3 B7 -  -  -  	or	a, a
  350 D1:B6C4 ED 52 -  -  	sbc	hl, de
  351 D1:B6C6 E5 -  -  -  	push	hl
  352 D1:B6C7 C1 -  -  -  	pop	bc																	;	BC = BC+DE-HL
  353 D1:B6C8 78 -  -  -  	ld	a, b
  354 D1:B6C9 B1 -  -  -  	or	a, c
  355 D1:B6CA FE 04 -  -  	cp	a, 4
  356 D1:B6CC 20 0F -  -  	jr	nz, +_
  357 D1:B6CE FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  358 D1:B6D2 CA 60 B7 D1 	jp	z, StopParseExpression
  359 D1:B6D6 DD 27 FD -  	ld	hl, (ix-3)
  360 D1:B6D9 C3 75 B7 D1 	jp	ParseSingleArgument2
  361 D1:B6DD EB -  -  -  _:	ex	de, hl
  362 D1:B6DE 3A 57 EC D1 	ld	a, (amountOfArguments)
  363 D1:B6E2 47 -  -  -  	ld	b, a
  364 D1:B6E3 2B -  -  -  _:	dec	hl
  365 D1:B6E4 2B -  -  -  	dec	hl
  366 D1:B6E5 2B -  -  -  	dec	hl
  367 D1:B6E6 2B -  -  -  	dec	hl
  368 D1:B6E7 10 FA -  -  	djnz	-_
  369 D1:B6E9 18 4E -  -  	jr	AddChain
  370 D1:B6EB -  -  -  -  ExpressOperator:
  371 D1:B6EB 23 -  -  -  	inc	hl
  372 D1:B6EC 7E -  -  -  	ld	a, (hl)
  373 D1:B6ED 2B -  -  -  	dec	hl
  374 D1:B6EE C5 -  -  -  	push	bc
  375 D1:B6EF E5 -  -  -  		push	hl
  376 D1:B6F0 DD E1 -  -  		pop	ix
  377 D1:B6F2 DD 17 FD -  		ld	de, (ix-3)
  378 D1:B6F5 DD 07 F9 -  		ld	bc, (ix-7)
  379 D1:B6F8 CD 41 D4 D1 		call	ExecuteOperator
  380 D1:B6FC 3A 5E EC D1 		ld	a, (ExprOutput2)
  381 D1:B700 32 5D EC D1 		ld	(ExprOutput), a
  382 D1:B704 ED 12 FC -  		lea	de, ix-4
  383 D1:B707 C1 -  -  -  	pop	bc
  384 D1:B708 21 08 00 00 	ld	hl, 8
  385 D1:B70C 19 -  -  -  	add	hl, de
  386 D1:B70D D5 -  -  -  	push	de
  387 D1:B70E C5 -  -  -  		push	bc
  388 D1:B70F ED B0 -  -  			ldir
  389 D1:B711 C1 -  -  -  		pop	bc
  390 D1:B712 21 F4 FF FF 		ld	hl, -12
  391 D1:B716 09 -  -  -  		add	hl, bc
  392 D1:B717 19 -  -  -  		add	hl, de
  393 D1:B718 B7 -  -  -  		or	a
  394 D1:B719 ED 52 -  -  		sbc	hl, de
  395 D1:B71B E5 -  -  -  		push	hl
  396 D1:B71C C1 -  -  -  		pop	bc
  397 D1:B71D E1 -  -  -  	pop	hl
  398 D1:B71E 20 0D -  -  	jr	nz, +_
  399 D1:B720 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  400 D1:B724 CA 60 B7 D1 	jp	z, StopParseExpression
  401 D1:B728 DD 27 F9 -  	ld	hl, (ix-7)
  402 D1:B72B 18 48 -  -  	jr	ParseSingleArgument2
  403 D1:B72D 03 -  -  -  _:	inc	bc
  404 D1:B72E 03 -  -  -  	inc	bc
  405 D1:B72F 03 -  -  -  	inc	bc
  406 D1:B730 03 -  -  -  	inc	bc
  407 D1:B731 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  408 D1:B735 C2 5F B6 D1 	jp	nz, Loop
  409 D1:B739 -  -  -  -  AddChain:
  410 D1:B739 1E 03 -  -  	ld	e, typeChainAns
  411 D1:B73B 7E -  -  -  	ld	a, (hl)
  412 D1:B73C FE 1F -  -  	cp	a, typeOperator
  413 D1:B73E 30 15 -  -  	jr	nc, ChainAns2
  414 D1:B740 23 -  -  -  	inc	hl
  415 D1:B741 23 -  -  -  	inc	hl
  416 D1:B742 23 -  -  -  	inc	hl
  417 D1:B743 23 -  -  -  	inc	hl
  418 D1:B744 B6 -  -  -  	or	a, (hl)
  419 D1:B745 2B -  -  -  	dec	hl
  420 D1:B746 2B -  -  -  	dec	hl
  421 D1:B747 2B -  -  -  	dec	hl
  422 D1:B748 2B -  -  -  	dec	hl
  423 D1:B749 FE 1F -  -  	cp	a, typeOperator
  424 D1:B74B 28 08 -  -  	jr	z, ChainAns2
  425 D1:B74D -  -  -  -  ChainPush2:
  426 D1:B74D E5 -  -  -  	push	hl
  427 D1:B74E CD 17 AD D1 		call	InsertPushHLDE
  428 D1:B752 E1 -  -  -  	pop	hl
  429 D1:B753 1E 02 -  -  	ld	e, typeChainPush
  430 D1:B755 -  -  -  -  ChainAns2:
  431 D1:B755 E5 -  -  -  	push	hl
  432 D1:B756 2B -  -  -  		dec	hl
  433 D1:B757 2B -  -  -  		dec	hl
  434 D1:B758 2B -  -  -  		dec	hl
  435 D1:B759 2B -  -  -  		dec	hl
  436 D1:B75A 73 -  -  -  		ld	(hl), e
  437 D1:B75B E1 -  -  -  	pop	hl
  438 D1:B75C C3 5F B6 D1 	jp	Loop
  439 D1:B760 -  -  -  -  	
  440 D1:B760 -  -  -  -  StopParseExpression:
  441 D1:B760 3A 56 EC D1 	ld	a, (openedParensF)
  442 D1:B764 B7 -  -  -  	or	a, a
  443 D1:B765 C2 D5 AC D1 	jp	nz, MaybeChangeDEToHL
  444 D1:B769 C9 -  -  -  	ret
  445 D1:B76A -  -  -  -  	
  446 D1:B76A -  -  -  -  ParseSingleArgument:
  447 D1:B76A 7E -  -  -  	ld	a, (hl)
  448 D1:B76B B7 -  -  -  	or	a, a
  449 D1:B76C 20 0D -  -  	jr	nz, ParseSingleNotNumber
  450 D1:B76E FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  451 D1:B772 23 -  -  -  	inc	hl
  452 D1:B773 ED 27 -  -  	ld	hl, (hl)
  453 D1:B775 -  -  -  -  ParseSingleArgument2:
  454 D1:B775 3E 21 -  -  	ld	a, 021h
  455 D1:B777 C3 5A AC D1 	jp	InsertAHL															;	ld hl, *
  456 D1:B77B -  -  -  -  ParseSingleNotNumber:
  457 D1:B77B 3D -  -  -  	dec	a
  458 D1:B77C 20 06 -  -  	jr	nz, ParseSingleNotVariable
  459 D1:B77E 23 -  -  -  	inc	hl
  460 D1:B77F 4E -  -  -  	ld	c, (hl)
  461 D1:B780 C3 80 AC D1 	jp	InsertHIXC
  462 D1:B784 -  -  -  -  ParseSingleNotVariable:
  463 D1:B784 D6 03 -  -  	sub	a, 3
  464 D1:B786 20 0C -  -  	jr	nz, ParseSingleNotFunction
  465 D1:B788 23 -  -  -  	inc	hl
  466 D1:B789 7E -  -  -  	ld	a, (hl)
  467 D1:B78A 06 02 -  -  	ld	b, OutputInHL
  468 D1:B78C FD CB C0 B6 	res	need_push, (iy+fExpression1)
  469 D1:B790 C3 52 AD D1 	jp	GetFunction
  470 D1:B794 -  -  -  -  ParseSingleNotFunction:
  471 D1:B794 D6 03 -  -  	sub	a, 3
  472 D1:B796 C2 47 AF D1 	jp	nz, ErrorSyntax
  473 D1:B79A FD CB C0 FE 	set	output_is_string, (iy+fExpression1)
  474 D1:B79E E5 -  -  -  	push	hl
  475 D1:B79F 3E 21 -  -  		ld	a, 021h
  476 D1:B7A1 CD 26 AD D1 		call	InsertA														;	ld hl, *
  477 D1:B7A5 CD 3D AD D1 		call	InsertProgramPtrToDataOffset
  478 D1:B7A9 2A 4E EC D1 		ld	hl, (programDataDataPtr)
  479 D1:B7AD CD 5E AC D1 		call	InsertHL														;	ld hl, XXXXXXX
  480 D1:B7B1 E1 -  -  -  	pop	hl
  481 D1:B7B2 23 -  -  -  	inc	hl
  482 D1:B7B3 ED 17 -  -  	ld	de, (hl)																;	hl points to string in string stack
  483 D1:B7B5 ED 27 -  -  	ld	hl, (hl)
  484 D1:B7B7 01 FF FF FF 	ld	bc, -1
  485 D1:B7BB AF -  -  -  	xor	a, a
  486 D1:B7BC ED B1 -  -  	cpir
  487 D1:B7BE ED 52 -  -  	sbc	hl, de
  488 D1:B7C0 E5 -  -  -  	push	hl
  489 D1:B7C1 C1 -  -  -  	pop	bc																	;	bc = length of string
  490 D1:B7C2 EB -  -  -  	ex	de, hl
  491 D1:B7C3 ED 5B 4E EC 
              D1 -  -  -  	ld	de, (programDataDataPtr)
  492 D1:B7C8 D5 -  -  -  	push	de
  493 D1:B7C9 ED B0 -  -  		ldir
  494 D1:B7CB ED 53 4E EC 
              D1 -  -  -  		ld	(programDataDataPtr), de
  495 D1:B7D0 E1 -  -  -  	pop	hl
  496 D1:B7D1 C9 -  -  -  	ret
  497 D1:B7D2 -  -  -  -  	
  498 D1:B7D2 -  -  -  -  MoveStackEntryToOutput:
  499 D1:B7D2 2A 33 EC D1 	ld	hl, (stackPtr)
  500 D1:B7D6 11 5A 32 D0 	ld	de, stack
  501 D1:B7DA B7 -  -  -  	or	a, a
  502 D1:B7DB ED 52 -  -  	sbc	hl, de
  503 D1:B7DD C8 -  -  -  	ret	z
  504 D1:B7DE 19 -  -  -  	add	hl, de
  505 D1:B7DF 2B -  -  -  	dec	hl
  506 D1:B7E0 2B -  -  -  	dec	hl
  507 D1:B7E1 2B -  -  -  	dec	hl
  508 D1:B7E2 2B -  -  -  	dec	hl
  509 D1:B7E3 22 33 EC D1 	ld	(stackPtr), hl
  510 D1:B7E7 ED 5B 36 EC 
              D1 -  -  -  	ld	de, (outputPtr)
  511 D1:B7EC 7E -  -  -  	ld	a, (hl)
  512 D1:B7ED FE 3F -  -  	cp	a, typeFunction
  513 D1:B7EF 20 07 -  -  	jr	nz, +_
  514 D1:B7F1 23 -  -  -  	inc	hl
  515 D1:B7F2 7E -  -  -  	ld	a, (hl)
  516 D1:B7F3 2B -  -  -  	dec	hl
  517 D1:B7F4 FE 10 -  -  	cp	a, tLParen
  518 D1:B7F6 28 DA -  -  	jr	z, MoveStackEntryToOutput
  519 D1:B7F8 ED A0 -  -  _:	ldi
  520 D1:B7FA ED A0 -  -  	ldi
  521 D1:B7FC ED A0 -  -  	ldi
  522 D1:B7FE ED A0 -  -  	ldi
  523 D1:B800 ED 53 36 EC 
              D1 -  -  -  	ld	(outputPtr), de
  524 D1:B805 18 CB -  -  	jr	MoveStackEntryToOutput
Listing for file "ice.asm"
  448 D1:B807 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\putchar.asm"
    1 D1:B807 -  -  -  -  _PrintChar_ASM:
    2 D1:B807 E5 -  -  -  	push	hl
    3 D1:B808 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B808 01 00 00 00 		ld	bc,	0
    5 D1:B80C F5 -  -  -  		push	af
    6 D1:B80D F5 -  -  -  			push	af
    7 D1:B80E C5 -  -  -  				push	bc
    8 D1:B80F B7 -  -  -  					or	a,a
    9 D1:B810 ED 62 -  -  					sbc	hl,hl
   10 D1:B812 6F -  -  -  					ld	l,a
   11 D1:B813 11 75 B8 D1 					ld	de,	DefaultCharSpacing_ASM
   12 D1:B817 19 -  -  -  					add	hl,de
   13 D1:B818 7E -  -  -  					ld	a,(hl)
   14 D1:B819 32 5C B8 D1 					ld	(charwidth),a
   15 D1:B81D B7 -  -  -  					or	a,a
   16 D1:B81E ED 62 -  -  					sbc	hl,hl
   17 D1:B820 6F -  -  -  					ld	l,a
   18 D1:B821 ED 44 -  -  					neg
   19 D1:B823 32 2D B8 D1 					ld	(CharWidthDelta_ASM),a
   20 D1:B827 09 -  -  -  					add	hl,bc
   21 D1:B828 22 09 B8 D1 					ld	(TextXPos_ASM),hl
   22 D1:B82C -  -  -  -  CharWidthDelta_ASM	=$+1
   23 D1:B82C 11 FF FF FF 					ld	de,$FFFFFF
   24 D1:B830 21 40 01 00 					ld	hl,lcdWidth
   25 D1:B834 19 -  -  -  					add	hl,de
   26 D1:B835 22 69 B8 D1 					ld	(line_change),hl
   27 D1:B839 -  -  -  -  TextYPos_ASM	= $+1
   28 D1:B839 2E 00 -  -  					ld	l,0
   29 D1:B83B 26 A0 -  -  					ld	h,160
   30 D1:B83D ED 6C -  -  					mlt	hl
   31 D1:B83F 29 -  -  -  					add	hl,hl
   32 D1:B840 11 00 00 D4 					ld	de,vRAM
   33 D1:B844 19 -  -  -  					add	hl,de
   34 D1:B845 D1 -  -  -  				pop	de
   35 D1:B846 19 -  -  -  				add	hl,de
   36 D1:B847 F1 -  -  -  			pop	af
   37 D1:B848 EB -  -  -  			ex	de,hl
   38 D1:B849 B7 -  -  -  			or	a,a
   39 D1:B84A ED 62 -  -  			sbc	hl,hl
   40 D1:B84C D6 17 -  -  			sub	a, 23
   41 D1:B84E 6F -  -  -  			ld	l,a
   42 D1:B84F 29 -  -  -  			add	hl,hl
   43 D1:B850 29 -  -  -  			add	hl,hl
   44 D1:B851 29 -  -  -  			add	hl,hl
   45 D1:B852 01 F0 B8 D1 			ld	bc,	DefaultTextData_ASM
   46 D1:B856 09 -  -  -  			add	hl,bc
   47 D1:B857 06 08 -  -  			ld	b,8
   48 D1:B859 C5 -  -  -  iloop:		push	bc
   49 D1:B85A 4E -  -  -  				ld	c,(hl)
   50 D1:B85B -  -  -  -  charwidth =$+1
   51 D1:B85B 06 00 -  -  				ld	b,0
   52 D1:B85D EB -  -  -  				ex	de,hl
   53 D1:B85E -  -  -  -  color = $+1
   54 D1:B85E 3E 00 -  -  				ld	a, 0
   55 D1:B860 CB 21 -  -  cloop:			sla	c
   56 D1:B862 30 01 -  -  				jr	nc,+_
   57 D1:B864 77 -  -  -  				ld	(hl), a
   58 D1:B865 23 -  -  -  _:				inc	hl
   59 D1:B866 10 F8 -  -  				djnz	cloop
   60 D1:B868 -  -  -  -  line_change =$+1
   61 D1:B868 01 00 00 00 				ld	bc,0
   62 D1:B86C 09 -  -  -  				add	hl,bc
   63 D1:B86D EB -  -  -  				ex	de,hl
   64 D1:B86E 23 -  -  -  				inc	hl
   65 D1:B86F C1 -  -  -  			pop	bc
   66 D1:B870 10 E7 -  -  			djnz	iloop
   67 D1:B872 F1 -  -  -  		pop	af
   68 D1:B873 E1 -  -  -  	pop	hl
   69 D1:B874 C9 -  -  -  	ret
   70 D1:B875 -  -  -  -  
   71 D1:B875 -  -  -  -  DefaultCharSpacing_ASM:
   72 D1:B875 -  -  -  -  	;	  0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   73 D1:B875 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8	;	0
   74 D1:B885 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;	1
   75 D1:B895 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db	3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8	;	2
   76 D1:B8A5 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db	8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7	;	3
   77 D1:B8B5 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8	;	4
   78 D1:B8C5 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8	;	5
   79 D1:B8D5 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db	4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8	;	6
   80 D1:B8E5 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db	8,8,8,8,7,8,8,8,8,8,8			;	7
   81 D1:B8F0 -  -  -  -   
   82 D1:B8F0 -  -  -  -  ;-------------------------------------------------------------------------------
   83 D1:B8F0 -  -  -  -  DefaultTextData_ASM:
   84 D1:B8F0 FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF	;	_
   85 D1:B8F8 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00	;	.
   86 D1:B900 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00	;	.
   87 D1:B908 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	;	.
   88 D1:B910 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00	;	.
   89 D1:B918 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00	;	->
   90 D1:B920 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00	;	.
   91 D1:B928 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00	;	.
   92 D1:B930 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00	;	.
   93 D1:B938 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00	;	 
   94 D1:B940 C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00	;	!
   95 D1:B948 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00	;	"
   96 D1:B950 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00	;	#
   97 D1:B958 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00	;	$
   98 D1:B960 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00	;	%
   99 D1:B968 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00	;	&
  100 D1:B970 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00	;	'
  101 D1:B978 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00	;	(
  102 D1:B980 C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00	;	)
  103 D1:B988 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00	;	*
  104 D1:B990 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00	;	+
  105 D1:B998 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0	;	,
  106 D1:B9A0 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00	;	-
  107 D1:B9A8 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00	;	.
  108 D1:B9B0 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00	;	/
  109 D1:B9B8 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00	;	0
  110 D1:B9C0 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00	;	1
  111 D1:B9C8 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00	;	2
  112 D1:B9D0 FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00	;	3
  113 D1:B9D8 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00	;	4
  114 D1:B9E0 FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00	;	5
  115 D1:B9E8 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00	;	6
  116 D1:B9F0 FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00	;	7
  117 D1:B9F8 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00	;	8
  118 D1:BA00 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00	;	9
  119 D1:BA08 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00	;	:
  120 D1:BA10 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0	;	;
  121 D1:BA18 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00	;	<
  122 D1:BA20 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00	;	=
  123 D1:BA28 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00	;	>
  124 D1:BA30 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00	;	?
  125 D1:BA38 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00	;	@
  126 D1:BA40 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00	;	A
  127 D1:BA48 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00	;	B
  128 D1:BA50 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00	;	C
  129 D1:BA58 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00	;	D
  130 D1:BA60 FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00	;	E
  131 D1:BA68 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00	;	F
  132 D1:BA70 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00	;	G
  133 D1:BA78 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00	;	H
  134 D1:BA80 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00	;	I
  135 D1:BA88 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00	;	J
  136 D1:BA90 C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00	;	K
  137 D1:BA98 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00	;	L
  138 D1:BAA0 C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00	;	M
  139 D1:BAA8 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00	;	N
  140 D1:BAB0 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00	;	O
  141 D1:BAB8 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00	;	P
  142 D1:BAC0 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06	;	Q
  143 D1:BAC8 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00	;	R
  144 D1:BAD0 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00	;	S
  145 D1:BAD8 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00	;	T
  146 D1:BAE0 C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00	;	U
  147 D1:BAE8 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00	;	V
  148 D1:BAF0 C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00	;	W
  149 D1:BAF8 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00	;	X
  150 D1:BB00 C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00	;	Y
  151 D1:BB08 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00	;	Z
  152 D1:BB10 F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00	;	[
  153 D1:BB18 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00	;	\
  154 D1:BB20 F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00	;	]
  155 D1:BB28 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00	;	^
  156 D1:BB30 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF	;	_
  157 D1:BB38 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00	;	`
  158 D1:BB40 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00	;	a
  159 D1:BB48 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00	;	b
  160 D1:BB50 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00	;	c
  161 D1:BB58 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00	;	d
  162 D1:BB60 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00	;	e
  163 D1:BB68 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00	;	f
  164 D1:BB70 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC	;	g
  165 D1:BB78 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00	;	h
  166 D1:BB80 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00	;	i
  167 D1:BB88 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C	;	j
  168 D1:BB90 C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00	;	k
  169 D1:BB98 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00	;	l
  170 D1:BBA0 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00	;	m
  171 D1:BBA8 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00	;	n
  172 D1:BBB0 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00	;	o
  173 D1:BBB8 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0	;	p
  174 D1:BBC0 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06	;	q
  175 D1:BBC8 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00	;	r
  176 D1:BBD0 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00	;	s
  177 D1:BBD8 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00	;	t
  178 D1:BBE0 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00	;	u
  179 D1:BBE8 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00	;	v
  180 D1:BBF0 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00	;	w
  181 D1:BBF8 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00	;	x
  182 D1:BC00 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC	;	y
  183 D1:BC08 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00	;	z
  184 D1:BC10 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00	;	{
  185 D1:BC18 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00	;	|
  186 D1:BC20 E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00	;	}
  187 D1:BC28 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00	;	~
  188 D1:BC30 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00	;	.
Listing for file "ice.asm"
  449 D1:BC38 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\programs.asm"
    1 D1:BC38 -  -  -  -  FindNextGoodVar:
    2 D1:BC38 ED 5B 9A 25 
              D0 -  -  -  	ld	de, (pTemp)
    3 D1:BC3D CD 3C 01 02 	call	_CpHLDE
    4 D1:BC41 20 02 -  -  	jr	nz, FindContinue
    5 D1:BC43 3C -  -  -  	inc	a									;	return nz
    6 D1:BC44 C9 -  -  -  	ret
    7 D1:BC45 -  -  -  -  FindContinue:
    8 D1:BC45 7E -  -  -  	ld	a, (hl)
    9 D1:BC46 2B -  -  -  	dec	hl
   10 D1:BC47 2B -  -  -  	dec	hl
   11 D1:BC48 2B -  -  -  	dec	hl
   12 D1:BC49 FE 05 -  -  	cp	a, ProgObj
   13 D1:BC4B 28 04 -  -  	jr	z, FindGoodProgram
   14 D1:BC4D FE 06 -  -  	cp	a, ProtProgObj
   15 D1:BC4F 20 43 -  -  	jr	nz, FindWrongProgram
   16 D1:BC51 -  -  -  -  FindGoodProgram:
   17 D1:BC51 5E -  -  -  	ld	e, (hl)
   18 D1:BC52 2B -  -  -  	dec	hl
   19 D1:BC53 56 -  -  -  	ld	d, (hl)
   20 D1:BC54 2B -  -  -  	dec	hl
   21 D1:BC55 7E -  -  -  	ld	a, (hl)
   22 D1:BC56 CD 68 1D 02 	call	_SetDEUToA
   23 D1:BC5A FE D0 -  -  	cp	a, 0D0h
   24 D1:BC5C 30 0C -  -  	jr	nc, +_
   25 D1:BC5E E5 -  -  -  	push	hl
   26 D1:BC5F EB -  -  -  		ex	de, hl
   27 D1:BC60 11 09 00 00 		ld	de, 9
   28 D1:BC64 19 -  -  -  		add	hl, de
   29 D1:BC65 5E -  -  -  		ld	e, (hl)
   30 D1:BC66 1C -  -  -  		inc	e
   31 D1:BC67 19 -  -  -  		add	hl, de
   32 D1:BC68 EB -  -  -  		ex	de, hl
   33 D1:BC69 E1 -  -  -  	pop	hl
   34 D1:BC6A 13 -  -  -  _:	inc	de
   35 D1:BC6B 13 -  -  -  	inc	de
   36 D1:BC6C 1A -  -  -  	ld	a, (de)
   37 D1:BC6D FE 2C -  -  	cp	a, tii
   38 D1:BC6F 20 25 -  -  	jr	nz, FindWrongProgram2
   39 D1:BC71 2B -  -  -  	dec	hl
   40 D1:BC72 D5 -  -  -  	push	de
   41 D1:BC73 E5 -  -  -  		push	hl
   42 D1:BC74 2A 3C EC D1 			ld	hl, (ProgramNamesPtr)
   43 D1:BC78 11 08 00 00 			ld	de, 8
   44 D1:BC7C 19 -  -  -  			add	hl, de
   45 D1:BC7D 22 3C EC D1 			ld	(ProgramNamesPtr), hl
   46 D1:BC81 B7 -  -  -  			or	a, a
   47 D1:BC82 ED 52 -  -  			sbc	hl, de
   48 D1:BC84 EB -  -  -  			ex	de, hl
   49 D1:BC85 E1 -  -  -  		pop	hl
   50 D1:BC86 46 -  -  -  		ld	b, (hl)
   51 D1:BC87 48 -  -  -  		ld	c, b
   52 D1:BC88 2B -  -  -  		dec	hl
   53 D1:BC89 -  -  -  -  FindCopyProgName:
   54 D1:BC89 7E -  -  -  		ld	a, (hl)
   55 D1:BC8A 12 -  -  -  		ld	(de), a
   56 D1:BC8B 2B -  -  -  		dec	hl
   57 D1:BC8C 13 -  -  -  		inc	de
   58 D1:BC8D 10 FA -  -  		djnz	FindCopyProgName
   59 D1:BC8F AF -  -  -  		xor	a, a
   60 D1:BC90 12 -  -  -  		ld	(de), a
   61 D1:BC91 D1 -  -  -  	pop	de
   62 D1:BC92 BF -  -  -  	cp	a, a
   63 D1:BC93 C9 -  -  -  	ret
   64 D1:BC94 -  -  -  -  FindWrongProgram:
   65 D1:BC94 2B -  -  -  	dec	hl
   66 D1:BC95 2B -  -  -  	dec	hl
   67 D1:BC96 -  -  -  -  FindWrongProgram2:
   68 D1:BC96 2B -  -  -  	dec	hl
   69 D1:BC97 46 -  -  -  	ld	b, (hl)
   70 D1:BC98 2B -  -  -  	dec	hl
   71 D1:BC99 -  -  -  -  FindSkipProgramName:
   72 D1:BC99 2B -  -  -  	dec	hl
   73 D1:BC9A 10 FD -  -  	djnz	FindSkipProgramName
   74 D1:BC9C 18 9A -  -  	jr	FindNextGoodVar
Listing for file "ice.asm"
  450 D1:BC9E -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\hooks.asm"
    1 D1:BC9E -  -  -  -  InstallHooks:
    2 D1:BC9E 21 BE EC D1     ld      hl, ICEAppvar
    3 D1:BCA2 CD 20 03 02     call    _Mov9ToOP1
    4 D1:BCA6 CD 0C 05 02     call    _ChkFindSym
    5 D1:BCAA 38 13 -  -      jr      c, ++_
    6 D1:BCAC CD 98 1F 02     call    _ChkInRAM
    7 D1:BCB0 30 09 -  -      jr      nc, +_
    8 D1:BCB2 CD 48 14 02     call    _Arc_Unarc
    9 D1:BCB6 01 05 00 00     ld      bc, 5
   10 D1:BCBA 09 -  -  -      add     hl, bc
   11 D1:BCBB CD 88 05 02 _:  call    _DelVar
   12 D1:BCBF 21 A7 08 00 _:  ld      hl, Hooks_end - KeyHook_start
   13 D1:BCC3 CD 30 13 02     call    _CreateAppVar
   14 D1:BCC7 13 -  -  -      inc     de
   15 D1:BCC8 13 -  -  -      inc     de
   16 D1:BCC9 21 FA BC D1     ld      hl, KeyHook_start
   17 D1:BCCD 01 A7 08 00     ld      bc, Hooks_end - KeyHook_start
   18 D1:BCD1 ED B0 -  -      ldir
   19 D1:BCD3 CD C8 02 02     call    _OP4ToOP1
   20 D1:BCD7 CD 48 14 02     call    _Arc_Unarc
   21 D1:BCDB CD 0C 05 02     call    _ChkFindSym
   22 D1:BCDF 21 13 00 00     ld      hl, 19                                                        ;    archived program header+VAT entry
   23 D1:BCE3 19 -  -  -      add     hl, de
   24 D1:BCE4 CD CC 13 02     call    _SetGetKeyHook
   25 D1:BCE8 -  -  -  -      
   26 D1:BCE8 11 C8 07 00     ld      de, KeyHook_end - KeyHook_start
   27 D1:BCEC 19 -  -  -      add     hl, de
   28 D1:BCED CD F8 13 02     call    _SetTokenHook
   29 D1:BCF1 -  -  -  -      
   30 D1:BCF1 11 31 00 00     ld      de, TokenHook_end - TokenHook_start
   31 D1:BCF5 19 -  -  -      add     hl, de
   32 D1:BCF6 C3 C4 13 02     jp      _SetCursorhook
   33 D1:BCFA -  -  -  -      
   34 D1:BCFA -  -  -  -  KeyHook_start:
   35 D1:BCFA 83 -  -  -      .db    83h
   36 D1:BCFB B7 -  -  -      or      a, a
   37 D1:BCFC C8 -  -  -      ret     z
   38 D1:BCFD 47 -  -  -      ld      b, a
   39 D1:BCFE 3A E0 07 D0     ld      a, (cxCurApp)
   40 D1:BD02 FE 46 -  -      cp      a, cxPrgmEdit
   41 D1:BD04 78 -  -  -      ld      a, b
   42 D1:BD05 C0 -  -  -      ret     nz
   43 D1:BD06 F5 -  -  -      push    af
   44 D1:BD07 CD A0 20 02             call    _os_ClearStatusBarLow
   45 D1:BD0B FD CB AE 86             res     displayed_det, (iy+fAlways1)
   46 D1:BD0F F1 -  -  -      pop     af
   47 D1:BD10 FE 5A -  -      cp      a, kTrace
   48 D1:BD12 C0 -  -  -      ret     nz
   49 D1:BD13 -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BD13 CD A8 08 02     call    _CursorOff
   51 D1:BD17 16 00 -  -      ld      d, 0
   52 D1:BD19 -  -  -  -  DisplayTabWithTokens:
   53 D1:BD19 D5 -  -  -      push    de
   54 D1:BD1A CD 08 08 02             call    _ClrLCDFull
   55 D1:BD1E D1 -  -  -      pop     de
   56 D1:BD1F 21 1E 00 00     ld      hl, 30
   57 D1:BD23 22 D5 08 D0     ld      (penRow), hl
   58 D1:BD27 21 0C 00 00     ld      hl, 12
   59 D1:BD2B 22 D2 08 D0     ld      (penCol), hl
   60 D1:BD2F 06 00 -  -      ld      b, 0
   61 D1:BD31 7A -  -  -      ld      a, d
   62 D1:BD32 1E 03 -  -      ld      e, 3
   63 D1:BD34 ED 5C -  -      mlt     de
   64 D1:BD36 21 67 06 00     ld      hl, TabData - KeyHook_start
   65 D1:BD3A 19 -  -  -      add     hl, de
   66 D1:BD3B ED 5B DB 25 
              D0 -  -  -      ld      de, (rawKeyHookPtr)
   67 D1:BD40 19 -  -  -      add     hl, de
   68 D1:BD41 ED 27 -  -      ld      hl, (hl)
   69 D1:BD43 19 -  -  -      add     hl, de
   70 D1:BD44 57 -  -  -      ld      d, a
   71 D1:BD45 1E 00 -  -      ld      e, 0
   72 D1:BD47 18 0F -  -      jr      DisplayTokensLoop
   73 D1:BD49 -  -  -  -  KeyIsLeft:
   74 D1:BD49 7A -  -  -      ld      a, d
   75 D1:BD4A B7 -  -  -      or      a, a
   76 D1:BD4B 28 61 -  -      jr      z, KeyLoop
   77 D1:BD4D 15 -  -  -      dec     d
   78 D1:BD4E 18 C9 -  -      jr      DisplayTabWithTokens
   79 D1:BD50 -  -  -  -  KeyIsRight:
   80 D1:BD50 7A -  -  -      ld      a, d
   81 D1:BD51 FE 05 -  -      cp      a, 5
   82 D1:BD53 28 59 -  -      jr      z, KeyLoop
   83 D1:BD55 14 -  -  -      inc     d
   84 D1:BD56 18 C1 -  -      jr      DisplayTabWithTokens
   85 D1:BD58 -  -  -  -  DisplayTokensLoop:
   86 D1:BD58 78 -  -  -      ld      a, b
   87 D1:BD59 FE 10 -  -      cp      a, 16
   88 D1:BD5B 28 22 -  -      jr      z, StopDisplayingTokens
   89 D1:BD5D 04 -  -  -      inc     b
   90 D1:BD5E CD 34 08 02     call    _VPutS
   91 D1:BD62 E5 -  -  -      push    hl
   92 D1:BD63 D5 -  -  -              push    de
   93 D1:BD64 2A D5 08 D0                     ld    hl, (penRow)
   94 D1:BD68 11 0D 00 00                     ld    de, 13
   95 D1:BD6C 19 -  -  -                      add    hl, de
   96 D1:BD6D 22 D5 08 D0                     ld    (penRow), hl
   97 D1:BD71 21 0C 00 00                     ld    hl, 12
   98 D1:BD75 22 D2 08 D0                     ld    (penCol), hl
   99 D1:BD79 D1 -  -  -              pop     de
  100 D1:BD7A E1 -  -  -      pop     hl
  101 D1:BD7B 7E -  -  -      ld      a, (hl)
  102 D1:BD7C B7 -  -  -      or      a, a
  103 D1:BD7D 20 D9 -  -      jr      nz, DisplayTokensLoop
  104 D1:BD7F -  -  -  -  StopDisplayingTokens:
  105 D1:BD7F 21 01 00 00     ld      hl, 1
  106 D1:BD83 22 D2 08 D0     ld      (penCol), hl
  107 D1:BD87 -  -  -  -  GetRightCustomToken:
  108 D1:BD87 7B -  -  -      ld      a, e
  109 D1:BD88 42 -  -  -      ld      b, d
  110 D1:BD89 16 0D -  -      ld      d, 13
  111 D1:BD8B ED 5C -  -      mlt     de
  112 D1:BD8D 21 1E 00 00     ld      hl, 30
  113 D1:BD91 19 -  -  -      add     hl, de
  114 D1:BD92 50 -  -  -      ld      d, b
  115 D1:BD93 5F -  -  -      ld      e, a
  116 D1:BD94 22 D5 08 D0     ld      (penRow), hl
  117 D1:BD98 21 01 00 00     ld      hl, 1
  118 D1:BD9C 22 D2 08 D0     ld      (penCol), hl
  119 D1:BDA0 E5 -  -  -      push    hl
  120 D1:BDA1 D5 -  -  -              push    de
  121 D1:BDA2 3E 3E -  -                      ld      a, '>'
  122 D1:BDA4 CD 30 08 02                     call    _VPutMap
  123 D1:BDA8 D1 -  -  -              pop     de
  124 D1:BDA9 E1 -  -  -      pop     hl
  125 D1:BDAA 22 D2 08 D0     ld      (penCol), hl
  126 D1:BDAE -  -  -  -  KeyLoop:
  127 D1:BDAE CD 4C 01 02     call    _GetCSC
  128 D1:BDB2 B7 -  -  -      or      a, a
  129 D1:BDB3 28 F9 -  -      jr      z, KeyLoop
  130 D1:BDB5 FE 02 -  -      cp      a, skLeft
  131 D1:BDB7 28 90 -  -      jr      z, KeyIsLeft
  132 D1:BDB9 FE 03 -  -      cp      a, skRight
  133 D1:BDBB 28 93 -  -      jr      z, KeyIsRight
  134 D1:BDBD FE 04 -  -      cp      a, skUp
  135 D1:BDBF 20 1B -  -      jr      nz, KeyNotUp
  136 D1:BDC1 7B -  -  -      ld      a, e
  137 D1:BDC2 B7 -  -  -      or      a, a
  138 D1:BDC3 28 E9 -  -      jr      z, KeyLoop
  139 D1:BDC5 1D -  -  -      dec     e
  140 D1:BDC6 -  -  -  -  EraseCursor:
  141 D1:BDC6 D5 -  -  -      push    de
  142 D1:BDC7 3E 20 -  -              ld      a, ' '
  143 D1:BDC9 CD 30 08 02             call    _VPutMap
  144 D1:BDCD 3E 20 -  -              ld      a, ' '
  145 D1:BDCF CD 30 08 02             call    _VPutMap
  146 D1:BDD3 3E 20 -  -              ld      a, ' '
  147 D1:BDD5 CD 30 08 02             call    _VPutMap
  148 D1:BDD9 D1 -  -  -      pop     de
  149 D1:BDDA 18 AB -  -      jr      GetRightCustomToken
  150 D1:BDDC -  -  -  -  KeyNotUp:
  151 D1:BDDC FE 01 -  -      cp      a, skDown
  152 D1:BDDE 20 12 -  -      jr      nz, KeyNotDown
  153 D1:BDE0 7A -  -  -      ld      a, d
  154 D1:BDE1 FE 05 -  -      cp      a, 5
  155 D1:BDE3 7B -  -  -      ld      a, e
  156 D1:BDE4 20 04 -  -      jr      nz, +_
  157 D1:BDE6 FE 09 -  -      cp      a, (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BDE8 28 C4 -  -      jr      z, KeyLoop
  159 D1:BDEA 7B -  -  -  _:  ld      a, e
  160 D1:BDEB FE 0F -  -      cp      a, 16-1
  161 D1:BDED 28 BF -  -      jr      z, KeyLoop
  162 D1:BDEF 1C -  -  -      inc     e
  163 D1:BDF0 18 D4 -  -      jr      EraseCursor
  164 D1:BDF2 -  -  -  -  KeyNotDown:
  165 D1:BDF2 FE 0F -  -      cp      a, skClear
  166 D1:BDF4 28 75 -  -      jr      z, KeyIsClear
  167 D1:BDF6 FE 09 -  -      cp      a, skEnter
  168 D1:BDF8 20 B4 -  -      jr      nz, KeyLoop
  169 D1:BDFA 7B -  -  -      ld      a, e
  170 D1:BDFB 1E 10 -  -      ld      e, 16
  171 D1:BDFD ED 5C -  -      mlt     de
  172 D1:BDFF 83 -  -  -      add     a, e
  173 D1:BE00 D6 06 -  -      sub     a, AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BE02 38 4F -  -      jr      c, InsertCustomToken
  175 D1:BE04 21 1F EA D0     ld      hl, saveSScreen
  176 D1:BE08 36 B3 -  -      ld      (hl), tDet
  177 D1:BE0A 23 -  -  -      inc     hl
  178 D1:BE0B FE 0A -  -      cp      a, 10
  179 D1:BE0D 38 17 -  -      jr      c, +_
  180 D1:BE0F 57 -  -  -      ld      d, a
  181 D1:BE10 1E 0A -  -      ld      e, 10
  182 D1:BE12 AF -  -  -      xor     a, a
  183 D1:BE13 06 08 -  -      ld      b, 8
  184 D1:BE15 -  -  -  -  _loop:
  185 D1:BE15 CB 22 -  -      sla     d
  186 D1:BE17 17 -  -  -      rla
  187 D1:BE18 BB -  -  -      cp      a, e
  188 D1:BE19 38 02 -  -      jr      c, $+4
  189 D1:BE1B 93 -  -  -      sub     a, e
  190 D1:BE1C 14 -  -  -      inc     d
  191 D1:BE1D 10 F6 -  -      djnz    _loop
  192 D1:BE1F 5F -  -  -      ld      e, a
  193 D1:BE20 7A -  -  -      ld      a, d
  194 D1:BE21 C6 30 -  -      add     a, t0
  195 D1:BE23 77 -  -  -      ld      (hl), a
  196 D1:BE24 23 -  -  -      inc     hl
  197 D1:BE25 7B -  -  -      ld      a, e
  198 D1:BE26 C6 30 -  -  _:  add     a, t0
  199 D1:BE28 77 -  -  -      ld      (hl), a
  200 D1:BE29 23 -  -  -      inc     hl
  201 D1:BE2A 36 00 -  -      ld      (hl), 0
  202 D1:BE2C 21 1F EA D0     ld      hl, saveSScreen
  203 D1:BE30 -  -  -  -  InsertCFunctionLoop:
  204 D1:BE30 7E -  -  -      ld      a, (hl)
  205 D1:BE31 B7 -  -  -      or      a, a
  206 D1:BE32 28 37 -  -      jr      z, BufferSearch
  207 D1:BE34 ED 5B 3D 24 
              D0 -  -  -      ld      de, (editTail)
  208 D1:BE39 1A -  -  -      ld      a, (de)
  209 D1:BE3A FE 3F -  -      cp      a, tEnter
  210 D1:BE3C 16 00 -  -      ld      d, 0
  211 D1:BE3E 5E -  -  -      ld      e, (hl)
  212 D1:BE3F 28 09 -  -      jr      z, +_
  213 D1:BE41 E5 -  -  -      push    hl
  214 D1:BE42 CD 08 0D 02             call    _BufReplace
  215 D1:BE46 E1 -  -  -      pop     hl
  216 D1:BE47 23 -  -  -      inc     hl
  217 D1:BE48 18 E6 -  -      jr      InsertCFunctionLoop
  218 D1:BE4A E5 -  -  -  _:  push    hl
  219 D1:BE4B CD 00 0D 02             call    _BufInsert
  220 D1:BE4F E1 -  -  -      pop     hl
  221 D1:BE50 23 -  -  -      inc     hl
  222 D1:BE51 18 DD -  -      jr      InsertCFunctionLoop
  223 D1:BE53 -  -  -  -  InsertCustomToken:
  224 D1:BE53 C6 10 -  -      add     a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE55 5F -  -  -      ld      e, a
  226 D1:BE56 16 62 -  -      ld      d, tVarOut
  227 D1:BE58 2A 3A 24 D0     ld      hl, (editCursor)
  228 D1:BE5C 7E -  -  -      ld      a, (hl)
  229 D1:BE5D FE 3F -  -      cp      a, tEnter
  230 D1:BE5F 28 06 -  -      jr      z, +_
  231 D1:BE61 CD 08 0D 02     call    _BufReplace
  232 D1:BE65 18 04 -  -      jr      BufferSearch
  233 D1:BE67 CD 00 0D 02 _:  call    _BufInsert
  234 D1:BE6B -  -  -  -  KeyIsClear:
  235 D1:BE6B -  -  -  -  BufferSearch:
  236 D1:BE6B 01 00 00 00     ld      bc, 0
  237 D1:BE6F CD F8 0C 02 _:  call    _BufLeft
  238 D1:BE73 28 0C -  -      jr      z, BufferFound
  239 D1:BE75 7B -  -  -      ld      a, e
  240 D1:BE76 FE 3F -  -      cp      a, tEnter
  241 D1:BE78 28 03 -  -      jr      z, +_
  242 D1:BE7A 03 -  -  -      inc     bc
  243 D1:BE7B 18 F2 -  -      jr      -_
  244 D1:BE7D CD FC 0C 02 _:  call    _BufRight
  245 D1:BE81 -  -  -  -  BufferFound:
  246 D1:BE81 C5 -  -  -      push    bc
  247 D1:BE82 CD 08 08 02             call    _ClrLCDFull
  248 D1:BE86 CD 18 08 02             call    _ClrTxtShd
  249 D1:BE8A 11 BF 07 00             ld      de, CustomTokensProgramText - KeyHook_start
  250 D1:BE8E 2A DB 25 D0             ld      hl, (rawKeyHookPtr)
  251 D1:BE92 19 -  -  -              add     hl, de
  252 D1:BE93 AF -  -  -              xor     a, a
  253 D1:BE94 32 96 05 D0             ld      (curCol), a
  254 D1:BE98 32 95 05 D0             ld      (curRow), a
  255 D1:BE9C CD C0 07 02             call    _PutS
  256 D1:BEA0 21 5B 06 D0             ld      hl, progToEdit
  257 D1:BEA4 06 08 -  -              ld      b, 8
  258 D1:BEA6 7E -  -  -  _:          ld      a, (hl)
  259 D1:BEA7 B7 -  -  -              or      a, a
  260 D1:BEA8 28 07 -  -              jr      z, +_
  261 D1:BEAA CD B8 07 02             call    _PutC
  262 D1:BEAE 23 -  -  -              inc     hl
  263 D1:BEAF 10 F5 -  -              djnz    -_
  264 D1:BEB1 CD F0 07 02 _:          call    _NewLine
  265 D1:BEB5 3E 3A -  -              ld      a, ':'
  266 D1:BEB7 CD B8 07 02             call    _PutC
  267 D1:BEBB CD 68 0D 02             call    _DispEOW
  268 D1:BEBF C1 -  -  -              pop     bc
  269 D1:BEC0 -  -  -  -  MoveCursorOnce:
  270 D1:BEC0 78 -  -  -      ld      a, b
  271 D1:BEC1 B1 -  -  -      or      a, c
  272 D1:BEC2 28 07 -  -      jr      z, ReturnToEditor
  273 D1:BEC4 CD 4C 0D 02     call    _CursorRight
  274 D1:BEC8 0B -  -  -      dec     bc
  275 D1:BEC9 18 F5 -  -      jr      MoveCursorOnce
  276 D1:BECB -  -  -  -  ReturnToEditor:
  277 D1:BECB CD B0 08 02     call    _CursorOn
  278 D1:BECF 3C -  -  -      inc     a                                                                    ;    reset zero flag
  279 D1:BED0 3E 00 -  -      ld      a, 0
  280 D1:BED2 C9 -  -  -      ret
  281 D1:BED3 -  -  -  -  CustomTokensData:
  282 D1:BED3 -  -  -  -  Tab1:
  283 D1:BED3 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1:     .db "ExecHex(", 0
  284 D1:BEDC 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2:     .db "DefineSprite(", 0
  285 D1:BEEA 43 61 6C 6C 
              20 00 -  -  C3:     .db "Call ", 0
  286 D1:BEF0 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4:     .db "CompilePrgm(", 0
  287 D1:BEFD 53 65 74 42 
              41 53 49 43 
              56 61 72 28 
              00 -  -  -  C5:     .db "SetBASICVar(", 0
  288 D1:BF0A 47 65 74 42 
              41 53 49 43 
              56 61 72 28 
              00 -  -  -  C6:     .db "GetBASICVar(", 0
  289 D1:BF17 -  -  -  -  
  290 D1:BF17 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 84
  291 D1:BF17 -  -  -  -  
  292 D1:BF17 42 65 67 69 
              6E 00 -  -  C6_:   .db "Begin", 0
  293 D1:BF1D 45 6E 64 00 C7_:   .db "End", 0
  294 D1:BF21 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8_:   .db "SetColor", 0
  295 D1:BF2A 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9_:   .db "SetDefaultPalette", 0
  296 D1:BF3C 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10_:  .db "SetPalette", 0
  297 D1:BF47 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11_:  .db "FillScreen", 0
  298 D1:BF52 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12_:  .db "SetPixel", 0
  299 D1:BF5B 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13_:  .db "GetPixel", 0
  300 D1:BF64 47 65 74 44 
              72 61 77 00 C14_:  .db "GetDraw", 0
  301 D1:BF6C 53 65 74 44 
              72 61 77 00 C15_:  .db "SetDraw", 0
  302 D1:BF74 -  -  -  -  Tab2:
  303 D1:BF74 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16_:  .db "SwapDraw", 0
  304 D1:BF7D 42 6C 69 74 
              00 -  -  -  C17_:  .db "Blit", 0
  305 D1:BF82 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18_:  .db "BlitLines", 0
  306 D1:BF8C 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19_:  .db "BlitArea", 0
  307 D1:BF95 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20_:  .db "PrintChar", 0
  308 D1:BF9F 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21_:  .db "PrintInt", 0
  309 D1:BFA8 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22_:  .db "PrintUInt", 0
  310 D1:BFB2 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23_:  .db "PrintString", 0
  311 D1:BFBE 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24_:  .db "PrintStringXY", 0
  312 D1:BFCC 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25_:  .db "SetTextXY", 0
  313 D1:BFD6 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26_:  .db "SetTextBGColor", 0
  314 D1:BFE5 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27_:  .db "SetTextFGColor", 0
  315 D1:BFF4 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28_:  .db "SetTextTransparentColor", 0
  316 D1:C00C 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29_:  .db "SetCustomFontData", 0
  317 D1:C01E 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30_:  .db "SetCustomFontSpacing", 0
  318 D1:C033 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31_:  .db "SetMonospaceFont", 0
  319 D1:C044 -  -  -  -  Tab3:
  320 D1:C044 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32_:  .db "GetStringWidth", 0
  321 D1:C053 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33_:  .db "GetCharWidth", 0
  322 D1:C060 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34_:  .db "GetTextX", 0
  323 D1:C069 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35_:  .db "GetTextY", 0
  324 D1:C072 4C 69 6E 65 
              00 -  -  -  C36_:  .db "Line", 0
  325 D1:C077 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37_:  .db "HorizLine", 0
  326 D1:C081 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38_:  .db "VertLine", 0
  327 D1:C08A 43 69 72 63 
              6C 65 00 -  C39_:  .db "Circle", 0
  328 D1:C091 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40_:  .db "FillCircle", 0
  329 D1:C09C 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41_:  .db "Rectangle", 0
  330 D1:C0A6 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42_:  .db "FillRectangle", 0
  331 D1:C0B4 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43_:  .db "Line_NoClip", 0
  332 D1:C0C0 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44_:  .db "HorizLine_NoClip", 0
  333 D1:C0D1 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45_:  .db "VertLine_NoClip", 0
  334 D1:C0E1 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46_:  .db "FillCircle_NoClip", 0
  335 D1:C0F3 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47_:  .db "Rectangle_NoClip", 0
  336 D1:C104 -  -  -  -  Tab4:
  337 D1:C104 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48_:  .db "FillRectangle_NoClip", 0
  338 D1:C119 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49_:  .db "SetClipRegion", 0
  339 D1:C127 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50_:  .db "GetClipRegion", 0
  340 D1:C135 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51_:  .db "ShiftDown", 0
  341 D1:C13F 53 68 69 66 
              74 55 70 00 C52_:  .db "ShiftUp", 0
  342 D1:C147 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53_:  .db "ShiftLeft", 0
  343 D1:C151 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54_:  .db "ShiftRight", 0
  344 D1:C15C 54 69 6C 65 
              6D 61 70 00 C55_:  .db "Tilemap", 0
  345 D1:C164 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56_:  .db "Tilemap_NoClip", 0
  346 D1:C173 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57_:  .db "TransparentTilemap", 0
  347 D1:C186 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58_:  .db "TransparentTilemap_NoClip", 0
  348 D1:C1A0 54 69 6C 65 
              50 74 72 00 C59_:  .db "TilePtr", 0
  349 D1:C1A8 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60_:  .db "TilePtrMapped", 0
  350 D1:C1B6 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61_:  .db "LZDecompress", 0
  351 D1:C1C3 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62_:  .db "AllocSprite", 0
  352 D1:C1CF 53 70 72 69 
              74 65 00 -  C63_:  .db "Sprite", 0
  353 D1:C1D6 -  -  -  -  Tab5:
  354 D1:C1D6 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64_:  .db "TransparentSprite", 0
  355 D1:C1E8 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65_:  .db "Sprite_NoClip", 0
  356 D1:C1F6 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66_:  .db "TransparentSprite_NoClip", 0
  357 D1:C20F 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67_:  .db "GetSprite_NoClip", 0
  358 D1:C220 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68_:  .db "ScaledSprite_NoClip", 0
  359 D1:C234 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69_:  .db "ScaledTransparentSprite_NoClip", 0
  360 D1:C253 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70_:  .db "FlipSpriteY", 0
  361 D1:C25F 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71_:  .db "FlipSpriteX", 0
  362 D1:C26B 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72_:  .db "RotateSpriteC", 0
  363 D1:C279 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73_:  .db "RotateSpriteCC", 0
  364 D1:C288 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74_:  .db "RotateSpriteHalf", 0
  365 D1:C299 50 6F 6C 79 
              67 6F 6E 00 C75_:  .db "Polygon", 0
  366 D1:C2A1 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76_:  .db "Polygon_NoClip", 0
  367 D1:C2B0 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77_:  .db "FillTriangle", 0
  368 D1:C2BD 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78_:  .db "FillTriangle_NoClip", 0
  369 D1:C2D1 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79_:  .db "LZDecompressSprite", 0
  370 D1:C2E4 -  -  -  -  Tab6:
  371 D1:C2E4 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80_:  .db "SetTextScale", 0
  372 D1:C2F1 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81_:  .db "SetTransparentColor", 0
  373 D1:C305 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82_:  .db "ZeroScreen", 0
  374 D1:C310 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83_:  .db "SetTextConfig", 0
  375 D1:C31E 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84_:  .db "GetSpriteChar", 0
  376 D1:C32C 4C 69 67 68 
              74 65 6E 00 C85_:  .db "Lighten", 0
  377 D1:C334 44 61 72 6B 
              65 6E 00 -  C86_:  .db "Darken", 0
  378 D1:C33B 53 65 74 46 
              6F 6E 74 48 
              65 69 67 68 
              74 00 -  -  C87_:  .db "SetFontHeight", 0
  379 D1:C349 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              00 -  -  -  C88_:  .db "ScaledSprite", 0
  380 D1:C356 46 6C 6F 6F 
              64 46 69 6C 
              6C 00 -  -  C89_:  .db "FloodFill", 0
  381 D1:C360 00 -  -  -         .db 0
  382 D1:C361 -  -  -  -  TabData:
  383 D1:C361 D9 01 00 -      .dl Tab1 - KeyHook_start
  384 D1:C364 7A 02 00 -      .dl Tab2 - KeyHook_start
  385 D1:C367 4A 03 00 -      .dl Tab3 - KeyHook_start
  386 D1:C36A 0A 04 00 -      .dl Tab4 - KeyHook_start
  387 D1:C36D DC 04 00 -      .dl Tab5 - KeyHook_start
  388 D1:C370 EA 05 00 -      .dl Tab6 - KeyHook_start
  389 D1:C373 -  -  -  -      
  390 D1:C373 -  -  -  -  CData5:
  391 D1:C373 1D 02 00 -      .dl C6_ - KeyHook_start
  392 D1:C376 23 02 00 -      .dl C7_ - KeyHook_start
  393 D1:C379 27 02 00 -      .dl C8_ - KeyHook_start
  394 D1:C37C 30 02 00 -      .dl C9_ - KeyHook_start
  395 D1:C37F 42 02 00 -      .dl C10_ - KeyHook_start
  396 D1:C382 4D 02 00 -      .dl C11_ - KeyHook_start
  397 D1:C385 58 02 00 -      .dl C12_ - KeyHook_start
  398 D1:C388 61 02 00 -      .dl C13_ - KeyHook_start
  399 D1:C38B 6A 02 00 -      .dl C14_ - KeyHook_start
  400 D1:C38E 72 02 00 -      .dl C15_ - KeyHook_start
  401 D1:C391 7A 02 00 -      .dl C16_ - KeyHook_start
  402 D1:C394 83 02 00 -      .dl C17_ - KeyHook_start
  403 D1:C397 88 02 00 -      .dl C18_ - KeyHook_start
  404 D1:C39A 92 02 00 -      .dl C19_ - KeyHook_start
  405 D1:C39D 9B 02 00 -      .dl C20_ - KeyHook_start
  406 D1:C3A0 A5 02 00 -      .dl C21_ - KeyHook_start
  407 D1:C3A3 AE 02 00 -      .dl C22_ - KeyHook_start
  408 D1:C3A6 B8 02 00 -      .dl C23_ - KeyHook_start
  409 D1:C3A9 C4 02 00 -      .dl C24_ - KeyHook_start
  410 D1:C3AC D2 02 00 -      .dl C25_ - KeyHook_start
  411 D1:C3AF DC 02 00 -      .dl C26_ - KeyHook_start
  412 D1:C3B2 EB 02 00 -      .dl C27_ - KeyHook_start
  413 D1:C3B5 FA 02 00 -      .dl C28_ - KeyHook_start
  414 D1:C3B8 12 03 00 -      .dl C29_ - KeyHook_start
  415 D1:C3BB 24 03 00 -      .dl C30_ - KeyHook_start
  416 D1:C3BE 39 03 00 -      .dl C31_ - KeyHook_start
  417 D1:C3C1 4A 03 00 -      .dl C32_ - KeyHook_start
  418 D1:C3C4 59 03 00 -      .dl C33_ - KeyHook_start
  419 D1:C3C7 66 03 00 -      .dl C34_ - KeyHook_start
  420 D1:C3CA 6F 03 00 -      .dl C35_ - KeyHook_start
  421 D1:C3CD 78 03 00 -      .dl C36_ - KeyHook_start
  422 D1:C3D0 7D 03 00 -      .dl C37_ - KeyHook_start
  423 D1:C3D3 87 03 00 -      .dl C38_ - KeyHook_start
  424 D1:C3D6 90 03 00 -      .dl C39_ - KeyHook_start
  425 D1:C3D9 97 03 00 -      .dl C40_ - KeyHook_start
  426 D1:C3DC A2 03 00 -      .dl C41_ - KeyHook_start
  427 D1:C3DF AC 03 00 -      .dl C42_ - KeyHook_start
  428 D1:C3E2 BA 03 00 -      .dl C43_ - KeyHook_start
  429 D1:C3E5 C6 03 00 -      .dl C44_ - KeyHook_start
  430 D1:C3E8 D7 03 00 -      .dl C45_ - KeyHook_start
  431 D1:C3EB E7 03 00 -      .dl C46_ - KeyHook_start
  432 D1:C3EE F9 03 00 -      .dl C47_ - KeyHook_start
  433 D1:C3F1 0A 04 00 -      .dl C48_ - KeyHook_start
  434 D1:C3F4 1F 04 00 -      .dl C49_ - KeyHook_start
  435 D1:C3F7 2D 04 00 -      .dl C50_ - KeyHook_start
  436 D1:C3FA 3B 04 00 -      .dl C51_ - KeyHook_start
  437 D1:C3FD 45 04 00 -      .dl C52_ - KeyHook_start
  438 D1:C400 4D 04 00 -      .dl C53_ - KeyHook_start
  439 D1:C403 57 04 00 -      .dl C54_ - KeyHook_start
  440 D1:C406 62 04 00 -      .dl C55_ - KeyHook_start
  441 D1:C409 6A 04 00 -      .dl C56_ - KeyHook_start
  442 D1:C40C 79 04 00 -      .dl C57_ - KeyHook_start
  443 D1:C40F 8C 04 00 -      .dl C58_ - KeyHook_start
  444 D1:C412 A6 04 00 -      .dl C59_ - KeyHook_start
  445 D1:C415 AE 04 00 -      .dl C60_ - KeyHook_start
  446 D1:C418 BC 04 00 -      .dl C61_ - KeyHook_start
  447 D1:C41B C9 04 00 -      .dl C62_ - KeyHook_start
  448 D1:C41E D5 04 00 -      .dl C63_ - KeyHook_start
  449 D1:C421 DC 04 00 -      .dl C64_ - KeyHook_start
  450 D1:C424 EE 04 00 -      .dl C65_ - KeyHook_start
  451 D1:C427 FC 04 00 -      .dl C66_ - KeyHook_start
  452 D1:C42A 15 05 00 -      .dl C67_ - KeyHook_start
  453 D1:C42D 26 05 00 -      .dl C68_ - KeyHook_start
  454 D1:C430 3A 05 00 -      .dl C69_ - KeyHook_start
  455 D1:C433 59 05 00 -      .dl C70_ - KeyHook_start
  456 D1:C436 65 05 00 -      .dl C71_ - KeyHook_start
  457 D1:C439 71 05 00 -      .dl C72_ - KeyHook_start
  458 D1:C43C 7F 05 00 -      .dl C73_ - KeyHook_start
  459 D1:C43F 8E 05 00 -      .dl C74_ - KeyHook_start
  460 D1:C442 9F 05 00 -      .dl C75_ - KeyHook_start
  461 D1:C445 A7 05 00 -      .dl C76_ - KeyHook_start
  462 D1:C448 B6 05 00 -      .dl C77_ - KeyHook_start
  463 D1:C44B C3 05 00 -      .dl C78_ - KeyHook_start
  464 D1:C44E D7 05 00 -      .dl C79_ - KeyHook_start
  465 D1:C451 EA 05 00 -      .dl C80_ - KeyHook_start
  466 D1:C454 F7 05 00 -      .dl C81_ - KeyHook_start
  467 D1:C457 0B 06 00 -      .dl C82_ - KeyHook_start
  468 D1:C45A 16 06 00 -      .dl C83_ - KeyHook_start
  469 D1:C45D 24 06 00 -      .dl C84_ - KeyHook_start
  470 D1:C460 32 06 00 -      .dl C85_ - KeyHook_start
  471 D1:C463 3A 06 00 -      .dl C86_ - KeyHook_start
  472 D1:C466 41 06 00 -      .dl C87_ - KeyHook_start
  473 D1:C469 4F 06 00 -      .dl C88_ - KeyHook_start
  474 D1:C46C 5C 06 00 -      .dl C89_ - KeyHook_start
  475 D1:C46F -  -  -  -      
  476 D1:C46F -  -  -  -  #define AMOUNT_OF_CUSTOM_TOKENS 6
  477 D1:C46F 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  478 D1:C479 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  479 D1:C488 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  480 D1:C48F 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  481 D1:C49D 0C 53 65 74 
              42 41 53 49 
              43 56 61 72 
              28 00 -  -  Token5: .db 12, "SetBASICVar(", 0
  482 D1:C4AB 0C 47 65 74 
              42 41 53 49 
              43 56 61 72 
              28 00 -  -  Token6: .db 12, "GetBASICVar(", 0
  483 D1:C4B9 -  -  -  -  
  484 D1:C4B9 -  -  -  -  CustomTokensProgramText:
  485 D1:C4B9 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -      .db    "PROGRAM:", 0
  486 D1:C4C2 -  -  -  -  KeyHook_end:
  487 D1:C4C2 -  -  -  -  
  488 D1:C4C2 -  -  -  -  TokenHook_start:
  489 D1:C4C2 83 -  -  -      .db     83h
  490 D1:C4C3 7A -  -  -      ld      a, d
  491 D1:C4C4 FE 04 -  -      cp      a, 4
  492 D1:C4C6 C0 -  -  -      ret     nz
  493 D1:C4C7 7B -  -  -      ld      a, e
  494 D1:C4C8 FE 1A -  -      cp      a, 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  495 D1:C4CA D0 -  -  -      ret     nc
  496 D1:C4CB D6 05 -  -      sub     a, 5
  497 D1:C4CD ED 5B DB 25 
              D0 -  -  -      ld      de, (rawKeyHookPtr)
  498 D1:C4D2 21 E7 07 00     ld      hl, TokenHook_data - KeyHook_start
  499 D1:C4D6 19 -  -  -      add     hl, de
  500 D1:C4D7 01 00 00 00     ld      bc, 0
  501 D1:C4DB 4F -  -  -      ld      c, a
  502 D1:C4DC 09 -  -  -      add     hl, bc
  503 D1:C4DD ED 27 -  -      ld      hl, (hl)
  504 D1:C4DF 19 -  -  -      add     hl, de
  505 D1:C4E0 C9 -  -  -      ret
  506 D1:C4E1 -  -  -  -  TokenHook_data:
  507 D1:C4E1 74 07 00 -      .dl    Token1 - KeyHook_start - 1
  508 D1:C4E4 7E 07 00 -      .dl    Token2 - KeyHook_start - 1
  509 D1:C4E7 8D 07 00 -      .dl    Token3 - KeyHook_start - 1
  510 D1:C4EA 94 07 00 -      .dl    Token4 - KeyHook_start - 1
  511 D1:C4ED A2 07 00 -      .dl    Token5 - KeyHook_start - 1
  512 D1:C4F0 B0 07 00 -      .dl    Token6 - KeyHook_start - 1
  513 D1:C4F3 -  -  -  -  TokenHook_end:
  514 D1:C4F3 -  -  -  -  
  515 D1:C4F3 -  -  -  -  CursorHook_start:
  516 D1:C4F3 83 -  -  -      .db    83h
  517 D1:C4F4 FE 24 -  -      cp    a, 24h
  518 D1:C4F6 20 06 -  -      jr    nz, +_
  519 D1:C4F8 3C -  -  -      inc    a
  520 D1:C4F9 3A 99 05 D0     ld    a, (curUnder)
  521 D1:C4FD C9 -  -  -      ret
  522 D1:C4FE FE 22 -  -  _:    cp    a, 22h
  523 D1:C500 C0 -  -  -      ret    nz
  524 D1:C501 3A E0 07 D0     ld    a, (cxCurApp)
  525 D1:C505 FE 46 -  -      cp    a, cxPrgmEdit
  526 D1:C507 C0 -  -  -      ret    nz
  527 D1:C508 2A 3A 24 D0     ld    hl, (editCursor)
  528 D1:C50C 7E -  -  -      ld    a, (hl)
  529 D1:C50D FE B3 -  -      cp    a, tDet
  530 D1:C50F C0 -  -  -      ret    nz
  531 D1:C510 -  -  -  -  DrawDetText:
  532 D1:C510 FD CB AE 46     bit    displayed_det, (iy+fAlways1)
  533 D1:C514 C0 -  -  -      ret    nz
  534 D1:C515 2A 3D 24 D0     ld    hl, (editTail)
  535 D1:C519 23 -  -  -      inc    hl
  536 D1:C51A 7E -  -  -      ld    a, (hl)
  537 D1:C51B D6 30 -  -      sub    a, t0
  538 D1:C51D D8 -  -  -      ret    c
  539 D1:C51E FE 0A -  -      cp    a, t9-t0+1
  540 D1:C520 ED 4B 40 24 
              D0 -  -  -      ld    bc, (editBtm)
  541 D1:C525 11 00 00 00     ld    de, 0
  542 D1:C529 5F -  -  -      ld    e, a
  543 D1:C52A 38 02 -  -      jr    c, GetDetValueLoop
  544 D1:C52C -  -  -  -  WrongDetValue:
  545 D1:C52C 3C -  -  -      inc    a
  546 D1:C52D C9 -  -  -      ret
  547 D1:C52E -  -  -  -  GetDetValueLoop:
  548 D1:C52E 23 -  -  -      inc    hl
  549 D1:C52F B7 -  -  -      or    a, a
  550 D1:C530 ED 42 -  -      sbc    hl, bc
  551 D1:C532 28 1C -  -      jr    z, GetDetValueStop
  552 D1:C534 09 -  -  -      add    hl, bc
  553 D1:C535 7E -  -  -      ld    a, (hl)
  554 D1:C536 D6 30 -  -      sub    a, t0
  555 D1:C538 38 16 -  -      jr    c, GetDetValueStop
  556 D1:C53A FE 0A -  -      cp    a, t9-t0+1
  557 D1:C53C 30 12 -  -      jr    nc, GetDetValueStop
  558 D1:C53E E5 -  -  -      push    hl
  559 D1:C53F EB -  -  -          ex    de, hl
  560 D1:C540 29 -  -  -          add    hl, hl
  561 D1:C541 E5 -  -  -          push    hl
  562 D1:C542 D1 -  -  -          pop    de
  563 D1:C543 29 -  -  -          add    hl, hl
  564 D1:C544 29 -  -  -          add    hl, hl
  565 D1:C545 19 -  -  -          add    hl, de
  566 D1:C546 11 00 00 00         ld    de, 0
  567 D1:C54A 5F -  -  -          ld    e, a
  568 D1:C54B 19 -  -  -          add    hl, de
  569 D1:C54C EB -  -  -          ex    de, hl
  570 D1:C54D E1 -  -  -      pop    hl
  571 D1:C54E 18 DE -  -      jr    GetDetValueLoop
  572 D1:C550 -  -  -  -  GetDetValueStop:
  573 D1:C550 EB -  -  -      ex    de, hl
  574 D1:C551 11 54 00 00     ld    de, AMOUNT_OF_C_FUNCTIONS
  575 D1:C555 B7 -  -  -      or    a, a
  576 D1:C556 ED 52 -  -      sbc    hl, de
  577 D1:C558 30 D2 -  -      jr    nc, WrongDetValue
  578 D1:C55A 19 -  -  -      add    hl, de
  579 D1:C55B 26 03 -  -      ld    h, 3
  580 D1:C55D ED 6C -  -      mlt    hl
  581 D1:C55F 11 79 06 00     ld    de, CData5 - KeyHook_start
  582 D1:C563 19 -  -  -      add    hl, de
  583 D1:C564 ED 5B DB 25 
              D0 -  -  -      ld    de, (rawKeyHookPtr)
  584 D1:C569 19 -  -  -      add    hl, de
  585 D1:C56A ED 27 -  -      ld    hl, (hl)
  586 D1:C56C 19 -  -  -      add    hl, de
  587 D1:C56D 11 1C E7 00     ld    de, 000E71Ch
  588 D1:C571 40 ED 53 AC 
              26 -  -  -      ld.sis    (drawFGColor - 0D00000h), de
  589 D1:C576 40 ED 5B CC 
              2A -  -  -      ld.sis    de, (statusBarBGColor - 0D00000h)
  590 D1:C57B 40 ED 53 AA 
              26 -  -  -      ld.sis    (drawBGColor - 0D00000h), de
  591 D1:C580 3E 0E -  -      ld    a, 14
  592 D1:C582 32 D5 08 D0     ld    (penRow),a
  593 D1:C586 11 02 00 00     ld    de, 2
  594 D1:C58A 40 ED 53 D2 
              08 -  -  -      ld.sis    (penCol - 0D00000h), de
  595 D1:C58F CD 34 08 02     call    _VPutS
  596 D1:C593 11 FF FF 00     ld    de, $FFFF
  597 D1:C597 40 ED 53 AA 
              26 -  -  -      ld.sis    (drawBGColor - 0D00000h), de
  598 D1:C59C FD CB AE C6     set    displayed_det, (iy+fAlways1)
  599 D1:C5A0 C9 -  -  -      ret
  600 D1:C5A1 -  -  -  -  CursorHook_end:
  601 D1:C5A1 -  -  -  -  
  602 D1:C5A1 -  -  -  -  Hooks_end:
Listing for file "ice.asm"
  451 D1:C5A1 -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\functions.asm"
    1 D1:C5A1 -  -  -  -  ExecuteFunction:
    2 D1:C5A1 E5 -  -  -  	push	hl
    3 D1:C5A2 21 E0 EA D1 		ld	hl, FunctionsWithReturnValueArguments
    4 D1:C5A6 01 07 00 00 		ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C5AA ED B1 -  -  		cpir
    6 D1:C5AC 06 03 -  -  		ld	b, 3
    7 D1:C5AE ED 4C -  -  		mlt	bc
    8 D1:C5B0 21 E7 EA D1 		ld	hl, FunctionsWithReturnValueStart
    9 D1:C5B4 09 -  -  -  		add	hl, bc
   10 D1:C5B5 ED 27 -  -  		ld	hl, (hl)
   11 D1:C5B7 22 BD C5 D1 		ld	(JumpFunction), hl
   12 D1:C5BB E1 -  -  -  	pop	hl
   13 D1:C5BC -  -  -  -  JumpFunction = $+1
   14 D1:C5BC C3 00 00 00 	jp	0
   15 D1:C5C0 -  -  -  -  	
   16 D1:C5C0 -  -  -  -  functionPrgm:
   17 D1:C5C0 CD B2 AC D1 	call	MaybeInsertIYFlags
   18 D1:C5C4 3E 21 -  -  	ld	a, 021h
   19 D1:C5C6 CD 26 AD D1 	call	InsertA															;	ld hl, *
   20 D1:C5CA CD 3D AD D1 	call	InsertProgramPtrToDataOffset
   21 D1:C5CE 2A 4E EC D1 	ld	hl, (programDataDataPtr)
   22 D1:C5D2 E5 -  -  -  	push	hl
   23 D1:C5D3 CD 5E AC D1 		call	InsertHL														;	ld hl, programname
   24 D1:C5D7 E1 -  -  -  	pop	hl
   25 D1:C5D8 36 05 -  -  	ld	(hl), ProgObj
   26 D1:C5DA CD EC B1 D1 	call	GetProgramName
   27 D1:C5DE 23 -  -  -  	inc	hl
   28 D1:C5DF 22 4E EC D1 	ld	(programDataDataPtr), hl
   29 D1:C5E3 3E CD -  -  	ld	a, 0CDh
   30 D1:C5E5 21 20 03 02 	ld	hl, _Mov9ToOP1
   31 D1:C5E9 CD 5A AC D1 	call	InsertAHL															;	call _Mov9ToOP1
   32 D1:C5ED 3E FD -  -  	ld	a, 0FDh
   33 D1:C5EF 21 CB 08 CE 	ld	hl, 0CE08CBh
   34 D1:C5F3 CD 5A AC D1 	call	InsertAHL															;	set 1, (iy+8)
   35 D1:C5F7 3E CD -  -  	ld	a, 0CDh
   36 D1:C5F9 21 00 0F 02 	ld	hl, _ParseInp
   37 D1:C5FD CD 5A AC D1 	call	InsertAHL															;	call _ParseInp
   38 D1:C601 3E FD -  -  	ld	a, 0FDh
   39 D1:C603 21 CB 08 8E 	ld	hl, 08E08CBh
   40 D1:C607 C3 5A AC D1 	jp	InsertAHL															;	res 1, (iy+8)
   41 D1:C60B -  -  -  -  	
   42 D1:C60B -  -  -  -  
   43 D1:C60B -  -  -  -  functionOutput:
   44 D1:C60B CD B2 AC D1 	call	MaybeInsertIYFlags
   45 D1:C60F 3E 01 -  -  	ld	a, 1
   46 D1:C611 32 56 EC D1 	ld	(openedParensF), a
   47 D1:C615 CD 28 10 02 	call	_IncFetch
   48 D1:C619 CD 83 B2 D1 	call	ParseExpression
   49 D1:C61D FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   50 D1:C621 FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   51 D1:C625 CA 47 AF D1 	jp	z, ErrorSyntax
   52 D1:C629 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   53 D1:C62D 20 08 -  -  	jr	nz, OutputRowIsNumber
   54 D1:C62F -  -  -  -  OutputRowIsVariable:
   55 D1:C62F 3E 7D -  -  	ld	a, 07Dh
   56 D1:C631 CD 26 AD D1 	call	InsertA															;	ld a, l
   57 D1:C635 18 0E -  -  	jr	+_
   58 D1:C637 -  -  -  -  OutputRowIsNumber:
   59 D1:C637 2A 39 EC D1 	ld	hl, (programPtr)
   60 D1:C63B 2B -  -  -  	dec	hl
   61 D1:C63C 2B -  -  -  	dec	hl
   62 D1:C63D 22 39 EC D1 	ld	(programPtr), hl
   63 D1:C641 2B -  -  -  	dec	hl
   64 D1:C642 2B -  -  -  	dec	hl
   65 D1:C643 36 3E -  -  	ld	(hl), 03Eh															;	ld a, *
   66 D1:C645 3E 32 -  -  _:	ld	a, 032h
   67 D1:C647 21 95 05 D0 	ld	hl, curRow
   68 D1:C64B CD 5A AC D1 	call	InsertAHL															;	ld (curRow), a
   69 D1:C64F CD 28 10 02 	call	_IncFetch
   70 D1:C653 CD 83 B2 D1 	call	ParseExpression
   71 D1:C657 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   72 D1:C65B FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   73 D1:C65F CA 47 AF D1 	jp	z, ErrorSyntax
   74 D1:C663 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   75 D1:C667 20 08 -  -  	jr	nz, OutputColumnIsNumber
   76 D1:C669 -  -  -  -  OutputColumnIsVariable:
   77 D1:C669 3E 7D -  -  	ld	a, 07Dh
   78 D1:C66B CD 26 AD D1 	call	InsertA															;	ld a, l
   79 D1:C66F 18 0E -  -  	jr	+_
   80 D1:C671 -  -  -  -  OutputColumnIsNumber:
   81 D1:C671 2A 39 EC D1 	ld	hl, (programPtr)
   82 D1:C675 2B -  -  -  	dec	hl
   83 D1:C676 2B -  -  -  	dec	hl
   84 D1:C677 22 39 EC D1 	ld	(programPtr), hl
   85 D1:C67B 2B -  -  -  	dec	hl
   86 D1:C67C 2B -  -  -  	dec	hl
   87 D1:C67D 36 3E -  -  	ld	(hl), 03Eh															;	ld a, *
   88 D1:C67F 3E 32 -  -  _:	ld	a, 032h
   89 D1:C681 21 96 05 D0 	ld	hl, curCol
   90 D1:C685 CD 5A AC D1 	call	InsertAHL															;	ld (curCol), a
   91 D1:C689 F6 01 -  -  	or	a, 1																	;	rest zero flag
   92 D1:C68B CD A6 C6 D1 	call	DisplayNumberOrString
   93 D1:C68F C2 47 AF D1 	jp	nz, ErrorSyntax
   94 D1:C693 C9 -  -  -  	ret
   95 D1:C694 -  -  -  -  	
   96 D1:C694 -  -  -  -  functionDisp:
   97 D1:C694 CD B2 AC D1 	call	MaybeInsertIYFlags
   98 D1:C698 3E 01 -  -  	ld	a, 1
   99 D1:C69A 32 56 EC D1 	ld	(openedParensF), a
  100 D1:C69E 3D -  -  -  	dec	a																	;	set zero flag
  101 D1:C69F CD A6 C6 D1 	call	DisplayNumberOrString
  102 D1:C6A3 C8 -  -  -  	ret	z
  103 D1:C6A4 18 EE -  -  	jr	functionDisp
  104 D1:C6A6 -  -  -  -  	
  105 D1:C6A6 -  -  -  -  DisplayNumberOrString:
  106 D1:C6A6 F5 -  -  -  	push	af
  107 D1:C6A7 CD 28 10 02 		call	_IncFetch
  108 D1:C6AB CD 83 B2 D1 		call	ParseExpression
  109 D1:C6AF ED 5B 39 EC 
              D1 -  -  -  		ld	de, (programPtr)
  110 D1:C6B4 01 0E 00 00 		ld	bc, 14
  111 D1:C6B8 FD CB C0 7E 		bit	output_is_string, (iy+fExpression1)
  112 D1:C6BC 20 0F -  -  		jr	nz, DispString
  113 D1:C6BE 21 B7 EF D1 		ld	hl, DispNumberRoutine
  114 D1:C6C2 F1 -  -  -  	pop	af
  115 D1:C6C3 28 16 -  -  	jr	z, +_
  116 D1:C6C5 21 B1 EF D1 	ld	hl, DispNumberRoutine-6
  117 D1:C6C9 0E 08 -  -  	ld	c, 8
  118 D1:C6CB 18 0E -  -  	jr	+_
  119 D1:C6CD -  -  -  -  DispString:
  120 D1:C6CD 21 C5 EF D1 		ld	hl, DispStringRoutine
  121 D1:C6D1 0B -  -  -  		dec	bc
  122 D1:C6D2 F1 -  -  -  	pop	af
  123 D1:C6D3 28 06 -  -  	jr	z, +_
  124 D1:C6D5 21 CA EF D1 	ld	hl, DispStringRoutine+5
  125 D1:C6D9 0E 08 -  -  	ld	c, 8
  126 D1:C6DB ED B0 -  -  _:	ldir
  127 D1:C6DD ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
  128 D1:C6E2 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  129 D1:C6E6 C9 -  -  -  	ret
  130 D1:C6E7 -  -  -  -  	
  131 D1:C6E7 -  -  -  -  functionLbl:
  132 D1:C6E7 DD 2A 3F EC 
              D1 -  -  -  	ld	    ix, (labelPtr)
  133 D1:C6EC 2A 39 EC D1 	ld	    hl, (programPtr)
  134 D1:C6F0 DD 2F 00 -  	ld	    (ix), hl
  135 D1:C6F3 2A 1A 23 D0 	ld	    hl, (curPC)
  136 D1:C6F7 23 -  -  -  	inc	    hl
  137 D1:C6F8 DD 2F 03 -  	ld	    (ix+3), hl
  138 D1:C6FB ED 22 06 -  	lea	    hl, ix+6
  139 D1:C6FE 22 3F EC D1 	ld	    (labelPtr), hl
  140 D1:C702 06 D6 -  -      ld      b, tLbl
  141 D1:C704 -  -  -  -  InsertLblGotoToDebugSection:
  142 D1:C704 FD CB AE 56     bit     debug_on, (iy+fAlways1)
  143 D1:C708 28 1A -  -      jr      z, +_
  144 D1:C70A 21 3E 00 11     ld      hl, 011003Eh
  145 D1:C70E 60 -  -  -      ld      h, b
  146 D1:C70F CD 5E AC D1     call    InsertHL                                                            ; ld a, * \ ld de, *
  147 D1:C713 CD 3D AD D1     call    InsertProgramPtrToDataOffset
  148 D1:C717 2A 4E EC D1     ld      hl, (programDataDataPtr)
  149 D1:C71B CD 5E AC D1     call    InsertHL
  150 D1:C71F DD 21 4E EC 
              D1 -  -  -      ld      ix, programDataDataPtr
  151 D1:C724 CD 28 10 02 _:  call    _IncFetch
  152 D1:C728 38 14 -  -      jr      c, +_
  153 D1:C72A FE 3F -  -      cp      a, tEnter
  154 D1:C72C 28 10 -  -      jr      z, +_
  155 D1:C72E FD CB AE 56     bit     debug_on, (iy+fAlways1)
  156 D1:C732 28 F0 -  -      jr      z, -_
  157 D1:C734 DD 27 00 -      ld      hl, (ix)
  158 D1:C737 77 -  -  -      ld      (hl), a
  159 D1:C738 23 -  -  -      inc     hl
  160 D1:C739 DD 2F 00 -      ld      (ix), hl
  161 D1:C73C 18 E6 -  -      jr      -_
  162 D1:C73E FD CB AE 56 _:  bit     debug_on, (iy+fAlways1)
  163 D1:C742 C8 -  -  -      ret     z
  164 D1:C743 DD 27 00 -      ld      hl, (ix)
  165 D1:C746 36 00 -  -      ld      (hl), 0
  166 D1:C748 23 -  -  -      inc     hl
  167 D1:C749 DD 2F 00 -      ld      (ix), hl
  168 D1:C74C 3E CD -  -  _:  ld      a, 0CDh
  169 D1:C74E CD 26 AD D1     call    InsertA                                                             ; call *
  170 D1:C752 CD 3D AD D1     call    InsertProgramPtrToDataOffset
  171 D1:C756 FD CB CF 5E     bit     has_already_debug, (iy+fProgram2)
  172 D1:C75A FD CB CF DE     set     has_already_debug, (iy+fProgram2)
  173 D1:C75E 20 1F -  -      jr      nz, +_
  174 D1:C760 2A 4E EC D1     ld      hl, (programDataDataPtr)
  175 D1:C764 E5 -  -  -      push    hl
  176 D1:C765 CD 5E AC D1             call    InsertHL
  177 D1:C769 D1 -  -  -      pop     de
  178 D1:C76A ED 53 51 EC 
              D1 -  -  -      ld      (debugCodePtr), de
  179 D1:C76F 21 06 F1 D1     ld      hl, InsertDebugCode
  180 D1:C773 01 15 00 00     ld      bc, InsertDebugCodeEnd - InsertDebugCode
  181 D1:C777 ED B0 -  -      ldir
  182 D1:C779 ED 53 4E EC 
              D1 -  -  -      ld      (programDataDataPtr), de
  183 D1:C77E C9 -  -  -      ret
  184 D1:C77F 2A 51 EC D1 _:  ld      hl, (debugCodePtr)
  185 D1:C783 C3 5E AC D1     jp      InsertHL
  186 D1:C787 -  -  -  -  	
  187 D1:C787 -  -  -  -  functionCall:
  188 D1:C787 3E CD -  -  	ld	    a, 0CDh
  189 D1:C789 18 02 -  -  	jr	    +_
  190 D1:C78B -  -  -  -  functionGoto:
  191 D1:C78B 3E C3 -  -  	ld	    a, 0C3h
  192 D1:C78D DD 2A 42 EC 
              D1 -  -  -  _:	ld	    ix, (gotoPtr)
  193 D1:C792 2A 39 EC D1 	ld	    hl, (programPtr)
  194 D1:C796 11 01 00 00     ld      de, 1
  195 D1:C79A FD CB AE 56     bit     debug_on, (iy+fAlways1)
  196 D1:C79E 28 02 -  -      jr      z, +_
  197 D1:C7A0 1E 0B -  -      ld      e, 4+4+2+1
  198 D1:C7A2 19 -  -  -  _:  add     hl, de
  199 D1:C7A3 DD 2F 00 -      ld	    (ix), hl
  200 D1:C7A6 2A 1A 23 D0 	ld	    hl, (curPC)
  201 D1:C7AA 23 -  -  -  	inc	    hl
  202 D1:C7AB DD 2F 03 -  	ld	    (ix+3), hl
  203 D1:C7AE ED 22 06 -  	lea	    hl, ix+6
  204 D1:C7B1 22 42 EC D1 	ld	    (gotoPtr), hl
  205 D1:C7B5 F5 -  -  -      push    af
  206 D1:C7B6 06 D7 -  -              ld      b, tGoto
  207 D1:C7B8 CD 04 C7 D1             call    InsertLblGotoToDebugSection
  208 D1:C7BC F1 -  -  -      pop     af
  209 D1:C7BD C3 5A AC D1     jp      InsertAHL                                                       ;   jp/call RANDOM
  210 D1:C7C1 -  -  -  -      
  211 D1:C7C1 -  -  -  -  functionSkipLine:
  212 D1:C7C1 2A 1D 23 D0 	ld	hl, (endPC)
  213 D1:C7C5 ED 5B 1A 23 
              D0 -  -  -  	ld	de, (curPC)
  214 D1:C7CA B7 -  -  -  	or	a
  215 D1:C7CB ED 52 -  -  	sbc	hl, de
  216 D1:C7CD D8 -  -  -  	ret	c
  217 D1:C7CE 23 -  -  -  	inc	hl
  218 D1:C7CF E5 -  -  -  	push	hl
  219 D1:C7D0 C1 -  -  -  	pop	bc
  220 D1:C7D1 EB -  -  -  	ex	de, hl
  221 D1:C7D2 3E 3F -  -  	ld	a, tEnter
  222 D1:C7D4 ED B1 -  -  	cpir
  223 D1:C7D6 2B -  -  -  	dec	hl
  224 D1:C7D7 22 1A 23 D0 	ld	(curPC), hl
  225 D1:C7DB C9 -  -  -  	ret
  226 D1:C7DC -  -  -  -  	
  227 D1:C7DC -  -  -  -  functionReturn:
  228 D1:C7DC CD C0 0F 02 	call	_NxtFetch
  229 D1:C7E0 30 04 -  -  	jr	nc, +_
  230 D1:C7E2 FD CB C0 D6 	set	last_token_is_ret, (iy+fExpression1)
  231 D1:C7E6 FE CE -  -  _:	cp	tIf
  232 D1:C7E8 20 1C -  -  	jr	nz, +_
  233 D1:C7EA CD 28 10 02 	call	_IncFetch
  234 D1:C7EE CD 28 10 02 	call	_IncFetch
  235 D1:C7F2 CD 83 B2 D1 	call	ParseExpression
  236 D1:C7F6 3E 19 -  -  	ld	a, 019h
  237 D1:C7F8 CD 26 AD D1 	call	InsertA															;	add hl, de
  238 D1:C7FC 3E B7 -  -  	ld	a, 0B7h
  239 D1:C7FE 21 ED 52 C0 	ld	hl, 0C052EDh
  240 D1:C802 C3 5A AC D1 	jp	InsertAHL															;	or a \ sbc hl, de \ ret nz
  241 D1:C806 3E C9 -  -  _:	ld	a, 0C9h
  242 D1:C808 C3 26 AD D1 	jp	InsertA																;	ret
  243 D1:C80C -  -  -  -  		
  244 D1:C80C -  -  -  -  functionRepeat:
  245 D1:C80C 21 59 EC D1 	ld	hl, amountOfEnds
  246 D1:C810 34 -  -  -  	inc	(hl)
  247 D1:C811 2A 39 EC D1 	ld	hl, (programPtr)
  248 D1:C815 11 81 7C FC 	ld	de, UserMem - program
  249 D1:C819 19 -  -  -  	add	hl, de
  250 D1:C81A E5 -  -  -  	push	hl
  251 D1:C81B 2A 1A 23 D0 		ld	hl, (curPC)
  252 D1:C81F 23 -  -  -  		inc	hl
  253 D1:C820 E5 -  -  -  		push	hl
  254 D1:C821 CD 28 10 02 _:			call	_IncFetch
  255 D1:C825 DA 47 AF D1 			jp	c, ErrorSyntax
  256 D1:C829 FE 3F -  -  			cp	tEnter
  257 D1:C82B 20 F4 -  -  			jr	nz, -_
  258 D1:C82D CD A7 AA D1 			call	ParseProgramUntilEnd
  259 D1:C831 FE D0 -  -  			cp	tElse
  260 D1:C833 CA 47 AF D1 			jp	z, ErrorSyntax
  261 D1:C837 ED 5B 1A 23 
              D0 -  -  -  			ld	de, (curPC)
  262 D1:C83C E1 -  -  -  		pop	hl
  263 D1:C83D 22 1A 23 D0 		ld	(curPC), hl
  264 D1:C841 D5 -  -  -  		push	de
  265 D1:C842 CD 83 B2 D1 			call	ParseExpression
  266 D1:C846 D1 -  -  -  		pop	de
  267 D1:C847 ED 53 1A 23 
              D0 -  -  -  		ld	(curPC), de
  268 D1:C84C FD CB C0 66 		bit	output_is_number, (iy+fExpression1)
  269 D1:C850 C2 D6 C8 D1 		jp	nz, functionRepeatInfinite
  270 D1:C854 FD CB C0 6E 		bit	ans_set_z_flag, (iy+fExpression1)
  271 D1:C858 28 14 -  -  		jr	z, +_
  272 D1:C85A 2A 39 EC D1 		ld	hl, (programPtr)
  273 D1:C85E 2B -  -  -  		dec	hl
  274 D1:C85F 2B -  -  -  		dec	hl
  275 D1:C860 2B -  -  -  		dec	hl
  276 D1:C861 7E -  -  -  		ld	a, (hl)
  277 D1:C862 DD 67 -  -  		ld	ixh, a
  278 D1:C864 2B -  -  -  		dec	hl
  279 D1:C865 2B -  -  -  		dec	hl
  280 D1:C866 2B -  -  -  		dec	hl
  281 D1:C867 2B -  -  -  		dec	hl
  282 D1:C868 22 39 EC D1 		ld	(programPtr), hl
  283 D1:C86C 18 1D -  -  		jr	functionRepeatInsert
  284 D1:C86E FD CB BF 4E _:		bit	last_token_was_not, (iy+fExpression2)
  285 D1:C872 28 0D -  -  		jr	z, InsertNormalRepeat2
  286 D1:C874 2A 39 EC D1 		ld	hl, (programPtr)
  287 D1:C878 11 F8 FF FF 		ld	de, -8
  288 D1:C87C 19 -  -  -  		add	hl, de
  289 D1:C87D 22 39 EC D1 		ld	(programPtr), hl
  290 D1:C881 -  -  -  -  InsertNormalRepeat2:
  291 D1:C881 3E 19 -  -  		ld	a, 019h
  292 D1:C883 21 B7 ED 52 		ld	hl, 052EDB7h
  293 D1:C887 CD 5A AC D1 		call	InsertAHL														;	add hl, de \ or a \ sbc hl, de
  294 D1:C88B -  -  -  -  functionRepeatInsert:
  295 D1:C88B 01 81 7C FC 		ld	bc, UserMem - program
  296 D1:C88F 09 -  -  -  		add	hl, bc
  297 D1:C890 D1 -  -  -  	pop	de
  298 D1:C891 B7 -  -  -  	or	a
  299 D1:C892 ED 52 -  -  	sbc	hl, de
  300 D1:C894 7C -  -  -  	ld	a, h
  301 D1:C895 B7 -  -  -  	or	a
  302 D1:C896 20 23 -  -  	jr	nz, functionRepeatLarge
  303 D1:C898 7D -  -  -  	ld	a, l
  304 D1:C899 2F -  -  -  	cpl
  305 D1:C89A 3D -  -  -  	dec	a
  306 D1:C89B FE 80 -  -  	cp	%10000000
  307 D1:C89D 38 1C -  -  	jr	c, functionRepeatLarge
  308 D1:C89F -  -  -  -  functionRepeatSmall:
  309 D1:C89F 47 -  -  -  	ld	b, a
  310 D1:C8A0 3E 28 -  -  	ld	a, 028h
  311 D1:C8A2 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  312 D1:C8A6 28 02 -  -  	jr	z, +_
  313 D1:C8A8 DD 7C -  -  	ld	a, ixh
  314 D1:C8AA FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  315 D1:C8AE 28 02 -  -  	jr	z, $+4
  316 D1:C8B0 EE 08 -  -  	xor	8
  317 D1:C8B2 CD 26 AD D1 	call	InsertA															;	jr [n]z, *
  318 D1:C8B6 78 -  -  -  	ld	a, b
  319 D1:C8B7 C3 26 AD D1 	jp	InsertA																;	jr [n]z, *
  320 D1:C8BB -  -  -  -  functionRepeatLarge:
  321 D1:C8BB EB -  -  -  	ex	de, hl
  322 D1:C8BC FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  323 D1:C8C0 28 06 -  -  	jr	z, +_
  324 D1:C8C2 DD 7C -  -  	ld	a, ixh
  325 D1:C8C4 C6 A2 -  -  	add	a, 0A2h
  326 D1:C8C6 18 02 -  -  	jr	++_
  327 D1:C8C8 3E CA -  -  _:	ld	a, 0CAh
  328 D1:C8CA FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  329 D1:C8CE 28 02 -  -  	jr	z, $+4
  330 D1:C8D0 EE 08 -  -  	xor	8
  331 D1:C8D2 C3 5A AC D1 	jp	InsertAHL															;	jp [n]z, XXXXXX
  332 D1:C8D6 -  -  -  -  functionRepeatInfinite:
  333 D1:C8D6 2A 39 EC D1 		ld	hl, (programPtr)
  334 D1:C8DA 2B -  -  -  		dec	hl
  335 D1:C8DB 2B -  -  -  		dec	hl
  336 D1:C8DC 2B -  -  -  		dec	hl
  337 D1:C8DD 2B -  -  -  		dec	hl
  338 D1:C8DE 22 39 EC D1 		ld	(programPtr), hl
  339 D1:C8E2 E5 -  -  -  		push	hl
  340 D1:C8E3 23 -  -  -  			inc	hl
  341 D1:C8E4 ED 27 -  -  			ld	hl, (hl)
  342 D1:C8E6 19 -  -  -  			add	hl, de
  343 D1:C8E7 B7 -  -  -  			or	a
  344 D1:C8E8 ED 52 -  -  			sbc	hl, de
  345 D1:C8EA E1 -  -  -  		pop	hl
  346 D1:C8EB C0 -  -  -  		ret	nz
  347 D1:C8EC 11 81 7C FC 		ld	de, UserMem - program
  348 D1:C8F0 19 -  -  -  		add	hl, de
  349 D1:C8F1 D1 -  -  -  	pop	de
  350 D1:C8F2 B7 -  -  -  	or	a
  351 D1:C8F3 ED 52 -  -  	sbc	hl, de
  352 D1:C8F5 7C -  -  -  	ld	a, h
  353 D1:C8F6 B7 -  -  -  	or	a
  354 D1:C8F7 20 13 -  -  	jr	nz, functionRepeatInfiniteLarge
  355 D1:C8F9 7D -  -  -  	ld	a, l
  356 D1:C8FA 2F -  -  -  	cpl
  357 D1:C8FB 3D -  -  -  	dec	a
  358 D1:C8FC FE 80 -  -  	cp	%10000000
  359 D1:C8FE 38 0C -  -  	jr	c, functionRepeatInfiniteLarge
  360 D1:C900 -  -  -  -  functionRepeatInfiniteSmall:
  361 D1:C900 47 -  -  -  	ld	b, a
  362 D1:C901 3E 18 -  -  	ld	a, 018h
  363 D1:C903 CD 26 AD D1 	call	InsertA															;	jr *
  364 D1:C907 78 -  -  -  	ld	a, b
  365 D1:C908 C3 26 AD D1 	jp	InsertA																;	jr *
  366 D1:C90C -  -  -  -  functionRepeatInfiniteLarge:
  367 D1:C90C EB -  -  -  	ex	de, hl
  368 D1:C90D 3E C3 -  -  	ld	a, 0C3h
  369 D1:C90F C3 5A AC D1 	jp	InsertAHL															;	jp XXXXXX
  370 D1:C913 -  -  -  -  
  371 D1:C913 -  -  -  -  functionIf:
  372 D1:C913 21 59 EC D1 	ld	hl, amountOfEnds
  373 D1:C917 34 -  -  -  	inc	(hl)
  374 D1:C918 CD 28 10 02 	call	_IncFetch
  375 D1:C91C CD 83 B2 D1 	call	ParseExpression
  376 D1:C920 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  377 D1:C924 C2 B5 C9 D1 	jp	nz, functionIfInfinite
  378 D1:C928 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  379 D1:C92C 28 14 -  -  	jr	z, InsertNormalIf
  380 D1:C92E 2A 39 EC D1 	ld	hl, (programPtr)
  381 D1:C932 2B -  -  -  	dec	hl
  382 D1:C933 2B -  -  -  	dec	hl
  383 D1:C934 2B -  -  -  	dec	hl
  384 D1:C935 7E -  -  -  	ld	a, (hl)
  385 D1:C936 C6 A2 -  -  	add	a, 0A2h
  386 D1:C938 2B -  -  -  	dec	hl
  387 D1:C939 2B -  -  -  	dec	hl
  388 D1:C93A 2B -  -  -  	dec	hl
  389 D1:C93B 2B -  -  -  	dec	hl
  390 D1:C93C 22 39 EC D1 	ld	(programPtr), hl
  391 D1:C940 18 27 -  -  	jr	InsertIf
  392 D1:C942 -  -  -  -  InsertNormalIf:
  393 D1:C942 FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  394 D1:C946 28 0D -  -  	jr	z, InsertNormalIf2
  395 D1:C948 2A 39 EC D1 	ld	hl, (programPtr)
  396 D1:C94C 11 F8 FF FF 	ld	de, -8
  397 D1:C950 19 -  -  -  	add	hl, de
  398 D1:C951 22 39 EC D1 	ld	(programPtr), hl
  399 D1:C955 -  -  -  -  InsertNormalIf2:
  400 D1:C955 3E 19 -  -  	ld	a, 019h
  401 D1:C957 21 B7 ED 52 	ld	hl, 052EDB7h
  402 D1:C95B CD 5A AC D1 	call	InsertAHL															;	add hl, de \ or a \ sbc hl, de
  403 D1:C95F 3E CA -  -  	ld	a, 0CAh
  404 D1:C961 FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  405 D1:C965 28 02 -  -  	jr	z, InsertIf
  406 D1:C967 3E C2 -  -  	ld	a, 0C2h
  407 D1:C969 -  -  -  -  InsertIf:
  408 D1:C969 CD 26 AD D1 	call	InsertA															;	jp z, ******
  409 D1:C96D 2A 39 EC D1 	ld	hl, (programPtr)
  410 D1:C971 E5 -  -  -  	push	hl
  411 D1:C972 CD 5E AC D1 		call	InsertHL														;	jp z, XXXXXX
  412 D1:C976 CD A7 AA D1 		call	ParseProgramUntilEnd
  413 D1:C97A FE D0 -  -  		cp	tElse
  414 D1:C97C 20 29 -  -  		jr	nz, +_
  415 D1:C97E 21 59 EC D1 		ld	hl, amountOfEnds
  416 D1:C982 34 -  -  -  		inc	(hl)
  417 D1:C983 3E C3 -  -  		ld	a, 0C3h
  418 D1:C985 CD 26 AD D1 		call	InsertA														;	jp ******
  419 D1:C989 ED 5B 39 EC 
              D1 -  -  -  		ld	de, (programPtr)
  420 D1:C98E CD 5E AC D1 		call	InsertHL														;	jp XXXXXX
  421 D1:C992 01 81 7C FC 		ld	bc, UserMem - program
  422 D1:C996 09 -  -  -  		add	hl, bc
  423 D1:C997 E5 -  -  -  		push	hl
  424 D1:C998 C1 -  -  -  		pop	bc
  425 D1:C999 E1 -  -  -  	pop	hl
  426 D1:C99A ED 0F -  -  	ld	(hl), bc
  427 D1:C99C D5 -  -  -  	push	de
  428 D1:C99D CD A7 AA D1 		call	ParseProgramUntilEnd
  429 D1:C9A1 FE D0 -  -  		cp	tElse
  430 D1:C9A3 CA 47 AF D1 		jp	z, ErrorSyntax
  431 D1:C9A7 2A 39 EC D1 _:		ld	hl, (programPtr)
  432 D1:C9AB 11 81 7C FC 		ld	de, UserMem - program
  433 D1:C9AF 19 -  -  -  		add	hl, de
  434 D1:C9B0 EB -  -  -  		ex	de, hl
  435 D1:C9B1 E1 -  -  -  	pop	hl
  436 D1:C9B2 ED 1F -  -  	ld	(hl), de
  437 D1:C9B4 C9 -  -  -  	ret
  438 D1:C9B5 -  -  -  -  functionIfInfinite:
  439 D1:C9B5 2A 39 EC D1 	ld	hl, (programPtr)
  440 D1:C9B9 2B -  -  -  	dec	hl
  441 D1:C9BA 2B -  -  -  	dec	hl
  442 D1:C9BB 2B -  -  -  	dec	hl
  443 D1:C9BC 2B -  -  -  	dec	hl
  444 D1:C9BD 22 39 EC D1 	ld	(programPtr), hl
  445 D1:C9C1 23 -  -  -  	inc	hl
  446 D1:C9C2 ED 27 -  -  	ld	hl, (hl)
  447 D1:C9C4 19 -  -  -  	add	hl, de
  448 D1:C9C5 B7 -  -  -  	or	a
  449 D1:C9C6 ED 52 -  -  	sbc	hl, de
  450 D1:C9C8 28 1C -  -  	jr	z, functionIfInfiniteFalse
  451 D1:C9CA CD A7 AA D1 	call	ParseProgramUntilEnd
  452 D1:C9CE FE D0 -  -  	cp	tElse
  453 D1:C9D0 C0 -  -  -  	ret	nz
  454 D1:C9D1 2A 39 EC D1 	ld	hl, (programPtr)
  455 D1:C9D5 E5 -  -  -  	push	hl
  456 D1:C9D6 CD A7 AA D1 		call	ParseProgramUntilEnd
  457 D1:C9DA FE D0 -  -  		cp	tElse
  458 D1:C9DC CA 47 AF D1 		jp	z, ErrorSyntax
  459 D1:C9E0 E1 -  -  -  	pop	hl
  460 D1:C9E1 22 39 EC D1 	ld	(programPtr), hl
  461 D1:C9E5 C9 -  -  -  	ret
  462 D1:C9E6 -  -  -  -  functionIfInfiniteFalse:
  463 D1:C9E6 2A 39 EC D1 	ld	hl, (programPtr)
  464 D1:C9EA E5 -  -  -  	push	hl
  465 D1:C9EB CD A7 AA D1 		call	ParseProgramUntilEnd
  466 D1:C9EF E1 -  -  -  	pop	hl
  467 D1:C9F0 22 39 EC D1 	ld	(programPtr), hl
  468 D1:C9F4 FE D0 -  -  	cp	tElse
  469 D1:C9F6 C0 -  -  -  	ret	nz
  470 D1:C9F7 CD A7 AA D1 	call	ParseProgramUntilEnd
  471 D1:C9FB FE D0 -  -  	cp	tElse
  472 D1:C9FD CA 47 AF D1 	jp	z, ErrorSyntax
  473 D1:CA01 C9 -  -  -  	ret
  474 D1:CA02 -  -  -  -  	
  475 D1:CA02 -  -  -  -  functionWhile:
  476 D1:CA02 21 59 EC D1 	ld	hl, amountOfEnds
  477 D1:CA06 34 -  -  -  	inc	(hl)
  478 D1:CA07 CD 28 10 02 	call	_IncFetch
  479 D1:CA0B DA 47 AF D1 	jp	c, ErrorSyntax
  480 D1:CA0F FE 3F -  -  	cp	tEnter
  481 D1:CA11 CA 47 AF D1 	jp	z, ErrorSyntax
  482 D1:CA15 2A 39 EC D1 	ld	hl, (programPtr)
  483 D1:CA19 E5 -  -  -  	push	hl
  484 D1:CA1A CD 83 B2 D1 		call	ParseExpression
  485 D1:CA1E FD CB C0 66 		bit	output_is_number, (iy+fExpression1)
  486 D1:CA22 20 6A -  -  		jr	nz, functionWhileInfinite
  487 D1:CA24 FD CB C0 6E 		bit	ans_set_z_flag, (iy+fExpression1)
  488 D1:CA28 28 14 -  -  		jr	z, +_
  489 D1:CA2A 2A 39 EC D1 		ld	hl, (programPtr)
  490 D1:CA2E 2B -  -  -  		dec	hl
  491 D1:CA2F 2B -  -  -  		dec	hl
  492 D1:CA30 2B -  -  -  		dec	hl
  493 D1:CA31 7E -  -  -  		ld	a, (hl)
  494 D1:CA32 C6 A2 -  -  		add	a, 0A2h
  495 D1:CA34 2B -  -  -  		dec	hl
  496 D1:CA35 2B -  -  -  		dec	hl
  497 D1:CA36 2B -  -  -  		dec	hl
  498 D1:CA37 2B -  -  -  		dec	hl
  499 D1:CA38 22 39 EC D1 		ld	(programPtr), hl
  500 D1:CA3C 18 1F -  -  		jr	InsertNormalWhile
  501 D1:CA3E FD CB BF 4E _:		bit	last_token_was_not, (iy+fExpression2)
  502 D1:CA42 28 0D -  -  		jr	z, InsertNormalWhile2
  503 D1:CA44 2A 39 EC D1 		ld	hl, (programPtr)
  504 D1:CA48 11 F8 FF FF 		ld	de, -8
  505 D1:CA4C 19 -  -  -  		add	hl, de
  506 D1:CA4D 22 39 EC D1 		ld	(programPtr), hl
  507 D1:CA51 -  -  -  -  InsertNormalWhile2:
  508 D1:CA51 3E 19 -  -  		ld	a, 019h
  509 D1:CA53 21 B7 ED 52 		ld	hl, 052EDB7h
  510 D1:CA57 CD 5A AC D1 		call	InsertAHL														;	add hl, de \ or a \ sbc hl, de
  511 D1:CA5B 3E CA -  -  		ld	a, 0CAh
  512 D1:CA5D -  -  -  -  InsertNormalWhile:
  513 D1:CA5D FD CB BF 4E 		bit	last_token_was_not, (iy+fExpression2)
  514 D1:CA61 28 02 -  -  		jr	z, $+4
  515 D1:CA63 EE 08 -  -  		xor	8
  516 D1:CA65 CD 26 AD D1 		call	InsertA														;	jp z, ******
  517 D1:CA69 2A 39 EC D1 		ld	hl, (programPtr)
  518 D1:CA6D E5 -  -  -  		push	hl
  519 D1:CA6E CD 5E AC D1 			call	InsertHL													;	jp z, ******
  520 D1:CA72 CD A7 AA D1 			call	ParseProgramUntilEnd
  521 D1:CA76 FE D0 -  -  			cp	tElse
  522 D1:CA78 CA 47 AF D1 			jp	z, ErrorSyntax
  523 D1:CA7C 3E C3 -  -  			ld	a, 0C3h
  524 D1:CA7E D1 -  -  -  		pop	de
  525 D1:CA7F E1 -  -  -  	pop	hl
  526 D1:CA80 01 81 7C FC 	ld	bc, UserMem - program
  527 D1:CA84 09 -  -  -  	add	hl, bc
  528 D1:CA85 CD 5A AC D1 	call	InsertAHL															;	jp XXXXXX
  529 D1:CA89 09 -  -  -  	add	hl, bc
  530 D1:CA8A EB -  -  -  	ex	de, hl
  531 D1:CA8B ED 1F -  -  	ld	(hl), de
  532 D1:CA8D C9 -  -  -  	ret
  533 D1:CA8E -  -  -  -  functionWhileInfinite:
  534 D1:CA8E 2A 39 EC D1 		ld	hl, (programPtr)
  535 D1:CA92 2B -  -  -  		dec	hl
  536 D1:CA93 2B -  -  -  		dec	hl
  537 D1:CA94 2B -  -  -  		dec	hl
  538 D1:CA95 2B -  -  -  		dec	hl
  539 D1:CA96 22 39 EC D1 		ld	(programPtr), hl
  540 D1:CA9A 23 -  -  -  		inc	hl
  541 D1:CA9B ED 27 -  -  		ld	hl, (hl)
  542 D1:CA9D 19 -  -  -  		add	hl, de
  543 D1:CA9E B7 -  -  -  		or	a
  544 D1:CA9F ED 52 -  -  		sbc	hl, de
  545 D1:CAA1 28 16 -  -  		jr	z, +_
  546 D1:CAA3 CD A7 AA D1 		call	ParseProgramUntilEnd
  547 D1:CAA7 FE D0 -  -  		cp	tElse
  548 D1:CAA9 CA 47 AF D1 		jp	z, ErrorSyntax
  549 D1:CAAD 3E C3 -  -  		ld	a, 0C3h
  550 D1:CAAF E1 -  -  -  	pop	hl
  551 D1:CAB0 01 81 7C FC 	ld	bc, UserMem - program
  552 D1:CAB4 09 -  -  -  	add	hl, bc
  553 D1:CAB5 C3 5A AC D1 	jp	InsertAHL															;	jp XXXXXX
  554 D1:CAB9 CD A7 AA D1 _:		call	ParseProgramUntilEnd
  555 D1:CABD FE D0 -  -  		cp	tElse
  556 D1:CABF CA 47 AF D1 		jp	z, ErrorSyntax
  557 D1:CAC3 E1 -  -  -  	pop	hl
  558 D1:CAC4 22 39 EC D1 	ld	(programPtr), hl
  559 D1:CAC8 C9 -  -  -  	ret
  560 D1:CAC9 -  -  -  -  	
  561 D1:CAC9 -  -  -  -  functionClrHome:
  562 D1:CAC9 CD C0 0F 02 	call	_NxtFetch
  563 D1:CACD 38 06 -  -  	jr	c, +_
  564 D1:CACF FE 3F -  -  	cp	tEnter
  565 D1:CAD1 C2 47 AF D1 	jp	nz, ErrorSyntax
  566 D1:CAD5 21 28 08 02 _:	ld	hl, _HomeUp
  567 D1:CAD9 CD 7C AC D1 	call	InsertCallHL														;	call _HomeUp
  568 D1:CADD 21 08 08 02 	ld	hl, _ClrLCDFull
  569 D1:CAE1 C3 5A AC D1 	jp	InsertAHL															;	call _ClrLCDFull
  570 D1:CAE5 -  -  -  -  	
  571 D1:CAE5 -  -  -  -  functionPause:
  572 D1:CAE5 CD 28 10 02 	call	_IncFetch
  573 D1:CAE9 38 59 -  -  	jr	c, ++_
  574 D1:CAEB FE 3F -  -  	cp	tEnter
  575 D1:CAED 28 55 -  -  	jr	z, ++_
  576 D1:CAEF CD 83 B2 D1 	call	ParseExpression
  577 D1:CAF3 3A 5B EC D1 	ld	a, (amountOfPause)
  578 D1:CAF7 3D -  -  -  	dec	a
  579 D1:CAF8 CA 7E CB D1 	jp	z, functionPauseOnce
  580 D1:CAFC FD CB D0 66 	bit	has_already_pause, (iy+fProgram1)
  581 D1:CB00 20 54 -  -  	jr	nz, AddPause
  582 D1:CB02 3E CD -  -  	ld	a, 0CDh
  583 D1:CB04 CD 26 AD D1 	call	InsertA															;	call *
  584 D1:CB08 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  585 D1:CB0C 2A 4E EC D1 	ld	hl, (programDataDataPtr)
  586 D1:CB10 22 FE 31 D0 	ld	(PauseStartData), hl
  587 D1:CB14 E5 -  -  -  	push	hl
  588 D1:CB15 D1 -  -  -  	pop	de
  589 D1:CB16 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  590 D1:CB1A 28 10 -  -  	jr	z, +_
  591 D1:CB1C E5 -  -  -  	push	hl
  592 D1:CB1D 2A 39 EC D1 		ld	hl, (programPtr)
  593 D1:CB21 2B -  -  -  		dec	hl
  594 D1:CB22 2B -  -  -  		dec	hl
  595 D1:CB23 2B -  -  -  		dec	hl
  596 D1:CB24 2B -  -  -  		dec	hl
  597 D1:CB25 ED 07 -  -  		ld	bc, (hl)
  598 D1:CB27 0B -  -  -  		dec	bc
  599 D1:CB28 ED 0F -  -  		ld	(hl), bc
  600 D1:CB2A E1 -  -  -  	pop	hl
  601 D1:CB2B 23 -  -  -  	inc	hl
  602 D1:CB2C CD 5E AC D1 _:	call	InsertHL															;	call *
  603 D1:CB30 21 D2 EF D1 	ld	hl, PauseRoutine
  604 D1:CB34 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  605 D1:CB38 ED B0 -  -  	ldir
  606 D1:CB3A ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  607 D1:CB3F FD CB D0 E6 	set	has_already_pause, (iy+fProgram1)
  608 D1:CB43 C9 -  -  -  	ret
  609 D1:CB44 21 4C 01 02 _:	ld	hl, _GetCSC
  610 D1:CB48 CD 7C AC D1 	call	InsertCallHL														;	call _GetCSC
  611 D1:CB4C 3E FE -  -  	ld	a, 0FEh
  612 D1:CB4E 21 09 20 F8 	ld	hl, 0F82009h
  613 D1:CB52 C3 5A AC D1 	jp	InsertAHL															;	cp tEnter \ jr nz, $-9
  614 D1:CB56 -  -  -  -  AddPause:
  615 D1:CB56 3E CD -  -  	ld	a, 0CDh
  616 D1:CB58 CD 26 AD D1 	call	InsertA															;	call ******
  617 D1:CB5C CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  618 D1:CB60 2A FE 31 D0 	ld	hl, (PauseStartData)
  619 D1:CB64 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  620 D1:CB68 28 10 -  -  	jr	z, +_
  621 D1:CB6A E5 -  -  -  	push	hl
  622 D1:CB6B 2A 39 EC D1 		ld	hl, (programPtr)
  623 D1:CB6F 2B -  -  -  		dec	hl
  624 D1:CB70 2B -  -  -  		dec	hl
  625 D1:CB71 2B -  -  -  		dec	hl
  626 D1:CB72 2B -  -  -  		dec	hl
  627 D1:CB73 ED 17 -  -  		ld	de, (hl)
  628 D1:CB75 1B -  -  -  		dec	de
  629 D1:CB76 ED 1F -  -  		ld	(hl), de
  630 D1:CB78 E1 -  -  -  	pop	hl
  631 D1:CB79 23 -  -  -  	inc	hl
  632 D1:CB7A C3 5E AC D1 _:	jp	InsertHL																;	call XXXXXX
  633 D1:CB7E -  -  -  -  functionPauseOnce:
  634 D1:CB7E ED 5B 39 EC 
              D1 -  -  -  	ld	de, (programPtr)
  635 D1:CB83 21 D2 EF D1 	ld	hl, PauseRoutine
  636 D1:CB87 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  637 D1:CB8B FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  638 D1:CB8F 28 11 -  -  	jr	z, +_
  639 D1:CB91 DD 2A 39 EC 
              D1 -  -  -  	ld	ix, (programPtr)
  640 D1:CB96 DD 17 FD -  	ld	de, (ix-3)
  641 D1:CB99 1B -  -  -  	dec	de
  642 D1:CB9A DD 1F FD -  	ld	(ix-3), de
  643 D1:CB9D ED 12 00 -  	lea	de, ix
  644 D1:CBA0 23 -  -  -  	inc	hl
  645 D1:CBA1 0B -  -  -  	dec	bc
  646 D1:CBA2 ED B0 -  -  _:	ldir
  647 D1:CBA4 1B -  -  -  	dec	de
  648 D1:CBA5 ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
  649 D1:CBAA C9 -  -  -  	ret
  650 D1:CBAB -  -  -  -  	
  651 D1:CBAB -  -  -  -  functionInput:
  652 D1:CBAB CD B2 AC D1 	call	MaybeInsertIYFlags
  653 D1:CBAF CD 28 10 02 	call	_IncFetch
  654 D1:CBB3 FE 41 -  -  	cp	tA
  655 D1:CBB5 DA 47 AF D1 	jp	c, ErrorSyntax
  656 D1:CBB9 FE 5C -  -  	cp	ttheta+1
  657 D1:CBBB D2 47 AF D1 	jp	nc, ErrorSyntax
  658 D1:CBBF CD C0 0F 02 	call	_NxtFetch
  659 D1:CBC3 38 06 -  -  	jr	c, +_
  660 D1:CBC5 FE 3F -  -  	cp	tEnter
  661 D1:CBC7 C2 47 AF D1 	jp	nz, ErrorSyntax
  662 D1:CBCB 3A 5A EC D1 _:	ld	a, (amountOfInput)
  663 D1:CBCF 3D -  -  -  	dec	a
  664 D1:CBD0 28 79 -  -  	jr	z, functionInputOnce
  665 D1:CBD2 3E 3E -  -  	ld	a, 03Eh
  666 D1:CBD4 CD 26 AD D1 	call	InsertA															;	ld a, **
  667 D1:CBD8 CD 2C 10 02 	call	_CurFetch
  668 D1:CBDC D6 41 -  -  	sub	tA
  669 D1:CBDE 47 -  -  -  	ld	b, a
  670 D1:CBDF 87 -  -  -  	add	a, a
  671 D1:CBE0 80 -  -  -  	add	a, b
  672 D1:CBE1 CD 26 AD D1 	call	InsertA															;	ld a, XX
  673 D1:CBE5 3E 32 -  -  	ld	a, 032h
  674 D1:CBE7 CD 26 AD D1 	call	InsertA															;	ld (******), a
  675 D1:CBEB CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  676 D1:CBEF FD CB D0 56 	bit	has_already_input, (iy+fProgram1)
  677 D1:CBF3 20 39 -  -  	jr	nz, AddPointerToInput
  678 D1:CBF5 2A 4E EC D1 	ld	hl, (programDataDataPtr)
  679 D1:CBF9 22 F8 31 D0 	ld	(InputStartData), hl
  680 D1:CBFD 01 3D 00 00 	ld	bc, InputOffset-InputRoutine
  681 D1:CC01 09 -  -  -  	add	hl, bc
  682 D1:CC02 CD 5E AC D1 	call	InsertHL															;	ld (XXXXXX), a
  683 D1:CC06 3E CD -  -  	ld	a, 0CDh
  684 D1:CC08 CD 26 AD D1 	call	InsertA															;	call ******
  685 D1:CC0C CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  686 D1:CC10 2A 4E EC D1 	ld	hl, (programDataDataPtr)
  687 D1:CC14 E5 -  -  -  	push	hl
  688 D1:CC15 D1 -  -  -  	pop	de
  689 D1:CC16 CD 5E AC D1 	call	InsertHL															;	call XXXXXX
  690 D1:CC1A 21 3F EF D1 _:	ld	hl, InputRoutine
  691 D1:CC1E 01 42 00 00 	ld	bc, InputRoutineEnd-InputRoutine
  692 D1:CC22 ED B0 -  -  	ldir
  693 D1:CC24 ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  694 D1:CC29 FD CB D0 D6 	set	has_already_input, (iy+fProgram1)
  695 D1:CC2D C9 -  -  -  	ret
  696 D1:CC2E -  -  -  -  AddPointerToInput:
  697 D1:CC2E 2A F8 31 D0 	ld	hl, (InputStartData)
  698 D1:CC32 E5 -  -  -  	push	hl
  699 D1:CC33 01 3D 00 00 		ld	bc, InputOffset-InputRoutine
  700 D1:CC37 09 -  -  -  		add	hl, bc
  701 D1:CC38 CD 5E AC D1 		call	InsertHL														;	ld (XXXXXX), a
  702 D1:CC3C 3E CD -  -  		ld	a, 0CDh
  703 D1:CC3E CD 26 AD D1 		call	InsertA														;	call ******
  704 D1:CC42 CD 3D AD D1 		call	InsertProgramPtrToDataOffset
  705 D1:CC46 E1 -  -  -  	pop	hl
  706 D1:CC47 C3 5E AC D1 	jp	InsertHL																;	call XXXXXX
  707 D1:CC4B -  -  -  -  functionInputOnce:
  708 D1:CC4B CD 2C 10 02 	call	_CurFetch
  709 D1:CC4F D6 41 -  -  	sub	tA
  710 D1:CC51 47 -  -  -  	ld	b, a
  711 D1:CC52 87 -  -  -  	add	a, a
  712 D1:CC53 80 -  -  -  	add	a, b
  713 D1:CC54 32 7C EF D1 	ld	(InputOffset), a
  714 D1:CC58 ED 5B 39 EC 
              D1 -  -  -  	ld	de, (programPtr)
  715 D1:CC5D 21 3F EF D1 	ld	hl, InputRoutine
  716 D1:CC61 01 42 00 00 	ld	bc, InputRoutineEnd - InputRoutine
  717 D1:CC65 ED B0 -  -  	ldir
  718 D1:CC67 D5 -  -  -  	push	de
  719 D1:CC68 DD E1 -  -  	pop	ix
  720 D1:CC6A DD 36 FC CD 	ld	(ix-4), 0CDh
  721 D1:CC6E ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
  722 D1:CC73 C9 -  -  -  	ret
  723 D1:CC74 -  -  -  -  	
  724 D1:CC74 -  -  -  -  functionNot:
  725 D1:CC74 3E 01 -  -  	ld	a, 1
  726 D1:CC76 32 57 EC D1 	ld	(amountOfArguments), a
  727 D1:CC7A FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
  728 D1:CC7E E5 -  -  -  	push	hl
  729 D1:CC7F DD E1 -  -  	pop	ix
  730 D1:CC81 DD 7E FC -  	ld	a, (ix-4)
  731 D1:CC84 B7 -  -  -  	or	a
  732 D1:CC85 28 10 -  -  	jr	z, NotNumber
  733 D1:CC87 3D -  -  -  	dec	a
  734 D1:CC88 28 23 -  -  	jr	z, NotVariable
  735 D1:CC8A 3D -  -  -  	dec	a
  736 D1:CC8B 28 36 -  -  	jr	z, NotChainPush
  737 D1:CC8D 3D -  -  -  	dec	a
  738 D1:CC8E 28 37 -  -  	jr	z, NotChainAns
  739 D1:CC90 3D -  -  -  	dec	a
  740 D1:CC91 28 48 -  -  	jr	z, NotFunction
  741 D1:CC93 C3 47 AF D1 	jp	ErrorSyntax
  742 D1:CC97 -  -  -  -  NotNumber:
  743 D1:CC97 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  744 D1:CC9B DD 27 FD -  	ld	hl, (ix-3)
  745 D1:CC9E 19 -  -  -  	add	hl, de
  746 D1:CC9F B7 -  -  -  	or	a
  747 D1:CCA0 ED 52 -  -  	sbc	hl, de
  748 D1:CCA2 21 00 00 00 	ld	hl, 0
  749 D1:CCA6 20 01 -  -  	jr	nz, +_
  750 D1:CCA8 23 -  -  -  	inc	hl
  751 D1:CCA9 DD 2F FD -  _:	ld	(ix-3), hl
  752 D1:CCAC C9 -  -  -  	ret
  753 D1:CCAD -  -  -  -  NotVariable:
  754 D1:CCAD DD 4E FD -  	ld	c, (ix-3)
  755 D1:CCB0 06 03 -  -  	ld	b, 3
  756 D1:CCB2 ED 4C -  -  	mlt	bc
  757 D1:CCB4 79 -  -  -  	ld	a, c
  758 D1:CCB5 21 DD 27 00 	ld	hl, 00027DDh
  759 D1:CCB9 CD 70 1D 02 	call	_SetHLUToA
  760 D1:CCBD CD 5E AC D1 	call	InsertHL															;	ld hl, (ix+*)
  761 D1:CCC1 18 04 -  -  	jr	NotChainAns
  762 D1:CCC3 -  -  -  -  NotChainPush:
  763 D1:CCC3 C3 81 AF D1 	jp	UnknownError
  764 D1:CCC7 -  -  -  -  NotChainAns:
  765 D1:CCC7 3E 11 -  -  	ld	a, 011h
  766 D1:CCC9 CD 26 AD D1 	call	InsertA															;	ld de, *
  767 D1:CCCD 3E FF -  -  	ld	a, 0FFh
  768 D1:CCCF 11 FF FF 19 	ld	de, 019FFFFh
  769 D1:CCD3 21 ED 62 23 	ld	hl, 02362EDh
  770 D1:CCD7 C3 A6 AC D1 	jp	InsertADEHL															;	ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  771 D1:CCDB -  -  -  -  NotFunction:
  772 D1:CCDB DD 7E FD -  	ld	a, (ix-3)
  773 D1:CCDE 06 02 -  -  	ld	b, OutputInHL
  774 D1:CCE0 CD 52 AD D1 	call	GetFunction
  775 D1:CCE4 18 E1 -  -  	jr	NotChainAns
  776 D1:CCE6 -  -  -  -  	
  777 D1:CCE6 -  -  -  -  functionCE:
  778 D1:CCE6 23 -  -  -  	inc	hl
  779 D1:CCE7 23 -  -  -  	inc	hl
  780 D1:CCE8 7E -  -  -  	ld	a, (hl)
  781 D1:CCE9 FE 32 -  -  	cp	tRemainder
  782 D1:CCEB C2 47 AF D1 	jp	nz, ErrorSyntax
  783 D1:CCEF 11 F6 FF FF 	ld	de, -10
  784 D1:CCF3 19 -  -  -  	add	hl, de
  785 D1:CCF4 -  -  -  -  		
  786 D1:CCF4 -  -  -  -  functionRemainder:
  787 D1:CCF4 3E 02 -  -  	ld	a, 2
  788 D1:CCF6 32 57 EC D1 	ld	(amountOfArguments), a
  789 D1:CCFA 7E -  -  -  	ld	a, (hl)
  790 D1:CCFB DD 67 -  -  	ld	ixh, a
  791 D1:CCFD 23 -  -  -  	inc	hl
  792 D1:CCFE E5 -  -  -  	push	hl
  793 D1:CCFF ED 07 -  -  		ld	bc, (hl)
  794 D1:CD01 23 -  -  -  		inc	hl
  795 D1:CD02 23 -  -  -  		inc	hl
  796 D1:CD03 23 -  -  -  		inc	hl
  797 D1:CD04 7E -  -  -  		ld	a, (hl)
  798 D1:CD05 DD 6F -  -  		ld	ixl, a
  799 D1:CD07 23 -  -  -  		inc	hl
  800 D1:CD08 ED 17 -  -  		ld	de, (hl)
  801 D1:CD0A E1 -  -  -  	pop	hl
  802 D1:CD0B DD 7C -  -  	ld	a, ixh
  803 D1:CD0D B7 -  -  -  	or	a
  804 D1:CD0E 28 18 -  -  	jr	z, RemainderNumberXXX
  805 D1:CD10 3D -  -  -  	dec	a
  806 D1:CD11 CA 88 CD D1 	jp	z, RemainderVariableXXX
  807 D1:CD15 3D -  -  -  	dec	a
  808 D1:CD16 CA CE CD D1 	jp	z, RemainderChainPushXXX
  809 D1:CD1A 3D -  -  -  	dec	a
  810 D1:CD1B CA E0 CD D1 	jp	z, RemainderChainAnsXXX
  811 D1:CD1F 3D -  -  -  	dec	a
  812 D1:CD20 CA 1F CE D1 	jp	z, RemainderFunctionXXX
  813 D1:CD24 C3 47 AF D1 	jp	ErrorSyntax
  814 D1:CD28 -  -  -  -  RemainderNumberXXX:
  815 D1:CD28 DD 7D -  -  	ld	a, ixl
  816 D1:CD2A B7 -  -  -  	or	a
  817 D1:CD2B 28 10 -  -  	jr	z, RemainderNumberNumber
  818 D1:CD2D 3D -  -  -  	dec	a
  819 D1:CD2E 28 1F -  -  	jr	z, RemainderNumberVariable
  820 D1:CD30 3D -  -  -  	dec	a
  821 D1:CD31 28 28 -  -  	jr	z, RemainderNumberChainPush
  822 D1:CD33 3D -  -  -  	dec	a
  823 D1:CD34 28 29 -  -  	jr	z, RemainderNumberChainAns
  824 D1:CD36 3D -  -  -  	dec	a
  825 D1:CD37 28 38 -  -  	jr	z, RemainderNumberFunction
  826 D1:CD39 C3 47 AF D1 	jp	ErrorSyntax
  827 D1:CD3D -  -  -  -  RemainderNumberNumber:
  828 D1:CD3D FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  829 D1:CD41 E5 -  -  -  	push	hl
  830 D1:CD42 C5 -  -  -  		push	bc
  831 D1:CD43 E1 -  -  -  		pop	hl
  832 D1:CD44 D5 -  -  -  		push	de
  833 D1:CD45 C1 -  -  -  		pop	bc
  834 D1:CD46 CD 44 01 00 		call	__idvrmu
  835 D1:CD4A EB -  -  -  		ex	de, hl
  836 D1:CD4B E1 -  -  -  	pop	hl
  837 D1:CD4C ED 1F -  -  	ld	(hl), de
  838 D1:CD4E C9 -  -  -  	ret
  839 D1:CD4F -  -  -  -  RemainderNumberVariable:
  840 D1:CD4F 3E 21 -  -  	ld	a, 021h
  841 D1:CD51 C5 -  -  -  	push	bc
  842 D1:CD52 E1 -  -  -  	pop	hl
  843 D1:CD53 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  844 D1:CD57 C3 04 CE D1 	jp	RemainderChainAnsVariable
  845 D1:CD5B -  -  -  -  RemainderNumberChainPush:
  846 D1:CD5B C3 81 AF D1 	jp	UnknownError
  847 D1:CD5F -  -  -  -  RemainderNumberChainAns:
  848 D1:CD5F 11 E5 C1 21 	ld	de, 021C1E5h
  849 D1:CD63 C5 -  -  -  	push	bc
  850 D1:CD64 E1 -  -  -  	pop	hl
  851 D1:CD65 CD AA AC D1 	call	InsertDEHL															;	push hl \ pop bc \ ld hl, *
  852 D1:CD69 21 44 01 00 	ld	hl, __idvrmu
  853 D1:CD6D C3 7C AC D1 	jp	InsertCallHL															;	call __idvrmu
  854 D1:CD71 -  -  -  -  RemainderNumberFunction:
  855 D1:CD71 7B -  -  -  	ld	a, e
  856 D1:CD72 C5 -  -  -  	push	bc
  857 D1:CD73 06 00 -  -  		ld	b, OutputInBC
  858 D1:CD75 CD 52 AD D1 		call	GetFunction
  859 D1:CD79 E1 -  -  -  	pop	hl
  860 D1:CD7A 3E 21 -  -  	ld	a, 021h
  861 D1:CD7C CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  862 D1:CD80 21 44 01 00 	ld	hl, __idvrmu
  863 D1:CD84 C3 7C AC D1 	jp	InsertCallHL															;	call __idvrmu
  864 D1:CD88 -  -  -  -  RemainderVariableXXX:
  865 D1:CD88 DD 7D -  -  	ld	a, ixl
  866 D1:CD8A B7 -  -  -  	or	a
  867 D1:CD8B 28 10 -  -  	jr	z, RemainderVariableNumber
  868 D1:CD8D 3D -  -  -  	dec	a
  869 D1:CD8E 28 13 -  -  	jr	z, RemainderVariableVariable
  870 D1:CD90 3D -  -  -  	dec	a
  871 D1:CD91 28 16 -  -  	jr	z, RemainderVariableChainPush
  872 D1:CD93 3D -  -  -  	dec	a
  873 D1:CD94 28 17 -  -  	jr	z, RemainderVariableChainAns
  874 D1:CD96 3D -  -  -  	dec	a
  875 D1:CD97 28 2C -  -  	jr	z, RemainderVariableFunction
  876 D1:CD99 C3 47 AF D1 	jp	ErrorSyntax
  877 D1:CD9D -  -  -  -  RemainderVariableNumber:
  878 D1:CD9D CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  879 D1:CDA1 18 52 -  -  	jr	RemainderChainAnsNumber
  880 D1:CDA3 -  -  -  -  RemainderVariableVariable
  881 D1:CDA3 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  882 D1:CDA7 18 5B -  -  	jr	RemainderChainAnsVariable
  883 D1:CDA9 -  -  -  -  RemainderVariableChainPush:
  884 D1:CDA9 C3 81 AF D1 	jp	UnknownError
  885 D1:CDAD -  -  -  -  RemainderVariableChainAns:
  886 D1:CDAD 3E E5 -  -  	ld	a, 0E5h
  887 D1:CDAF CD 26 AD D1 	call	InsertA															;	push hl
  888 D1:CDB3 3E C1 -  -  	ld	a, 0C1h
  889 D1:CDB5 CD 26 AD D1 	call	InsertA															;	pop bc
  890 D1:CDB9 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  891 D1:CDBD 21 44 01 00 	ld	hl, __idvrmu
  892 D1:CDC1 C3 7C AC D1 	jp	InsertCallHL															;	call __idvrmu
  893 D1:CDC5 -  -  -  -  RemainderVariableFunction:
  894 D1:CDC5 7B -  -  -  	ld	a, e
  895 D1:CDC6 06 00 -  -  	ld	b, OutputInBC
  896 D1:CDC8 CD 52 AD D1 	call	GetFunction
  897 D1:CDCC 18 EB -  -  	jr	-_
  898 D1:CDCE -  -  -  -  RemainderChainPushXXX:
  899 D1:CDCE DD 7D -  -  	ld	a, ixl
  900 D1:CDD0 FE 03 -  -  	cp	typeChainAns
  901 D1:CDD2 C2 81 AF D1 	jp	nz, UnknownError
  902 D1:CDD6 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  903 D1:CDDA CD 5A AC D1 	call	InsertAHL															;	push hl \ pop bc \ pop hl
  904 D1:CDDE 18 1C -  -  	jr	+_
  905 D1:CDE0 -  -  -  -  RemainderChainAnsXXX:
  906 D1:CDE0 DD 7D -  -  	ld	a, ixl
  907 D1:CDE2 B7 -  -  -  	or	a
  908 D1:CDE3 28 10 -  -  	jr	z, RemainderChainAnsNumber
  909 D1:CDE5 3D -  -  -  	dec	a
  910 D1:CDE6 28 1C -  -  	jr	z, RemainderChainAnsVariable
  911 D1:CDE8 3D -  -  -  	dec	a
  912 D1:CDE9 28 1F -  -  	jr	z, RemainderChainAnsChainPush
  913 D1:CDEB 3D -  -  -  	dec	a
  914 D1:CDEC 28 20 -  -  	jr	z, RemainderChainAnsChainAns
  915 D1:CDEE 3D -  -  -  	dec	a
  916 D1:CDEF 28 21 -  -  	jr	z, RemainderChainAnsFunction
  917 D1:CDF1 C3 47 AF D1 	jp	ErrorSyntax
  918 D1:CDF5 -  -  -  -  RemainderChainAnsNumber:
  919 D1:CDF5 EB -  -  -  	ex	de, hl
  920 D1:CDF6 3E 01 -  -  	ld	a, 001h
  921 D1:CDF8 CD 5A AC D1 	call	InsertAHL															;	ld bc, *
  922 D1:CDFC 21 44 01 00 _:	ld	hl, __idvrmu
  923 D1:CE00 C3 7C AC D1 	jp	InsertCallHL															;	call __idvrmu
  924 D1:CE04 -  -  -  -  RemainderChainAnsVariable:
  925 D1:CE04 CD 98 AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  926 D1:CE08 18 F2 -  -  	jr	-_
  927 D1:CE0A -  -  -  -  RemainderChainAnsChainPush:
  928 D1:CE0A C3 81 AF D1 	jp	UnknownError
  929 D1:CE0E -  -  -  -  RemainderChainAnsChainAns:
  930 D1:CE0E C3 81 AF D1 	jp	UnknownError
  931 D1:CE12 -  -  -  -  RemainderChainAnsFunction:
  932 D1:CE12 7B -  -  -  	ld	a, e
  933 D1:CE13 06 00 -  -  	ld	b, OutputInBC
  934 D1:CE15 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  935 D1:CE19 CD 52 AD D1 	call	GetFunction
  936 D1:CE1D 18 DD -  -  	jr	-_
  937 D1:CE1F -  -  -  -  RemainderFunctionXXX:
  938 D1:CE1F DD 7D -  -  	ld	a, ixl
  939 D1:CE21 B7 -  -  -  	or	a
  940 D1:CE22 28 10 -  -  	jr	z, RemainderFunctionNumber
  941 D1:CE24 3D -  -  -  	dec	a
  942 D1:CE25 28 16 -  -  	jr	z, RemainderFunctionVariable
  943 D1:CE27 3D -  -  -  	dec	a
  944 D1:CE28 28 1C -  -  	jr	z, RemainderFunctionChainPush
  945 D1:CE2A 3D -  -  -  	dec	a
  946 D1:CE2B 28 1D -  -  	jr	z, RemainderFunctionChainAns
  947 D1:CE2D 3D -  -  -  	dec	a
  948 D1:CE2E 28 2F -  -  	jr	z, RemainderFunctionFunction
  949 D1:CE30 C3 47 AF D1 	jp	ErrorSyntax
  950 D1:CE34 -  -  -  -  RemainderFunctionNumber:
  951 D1:CE34 79 -  -  -  	ld	a, c
  952 D1:CE35 06 02 -  -  	ld	b, OutputInHL
  953 D1:CE37 CD 52 AD D1 	call	GetFunction
  954 D1:CE3B 18 B8 -  -  	jr	RemainderChainAnsNumber
  955 D1:CE3D -  -  -  -  RemainderFunctionVariable:
  956 D1:CE3D 79 -  -  -  	ld	a, c
  957 D1:CE3E 06 02 -  -  	ld	b, OutputInHL
  958 D1:CE40 CD 52 AD D1 	call	GetFunction
  959 D1:CE44 18 BE -  -  	jr	RemainderChainAnsVariable
  960 D1:CE46 -  -  -  -  RemainderFunctionChainPush:
  961 D1:CE46 C3 81 AF D1 	jp	UnknownError
  962 D1:CE4A -  -  -  -  RemainderFunctionChainAns:
  963 D1:CE4A 3E E5 -  -  	ld	a, 0E5h
  964 D1:CE4C CD 26 AD D1 	call	InsertA														;	push hl
  965 D1:CE50 3E C1 -  -  	ld	a, 0C1h
  966 D1:CE52 CD 26 AD D1 	call	InsertA														;	pop bc
  967 D1:CE56 79 -  -  -  	ld	a, c
  968 D1:CE57 06 02 -  -  	ld	b, OutputInHL
  969 D1:CE59 CD 52 AD D1 	call	GetFunction
  970 D1:CE5D 18 9D -  -  	jr	-_
  971 D1:CE5F -  -  -  -  RemainderFunctionFunction:
  972 D1:CE5F 7B -  -  -  	ld	a, e
  973 D1:CE60 06 00 -  -  	ld	b, OutputInBC
  974 D1:CE62 CD 52 AD D1 	call	GetFunction
  975 D1:CE66 79 -  -  -  	ld	a, c
  976 D1:CE67 06 02 -  -  	ld	b, OutputInHL
  977 D1:CE69 CD 52 AD D1 	call	GetFunction
  978 D1:CE6D 18 8D -  -  	jr	-_
  979 D1:CE6F -  -  -  -  	
  980 D1:CE6F -  -  -  -  functionMean:
  981 D1:CE6F FD CB BF C6 	set	use_mean_routine, (iy+fExpression2)
  982 D1:CE73 -  -  -  -  functionMax:
  983 D1:CE73 3E 30 -  -  	ld	a, 030h
  984 D1:CE75 18 02 -  -  	jr	+_
  985 D1:CE77 -  -  -  -  functionMin:
  986 D1:CE77 3E 38 -  -  	ld	a, 038h
  987 D1:CE79 32 B6 CF D1 _:	ld	(MaxMinMeanInsertSMC), a
  988 D1:CE7D 3E 02 -  -  	ld	a, 2
  989 D1:CE7F 32 57 EC D1 	ld	(amountOfArguments), a
  990 D1:CE83 2B -  -  -  	dec	hl
  991 D1:CE84 2B -  -  -  	dec	hl
  992 D1:CE85 2B -  -  -  	dec	hl
  993 D1:CE86 ED 17 -  -  	ld	de, (hl)
  994 D1:CE88 2B -  -  -  	dec	hl
  995 D1:CE89 7E -  -  -  	ld	a, (hl)
  996 D1:CE8A DD 6F -  -  	ld	ixl, a
  997 D1:CE8C 2B -  -  -  	dec	hl
  998 D1:CE8D 2B -  -  -  	dec	hl
  999 D1:CE8E 2B -  -  -  	dec	hl
 1000 D1:CE8F ED 07 -  -  	ld	bc, (hl)
 1001 D1:CE91 2B -  -  -  	dec	hl
 1002 D1:CE92 7E -  -  -  	ld	a, (hl)
 1003 D1:CE93 23 -  -  -  	inc	hl
 1004 D1:CE94 B7 -  -  -  	or	a
 1005 D1:CE95 28 18 -  -  	jr	z, MaxMinMeanNumberXXX
 1006 D1:CE97 3D -  -  -  	dec	a
 1007 D1:CE98 CA 1E CF D1 	jp	z, MaxMinMeanVariableXXX
 1008 D1:CE9C 3D -  -  -  	dec	a
 1009 D1:CE9D CA 67 CF D1 	jp	z, MaxMinMeanChainPushXXX
 1010 D1:CEA1 3D -  -  -  	dec	a
 1011 D1:CEA2 CA 8B CF D1 	jp	z, MaxMinMeanChainAnsXXX
 1012 D1:CEA6 3D -  -  -  	dec	a
 1013 D1:CEA7 CA D8 CF D1 	jp	z, MaxMinMeanFunctionXXX
 1014 D1:CEAB C3 47 AF D1 	jp	ErrorSyntax
 1015 D1:CEAF -  -  -  -  MaxMinMeanNumberXXX:
 1016 D1:CEAF DD 7D -  -  	ld	a, ixl
 1017 D1:CEB1 B7 -  -  -  	or	a
 1018 D1:CEB2 28 10 -  -  	jr	z, MaxMinMeanNumberNumber
 1019 D1:CEB4 3D -  -  -  	dec	a
 1020 D1:CEB5 28 4B -  -  	jr	z, MaxMinMeanNumberVariable
 1021 D1:CEB7 3D -  -  -  	dec	a
 1022 D1:CEB8 28 4F -  -  	jr	z, MaxMinMeanNumberChainPush
 1023 D1:CEBA 3D -  -  -  	dec	a
 1024 D1:CEBB 28 50 -  -  	jr	z, MaxMinMeanNumberChainAns
 1025 D1:CEBD 3D -  -  -  	dec	a
 1026 D1:CEBE 28 51 -  -  	jr	z, MaxMinMeanNumberFunction
 1027 D1:CEC0 C3 47 AF D1 	jp	ErrorSyntax
 1028 D1:CEC4 -  -  -  -  MaxMinMeanNumberNumber:
 1029 D1:CEC4 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1030 D1:CEC8 E5 -  -  -  	push	hl
 1031 D1:CEC9 FD CB BF 46 		bit	use_mean_routine, (iy+fExpression2)
 1032 D1:CECD 20 1C -  -  		jr	nz, ++_
 1033 D1:CECF 3A B6 CF D1 		ld	a, (MaxMinMeanInsertSMC)
 1034 D1:CED3 C5 -  -  -  		push	bc
 1035 D1:CED4 E1 -  -  -  		pop	hl
 1036 D1:CED5 FE 30 -  -  		cp	030h
 1037 D1:CED7 28 09 -  -  		jr	z, +_
 1038 D1:CED9 B7 -  -  -  		or	a
 1039 D1:CEDA ED 52 -  -  		sbc	hl, de
 1040 D1:CEDC 19 -  -  -  		add	hl, de
 1041 D1:CEDD 30 01 -  -  		jr	nc, $+3
 1042 D1:CEDF EB -  -  -  		ex	de, hl
 1043 D1:CEE0 18 1C -  -  		jr	+++_
 1044 D1:CEE2 B7 -  -  -  _:		or	a
 1045 D1:CEE3 ED 52 -  -  		sbc	hl, de
 1046 D1:CEE5 19 -  -  -  		add	hl, de
 1047 D1:CEE6 38 01 -  -  		jr	c, $+3
 1048 D1:CEE8 EB -  -  -  		ex	de, hl
 1049 D1:CEE9 18 13 -  -  		jr	++_
 1050 D1:CEEB EB -  -  -  _:		ex	de, hl
 1051 D1:CEEC DD 21 00 00 
              00 -  -  -  		ld	ix, 0
 1052 D1:CEF1 DD 39 -  -  		add	ix, sp
 1053 D1:CEF3 09 -  -  -  		add	hl, bc
 1054 D1:CEF4 E5 -  -  -  		push	hl
 1055 D1:CEF5 DD CB FF 1E 			rr	(ix-1)
 1056 D1:CEF9 D1 -  -  -  		pop	de
 1057 D1:CEFA CB 1A -  -  		rr	d
 1058 D1:CEFC CB 1B -  -  		rr	e
 1059 D1:CEFE E1 -  -  -  _:	pop	hl
 1060 D1:CEFF ED 1F -  -  	ld	(hl), de
 1061 D1:CF01 C9 -  -  -  	ret
 1062 D1:CF02 -  -  -  -  MaxMinMeanNumberVariable:
 1063 D1:CF02 C5 -  -  -  	push	bc
 1064 D1:CF03 E1 -  -  -  	pop	hl
 1065 D1:CF04 EB -  -  -  	ex	de, hl
 1066 D1:CF05 E5 -  -  -  	push	hl
 1067 D1:CF06 C1 -  -  -  	pop	bc
 1068 D1:CF07 18 2A -  -  	jr	MaxMinMeanVariableNumber
 1069 D1:CF09 -  -  -  -  MaxMinMeanNumberChainPush:
 1070 D1:CF09 C3 81 AF D1 	jp	UnknownError
 1071 D1:CF0D -  -  -  -  MaxMinMeanNumberChainAns:
 1072 D1:CF0D C5 -  -  -  	push	bc
 1073 D1:CF0E D1 -  -  -  	pop	de
 1074 D1:CF0F 18 09 -  -  	jr	+_
 1075 D1:CF11 -  -  -  -  MaxMinMeanNumberFunction:
 1076 D1:CF11 7B -  -  -  	ld	a, e
 1077 D1:CF12 C5 -  -  -  	push	bc
 1078 D1:CF13 06 02 -  -  		ld	b, OutputInHL
 1079 D1:CF15 CD 52 AD D1 		call	GetFunction
 1080 D1:CF19 D1 -  -  -  	pop	de
 1081 D1:CF1A C3 A0 CF D1 _:	jp	MaxMinMeanChainAnsNumber
 1082 D1:CF1E -  -  -  -  MaxMinMeanVariableXXX:
 1083 D1:CF1E DD 7D -  -  	ld	a, ixl
 1084 D1:CF20 B7 -  -  -  	or	a
 1085 D1:CF21 28 10 -  -  	jr	z, MaxMinMeanVariableNumber
 1086 D1:CF23 3D -  -  -  	dec	a
 1087 D1:CF24 28 13 -  -  	jr	z, MaxMinMeanVariableVariable
 1088 D1:CF26 3D -  -  -  	dec	a
 1089 D1:CF27 28 18 -  -  	jr	z, MaxMinMeanVariableChainPush
 1090 D1:CF29 3D -  -  -  	dec	a
 1091 D1:CF2A 28 2B -  -  	jr	z, MaxMinMeanVariableChainAns
 1092 D1:CF2C 3D -  -  -  	dec	a
 1093 D1:CF2D 28 2F -  -  	jr	z, MaxMinMeanVariableFunction
 1094 D1:CF2F C3 47 AF D1 	jp	ErrorSyntax
 1095 D1:CF33 -  -  -  -  MaxMinMeanVariableNumber:
 1096 D1:CF33 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1097 D1:CF37 18 67 -  -  	jr	MaxMinMeanChainAnsNumber
 1098 D1:CF39 -  -  -  -  MaxMinMeanVariableVariable
 1099 D1:CF39 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1100 D1:CF3D C3 BD CF D1 	jp	MaxMinMeanChainAnsVariable
 1101 D1:CF41 -  -  -  -  MaxMinMeanVariableChainPush:
 1102 D1:CF41 2A 39 EC D1 	ld	hl, (programPtr)
 1103 D1:CF45 2B -  -  -  	dec	hl
 1104 D1:CF46 7E -  -  -  	ld	a, (hl)
 1105 D1:CF47 FE E5 -  -  	cp	0E5h
 1106 D1:CF49 28 03 -  -  	jr	z, +_
 1107 D1:CF4B 36 E1 -  -  	ld	(hl), 0E1h
 1108 D1:CF4D 23 -  -  -  	inc	hl
 1109 D1:CF4E 22 39 EC D1 _:	ld	(programPtr), hl
 1110 D1:CF52 59 -  -  -  	ld	e, c
 1111 D1:CF53 C3 BD CF D1 	jp	MaxMinMeanChainAnsVariable
 1112 D1:CF57 -  -  -  -  MaxMinMeanVariableChainAns:
 1113 D1:CF57 59 -  -  -  _:	ld	e, c
 1114 D1:CF58 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1115 D1:CF5C 18 49 -  -  	jr	MaxMinMeanInsert
 1116 D1:CF5E -  -  -  -  MaxMinMeanVariableFunction:
 1117 D1:CF5E 7B -  -  -  	ld	a, e
 1118 D1:CF5F 06 02 -  -  	ld	b, OutputInHL
 1119 D1:CF61 CD 52 AD D1 	call	GetFunction
 1120 D1:CF65 18 F0 -  -  	jr	-_
 1121 D1:CF67 -  -  -  -  MaxMinMeanChainPushXXX:
 1122 D1:CF67 DD 7D -  -  	ld	a, ixl
 1123 D1:CF69 FE 03 -  -  	cp	typeChainAns
 1124 D1:CF6B C2 81 AF D1 	jp	nz, UnknownError
 1125 D1:CF6F FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1126 D1:CF73 20 0E -  -  	jr	nz, +_
 1127 D1:CF75 3E EB -  -  	ld	a, 0EBh
 1128 D1:CF77 CD 26 AD D1 	call	InsertA															;	ex de, hl
 1129 D1:CF7B 3E E1 -  -  	ld	a, 0E1h
 1130 D1:CF7D CD 26 AD D1 	call	InsertA															;	pop hl
 1131 D1:CF81 18 24 -  -  	jr	MaxMinMeanInsert
 1132 D1:CF83 3E D1 -  -  _:	ld	a, 0D1h
 1133 D1:CF85 CD 26 AD D1 	call	InsertA															;	pop de
 1134 D1:CF89 18 1C -  -  	jr	MaxMinMeanInsert
 1135 D1:CF8B -  -  -  -  MaxMinMeanChainAnsXXX:
 1136 D1:CF8B DD 7D -  -  	ld	a, ixl
 1137 D1:CF8D B7 -  -  -  	or	a
 1138 D1:CF8E 28 10 -  -  	jr	z, MaxMinMeanChainAnsNumber
 1139 D1:CF90 3D -  -  -  	dec	a
 1140 D1:CF91 28 2A -  -  	jr	z, MaxMinMeanChainAnsVariable
 1141 D1:CF93 3D -  -  -  	dec	a
 1142 D1:CF94 28 2D -  -  	jr	z, MaxMinMeanChainAnsChainPush
 1143 D1:CF96 3D -  -  -  	dec	a
 1144 D1:CF97 28 2E -  -  	jr	z, MaxMinMeanChainAnsChainAns
 1145 D1:CF99 3D -  -  -  	dec	a
 1146 D1:CF9A 28 2F -  -  	jr	z, MaxMinMeanChainAnsFunction
 1147 D1:CF9C C3 47 AF D1 	jp	ErrorSyntax
 1148 D1:CFA0 -  -  -  -  MaxMinMeanChainAnsNumber:
 1149 D1:CFA0 EB -  -  -  	ex	de, hl
 1150 D1:CFA1 3E 11 -  -  	ld	a, 011h
 1151 D1:CFA3 CD 5A AC D1 	call	InsertAHL															;	ld de, *
 1152 D1:CFA7 -  -  -  -  MaxMinMeanInsert:
 1153 D1:CFA7 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1154 D1:CFAB C2 37 D0 D1 	jp	nz, MeanInsert
 1155 D1:CFAF 3E B7 -  -  	ld	a, 0B7h
 1156 D1:CFB1 11 ED 52 19 	ld	de, 01952EDh
 1157 D1:CFB5 -  -  -  -  MaxMinMeanInsertSMC = $+1
 1158 D1:CFB5 21 30 01 EB 	ld	hl, 0EB0130h
 1159 D1:CFB9 C3 A6 AC D1 	jp	InsertADEHL															;	or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
 1160 D1:CFBD -  -  -  -  MaxMinMeanChainAnsVariable:
 1161 D1:CFBD CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1162 D1:CFC1 18 E4 -  -  	jr	MaxMinMeanInsert
 1163 D1:CFC3 -  -  -  -  MaxMinMeanChainAnsChainPush:
 1164 D1:CFC3 C3 81 AF D1 	jp	UnknownError
 1165 D1:CFC7 -  -  -  -  MaxMinMeanChainAnsChainAns:
 1166 D1:CFC7 C3 81 AF D1 	jp	UnknownError
 1167 D1:CFCB -  -  -  -  MaxMinMeanChainAnsFunction:
 1168 D1:CFCB 7B -  -  -  	ld	a, e
 1169 D1:CFCC 06 01 -  -  	ld	b, OutputInDE
 1170 D1:CFCE FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1171 D1:CFD2 CD 52 AD D1 	call	GetFunction
 1172 D1:CFD6 18 CF -  -  _:	jr	MaxMinMeanInsert
 1173 D1:CFD8 -  -  -  -  MaxMinMeanFunctionXXX:
 1174 D1:CFD8 DD 7D -  -  	ld	a, ixl
 1175 D1:CFDA B7 -  -  -  	or	a
 1176 D1:CFDB 28 10 -  -  	jr	z, MaxMinMeanFunctionNumber
 1177 D1:CFDD 3D -  -  -  	dec	a
 1178 D1:CFDE 28 16 -  -  	jr	z, MaxMinMeanFunctionVariable
 1179 D1:CFE0 3D -  -  -  	dec	a
 1180 D1:CFE1 28 1C -  -  	jr	z, MaxMinMeanFunctionChainPush
 1181 D1:CFE3 3D -  -  -  	dec	a
 1182 D1:CFE4 28 1D -  -  	jr	z, MaxMinMeanFunctionChainAns
 1183 D1:CFE6 3D -  -  -  	dec	a
 1184 D1:CFE7 28 38 -  -  	jr	z, MaxMinMeanFunctionFunction
 1185 D1:CFE9 C3 47 AF D1 	jp	ErrorSyntax
 1186 D1:CFED -  -  -  -  MaxMinMeanFunctionNumber:
 1187 D1:CFED 79 -  -  -  	ld	a, c
 1188 D1:CFEE 06 02 -  -  	ld	b, OutputInHL
 1189 D1:CFF0 CD 52 AD D1 	call	GetFunction
 1190 D1:CFF4 18 AA -  -  	jr	MaxMinMeanChainAnsNumber
 1191 D1:CFF6 -  -  -  -  MaxMinMeanFunctionVariable:
 1192 D1:CFF6 79 -  -  -  	ld	a, c
 1193 D1:CFF7 06 02 -  -  	ld	b, OutputInHL
 1194 D1:CFF9 CD 52 AD D1 	call	GetFunction
 1195 D1:CFFD 18 BE -  -  	jr	MaxMinMeanChainAnsVariable
 1196 D1:CFFF -  -  -  -  MaxMinMeanFunctionChainPush:
 1197 D1:CFFF C3 81 AF D1 	jp	UnknownError
 1198 D1:D003 -  -  -  -  MaxMinMeanFunctionChainAns:
 1199 D1:D003 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1200 D1:D007 20 13 -  -  	jr	nz, ++_
 1201 D1:D009 3E EB -  -  	ld	a, 0EBh
 1202 D1:D00B CD 26 AD D1 	call	InsertA															;	ex de, hl
 1203 D1:D00F 79 -  -  -  	ld	a, c
 1204 D1:D010 06 02 -  -  	ld	b, OutputInHL
 1205 D1:D012 FD CB C0 F6 _:	set	need_push, (iy+fExpression1)
 1206 D1:D016 CD 52 AD D1 	call	GetFunction
 1207 D1:D01A 18 8B -  -  	jr	MaxMinMeanInsert
 1208 D1:D01C 79 -  -  -  _:	ld	a, c
 1209 D1:D01D 06 01 -  -  	ld	b, OutputInDE
 1210 D1:D01F 18 F1 -  -  	jr	--_
 1211 D1:D021 -  -  -  -  MaxMinMeanFunctionFunction:
 1212 D1:D021 7B -  -  -  	ld	a, e
 1213 D1:D022 06 01 -  -  	ld	b, OutputInDE
 1214 D1:D024 CD 52 AD D1 	call	GetFunction
 1215 D1:D028 79 -  -  -  	ld	a, c
 1216 D1:D029 06 02 -  -  	ld	b, OutputInHL
 1217 D1:D02B FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1218 D1:D02F CD 52 AD D1 	call	GetFunction
 1219 D1:D033 C3 A7 CF D1 	jp	MaxMinMeanInsert
 1220 D1:D037 -  -  -  -  MeanInsert:
 1221 D1:D037 FD CB D0 6E 	bit	has_already_mean, (iy+fProgram1)
 1222 D1:D03B 20 2C -  -  	jr	nz, +_
 1223 D1:D03D 3E CD -  -  	ld	a, 0CDh
 1224 D1:D03F CD 26 AD D1 	call	InsertA															;	call *
 1225 D1:D043 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1226 D1:D047 2A 4E EC D1 	ld	hl, (programDataDataPtr)
 1227 D1:D04B 22 01 32 D0 	ld	(MeanStartData), hl
 1228 D1:D04F E5 -  -  -  	push	hl
 1229 D1:D050 D1 -  -  -  	pop	de
 1230 D1:D051 CD 5E AC D1 	call	InsertHL															;	call *
 1231 D1:D055 21 E5 EF D1 	ld	hl, MeanRoutine
 1232 D1:D059 01 18 00 00 	ld	bc, MeanRoutineEnd - MeanRoutine
 1233 D1:D05D ED B0 -  -  	ldir
 1234 D1:D05F ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1235 D1:D064 FD CB D0 EE 	set	has_already_mean, (iy+fProgram1)
 1236 D1:D068 C9 -  -  -  	ret
 1237 D1:D069 3E CD -  -  _:	ld	a, 0CDh
 1238 D1:D06B CD 26 AD D1 	call	InsertA															;	call ******
 1239 D1:D06F CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1240 D1:D073 2A 01 32 D0 	ld	hl, (MeanStartData)
 1241 D1:D077 C3 5E AC D1 	jp	InsertHL																;	call XXXXXX
 1242 D1:D07B -  -  -  -  	
 1243 D1:D07B -  -  -  -  functionSqrt:
 1244 D1:D07B 3E 01 -  -  	ld	a, 1
 1245 D1:D07D 32 57 EC D1 	ld	(amountOfArguments), a
 1246 D1:D081 FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
 1247 D1:D085 E5 -  -  -  	push	hl
 1248 D1:D086 DD E1 -  -  	pop	ix
 1249 D1:D088 DD 7E FC -  	ld	a, (ix-4)
 1250 D1:D08B B7 -  -  -  	or	a
 1251 D1:D08C 28 10 -  -  	jr	z, SqrtNumber
 1252 D1:D08E 3D -  -  -  	dec	a
 1253 D1:D08F 28 1E -  -  	jr	z, SqrtVariable
 1254 D1:D091 3D -  -  -  	dec	a
 1255 D1:D092 28 31 -  -  	jr	z, SqrtChainPush
 1256 D1:D094 3D -  -  -  	dec	a
 1257 D1:D095 28 32 -  -  	jr	z, SqrtChainAns
 1258 D1:D097 3D -  -  -  	dec	a
 1259 D1:D098 28 3F -  -  	jr	z, SqrtFunction
 1260 D1:D09A C3 47 AF D1 	jp	ErrorSyntax
 1261 D1:D09E -  -  -  -  SqrtNumber:
 1262 D1:D09E FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1263 D1:D0A2 DD 27 FD -  	ld	hl, (ix-3)
 1264 D1:D0A5 E5 -  -  -  	push	hl
 1265 D1:D0A6 C1 -  -  -  	pop	bc
 1266 D1:D0A7 CD 54 01 00 	call	__imulu
 1267 D1:D0AB DD 2F FD -  	ld	(ix-3), hl
 1268 D1:D0AE C9 -  -  -  	ret
 1269 D1:D0AF -  -  -  -  SqrtVariable:
 1270 D1:D0AF DD 4E FD -  	ld	c, (ix-3)
 1271 D1:D0B2 06 03 -  -  	ld	b, 3
 1272 D1:D0B4 ED 4C -  -  	mlt	bc
 1273 D1:D0B6 79 -  -  -  	ld	a, c
 1274 D1:D0B7 21 DD 27 00 	ld	hl, 00027DDh
 1275 D1:D0BB CD 70 1D 02 	call	_SetHLUToA
 1276 D1:D0BF CD 5E AC D1 	call	InsertHL															;	ld hl, (ix+*)
 1277 D1:D0C3 18 08 -  -  	jr	SqrtChainAns2
 1278 D1:D0C5 -  -  -  -  SqrtChainPush:
 1279 D1:D0C5 C3 81 AF D1 	jp	UnknownError
 1280 D1:D0C9 -  -  -  -  SqrtChainAns:
 1281 D1:D0C9 CD D5 AC D1 	call	MaybeChangeDEToHL
 1282 D1:D0CD -  -  -  -  SqrtChainAns2:
 1283 D1:D0CD 11 E5 C1 CD 	ld	de, 0CDC1E5h
 1284 D1:D0D1 21 58 01 00 	ld	hl, __imuls
 1285 D1:D0D5 C3 AA AC D1 	jp	InsertDEHL															;	push hl \ pop bc \ call __imuls
 1286 D1:D0D9 -  -  -  -  SqrtFunction:
 1287 D1:D0D9 DD 7E FD -  	ld	a, (ix-3)
 1288 D1:D0DC 06 02 -  -  	ld	b, OutputInHL
 1289 D1:D0DE CD 52 AD D1 	call	GetFunction
 1290 D1:D0E2 18 E9 -  -  	jr	SqrtChainAns2
 1291 D1:D0E4 -  -  -  -  	
 1292 D1:D0E4 -  -  -  -  functionC:
 1293 D1:D0E4 3E 01 -  -  	ld	a, 1
 1294 D1:D0E6 32 56 EC D1 	ld	(openedParensF), a
 1295 D1:D0EA CD 28 10 02 	call	_IncFetch
 1296 D1:D0EE CD 83 B2 D1 	call	ParseExpression
 1297 D1:D0F2 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
 1298 D1:D0F6 CA 47 AF D1 	jp	z, ErrorSyntax
 1299 D1:D0FA 2A 39 EC D1 	ld	hl, (programPtr)
 1300 D1:D0FE 2B -  -  -  	dec	hl
 1301 D1:D0FF 2B -  -  -  	dec	hl
 1302 D1:D100 2B -  -  -  	dec	hl
 1303 D1:D101 2B -  -  -  	dec	hl
 1304 D1:D102 22 39 EC D1 	ld	(programPtr), hl
 1305 D1:D106 23 -  -  -  	inc	hl
 1306 D1:D107 ED 27 -  -  	ld	hl, (hl)
 1307 D1:D109 11 54 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
 1308 D1:D10D B7 -  -  -  	or	a
 1309 D1:D10E ED 52 -  -  	sbc	hl, de
 1310 D1:D110 D2 47 AF D1 	jp	nc, ErrorSyntax
 1311 D1:D114 19 -  -  -  	add	hl, de
 1312 D1:D115 7D -  -  -  	ld	a, l
 1313 D1:D116 B7 -  -  -  	or	a
 1314 D1:D117 ED 62 -  -  	sbc	hl, hl
 1315 D1:D119 6F -  -  -  	ld	l, a
 1316 D1:D11A 11 6C EA D1 	ld	de, CFunctionsArguments
 1317 D1:D11E 19 -  -  -  	add	hl, de
 1318 D1:D11F 47 -  -  -  	ld	b, a
 1319 D1:D120 7E -  -  -  	ld	a, (hl)
 1320 D1:D121 FE E0 -  -  	cp	%11100000
 1321 D1:D123 CA 8D AF D1 	jp	z, ImplementError
 1322 D1:D127 FD 77 B0 -  	ld	(iy+fFunction1), a
 1323 D1:D12A 07 -  -  -  	rlca
 1324 D1:D12B 07 -  -  -  	rlca
 1325 D1:D12C 07 -  -  -  	rlca
 1326 D1:D12D E6 07 -  -  	and	000000111b
 1327 D1:D12F 4F -  -  -  	ld	c, a
 1328 D1:D130 78 -  -  -  	ld	a, b
 1329 D1:D131 06 03 -  -  	ld	b, 3
 1330 D1:D133 ED 4C -  -  	mlt	bc
 1331 D1:D135 21 CC EB D1 	ld	hl, CArguments
 1332 D1:D139 09 -  -  -  	add	hl, bc
 1333 D1:D13A ED 27 -  -  	ld	hl, (hl)
 1334 D1:D13C 32 EF E6 D1 	ld	(CFunctionArgsSMC), a
 1335 D1:D140 E9 -  -  -  	jp	(hl)
 1336 D1:D141 -  -  -  -  
 1337 D1:D141 -  -  -  -  functionCustom:
 1338 D1:D141 CD 28 10 02 	call	_IncFetch
 1339 D1:D145 D6 0A -  -  	sub	10
 1340 D1:D147 DA 47 AF D1 	jp  c, ErrorSyntax
 1341 D1:D14B FE 07 -  -  	cp	AMOUNT_OF_CUSTOM_TOKENS + 1
 1342 D1:D14D D2 47 AF D1 	jp	nc, ErrorSyntax
 1343 D1:D151 4F -  -  -  	ld	c, a
 1344 D1:D152 06 03 -  -  	ld	b, 3
 1345 D1:D154 ED 4C -  -  	mlt	bc
 1346 D1:D156 21 E1 EB D1 	ld	hl, functionCustomStart
 1347 D1:D15A 09 -  -  -  	add	hl, bc
 1348 D1:D15B ED 27 -  -  	ld	hl, (hl)
 1349 D1:D15D E9 -  -  -  	jp	(hl)
 1350 D1:D15E -  -  -  -  	
 1351 D1:D15E -  -  -  -  functionExecHex:
 1352 D1:D15E CD 28 10 02 	call	_IncFetch
 1353 D1:D162 D8 -  -  -  	ret	c
 1354 D1:D163 FE 3F -  -  	cp	a, tEnter
 1355 D1:D165 C8 -  -  -  	ret	z
 1356 D1:D166 FE 2A -  -  	cp	a, tString
 1357 D1:D168 C8 -  -  -  	ret	z
 1358 D1:D169 21 23 EC D1 	ld	hl, hexadecimals
 1359 D1:D16D 01 10 00 00 	ld	bc, 16
 1360 D1:D171 ED B1 -  -  	cpir
 1361 D1:D173 C2 47 AF D1 _:	jp	nz, ErrorSyntax
 1362 D1:D177 51 -  -  -  	ld	d, c
 1363 D1:D178 CD 28 10 02 	call	_IncFetch
 1364 D1:D17C DA 47 AF D1 	jp	c, ErrorSyntax
 1365 D1:D180 21 23 EC D1 	ld	hl, hexadecimals
 1366 D1:D184 01 10 00 00 	ld	bc, 16
 1367 D1:D188 ED B1 -  -  	cpir
 1368 D1:D18A 20 E7 -  -  	jr	nz, -_
 1369 D1:D18C 7A -  -  -  	ld	a, d
 1370 D1:D18D 87 -  -  -  	add	a, a
 1371 D1:D18E 87 -  -  -  	add	a, a
 1372 D1:D18F 87 -  -  -  	add	a, a
 1373 D1:D190 87 -  -  -  	add	a, a
 1374 D1:D191 81 -  -  -  	add	a, c
 1375 D1:D192 CD 26 AD D1 	call	InsertA
 1376 D1:D196 18 C6 -  -  	jr	functionExecHex
 1377 D1:D198 -  -  -  -      
 1378 D1:D198 -  -  -  -  functionSetBASICVar:
 1379 D1:D198 CD 28 10 02     call    _IncFetch
 1380 D1:D19C DA 47 AF D1 	jp      c, ErrorSyntax
 1381 D1:D1A0 FE 41 -  -      cp      a, tA
 1382 D1:D1A2 DA 47 AF D1     jp      c, ErrorSyntax
 1383 D1:D1A6 FE 5C -  -      cp      a, ttheta+1
 1384 D1:D1A8 D2 47 AF D1     jp      nc, ErrorSyntax
 1385 D1:D1AC F5 -  -  -      push    af
 1386 D1:D1AD CD 28 10 02             call    _IncFetch
 1387 D1:D1B1 DA 47 AF D1             jp      c, ErrorSyntax
 1388 D1:D1B5 FE 2B -  -              cp      a, tComma
 1389 D1:D1B7 C2 47 AF D1             jp      nz, ErrorSyntax
 1390 D1:D1BB CD 28 10 02             call    _IncFetch
 1391 D1:D1BF DA 47 AF D1             jp      c, ErrorSyntax
 1392 D1:D1C3 CD 83 B2 D1             call	ParseExpression
 1393 D1:D1C7 3E 06 -  -              ld      a, 006h
 1394 D1:D1C9 CD 26 AD D1             call    InsertA                                         ; ld b, *
 1395 D1:D1CD F1 -  -  -      pop     af
 1396 D1:D1CE CD 26 AD D1     call    InsertA
 1397 D1:D1D2 3E CD -  -      ld      a, 0CDh
 1398 D1:D1D4 CD 26 AD D1     call    InsertA
 1399 D1:D1D8 CD 3D AD D1     call    InsertProgramPtrToDataOffset
 1400 D1:D1DC FD CB CF 4E     bit     has_already_setvar, (iy+fProgram2)
 1401 D1:D1E0 FD CB CF CE     set     has_already_setvar, (iy+fProgram2)
 1402 D1:D1E4 28 08 -  -      jr      z, +_
 1403 D1:D1E6 2A 0D 32 D0     ld      hl, (SetBASICVarPtr)
 1404 D1:D1EA C3 5E AC D1     jp      InsertHL
 1405 D1:D1EE 2A 4E EC D1 _:  ld      hl, (programDataDataPtr)
 1406 D1:D1F2 22 0D 32 D0     ld      (SetBASICVarPtr), hl
 1407 D1:D1F6 E5 -  -  -      push    hl
 1408 D1:D1F7 CD 5E AC D1     call    InsertHL
 1409 D1:D1FB D1 -  -  -      pop     de
 1410 D1:D1FC 21 4E F0 D1     ld      hl, StoBASICVar
 1411 D1:D200 01 6A 00 00 	ld      bc, StoBASICVarEnd-StoBASICVar
 1412 D1:D204 ED B0 -  -  	ldir
 1413 D1:D206 ED 53 4E EC 
              D1 -  -  -  	ld      (programDataDataPtr), de
 1414 D1:D20B C9 -  -  -  	ret
 1415 D1:D20C -  -  -  -      
 1416 D1:D20C -  -  -  -  functionGetBASICVar:
 1417 D1:D20C 3E 06 -  -      ld      a, 006h
 1418 D1:D20E CD 26 AD D1     call    InsertA                                                 ; ld b, *
 1419 D1:D212 CD 28 10 02     call    _IncFetch
 1420 D1:D216 DA 47 AF D1 	jp      c, ErrorSyntax
 1421 D1:D21A FE 41 -  -      cp      a, tA
 1422 D1:D21C DA 47 AF D1     jp      c, ErrorSyntax
 1423 D1:D220 FE 5C -  -      cp      a, ttheta+1
 1424 D1:D222 D2 47 AF D1     jp      nc, ErrorSyntax
 1425 D1:D226 CD 26 AD D1     call    InsertA                                                 ; ld b, X
 1426 D1:D22A 3E CD -  -      ld      a, 0CDh
 1427 D1:D22C CD 26 AD D1     call    InsertA                                                 ; call *
 1428 D1:D230 CD 3D AD D1     call    InsertProgramPtrToDataOffset
 1429 D1:D234 FD CB CF 56     bit     has_already_getvar, (iy+fProgram2)
 1430 D1:D238 FD CB CF D6     set     has_already_getvar, (iy+fProgram2)
 1431 D1:D23C 28 0A -  -      jr      z, +_
 1432 D1:D23E 2A 10 32 D0     ld      hl, (GetBASICVarPtr)
 1433 D1:D242 CD 5E AC D1     call    InsertHL
 1434 D1:D246 18 1D -  -      jr      ++_
 1435 D1:D248 2A 4E EC D1 _:  ld      hl, (programDataDataPtr)
 1436 D1:D24C 22 10 32 D0     ld      (GetBASICVarPtr), hl
 1437 D1:D250 E5 -  -  -      push    hl
 1438 D1:D251 CD 5E AC D1     call    InsertHL
 1439 D1:D255 D1 -  -  -      pop     de
 1440 D1:D256 21 B8 F0 D1     ld      hl, GetBASICVar
 1441 D1:D25A 01 17 00 00 	ld      bc, GetBASICVarEnd-GetBASICVar
 1442 D1:D25E ED B0 -  -  	ldir
 1443 D1:D260 ED 53 4E EC 
              D1 -  -  -  	ld      (programDataDataPtr), de
 1444 D1:D265 3E DD -  -  _:  ld      a, 0DDh
 1445 D1:D267 CD 26 AD D1     call    InsertA                                                 ; ld (ix+*), hl
 1446 D1:D26B 3E 2F -  -      ld      a, 02Fh
 1447 D1:D26D CD 26 AD D1     call    InsertA                                                 ; ld (ix+*), hl
 1448 D1:D271 CD 28 10 02     call    _IncFetch
 1449 D1:D275 DA 47 AF D1     jp      c, ErrorSyntax
 1450 D1:D279 FE 2B -  -      cp      a, tComma
 1451 D1:D27B C2 47 AF D1     jp      nz, ErrorSyntax
 1452 D1:D27F CD 28 10 02     call    _IncFetch
 1453 D1:D283 DA 47 AF D1     jp      c, ErrorSyntax
 1454 D1:D287 FE 41 -  -      cp      a, tA
 1455 D1:D289 DA 47 AF D1     jp      c, ErrorSyntax
 1456 D1:D28D FE 5C -  -      cp      a, ttheta+1
 1457 D1:D28F D2 47 AF D1     jp      nc, ErrorSyntax
 1458 D1:D293 D6 41 -  -      sub     a, tA
 1459 D1:D295 47 -  -  -      ld      b, a
 1460 D1:D296 87 -  -  -      add     a, a
 1461 D1:D297 80 -  -  -      add     a, b
 1462 D1:D298 C3 26 AD D1     jp      InsertA                                                 ; ld (ix+*), hl
 1463 D1:D29C -  -  -  -  	
 1464 D1:D29C -  -  -  -  functionRoot:
 1465 D1:D29C 3E 01 -  -  	ld	a, 1
 1466 D1:D29E 32 57 EC D1 	ld	(amountOfArguments), a
 1467 D1:D2A2 E5 -  -  -  	push	hl
 1468 D1:D2A3 DD E1 -  -  	pop	ix
 1469 D1:D2A5 DD 7E FC -  	ld	a, (ix-4)
 1470 D1:D2A8 B7 -  -  -  	or	a
 1471 D1:D2A9 28 10 -  -  	jr	z, RootNumber
 1472 D1:D2AB 3D -  -  -  	dec	a
 1473 D1:D2AC 28 20 -  -  	jr	z, RootVariable
 1474 D1:D2AE 3D -  -  -  	dec	a
 1475 D1:D2AF 28 33 -  -  	jr	z, RootChainPush
 1476 D1:D2B1 3D -  -  -  	dec	a
 1477 D1:D2B2 28 34 -  -  	jr	z, RootChainAns
 1478 D1:D2B4 3D -  -  -  	dec	a
 1479 D1:D2B5 28 6A -  -  	jr	z, RootFunction
 1480 D1:D2B7 C3 47 AF D1 	jp	ErrorSyntax
 1481 D1:D2BB -  -  -  -  RootNumber:
 1482 D1:D2BB FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1483 D1:D2BF DD 27 FD -  	ld	hl, (ix-3)
 1484 D1:D2C2 FD E5 -  -  	push	iy
 1485 D1:D2C4 CD 11 F0 D1 		call	RootRoutine
 1486 D1:D2C8 FD E1 -  -  	pop	iy
 1487 D1:D2CA DD 2F FD -  	ld	(ix-3), hl
 1488 D1:D2CD C9 -  -  -  	ret
 1489 D1:D2CE -  -  -  -  RootVariable:
 1490 D1:D2CE DD 4E FD -  	ld	c, (ix-3)
 1491 D1:D2D1 06 03 -  -  	ld	b, 3
 1492 D1:D2D3 ED 4C -  -  	mlt	bc
 1493 D1:D2D5 79 -  -  -  	ld	a, c
 1494 D1:D2D6 21 DD 27 00 	ld	hl, 00027DDh
 1495 D1:D2DA CD 70 1D 02 	call	_SetHLUToA
 1496 D1:D2DE CD 5E AC D1 	call	InsertHL															;	ld hl, (ix+*)
 1497 D1:D2E2 18 04 -  -  	jr	RootChainAns
 1498 D1:D2E4 -  -  -  -  RootChainPush:
 1499 D1:D2E4 C3 81 AF D1 	jp	UnknownError
 1500 D1:D2E8 -  -  -  -  RootChainAns:
 1501 D1:D2E8 FD CB CF 46 	bit	has_already_root, (iy+fProgram2)
 1502 D1:D2EC FD CB CF C6 	set	has_already_root, (iy+fProgram2)
 1503 D1:D2F0 20 1D -  -  	jr	nz, RootChainAnsRecallRoutine
 1504 D1:D2F2 -  -  -  -  RootChainAnsAddRoutine:
 1505 D1:D2F2 FD CB AE CE 	set	modified_iy, (iy+fAlways1)
 1506 D1:D2F6 ED 5B 4E EC 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1507 D1:D2FB ED 53 07 32 
              D0 -  -  -  	ld	(RootStartData), de
 1508 D1:D300 21 11 F0 D1 	ld	hl, RootRoutine
 1509 D1:D304 01 2D 00 00 	ld	bc, RootRoutineEnd - RootRoutine
 1510 D1:D308 ED B0 -  -  	ldir
 1511 D1:D30A ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1512 D1:D30F -  -  -  -  RootChainAnsRecallRoutine:
 1513 D1:D30F 3E CD -  -  	ld	a, 0CDh
 1514 D1:D311 CD 26 AD D1 	call	InsertA															;	call *
 1515 D1:D315 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1516 D1:D319 2A 07 32 D0 	ld	hl, (RootStartData)
 1517 D1:D31D C3 5E AC D1 	jp	InsertHL																;	call *
 1518 D1:D321 -  -  -  -  RootFunction:
 1519 D1:D321 DD 7E FD -  	ld	a, (ix-3)
 1520 D1:D324 06 02 -  -  	ld	b, OutputInHL
 1521 D1:D326 CD 52 AD D1 	call	GetFunction
 1522 D1:D32A 18 BC -  -  	jr	RootChainAns
 1523 D1:D32C -  -  -  -  	
 1524 D1:D32C -  -  -  -  	
 1525 D1:D32C -  -  -  -  	
 1526 D1:D32C -  -  -  -  	
 1527 D1:D32C -  -  -  -  	
 1528 D1:D32C -  -  -  -  	
 1529 D1:D32C -  -  -  -  	
 1530 D1:D32C -  -  -  -  functionDefineSprite:
 1531 D1:D32C FD CB D0 7E 	bit	used_code, (iy+fProgram1)
 1532 D1:D330 C2 6F AF D1 	jp	nz, ErrorUsedCode
 1533 D1:D334 3E 01 -  -  	ld	a, 1
 1534 D1:D336 32 56 EC D1 	ld	(openedParensF), a
 1535 D1:D33A CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1536 D1:D33E 2A 4E EC D1 	ld	hl, (programDataDataPtr)
 1537 D1:D342 E5 -  -  -  	push	hl
 1538 D1:D343 D1 -  -  -  	pop	de
 1539 D1:D344 CD 5E AC D1 	call	InsertHL
 1540 D1:D348 06 02 -  -  	ld	b, 2
 1541 D1:D34A D5 -  -  -  _:	push	de
 1542 D1:D34B C5 -  -  -  		push	bc
 1543 D1:D34C CD 28 10 02 			call	_IncFetch
 1544 D1:D350 CD 83 B2 D1 			call	ParseExpression
 1545 D1:D354 FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
 1546 D1:D358 CA 47 AF D1 			jp	z, ErrorSyntax
 1547 D1:D35C FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
 1548 D1:D360 CA 47 AF D1 			jp	z, ErrorSyntax
 1549 D1:D364 2A 39 EC D1 			ld	hl, (programPtr)
 1550 D1:D368 2B -  -  -  			dec	hl
 1551 D1:D369 2B -  -  -  			dec	hl
 1552 D1:D36A 2B -  -  -  			dec	hl
 1553 D1:D36B 2B -  -  -  			dec	hl
 1554 D1:D36C 22 39 EC D1 			ld	(programPtr), hl
 1555 D1:D370 23 -  -  -  			inc	hl
 1556 D1:D371 7E -  -  -  			ld	a, (hl)
 1557 D1:D372 C1 -  -  -  		pop	bc
 1558 D1:D373 D1 -  -  -  	pop	de
 1559 D1:D374 12 -  -  -  	ld	(de), a
 1560 D1:D375 13 -  -  -  	inc	de
 1561 D1:D376 10 D2 -  -  	djnz	-_
 1562 D1:D378 2A 39 EC D1 	ld	hl, (programPtr)
 1563 D1:D37C E5 -  -  -  	push	hl
 1564 D1:D37D ED 53 39 EC 
              D1 -  -  -  		ld	(programPtr), de
 1565 D1:D382 CD 28 10 02 		call	_IncFetch
 1566 D1:D386 FE 2A -  -  		cp	tString
 1567 D1:D388 C2 47 AF D1 		jp	nz, ErrorSyntax
 1568 D1:D38C CD C0 0F 02 		call	_NxtFetch
 1569 D1:D390 DA 47 AF D1 		jp	c, ErrorSyntax
 1570 D1:D394 FE 3F -  -  		cp	tEnter
 1571 D1:D396 CA 47 AF D1 		jp	z, ErrorSyntax
 1572 D1:D39A CD 5E D1 D1 		call	functionExecHex
 1573 D1:D39E 2A 39 EC D1 		ld	hl, (programPtr)
 1574 D1:D3A2 22 4E EC D1 		ld	(programDataDataPtr), hl
 1575 D1:D3A6 E1 -  -  -  	pop	hl
 1576 D1:D3A7 22 39 EC D1 	ld	(programPtr), hl
 1577 D1:D3AB C9 -  -  -  	ret
 1578 D1:D3AC -  -  -  -  	
 1579 D1:D3AC -  -  -  -  functionCompilePrgm:
 1580 D1:D3AC 2A F8 05 D0 	ld	hl, (OP1)
 1581 D1:D3B0 E5 -  -  -  	push	hl
 1582 D1:D3B1 2A FB 05 D0 		ld	hl, (OP1+3)
 1583 D1:D3B5 E5 -  -  -  		push	hl
 1584 D1:D3B6 2A FE 05 D0 			ld	hl, (OP1+6)
 1585 D1:D3BA E5 -  -  -  			push	hl
 1586 D1:D3BB 21 F8 05 D0                 ld	hl, OP1
 1587 D1:D3BF CD EC B1 D1                 call	GetProgramName
 1588 D1:D3C3 3E 05 -  -                  ld	a, ProgObj
 1589 D1:D3C5 32 F8 05 D0                 ld	(OP1), a
 1590 D1:D3C9 CD 0C 05 02                 call	_ChkFindSym
 1591 D1:D3CD 30 0D -  -                  jr	nc, +_
 1592 D1:D3CF 21 F8 05 D0                 ld	hl, OP1
 1593 D1:D3D3 34 -  -  -                  inc	(hl)
 1594 D1:D3D4 CD 0C 05 02                 call	_ChkFindSym
 1595 D1:D3D8 DA 69 AF D1                 jp	c, ErrorNotFound
 1596 D1:D3DC CD 98 1F 02 _:	            call	_ChkInRAM
 1597 D1:D3E0 30 0A -  -                  jr	nc, +_
 1598 D1:D3E2 EB -  -  -                  ex	de, hl
 1599 D1:D3E3 11 09 00 00                 ld	de, 9
 1600 D1:D3E7 19 -  -  -                  add	hl, de
 1601 D1:D3E8 5E -  -  -                  ld	e, (hl)
 1602 D1:D3E9 19 -  -  -                  add	hl, de
 1603 D1:D3EA 23 -  -  -                  inc	hl
 1604 D1:D3EB EB -  -  -                  ex	de, hl
 1605 D1:D3EC 2A 17 23 D0 _:				ld	hl, (begPC)
 1606 D1:D3F0 E5 -  -  -  				push	hl
 1607 D1:D3F1 2A 1A 23 D0 					ld	hl, (curPC)
 1608 D1:D3F5 E5 -  -  -  					push	hl
 1609 D1:D3F6 2A 1D 23 D0 						ld	hl, (endPC)
 1610 D1:D3FA E5 -  -  -  						push	hl
 1611 D1:D3FB EB -  -  -  							ex	de, hl
 1612 D1:D3FC 01 00 00 00 							ld	bc, 0
 1613 D1:D400 4E -  -  -  							ld	c, (hl)
 1614 D1:D401 23 -  -  -  							inc	hl
 1615 D1:D402 22 1A 23 D0 							ld	(curPC), hl
 1616 D1:D406 46 -  -  -  							ld	b, (hl)
 1617 D1:D407 23 -  -  -  							inc	hl
 1618 D1:D408 22 17 23 D0 							ld	(begPC), hl
 1619 D1:D40C 09 -  -  -  							add	hl, bc
 1620 D1:D40D 2B -  -  -  							dec	hl
 1621 D1:D40E 22 1D 23 D0 							ld	(endPC), hl
 1622 D1:D412 CD 8E B0 D1 							call	PrintCompilingProgram
 1623 D1:D416 21 5F EC D1 							ld	hl, AmountOfSubPrograms
 1624 D1:D41A 34 -  -  -  							inc	(hl)
 1625 D1:D41B CD 7E AA D1 							call	CompileProgramFull
 1626 D1:D41F E1 -  -  -  						pop	hl
 1627 D1:D420 22 1D 23 D0 						ld	(endPC), hl
 1628 D1:D424 E1 -  -  -  					pop	hl
 1629 D1:D425 22 1A 23 D0 					ld	(curPC), hl
 1630 D1:D429 E1 -  -  -  				pop	hl
 1631 D1:D42A 22 17 23 D0 				ld	(begPC), hl
 1632 D1:D42E E1 -  -  -  			pop	hl
 1633 D1:D42F 22 FE 05 D0 			ld	(OP1+6), hl
 1634 D1:D433 E1 -  -  -  		pop	hl
 1635 D1:D434 22 FB 05 D0 		ld	(OP1+3), hl
 1636 D1:D438 E1 -  -  -  	pop	hl
 1637 D1:D439 22 F8 05 D0 	ld	(OP1), hl
 1638 D1:D43D C3 8E B0 D1 	jp	PrintCompilingProgram
Listing for file "ice.asm"
  452 D1:D441 -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\operators.asm"
    1 D1:D441 -  -  -  -  ExecuteOperator:
    2 D1:D441 32 F7 31 D0 	ld	(tempToken2), a
    3 D1:D445 21 5E EC D1 	ld	hl, ExprOutput2
    4 D1:D449 36 01 -  -  	ld	(hl), OutputIsInHL
    5 D1:D44B B7 -  -  -  	or	a
    6 D1:D44C CA 96 D4 D1 	jp	z, ListElementXXX
    7 D1:D450 FE 6D -  -  	cp	tLE
    8 D1:D452 CC 90 DC D1 	call	z, SwapLEToGE
    9 D1:D456 FE 6B -  -  	cp	tLT
   10 D1:D458 CC 94 DC D1 	call	z, SwapLTToGT
   11 D1:D45C 32 F6 31 D0 	ld	(tempToken), a
   12 D1:D460 C5 -  -  -  	push	bc
   13 D1:D461 21 C0 EA D1 		ld	hl, operators_booleans
   14 D1:D465 01 0E 00 00 		ld	bc, 14
   15 D1:D469 ED B1 -  -  		cpir
   16 D1:D46B 21 CF EA D1 		ld	hl, operators_special
   17 D1:D46F 09 -  -  -  		add	hl, bc
   18 D1:D470 4E -  -  -  		ld	c, (hl)
   19 D1:D471 79 -  -  -  		ld	a, c
   20 D1:D472 FE 04 -  -  		cp	4
   21 D1:D474 20 04 -  -  		jr	nz, +_
   22 D1:D476 FD CB C0 EE 		set	ans_set_z_flag, (iy+fExpression1)
   23 D1:D47A 06 12 -  -  _:		ld	b, 18
   24 D1:D47C ED 4C -  -  		mlt	bc
   25 D1:D47E 21 3C EB D1 		ld	hl, operator_start											;	start of bunch jumps
   26 D1:D482 09 -  -  -  		add	hl, bc														;	start of right operator
   27 D1:D483 DD 7E F8 -  		ld	a, (ix-8)
   28 D1:D486 4F -  -  -  		ld	c, a
   29 D1:D487 FE 06 -  -  		cp	6
   30 D1:D489 D2 47 AF D1 		jp	nc, ErrorSyntax
   31 D1:D48D 06 03 -  -  		ld	b, 3
   32 D1:D48F ED 4C -  -  		mlt	bc
   33 D1:D491 09 -  -  -  		add	hl, bc														;	start of right subelement
   34 D1:D492 ED 27 -  -  		ld	hl, (hl)
   35 D1:D494 C1 -  -  -  	pop	bc
   36 D1:D495 E9 -  -  -  	jp	(hl)
   37 D1:D496 -  -  -  -  	
   38 D1:D496 -  -  -  -  ListElementXXX:
   39 D1:D496 DD 7E FC -  	ld	a, (ix-4)
   40 D1:D499 B7 -  -  -  	or	a
   41 D1:D49A 28 0C -  -  	jr	z, ListElementNumber
   42 D1:D49C 3D -  -  -  	dec	a
   43 D1:D49D 28 14 -  -  	jr	z, ListElementVariable
   44 D1:D49F 3D -  -  -  	dec	a
   45 D1:D4A0 28 17 -  -  	jr	z, ListElementChainPush
   46 D1:D4A2 3D -  -  -  	dec	a
   47 D1:D4A3 28 18 -  -  	jr	z, ListElementChainAns
   48 D1:D4A5 3D -  -  -  	dec	a
   49 D1:D4A6 28 31 -  -  	jr	z, ListElementFunction
   50 D1:D4A8 -  -  -  -  ListElementNumber:
   51 D1:D4A8 3E 2A -  -  	ld	a, 02Ah
   52 D1:D4AA C5 -  -  -  	push	bc
   53 D1:D4AB E1 -  -  -  	pop	hl
   54 D1:D4AC 19 -  -  -  	add	hl, de
   55 D1:D4AD 19 -  -  -  	add	hl, de
   56 D1:D4AE 19 -  -  -  	add	hl, de
   57 D1:D4AF C3 5A AC D1 	jp	InsertAHL															;	ld hl, (*)
   58 D1:D4B3 -  -  -  -  ListElementVariable:
   59 D1:D4B3 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
   60 D1:D4B7 18 08 -  -  	jr	+_
   61 D1:D4B9 -  -  -  -  ListElementChainPush:
   62 D1:D4B9 C3 81 AF D1 	jp	UnknownError
   63 D1:D4BD -  -  -  -  ListElementChainAns:
   64 D1:D4BD CD CB AC D1 	call	MaybeChangeHLToDE
   65 D1:D4C1 3E 21 -  -  _:	ld	a, 021h
   66 D1:D4C3 C5 -  -  -  	push	bc
   67 D1:D4C4 D1 -  -  -  	pop	de
   68 D1:D4C5 21 19 19 19 	ld	hl, 0191919h
   69 D1:D4C9 CD A6 AC D1 	call	InsertADEHL														;	ld hl, * \ add hl, de \ add hl, de \ add hl, de
   70 D1:D4CD 3E ED -  -  	ld	a, 0EDh
   71 D1:D4CF CD 26 AD D1 	call	InsertA															;	ld hl, (hl) (1)
   72 D1:D4D3 3E 27 -  -  	ld	a, 027h
   73 D1:D4D5 C3 26 AD D1 	jp	InsertA																;	ld hl, (hl) (2)
   74 D1:D4D9 -  -  -  -  ListElementFunction:
   75 D1:D4D9 7B -  -  -  	ld	a, e
   76 D1:D4DA 06 01 -  -  	ld	b, OutputInDE
   77 D1:D4DC CD 52 AD D1 	call	GetFunction
   78 D1:D4E0 18 DF -  -  	jr	-_
   79 D1:D4E2 -  -  -  -  	
   80 D1:D4E2 -  -  -  -  SubNumberXXX:
   81 D1:D4E2 DD 7E FC -  	ld	a, (ix-4)
   82 D1:D4E5 B7 -  -  -  	or	a
   83 D1:D4E6 28 10 -  -  	jr	z, SubNumberNumber
   84 D1:D4E8 3D -  -  -  	dec	a
   85 D1:D4E9 28 1A -  -  	jr	z, SubNumberVariable
   86 D1:D4EB 3D -  -  -  	dec	a
   87 D1:D4EC 28 23 -  -  	jr	z, SubNumberChainPush
   88 D1:D4EE 3D -  -  -  	dec	a
   89 D1:D4EF 28 24 -  -  	jr	z, SubNumberChainAns
   90 D1:D4F1 3D -  -  -  	dec	a
   91 D1:D4F2 28 31 -  -  	jr	z, SubNumberFunction
   92 D1:D4F4 C3 DC AE D1 	jp	SubError
   93 D1:D4F8 -  -  -  -  SubNumberNumber:
   94 D1:D4F8 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
   95 D1:D4FC C5 -  -  -  	push	bc
   96 D1:D4FD E1 -  -  -  	pop	hl
   97 D1:D4FE B7 -  -  -  	or	a
   98 D1:D4FF ED 52 -  -  	sbc	hl, de
   99 D1:D501 DD 2F F9 -  	ld	(ix-7), hl
  100 D1:D504 C9 -  -  -  	ret
  101 D1:D505 -  -  -  -  SubNumberVariable:
  102 D1:D505 3E 21 -  -  	ld	a, 021h
  103 D1:D507 C5 -  -  -  	push	bc
  104 D1:D508 E1 -  -  -  	pop	hl
  105 D1:D509 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  106 D1:D50D C3 36 D6 D1 	jp	SubChainAnsVariable
  107 D1:D511 -  -  -  -  SubNumberChainPush:
  108 D1:D511 C3 81 AF D1 	jp	UnknownError
  109 D1:D515 -  -  -  -  SubNumberChainAns:
  110 D1:D515 CD CB AC D1 	call	MaybeChangeHLToDE
  111 D1:D519 3E 21 -  -  	ld	a, 021h
  112 D1:D51B C5 -  -  -  	push	bc
  113 D1:D51C D1 -  -  -  	pop	de
  114 D1:D51D 21 B7 ED 52 	ld	hl, 052EDB7h
  115 D1:D521 C3 A6 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  116 D1:D525 -  -  -  -  SubNumberFunction:
  117 D1:D525 7B -  -  -  	ld	a, e
  118 D1:D526 C5 -  -  -  	push	bc
  119 D1:D527 06 01 -  -  		ld	b, OutputInDE
  120 D1:D529 CD 52 AD D1 		call	GetFunction
  121 D1:D52D 3E 21 -  -  		ld	a, 021h
  122 D1:D52F D1 -  -  -  	pop	de
  123 D1:D530 21 B7 ED 52 	ld	hl, 052EDB7h
  124 D1:D534 C3 A6 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  125 D1:D538 -  -  -  -  SubVariableXXX:
  126 D1:D538 DD 7E FC -  	ld	a, (ix-4)
  127 D1:D53B B7 -  -  -  	or	a
  128 D1:D53C 28 12 -  -  	jr	z, SubVariableNumber
  129 D1:D53E 3D -  -  -  	dec	a
  130 D1:D53F 28 17 -  -  	jr	z, SubVariableVariable
  131 D1:D541 3D -  -  -  	dec	a
  132 D1:D542 28 2E -  -  	jr	z, SubVariableChainPush
  133 D1:D544 3D -  -  -  	dec	a
  134 D1:D545 28 2F -  -  	jr	z, SubVariableChainAns
  135 D1:D547 3D -  -  -  	dec	a
  136 D1:D548 CA 86 D5 D1 	jp	z, SubVariableFunction
  137 D1:D54C C3 DC AE D1 	jp	SubError
  138 D1:D550 -  -  -  -  SubVariableNumber:
  139 D1:D550 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  140 D1:D554 C3 F3 D5 D1 	jp	SubChainAnsNumber
  141 D1:D558 -  -  -  -  SubVariableVariable:
  142 D1:D558 79 -  -  -  	ld	a, c
  143 D1:D559 BB -  -  -  	cp	e
  144 D1:D55A 20 0E -  -  	jr	nz, +_
  145 D1:D55C FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  146 D1:D560 36 00 -  -  	ld	(hl), typeNumber
  147 D1:D562 11 00 00 00 	ld	de, 0
  148 D1:D566 23 -  -  -  	inc	hl
  149 D1:D567 ED 1F -  -  	ld	(hl), de
  150 D1:D569 C9 -  -  -  	ret
  151 D1:D56A CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  152 D1:D56E C3 36 D6 D1 	jp	SubChainAnsVariable
  153 D1:D572 -  -  -  -  SubVariableChainPush:
  154 D1:D572 C3 81 AF D1 	jp	UnknownError
  155 D1:D576 -  -  -  -  SubVariableChainAns:
  156 D1:D576 CD CB AC D1 	call	MaybeChangeHLToDE
  157 D1:D57A CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  158 D1:D57E 21 B7 ED 52 	ld	hl, 052EDB7h
  159 D1:D582 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  160 D1:D586 -  -  -  -  SubVariableFunction:
  161 D1:D586 7B -  -  -  	ld	a, e
  162 D1:D587 06 01 -  -  	ld	b, OutputInDE
  163 D1:D589 CD 52 AD D1 	call	GetFunction
  164 D1:D58D CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  165 D1:D591 21 B7 ED 52 	ld	hl, 052EDB7h
  166 D1:D595 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  167 D1:D599 -  -  -  -  SubChainPushXXX:
  168 D1:D599 DD 7E FC -  	ld	a, (ix-4)
  169 D1:D59C B7 -  -  -  	or	a
  170 D1:D59D 28 12 -  -  	jr	z, SubChainPushNumber
  171 D1:D59F 3D -  -  -  	dec	a
  172 D1:D5A0 28 17 -  -  	jr	z, SubChainPushVariable
  173 D1:D5A2 3D -  -  -  	dec	a
  174 D1:D5A3 28 1C -  -  	jr	z, SubChainPushChainPush
  175 D1:D5A5 3D -  -  -  	dec	a
  176 D1:D5A6 28 1D -  -  	jr	z, SubChainPushChainAns
  177 D1:D5A8 3D -  -  -  	dec	a
  178 D1:D5A9 CA D3 D5 D1 	jp	z, SubChainPushFunction
  179 D1:D5AD C3 DC AE D1 	jp	SubError
  180 D1:D5B1 -  -  -  -  SubChainPushNumber:
  181 D1:D5B1 3E E1 -  -  	ld	a, 0E1h
  182 D1:D5B3 CD 26 AD D1 	call	InsertA															;	pop hl
  183 D1:D5B7 18 3A -  -  	jr	SubChainAnsNumber
  184 D1:D5B9 -  -  -  -  SubChainPushVariable:
  185 D1:D5B9 3E E1 -  -  	ld	a, 0E1h
  186 D1:D5BB CD 26 AD D1 	call	InsertA															;	pop hl
  187 D1:D5BF 18 75 -  -  	jr	SubChainAnsVariable
  188 D1:D5C1 -  -  -  -  SubChainPushChainPush:
  189 D1:D5C1 C3 81 AF D1 	jp	UnknownError
  190 D1:D5C5 -  -  -  -  SubChainPushChainAns:
  191 D1:D5C5 CD CB AC D1 	call	MaybeChangeHLToDE
  192 D1:D5C9 3E E1 -  -  	ld	a, 0E1h
  193 D1:D5CB 21 B7 ED 52 	ld	hl, 052EDB7h
  194 D1:D5CF C3 5A AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  195 D1:D5D3 -  -  -  -  SubChainPushFunction:
  196 D1:D5D3 3E E1 -  -  	ld	a, 0E1h
  197 D1:D5D5 CD 26 AD D1 	call	InsertA															;	pop hl
  198 D1:D5D9 18 73 -  -  	jr	SubChainAnsFunction
  199 D1:D5DB -  -  -  -  SubChainAnsXXX:
  200 D1:D5DB DD 7E FC -  	ld	a, (ix-4)
  201 D1:D5DE B7 -  -  -  	or	a
  202 D1:D5DF 28 12 -  -  	jr	z, SubChainAnsNumber
  203 D1:D5E1 3D -  -  -  	dec	a
  204 D1:D5E2 28 52 -  -  	jr	z, SubChainAnsVariable
  205 D1:D5E4 3D -  -  -  	dec	a
  206 D1:D5E5 28 5F -  -  	jr	z, SubChainAnsChainPush
  207 D1:D5E7 3D -  -  -  	dec	a
  208 D1:D5E8 28 60 -  -  	jr	z, SubChainAnsChainAns
  209 D1:D5EA 3D -  -  -  	dec	a
  210 D1:D5EB CA 4E D6 D1 	jp	z, SubChainAnsFunction
  211 D1:D5EF C3 DC AE D1 	jp	SubError
  212 D1:D5F3 -  -  -  -  SubChainAnsNumber:
  213 D1:D5F3 B7 -  -  -  	or	a
  214 D1:D5F4 ED 62 -  -  	sbc	hl, hl
  215 D1:D5F6 EB -  -  -  	ex	de, hl
  216 D1:D5F7 ED 52 -  -  	sbc	hl, de
  217 D1:D5F9 C8 -  -  -  	ret	z
  218 D1:D5FA 1E 07 -  -  	ld	e, 7
  219 D1:D5FC ED 52 -  -  	sbc	hl, de
  220 D1:D5FE 30 1C -  -  	jr	nc, SubHLDE
  221 D1:D600 19 -  -  -  	add	hl, de
  222 D1:D601 45 -  -  -  	ld	b, l
  223 D1:D602 3A 5D EC D1 	ld	a, (ExprOutput)
  224 D1:D606 B7 -  -  -  	or	a
  225 D1:D607 28 09 -  -  	jr	z, ++_
  226 D1:D609 3E 2B -  -  	ld	a, 02Bh
  227 D1:D60B CD 26 AD D1 _:	call	InsertA															;	dec hl/de
  228 D1:D60F 10 FA -  -  	djnz	-_
  229 D1:D611 C9 -  -  -  	ret
  230 D1:D612 3E 00 -  -  _:	ld	a, OutputIsInDE
  231 D1:D614 32 5E EC D1 	ld	(ExprOutput2), a
  232 D1:D618 3E 1B -  -  	ld	a, 01Bh
  233 D1:D61A 18 EF -  -  	jr	--_
  234 D1:D61C -  -  -  -  SubHLDE:
  235 D1:D61C 19 -  -  -  	add	hl, de
  236 D1:D61D CD 60 01 00 	call	__ineg
  237 D1:D621 3A 5D EC D1 	ld	a, (ExprOutput)
  238 D1:D625 B7 -  -  -  	or	a
  239 D1:D626 3E 11 -  -  	ld	a, 011h
  240 D1:D628 20 02 -  -  	jr	nz, +_
  241 D1:D62A 3E 21 -  -  	ld	a, 021h
  242 D1:D62C CD 5A AC D1 _:	call	InsertAHL															;	ld hl/de, 16777215-*
  243 D1:D630 3E 19 -  -  	ld	a, 019h
  244 D1:D632 C3 26 AD D1 	jp	InsertA																;	add hl, de
  245 D1:D636 -  -  -  -  SubChainAnsVariable:
  246 D1:D636 CD D5 AC D1 	call	MaybeChangeDEToHL
  247 D1:D63A CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
  248 D1:D63E 21 B7 ED 52 	ld	hl, 052EDB7h
  249 D1:D642 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  250 D1:D646 -  -  -  -  SubChainAnsChainPush:
  251 D1:D646 C3 81 AF D1 	jp	UnknownError
  252 D1:D64A -  -  -  -  SubChainAnsChainAns:
  253 D1:D64A C3 81 AF D1 	jp	UnknownError
  254 D1:D64E -  -  -  -  SubChainAnsFunction:
  255 D1:D64E 3A 5D EC D1 	ld	a, (ExprOutput)
  256 D1:D652 87 -  -  -  	add	a, a
  257 D1:D653 87 -  -  -  	add	a, a
  258 D1:D654 87 -  -  -  	add	a, a
  259 D1:D655 87 -  -  -  	add	a, a
  260 D1:D656 C6 D5 -  -  	add	a, 0D5h
  261 D1:D658 CD 26 AD D1 	call	InsertA															;	push hl/de
  262 D1:D65C 7B -  -  -  	ld	a, e
  263 D1:D65D 06 01 -  -  	ld	b, OutputInDE
  264 D1:D65F CD 52 AD D1 	call	GetFunction
  265 D1:D663 3E E1 -  -  	ld	a, 0E1h
  266 D1:D665 21 B7 ED 52 	ld	hl, 052EDB7h
  267 D1:D669 C3 5A AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  268 D1:D66D -  -  -  -  SubFunctionXXX:
  269 D1:D66D DD 7E FC -  	ld	a, (ix-4)
  270 D1:D670 B7 -  -  -  	or	a
  271 D1:D671 28 10 -  -  	jr	z, SubFunctionNumber
  272 D1:D673 3D -  -  -  	dec	a
  273 D1:D674 28 18 -  -  	jr	z, SubFunctionVariable
  274 D1:D676 3D -  -  -  	dec	a
  275 D1:D677 28 20 -  -  	jr	z, SubFunctionChainPush
  276 D1:D679 3D -  -  -  	dec	a
  277 D1:D67A 28 21 -  -  	jr	z, SubFunctionChainAns
  278 D1:D67C 3D -  -  -  	dec	a
  279 D1:D67D 28 3D -  -  	jr	z, SubFunctionFunction
  280 D1:D67F C3 DC AE D1 	jp	SubError
  281 D1:D683 -  -  -  -  SubFunctionNumber:
  282 D1:D683 79 -  -  -  	ld	a, c
  283 D1:D684 06 02 -  -  	ld	b, OutputInHL
  284 D1:D686 CD 52 AD D1 	call	GetFunction
  285 D1:D68A C3 F3 D5 D1 	jp	SubChainAnsNumber
  286 D1:D68E -  -  -  -  SubFunctionVariable:
  287 D1:D68E 79 -  -  -  	ld	a, c
  288 D1:D68F 06 02 -  -  	ld	b, OutputInHL
  289 D1:D691 CD 52 AD D1 	call	GetFunction
  290 D1:D695 C3 36 D6 D1 	jp	SubChainAnsVariable
  291 D1:D699 -  -  -  -  SubFunctionChainPush:
  292 D1:D699 C3 81 AF D1 	jp	UnknownError
  293 D1:D69D -  -  -  -  SubFunctionChainAns:
  294 D1:D69D 3A 5D EC D1 	ld	a, (ExprOutput)
  295 D1:D6A1 87 -  -  -  	add	a, a
  296 D1:D6A2 87 -  -  -  	add	a, a
  297 D1:D6A3 87 -  -  -  	add	a, a
  298 D1:D6A4 87 -  -  -  	add	a, a
  299 D1:D6A5 C6 D5 -  -  	add	a, 0D5h
  300 D1:D6A7 CD 26 AD D1 	call	InsertA															;	push hl/de
  301 D1:D6AB 79 -  -  -  	ld	a, c
  302 D1:D6AC 06 02 -  -  	ld	b, OutputInHL
  303 D1:D6AE CD 52 AD D1 	call	GetFunction
  304 D1:D6B2 3E E1 -  -  	ld	a, 0E1h
  305 D1:D6B4 21 B7 ED 52 	ld	hl, 052EDB7h
  306 D1:D6B8 C3 5A AC D1 	jp	InsertAHL															;	pop de \ or a \ sbc hl, de
  307 D1:D6BC -  -  -  -  SubFunctionFunction:
  308 D1:D6BC 7B -  -  -  	ld	a, e
  309 D1:D6BD 06 02 -  -  	ld	b, OutputInHL
  310 D1:D6BF CD 52 AD D1 	call	GetFunction
  311 D1:D6C3 79 -  -  -  	ld	a, c
  312 D1:D6C4 06 01 -  -  	ld	b, OutputInDE
  313 D1:D6C6 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  314 D1:D6CA CD 52 AD D1 	call	GetFunction
  315 D1:D6CE 21 B7 ED 52 	ld	hl, 052EDB7h
  316 D1:D6D2 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  317 D1:D6D6 -  -  -  -  
  318 D1:D6D6 -  -  -  -  AddNumberXXX:
  319 D1:D6D6 DD 7E FC -  	ld	a, (ix-4)
  320 D1:D6D9 B7 -  -  -  	or	a
  321 D1:D6DA 28 10 -  -  	jr	z, AddNumberNumber
  322 D1:D6DC 3D -  -  -  	dec	a
  323 D1:D6DD 28 17 -  -  	jr	z, AddNumberVariable
  324 D1:D6DF 3D -  -  -  	dec	a
  325 D1:D6E0 28 1B -  -  	jr	z, AddNumberChainPush
  326 D1:D6E2 3D -  -  -  	dec	a
  327 D1:D6E3 28 1C -  -  	jr	z, AddNumberChainAns
  328 D1:D6E5 3D -  -  -  	dec	a
  329 D1:D6E6 28 1F -  -  	jr	z, AddNumberFunction
  330 D1:D6E8 C3 E0 AE D1 	jp	AddError
  331 D1:D6EC -  -  -  -  AddNumberNumber:
  332 D1:D6EC FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  333 D1:D6F0 EB -  -  -  	ex	de, hl
  334 D1:D6F1 09 -  -  -  	add	hl, bc
  335 D1:D6F2 DD 2F F9 -  	ld	(ix-7), hl
  336 D1:D6F5 C9 -  -  -  	ret
  337 D1:D6F6 -  -  -  -  AddNumberVariable:
  338 D1:D6F6 C5 -  -  -  	push	bc
  339 D1:D6F7 E1 -  -  -  	pop	hl
  340 D1:D6F8 EB -  -  -  	ex	de, hl
  341 D1:D6F9 E5 -  -  -  	push	hl
  342 D1:D6FA C1 -  -  -  	pop	bc
  343 D1:D6FB 18 2B -  -  	jr	AddVariableNumber
  344 D1:D6FD -  -  -  -  AddNumberChainPush:
  345 D1:D6FD C3 81 AF D1 	jp	UnknownError
  346 D1:D701 -  -  -  -  AddNumberChainAns:
  347 D1:D701 C5 -  -  -  	push	bc
  348 D1:D702 D1 -  -  -  	pop	de
  349 D1:D703 C3 BB D7 D1 	jp	AddChainAnsNumber
  350 D1:D707 -  -  -  -  AddNumberFunction:
  351 D1:D707 C5 -  -  -  	push	bc
  352 D1:D708 E1 -  -  -  	pop	hl
  353 D1:D709 EB -  -  -  	ex	de, hl
  354 D1:D70A E5 -  -  -  	push	hl
  355 D1:D70B C1 -  -  -  	pop	bc
  356 D1:D70C C3 59 D8 D1 	jp	AddFunctionNumber
  357 D1:D710 -  -  -  -  AddVariableXXX:
  358 D1:D710 DD 7E FC -  	ld	a, (ix-4)
  359 D1:D713 B7 -  -  -  	or	a
  360 D1:D714 28 12 -  -  	jr	z, AddVariableNumber
  361 D1:D716 3D -  -  -  	dec	a
  362 D1:D717 28 17 -  -  	jr	z, AddVariableVariable
  363 D1:D719 3D -  -  -  	dec	a
  364 D1:D71A 28 1C -  -  	jr	z, AddVariableChainPush
  365 D1:D71C 3D -  -  -  	dec	a
  366 D1:D71D 28 24 -  -  	jr	z, AddVariableChainAns
  367 D1:D71F 3D -  -  -  	dec	a
  368 D1:D720 CA 48 D7 D1 	jp	z, AddVariableFunction
  369 D1:D724 C3 E0 AE D1 	jp	AddError
  370 D1:D728 -  -  -  -  AddVariableNumber:
  371 D1:D728 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  372 D1:D72C C3 BB D7 D1 	jp	AddChainAnsNumber
  373 D1:D730 -  -  -  -  AddVariableVariable:
  374 D1:D730 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  375 D1:D734 C3 FA D7 D1 	jp	AddChainAnsVariable
  376 D1:D738 -  -  -  -  AddVariableChainPush:
  377 D1:D738 3E E1 -  -  	ld	a, 0E1h
  378 D1:D73A CD 26 AD D1 	call	InsertA															;	pop hl
  379 D1:D73E 59 -  -  -  	ld	e, c
  380 D1:D73F C3 FA D7 D1 	jp	AddChainAnsVariable
  381 D1:D743 -  -  -  -  AddVariableChainAns:
  382 D1:D743 59 -  -  -  	ld	e, c
  383 D1:D744 C3 FA D7 D1 	jp	AddChainAnsVariable
  384 D1:D748 -  -  -  -  AddVariableFunction:
  385 D1:D748 7B -  -  -  	ld	a, e
  386 D1:D749 06 02 -  -  	ld	b, OutputInHL
  387 D1:D74B CD 52 AD D1 	call	GetFunction
  388 D1:D74F 59 -  -  -  	ld	e, c
  389 D1:D750 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
  390 D1:D754 3E 19 -  -  	ld	a, 019h
  391 D1:D756 C3 26 AD D1 	jp	InsertA																;	add hl, de
  392 D1:D75A -  -  -  -  AddChainPushXXX:
  393 D1:D75A DD 7E FC -  	ld	a, (ix-4)
  394 D1:D75D B7 -  -  -  	or	a
  395 D1:D75E 28 12 -  -  	jr	z, AddChainPushNumber
  396 D1:D760 3D -  -  -  	dec	a
  397 D1:D761 28 17 -  -  	jr	z, AddChainPushVariable
  398 D1:D763 3D -  -  -  	dec	a
  399 D1:D764 28 1C -  -  	jr	z, AddChainPushChainPush
  400 D1:D766 3D -  -  -  	dec	a
  401 D1:D767 28 1D -  -  	jr	z, AddChainPushChainAns
  402 D1:D769 3D -  -  -  	dec	a
  403 D1:D76A CA 9B D7 D1 	jp	z, AddChainPushFunction
  404 D1:D76E C3 E0 AE D1 	jp	AddError
  405 D1:D772 -  -  -  -  AddChainPushNumber:
  406 D1:D772 3E E1 -  -  	ld	a, 0E1h
  407 D1:D774 CD 26 AD D1 	call	InsertA															;	pop hl
  408 D1:D778 18 41 -  -  	jr	AddChainAnsNumber
  409 D1:D77A -  -  -  -  AddChainPushVariable:
  410 D1:D77A 3E E1 -  -  	ld	a, 0E1h
  411 D1:D77C CD 26 AD D1 	call	InsertA															;	pop hl
  412 D1:D780 18 78 -  -  	jr	AddChainAnsVariable
  413 D1:D782 -  -  -  -  AddChainPushChainPush:
  414 D1:D782 C3 81 AF D1 	jp	UnknownError
  415 D1:D786 -  -  -  -  AddChainPushChainAns:
  416 D1:D786 3A 5D EC D1 	ld	a, (ExprOutput)
  417 D1:D78A B7 -  -  -  	or	a
  418 D1:D78B 3E D1 -  -  	ld	a, 0D1h
  419 D1:D78D 20 02 -  -  	jr	nz, +_
  420 D1:D78F 3E E1 -  -  	ld	a, 0E1h
  421 D1:D791 CD 26 AD D1 _:	call	InsertA															;	pop hl/de
  422 D1:D795 3E 19 -  -  	ld	a, 019h
  423 D1:D797 C3 26 AD D1 	jp	InsertA																;	add hl, de
  424 D1:D79B -  -  -  -  AddChainPushFunction:
  425 D1:D79B 3E E1 -  -  	ld	a, 0E1h
  426 D1:D79D CD 26 AD D1 	call	InsertA															;	pop hl
  427 D1:D7A1 18 7F -  -  	jr	AddChainAnsFunction
  428 D1:D7A3 -  -  -  -  AddChainAnsXXX:
  429 D1:D7A3 DD 7E FC -  	ld	a, (ix-4)
  430 D1:D7A6 B7 -  -  -  	or	a
  431 D1:D7A7 28 12 -  -  	jr	z, AddChainAnsNumber
  432 D1:D7A9 3D -  -  -  	dec	a
  433 D1:D7AA 28 4E -  -  	jr	z, AddChainAnsVariable
  434 D1:D7AC 3D -  -  -  	dec	a
  435 D1:D7AD 28 6B -  -  	jr	z, AddChainAnsChainPush
  436 D1:D7AF 3D -  -  -  	dec	a
  437 D1:D7B0 28 6C -  -  	jr	z, AddChainAnsChainAns
  438 D1:D7B2 3D -  -  -  	dec	a
  439 D1:D7B3 CA 22 D8 D1 	jp	z, AddChainAnsFunction
  440 D1:D7B7 C3 E0 AE D1 	jp	AddError
  441 D1:D7BB -  -  -  -  AddChainAnsNumber:
  442 D1:D7BB B7 -  -  -  	or	a
  443 D1:D7BC ED 62 -  -  	sbc	hl, hl
  444 D1:D7BE EB -  -  -  	ex	de, hl
  445 D1:D7BF ED 52 -  -  	sbc	hl, de
  446 D1:D7C1 C8 -  -  -  	ret	z
  447 D1:D7C2 1E 06 -  -  	ld	e, 6
  448 D1:D7C4 ED 52 -  -  	sbc	hl, de
  449 D1:D7C6 30 1C -  -  	jr	nc, AddHLDE
  450 D1:D7C8 19 -  -  -  	add	hl, de
  451 D1:D7C9 45 -  -  -  	ld	b, l
  452 D1:D7CA 3A 5D EC D1 	ld	a, (ExprOutput)
  453 D1:D7CE B7 -  -  -  	or	a
  454 D1:D7CF 28 09 -  -  	jr	z, ++_
  455 D1:D7D1 3E 23 -  -  	ld	a, 023h
  456 D1:D7D3 CD 26 AD D1 _:	call	InsertA															;	inc hl/de
  457 D1:D7D7 10 FA -  -  	djnz	-_
  458 D1:D7D9 C9 -  -  -  	ret
  459 D1:D7DA 3E 00 -  -  _:	ld	a, OutputIsInDE
  460 D1:D7DC 32 5E EC D1 	ld	(ExprOutput2), a
  461 D1:D7E0 3E 13 -  -  	ld	a, 013h
  462 D1:D7E2 18 EF -  -  	jr	--_
  463 D1:D7E4 -  -  -  -  AddHLDE:
  464 D1:D7E4 19 -  -  -  	add	hl, de
  465 D1:D7E5 3A 5D EC D1 	ld	a, (ExprOutput)
  466 D1:D7E9 B7 -  -  -  	or	a
  467 D1:D7EA 3E 11 -  -  	ld	a, 011h
  468 D1:D7EC 20 02 -  -  	jr	nz, +_
  469 D1:D7EE 3E 21 -  -  	ld	a, 021h
  470 D1:D7F0 CD 5A AC D1 _:	call	InsertAHL															;	ld hl/de, *
  471 D1:D7F4 3E 19 -  -  	ld	a, 019h
  472 D1:D7F6 C3 26 AD D1 	jp	InsertA																;	add hl, de
  473 D1:D7FA -  -  -  -  AddChainAnsVariable:
  474 D1:D7FA 26 17 -  -  	ld	h, 017h
  475 D1:D7FC 16 03 -  -  	ld	d, 3
  476 D1:D7FE ED 5C -  -  	mlt	de
  477 D1:D800 7B -  -  -  	ld	a, e
  478 D1:D801 2E DD -  -  	ld	l, 0DDh
  479 D1:D803 CD 70 1D 02 	call	_SetHLUToA
  480 D1:D807 3A 5D EC D1 	ld	a, (ExprOutput)
  481 D1:D80B B7 -  -  -  	or	a
  482 D1:D80C 20 02 -  -  	jr	nz, +_
  483 D1:D80E 26 27 -  -  	ld	h, 027h
  484 D1:D810 CD 5E AC D1 _:	call	InsertHL															;	ld hl/de, (ix+*)
  485 D1:D814 3E 19 -  -  	ld	a, 019h
  486 D1:D816 C3 26 AD D1 	jp	InsertA																;	add hl, de
  487 D1:D81A -  -  -  -  AddChainAnsChainPush:
  488 D1:D81A C3 81 AF D1 	jp	UnknownError
  489 D1:D81E -  -  -  -  AddChainAnsChainAns:
  490 D1:D81E C3 81 AF D1 	jp	UnknownError
  491 D1:D822 -  -  -  -  AddChainAnsFunction:
  492 D1:D822 3A 5D EC D1 	ld	a, (ExprOutput)
  493 D1:D826 87 -  -  -  	add	a, a
  494 D1:D827 87 -  -  -  	add	a, a
  495 D1:D828 87 -  -  -  	add	a, a
  496 D1:D829 87 -  -  -  	add	a, a
  497 D1:D82A C6 D5 -  -  	add	a, 0D5h
  498 D1:D82C CD 26 AD D1 	call	InsertA															;	push hl/de
  499 D1:D830 7B -  -  -  	ld	a, e
  500 D1:D831 06 02 -  -  	ld	b, OutputInHL
  501 D1:D833 CD 52 AD D1 	call	GetFunction
  502 D1:D837 3E D1 -  -  	ld	a, 0D1h
  503 D1:D839 CD 26 AD D1 	call	InsertA															;	pop de
  504 D1:D83D 3E 19 -  -  	ld	a, 019h
  505 D1:D83F C3 26 AD D1 	jp	InsertA																;	add hl, de
  506 D1:D843 -  -  -  -  AddFunctionXXX:
  507 D1:D843 DD 7E FC -  	ld	a, (ix-4)
  508 D1:D846 B7 -  -  -  	or	a
  509 D1:D847 28 10 -  -  	jr	z, AddFunctionNumber
  510 D1:D849 3D -  -  -  	dec	a
  511 D1:D84A 28 18 -  -  	jr	z, AddFunctionVariable
  512 D1:D84C 3D -  -  -  	dec	a
  513 D1:D84D 28 20 -  -  	jr	z, AddFunctionChainPush
  514 D1:D84F 3D -  -  -  	dec	a
  515 D1:D850 28 21 -  -  	jr	z, AddFunctionChainAns
  516 D1:D852 3D -  -  -  	dec	a
  517 D1:D853 28 3F -  -  	jr	z, AddFunctionFunction
  518 D1:D855 C3 E0 AE D1 	jp	AddError
  519 D1:D859 -  -  -  -  AddFunctionNumber:
  520 D1:D859 79 -  -  -  	ld	a, c
  521 D1:D85A 06 02 -  -  	ld	b, OutputInHL
  522 D1:D85C CD 52 AD D1 	call	GetFunction
  523 D1:D860 C3 BB D7 D1 	jp	AddChainAnsNumber
  524 D1:D864 -  -  -  -  AddFunctionVariable:
  525 D1:D864 79 -  -  -  	ld	a, c
  526 D1:D865 06 02 -  -  	ld	b, OutputInHL
  527 D1:D867 CD 52 AD D1 	call	GetFunction
  528 D1:D86B C3 FA D7 D1 	jp	AddChainAnsVariable
  529 D1:D86F -  -  -  -  AddFunctionChainPush:
  530 D1:D86F C3 81 AF D1 	jp	UnknownError
  531 D1:D873 -  -  -  -  AddFunctionChainAns:
  532 D1:D873 3A 5D EC D1 	ld	a, (ExprOutput)
  533 D1:D877 87 -  -  -  	add	a, a
  534 D1:D878 87 -  -  -  	add	a, a
  535 D1:D879 87 -  -  -  	add	a, a
  536 D1:D87A 87 -  -  -  	add	a, a
  537 D1:D87B C6 D5 -  -  	add	a, 0D5h
  538 D1:D87D CD 26 AD D1 	call	InsertA															;	push hl/de
  539 D1:D881 79 -  -  -  	ld	a, c
  540 D1:D882 06 02 -  -  	ld	b, OutputInHL
  541 D1:D884 CD 52 AD D1 	call	GetFunction
  542 D1:D888 3E D1 -  -  	ld	a, 0D1h
  543 D1:D88A CD 26 AD D1 	call	InsertA															;	pop de
  544 D1:D88E 3E 19 -  -  	ld	a, 019h
  545 D1:D890 C3 26 AD D1 	jp	InsertA																;	add hl, de
  546 D1:D894 -  -  -  -  AddFunctionFunction:
  547 D1:D894 7B -  -  -  	ld	a, e
  548 D1:D895 06 02 -  -  	ld	b, OutputInHL
  549 D1:D897 CD 52 AD D1 	call	GetFunction
  550 D1:D89B 79 -  -  -  	ld	a, c
  551 D1:D89C 06 01 -  -  	ld	b, OutputInDE
  552 D1:D89E FD CB C0 F6 	set	need_push, (iy+fExpression1)
  553 D1:D8A2 CD 52 AD D1 	call	GetFunction
  554 D1:D8A6 3E 19 -  -  	ld	a, 019h
  555 D1:D8A8 C3 26 AD D1 	jp	InsertA																;	add hl, de
  556 D1:D8AC -  -  -  -  	
  557 D1:D8AC -  -  -  -  DivNumberXXX:
  558 D1:D8AC DD 7E FC -  	ld	a, (ix-4)
  559 D1:D8AF B7 -  -  -  	or	a
  560 D1:D8B0 28 10 -  -  	jr	z, DivNumberNumber
  561 D1:D8B2 3D -  -  -  	dec	a
  562 D1:D8B3 28 1D -  -  	jr	z, DivNumberVariable
  563 D1:D8B5 3D -  -  -  	dec	a
  564 D1:D8B6 28 26 -  -  	jr	z, DivNumberChainPush
  565 D1:D8B8 3D -  -  -  	dec	a
  566 D1:D8B9 28 27 -  -  	jr	z, DivNumberChainAns
  567 D1:D8BB 3D -  -  -  	dec	a
  568 D1:D8BC 28 39 -  -  	jr	z, DivNumberFunction
  569 D1:D8BE C3 E4 AE D1 	jp	DivError
  570 D1:D8C2 -  -  -  -  DivNumberNumber:
  571 D1:D8C2 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  572 D1:D8C6 C5 -  -  -  	push	bc
  573 D1:D8C7 E1 -  -  -  	pop	hl
  574 D1:D8C8 D5 -  -  -  	push	de
  575 D1:D8C9 C1 -  -  -  	pop	bc
  576 D1:D8CA CD 44 01 00 	call	__idvrmu
  577 D1:D8CE DD 1F F9 -  	ld	(ix-7), de
  578 D1:D8D1 C9 -  -  -  	ret
  579 D1:D8D2 -  -  -  -  DivNumberVariable:
  580 D1:D8D2 3E 21 -  -  	ld	a, 021h
  581 D1:D8D4 C5 -  -  -  	push	bc
  582 D1:D8D5 E1 -  -  -  	pop	hl
  583 D1:D8D6 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  584 D1:D8DA C3 0A DA D1 	jp	DivChainAnsVariable
  585 D1:D8DE -  -  -  -  DivNumberChainPush:
  586 D1:D8DE C3 81 AF D1 	jp	UnknownError
  587 D1:D8E2 -  -  -  -  DivNumberChainAns:
  588 D1:D8E2 11 E5 C1 21 	ld	de, 021C1E5h
  589 D1:D8E6 C5 -  -  -  	push	bc
  590 D1:D8E7 E1 -  -  -  	pop	hl
  591 D1:D8E8 3A 5D EC D1 	ld	a, (ExprOutput)
  592 D1:D8EC B7 -  -  -  	or	a
  593 D1:D8ED 20 02 -  -  	jr	nz, +_
  594 D1:D8EF 1E D5 -  -  	ld	e, 0D5h
  595 D1:D8F1 CD AA AC D1 _:	call	InsertDEHL															;	push hl/de \ pop bc \ ld hl, *
  596 D1:D8F5 18 74 -  -  	jr	DivInsert
  597 D1:D8F7 -  -  -  -  DivNumberFunction:
  598 D1:D8F7 7B -  -  -  	ld	a, e
  599 D1:D8F8 C5 -  -  -  	push	bc
  600 D1:D8F9 06 00 -  -  		ld	b, OutputInBC
  601 D1:D8FB CD 52 AD D1 		call	GetFunction
  602 D1:D8FF 3E 21 -  -  		ld	a, 021h
  603 D1:D901 E1 -  -  -  	pop	hl
  604 D1:D902 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  605 D1:D906 18 63 -  -  	jr	DivInsert
  606 D1:D908 -  -  -  -  DivVariableXXX:
  607 D1:D908 DD 7E FC -  	ld	a, (ix-4)
  608 D1:D90B B7 -  -  -  	or	a
  609 D1:D90C 28 12 -  -  	jr	z, DivVariableNumber
  610 D1:D90E 3D -  -  -  	dec	a
  611 D1:D90F 28 17 -  -  	jr	z, DivVariableVariable
  612 D1:D911 3D -  -  -  	dec	a
  613 D1:D912 28 2E -  -  	jr	z, DivVariableChainPush
  614 D1:D914 3D -  -  -  	dec	a
  615 D1:D915 28 2F -  -  	jr	z, DivVariableChainAns
  616 D1:D917 3D -  -  -  	dec	a
  617 D1:D918 CA 60 D9 D1 	jp	z, DivVariableFunction
  618 D1:D91C C3 E4 AE D1 	jp	DivError
  619 D1:D920 -  -  -  -  DivVariableNumber:
  620 D1:D920 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  621 D1:D924 C3 DC D9 D1 	jp	DivChainAnsNumber
  622 D1:D928 -  -  -  -  DivVariableVariable:
  623 D1:D928 79 -  -  -  	ld	a, c
  624 D1:D929 BB -  -  -  	cp	e
  625 D1:D92A 20 0E -  -  	jr	nz, +_
  626 D1:D92C FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  627 D1:D930 36 00 -  -  	ld	(hl), typeNumber
  628 D1:D932 11 01 00 00 	ld	de, 1
  629 D1:D936 23 -  -  -  	inc	hl
  630 D1:D937 ED 1F -  -  	ld	(hl), de
  631 D1:D939 C9 -  -  -  	ret
  632 D1:D93A CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  633 D1:D93E C3 0A DA D1 	jp	DivChainAnsVariable
  634 D1:D942 -  -  -  -  DivVariableChainPush:
  635 D1:D942 C3 81 AF D1 	jp	UnknownError
  636 D1:D946 -  -  -  -  DivVariableChainAns:
  637 D1:D946 3A 5D EC D1 	ld	a, (ExprOutput)
  638 D1:D94A 87 -  -  -  	add	a, a
  639 D1:D94B 87 -  -  -  	add	a, a
  640 D1:D94C 87 -  -  -  	add	a, a
  641 D1:D94D 87 -  -  -  	add	a, a
  642 D1:D94E C6 D5 -  -  	add	a, 0D5h
  643 D1:D950 CD 26 AD D1 	call	InsertA															;	push hl/de
  644 D1:D954 3E C1 -  -  	ld	a, 0C1h
  645 D1:D956 CD 26 AD D1 	call	InsertA															;	pop bc
  646 D1:D95A CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  647 D1:D95E 18 0B -  -  	jr	DivInsert
  648 D1:D960 -  -  -  -  DivVariableFunction:
  649 D1:D960 7B -  -  -  	ld	a, e
  650 D1:D961 06 00 -  -  	ld	b, OutputInBC
  651 D1:D963 CD 52 AD D1 	call	GetFunction
  652 D1:D967 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  653 D1:D96B -  -  -  -  DivInsert:
  654 D1:D96B 3E 00 -  -  	ld	a, OutputIsInDE
  655 D1:D96D 32 5E EC D1 	ld	(ExprOutput2), a
  656 D1:D971 3E CD -  -  	ld	a, 0CDh
  657 D1:D973 21 44 01 00 	ld	hl, __idvrmu
  658 D1:D977 C3 5A AC D1 	jp	InsertAHL															;	call __idvrmu
  659 D1:D97B -  -  -  -  DivChainPushXXX:
  660 D1:D97B DD 7E FC -  	ld	a, (ix-4)
  661 D1:D97E B7 -  -  -  	or	a
  662 D1:D97F 28 12 -  -  	jr	z, DivChainPushNumber
  663 D1:D981 3D -  -  -  	dec	a
  664 D1:D982 28 17 -  -  	jr	z, DivChainPushVariable
  665 D1:D984 3D -  -  -  	dec	a
  666 D1:D985 28 1C -  -  	jr	z, DivChainPushChainPush
  667 D1:D987 3D -  -  -  	dec	a
  668 D1:D988 28 1D -  -  	jr	z, DivChainPushChainAns
  669 D1:D98A 3D -  -  -  	dec	a
  670 D1:D98B CA BC D9 D1 	jp	z, DivChainPushFunction
  671 D1:D98F C3 E4 AE D1 	jp	DivError
  672 D1:D993 -  -  -  -  DivChainPushNumber:
  673 D1:D993 3E E1 -  -  	ld	a, 0E1h
  674 D1:D995 CD 26 AD D1 	call	InsertA															;	pop hl
  675 D1:D999 18 41 -  -  	jr	DivChainAnsNumber
  676 D1:D99B -  -  -  -  DivChainPushVariable:
  677 D1:D99B 3E E1 -  -  	ld	a, 0E1h
  678 D1:D99D CD 26 AD D1 	call	InsertA															;	pop hl
  679 D1:D9A1 18 67 -  -  	jr	DivChainAnsVariable
  680 D1:D9A3 -  -  -  -  DivChainPushChainPush:
  681 D1:D9A3 C3 81 AF D1 	jp	UnknownError
  682 D1:D9A7 -  -  -  -  DivChainPushChainAns:
  683 D1:D9A7 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  684 D1:D9AB 3A 5D EC D1 	ld	a, (ExprOutput)
  685 D1:D9AF 87 -  -  -  	add	a, a
  686 D1:D9B0 87 -  -  -  	add	a, a
  687 D1:D9B1 87 -  -  -  	add	a, a
  688 D1:D9B2 87 -  -  -  	add	a, a
  689 D1:D9B3 C6 D5 -  -  	add	a, 0D5h
  690 D1:D9B5 6F -  -  -  	ld	l, a
  691 D1:D9B6 CD 5E AC D1 	call	InsertHL															;	push hl/de \ pop bc \ pop hl
  692 D1:D9BA 18 AF -  -  _:	jr	DivInsert
  693 D1:D9BC -  -  -  -  DivChainPushFunction:
  694 D1:D9BC 3E E1 -  -  	ld	a, 0E1h
  695 D1:D9BE CD 26 AD D1 	call	InsertA															;	pop hl
  696 D1:D9C2 18 58 -  -  	jr	DivChainAnsFunction
  697 D1:D9C4 -  -  -  -  DivChainAnsXXX:
  698 D1:D9C4 DD 7E FC -  	ld	a, (ix-4)
  699 D1:D9C7 B7 -  -  -  	or	a
  700 D1:D9C8 28 12 -  -  	jr	z, DivChainAnsNumber
  701 D1:D9CA 3D -  -  -  	dec	a
  702 D1:D9CB 28 3D -  -  	jr	z, DivChainAnsVariable
  703 D1:D9CD 3D -  -  -  	dec	a
  704 D1:D9CE 28 44 -  -  	jr	z, DivChainAnsChainPush
  705 D1:D9D0 3D -  -  -  	dec	a
  706 D1:D9D1 28 45 -  -  	jr	z, DivChainAnsChainAns
  707 D1:D9D3 3D -  -  -  	dec	a
  708 D1:D9D4 CA 1C DA D1 	jp	z, DivChainAnsFunction
  709 D1:D9D8 C3 E4 AE D1 	jp	DivError
  710 D1:D9DC -  -  -  -  DivChainAnsNumber:
  711 D1:D9DC CD D5 AC D1 	call	MaybeChangeDEToHL
  712 D1:D9E0 3E 01 -  -  	ld	a, 001h
  713 D1:D9E2 EB -  -  -  	ex	de, hl
  714 D1:D9E3 11 00 01 00 	ld	de, 256
  715 D1:D9E7 B7 -  -  -  	or	a
  716 D1:D9E8 ED 52 -  -  	sbc	hl, de
  717 D1:D9EA 30 17 -  -  	jr	nc, +_
  718 D1:D9EC 19 -  -  -  	add	hl, de
  719 D1:D9ED 4D -  -  -  	ld	c, l
  720 D1:D9EE 3E 3E -  -  	ld	a, 03Eh
  721 D1:D9F0 CD 26 AD D1 	call	InsertA															;	ld a, *
  722 D1:D9F4 79 -  -  -  	ld	a, c
  723 D1:D9F5 CD 26 AD D1 	call	InsertA															;	ld a, *
  724 D1:D9F9 3E CD -  -  	ld	a, 0CDh
  725 D1:D9FB 21 90 1D 02 	ld	hl, _DivHLByA
  726 D1:D9FF C3 5A AC D1 	jp	InsertAHL															;	call _DivHLByA
  727 D1:DA03 19 -  -  -  _:	add	hl, de
  728 D1:DA04 CD 5A AC D1 	call	InsertAHL															;	ld bc, *
  729 D1:DA08 18 B0 -  -  _:	jr	---_
  730 D1:DA0A -  -  -  -  DivChainAnsVariable:
  731 D1:DA0A CD D5 AC D1 	call	MaybeChangeDEToHL
  732 D1:DA0E CD 98 AC D1 	call	InsertIXC
  733 D1:DA12 18 F4 -  -  	jr	-_
  734 D1:DA14 -  -  -  -  DivChainAnsChainPush:
  735 D1:DA14 C3 81 AF D1 	jp	UnknownError
  736 D1:DA18 -  -  -  -  DivChainAnsChainAns:
  737 D1:DA18 C3 81 AF D1 	jp	UnknownError
  738 D1:DA1C -  -  -  -  DivChainAnsFunction:
  739 D1:DA1C 3A 5D EC D1 	ld	a, (ExprOutput)
  740 D1:DA20 87 -  -  -  	add	a, a
  741 D1:DA21 87 -  -  -  	add	a, a
  742 D1:DA22 87 -  -  -  	add	a, a
  743 D1:DA23 87 -  -  -  	add	a, a
  744 D1:DA24 C6 D5 -  -  	add	a, 0D5h
  745 D1:DA26 CD 26 AD D1 	call	InsertA															;	push hl/de
  746 D1:DA2A 7B -  -  -  	ld	a, e
  747 D1:DA2B 06 00 -  -  	ld	b, OutputInBC
  748 D1:DA2D CD 52 AD D1 	call	GetFunction
  749 D1:DA31 3E E1 -  -  	ld	a, 0E1h
  750 D1:DA33 CD 26 AD D1 	call	InsertA															;	pop hl
  751 D1:DA37 18 CF -  -  _:	jr	--_
  752 D1:DA39 -  -  -  -  DivFunctionXXX:
  753 D1:DA39 DD 7E FC -  	ld	a, (ix-4)
  754 D1:DA3C B7 -  -  -  	or	a
  755 D1:DA3D 28 10 -  -  	jr	z, DivFunctionNumber
  756 D1:DA3F 3D -  -  -  	dec	a
  757 D1:DA40 28 18 -  -  	jr	z, DivFunctionVariable
  758 D1:DA42 3D -  -  -  	dec	a
  759 D1:DA43 28 20 -  -  	jr	z, DivFunctionChainPush
  760 D1:DA45 3D -  -  -  	dec	a
  761 D1:DA46 28 21 -  -  	jr	z, DivFunctionChainAns
  762 D1:DA48 3D -  -  -  	dec	a
  763 D1:DA49 28 3B -  -  	jr	z, DivFunctionFunction
  764 D1:DA4B C3 E4 AE D1 	jp	DivError
  765 D1:DA4F -  -  -  -  DivFunctionNumber:
  766 D1:DA4F 79 -  -  -  	ld	a, c
  767 D1:DA50 06 02 -  -  	ld	b, OutputInHL
  768 D1:DA52 CD 52 AD D1 	call	GetFunction
  769 D1:DA56 C3 DC D9 D1 	jp	DivChainAnsNumber
  770 D1:DA5A -  -  -  -  DivFunctionVariable:
  771 D1:DA5A 79 -  -  -  	ld	a, c
  772 D1:DA5B 06 02 -  -  	ld	b, OutputInHL
  773 D1:DA5D CD 52 AD D1 	call	GetFunction
  774 D1:DA61 C3 0A DA D1 	jp	DivChainAnsVariable
  775 D1:DA65 -  -  -  -  DivFunctionChainPush:
  776 D1:DA65 C3 81 AF D1 	jp	UnknownError
  777 D1:DA69 -  -  -  -  DivFunctionChainAns:
  778 D1:DA69 3A 5D EC D1 	ld	a, (ExprOutput)
  779 D1:DA6D 87 -  -  -  	add	a, a
  780 D1:DA6E 87 -  -  -  	add	a, a
  781 D1:DA6F 87 -  -  -  	add	a, a
  782 D1:DA70 87 -  -  -  	add	a, a
  783 D1:DA71 C6 D5 -  -  	add	a, 0D5h
  784 D1:DA73 CD 26 AD D1 	call	InsertA															;	push hl/de
  785 D1:DA77 3E C1 -  -  	ld	a, 0C1h
  786 D1:DA79 CD 26 AD D1 	call	InsertA															;	pop bc
  787 D1:DA7D 79 -  -  -  	ld	a, c
  788 D1:DA7E 06 02 -  -  	ld	b, OutputInHL
  789 D1:DA80 CD 52 AD D1 	call	GetFunction
  790 D1:DA84 18 B1 -  -  	jr	-_
  791 D1:DA86 -  -  -  -  DivFunctionFunction:
  792 D1:DA86 7B -  -  -  	ld	a, e
  793 D1:DA87 06 00 -  -  	ld	b, OutputInBC
  794 D1:DA89 CD 52 AD D1 	call	GetFunction
  795 D1:DA8D 79 -  -  -  	ld	a, c
  796 D1:DA8E 06 02 -  -  	ld	b, OutputInHL
  797 D1:DA90 CD 52 AD D1 	call	GetFunction
  798 D1:DA94 18 A1 -  -  	jr	-_
  799 D1:DA96 -  -  -  -  	
  800 D1:DA96 -  -  -  -  MulNumberXXX:
  801 D1:DA96 DD 7E FC -  	ld	a, (ix-4)
  802 D1:DA99 B7 -  -  -  	or	a
  803 D1:DA9A 28 10 -  -  	jr	z, MulNumberNumber
  804 D1:DA9C 3D -  -  -  	dec	a
  805 D1:DA9D 28 1A -  -  	jr	z, MulNumberVariable
  806 D1:DA9F 3D -  -  -  	dec	a
  807 D1:DAA0 28 1E -  -  	jr	z, MulNumberChainPush
  808 D1:DAA2 3D -  -  -  	dec	a
  809 D1:DAA3 28 1F -  -  	jr	z, MulNumberChainAns
  810 D1:DAA5 3D -  -  -  	dec	a
  811 D1:DAA6 28 22 -  -  	jr	z, MulNumberFunction
  812 D1:DAA8 C3 E8 AE D1 	jp	MulError
  813 D1:DAAC -  -  -  -  MulNumberNumber:
  814 D1:DAAC FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  815 D1:DAB0 EB -  -  -  	ex	de, hl
  816 D1:DAB1 CD 54 01 00 	call	__imulu
  817 D1:DAB5 DD 2F F9 -  	ld	(ix-7), hl
  818 D1:DAB8 C9 -  -  -  	ret
  819 D1:DAB9 -  -  -  -  MulNumberVariable:
  820 D1:DAB9 C5 -  -  -  	push	bc
  821 D1:DABA E1 -  -  -  	pop	hl
  822 D1:DABB EB -  -  -  	ex	de, hl
  823 D1:DABC E5 -  -  -  	push	hl
  824 D1:DABD C1 -  -  -  	pop	bc
  825 D1:DABE 18 2B -  -  	jr	MulVariableNumber
  826 D1:DAC0 -  -  -  -  MulNumberChainPush:
  827 D1:DAC0 C3 81 AF D1 	jp	UnknownError
  828 D1:DAC4 -  -  -  -  MulNumberChainAns:
  829 D1:DAC4 C5 -  -  -  	push	bc
  830 D1:DAC5 D1 -  -  -  	pop	de
  831 D1:DAC6 C3 88 DB D1 	jp	MulChainAnsNumber
  832 D1:DACA -  -  -  -  MulNumberFunction:
  833 D1:DACA C5 -  -  -  	push	bc
  834 D1:DACB E1 -  -  -  	pop	hl
  835 D1:DACC EB -  -  -  	ex	de, hl
  836 D1:DACD E5 -  -  -  	push	hl
  837 D1:DACE C1 -  -  -  	pop	bc
  838 D1:DACF C3 5B DC D1 	jp	MulFunctionNumber
  839 D1:DAD3 -  -  -  -  MulVariableXXX:
  840 D1:DAD3 DD 7E FC -  	ld	a, (ix-4)
  841 D1:DAD6 B7 -  -  -  	or	a
  842 D1:DAD7 28 12 -  -  	jr	z, MulVariableNumber
  843 D1:DAD9 3D -  -  -  	dec	a
  844 D1:DADA 28 17 -  -  	jr	z, MulVariableVariable
  845 D1:DADC 3D -  -  -  	dec	a
  846 D1:DADD 28 1C -  -  	jr	z, MulVariableChainPush
  847 D1:DADF 3D -  -  -  	dec	a
  848 D1:DAE0 28 24 -  -  	jr	z, MulVariableChainAns
  849 D1:DAE2 3D -  -  -  	dec	a
  850 D1:DAE3 CA 0B DB D1 	jp	z, MulVariableFunction
  851 D1:DAE7 C3 E8 AE D1 	jp	MulError
  852 D1:DAEB -  -  -  -  MulVariableNumber:
  853 D1:DAEB CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  854 D1:DAEF C3 88 DB D1 	jp	MulChainAnsNumber
  855 D1:DAF3 -  -  -  -  MulVariableVariable:
  856 D1:DAF3 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  857 D1:DAF7 C3 06 DC D1 	jp	MulChainAnsVariable
  858 D1:DAFB -  -  -  -  MulVariableChainPush:
  859 D1:DAFB 3E E1 -  -  	ld	a, 0E1h
  860 D1:DAFD CD 26 AD D1 	call	InsertA															;	pop hl
  861 D1:DB01 59 -  -  -  	ld	e, c
  862 D1:DB02 C3 06 DC D1 	jp	MulChainAnsVariable
  863 D1:DB06 -  -  -  -  MulVariableChainAns:
  864 D1:DB06 59 -  -  -  	ld	e, c
  865 D1:DB07 C3 06 DC D1 	jp	MulChainAnsVariable
  866 D1:DB0B -  -  -  -  MulVariableFunction:
  867 D1:DB0B 7B -  -  -  	ld	a, e
  868 D1:DB0C 06 02 -  -  	ld	b, OutputInHL
  869 D1:DB0E CD 52 AD D1 	call	GetFunction
  870 D1:DB12 CD 98 AC D1 	call	InsertIXC
  871 D1:DB16 21 54 01 00 	ld	hl, __imulu
  872 D1:DB1A C3 7C AC D1 	jp	InsertCallHL															;	call __imulu
  873 D1:DB1E -  -  -  -  MulChainPushXXX:
  874 D1:DB1E DD 7E FC -  	ld	a, (ix-4)
  875 D1:DB21 B7 -  -  -  	or	a
  876 D1:DB22 28 12 -  -  	jr	z, MulChainPushNumber
  877 D1:DB24 3D -  -  -  	dec	a
  878 D1:DB25 28 17 -  -  	jr	z, MulChainPushVariable
  879 D1:DB27 3D -  -  -  	dec	a
  880 D1:DB28 28 1E -  -  	jr	z, MulChainPushChainPush
  881 D1:DB2A 3D -  -  -  	dec	a
  882 D1:DB2B 28 1F -  -  	jr	z, MulChainPushChainAns
  883 D1:DB2D 3D -  -  -  	dec	a
  884 D1:DB2E CA 60 DB D1 	jp	z, MulChainPushFunction
  885 D1:DB32 C3 E8 AE D1 	jp	MulError
  886 D1:DB36 -  -  -  -  MulChainPushNumber:
  887 D1:DB36 3E E1 -  -  	ld	a, 0E1h
  888 D1:DB38 CD 26 AD D1 	call	InsertA															;	pop hl
  889 D1:DB3C 18 4A -  -  	jr	MulChainAnsNumber
  890 D1:DB3E -  -  -  -  MulChainPushVariable:
  891 D1:DB3E 3E E1 -  -  	ld	a, 0E1h
  892 D1:DB40 CD 26 AD D1 	call	InsertA															;	pop hl
  893 D1:DB44 C3 06 DC D1 	jp	MulChainAnsVariable
  894 D1:DB48 -  -  -  -  MulChainPushChainPush:
  895 D1:DB48 C3 81 AF D1 	jp	UnknownError
  896 D1:DB4C -  -  -  -  MulChainPushChainAns:
  897 D1:DB4C CD D5 AC D1 	call	MaybeChangeDEToHL
  898 D1:DB50 3E C1 -  -  	ld	a, 0C1h
  899 D1:DB52 CD 26 AD D1 	call	InsertA															;	pop bc
  900 D1:DB56 3E CD -  -  	ld	a, 0CDh
  901 D1:DB58 21 54 01 00 	ld	hl, __imulu
  902 D1:DB5C C3 5A AC D1 	jp	InsertAHL															;	call __imulu
  903 D1:DB60 -  -  -  -  MulChainPushFunction:
  904 D1:DB60 3E E1 -  -  	ld	a, 0E1h
  905 D1:DB62 CD 26 AD D1 	call	InsertA															;	pop hl
  906 D1:DB66 C3 20 DC D1 	jp	MulChainAnsFunction
  907 D1:DB6A -  -  -  -  MulChainAnsXXX:
  908 D1:DB6A DD 7E FC -  	ld	a, (ix-4)
  909 D1:DB6D B7 -  -  -  	or	a, a
  910 D1:DB6E 28 18 -  -  	jr	z, MulChainAnsNumber
  911 D1:DB70 3D -  -  -  	dec	a
  912 D1:DB71 CA 06 DC D1 	jp	z, MulChainAnsVariable
  913 D1:DB75 3D -  -  -  	dec	a
  914 D1:DB76 CA 18 DC D1 	jp	z, MulChainAnsChainPush
  915 D1:DB7A 3D -  -  -  	dec	a
  916 D1:DB7B CA 1C DC D1 	jp	z, MulChainAnsChainAns
  917 D1:DB7F 3D -  -  -  	dec	a
  918 D1:DB80 CA 20 DC D1 	jp	z, MulChainAnsFunction
  919 D1:DB84 C3 E8 AE D1 	jp	MulError
  920 D1:DB88 -  -  -  -  MulChainAnsNumber:
  921 D1:DB88 CD 4C 1D 02 	call	_ChkDEIs0
  922 D1:DB8C 20 08 -  -  	jr	nz, +_
  923 D1:DB8E 21 B7 ED 62 	ld	hl, 062EDB7h
  924 D1:DB92 C3 5E AC D1 	jp	InsertHL
  925 D1:DB96 D5 -  -  -  _:	push	de
  926 D1:DB97 E1 -  -  -  	pop	hl
  927 D1:DB98 06 00 -  -  	ld	b, 0
  928 D1:DB9A 3E 1A -  -  	ld	a, 26
  929 D1:DB9C 3D -  -  -  _:	dec	a
  930 D1:DB9D 29 -  -  -  	add	hl, hl
  931 D1:DB9E 30 FC -  -  	jr	nc, -_
  932 D1:DBA0 88 -  -  -  _:	adc	a, b
  933 D1:DBA1 ED 6A -  -  	adc	hl, hl
  934 D1:DBA3 20 FB -  -  	jr	nz, -_
  935 D1:DBA5 CB 10 -  -  	rl	b
  936 D1:DBA7 20 02 -  -  	jr	nz, +_
  937 D1:DBA9 D6 03 -  -  	sub	a, 3
  938 D1:DBAB FE 0A -  -  _:	cp	a, 10
  939 D1:DBAD 38 28 -  -  	jr	c, ++_
  940 D1:DBAF CD D5 AC D1 	call	MaybeChangeDEToHL
  941 D1:DBB3 21 00 FF FF 	ld	hl, -256
  942 D1:DBB7 19 -  -  -  	add	hl, de
  943 D1:DBB8 38 0E -  -  	jr	c, +_
  944 D1:DBBA 21 3E 00 CD 	ld	hl, 0CD003Eh
  945 D1:DBBE 63 -  -  -  	ld	h, e
  946 D1:DBBF 11 50 01 00 	ld	de, __imul_b
  947 D1:DBC3 EB -  -  -  	ex	de, hl
  948 D1:DBC4 C3 AA AC D1 	jp	InsertDEHL
  949 D1:DBC8 3E 01 -  -  _:	ld	a, 001h
  950 D1:DBCA EB -  -  -  	ex	de, hl
  951 D1:DBCB CD 5A AC D1 	call	InsertAHL
  952 D1:DBCF 21 54 01 00 	ld	hl, __imulu
  953 D1:DBD3 C3 7C AC D1 	jp	InsertCallHL
  954 D1:DBD7 10 15 -  -  _:	djnz	+_
  955 D1:DBD9 3A 5D EC D1 	ld	a, (ExprOutput)
  956 D1:DBDD 0F -  -  -  	rrca
  957 D1:DBDE 3F -  -  -  	ccf
  958 D1:DBDF 9F -  -  -  	sbc	a, a
  959 D1:DBE0 E6 F0 -  -  	and	a, 0D5h - 0E5h
  960 D1:DBE2 C6 E5 -  -  	add	a, 0E5h
  961 D1:DBE4 CD 26 AD D1 	call	InsertA
  962 D1:DBE8 EE 34 -  -  	xor	a, 0E5h ^ 0D1h 										; == 0D5h ^ 0E1h
  963 D1:DBEA CD 26 AD D1 	call	InsertA
  964 D1:DBEE EB -  -  -  _:	ex	de, hl
  965 D1:DBEF 37 -  -  -  	scf
  966 D1:DBF0 ED 6A -  -  _:	adc	hl, hl
  967 D1:DBF2 30 FC -  -  	jr	nc, -_
  968 D1:DBF4 B7 -  -  -  _:	or	a, a
  969 D1:DBF5 ED 6A -  -  	adc	hl, hl
  970 D1:DBF7 C8 -  -  -  	ret	z
  971 D1:DBF8 3E 29 -  -  	ld	a, 029h
  972 D1:DBFA CD 26 AD D1 	call	InsertA
  973 D1:DBFE 3E 19 -  -  	ld	a, 019h
  974 D1:DC00 DC 26 AD D1 	call	c, InsertA
  975 D1:DC04 18 EE -  -  	jr	-_
  976 D1:DC06 -  -  -  -  MulChainAnsVariable:
  977 D1:DC06 CD D5 AC D1 	call	MaybeChangeDEToHL
  978 D1:DC0A CD 98 AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  979 D1:DC0E 3E CD -  -  	ld	a, 0CDh
  980 D1:DC10 21 54 01 00 	ld	hl, __imulu
  981 D1:DC14 C3 5A AC D1 	jp	InsertAHL															;	call __imulu
  982 D1:DC18 -  -  -  -  MulChainAnsChainPush:
  983 D1:DC18 C3 81 AF D1 	jp	UnknownError
  984 D1:DC1C -  -  -  -  MulChainAnsChainAns:
  985 D1:DC1C C3 81 AF D1 	jp	UnknownError
  986 D1:DC20 -  -  -  -  MulChainAnsFunction:
  987 D1:DC20 3A 5D EC D1 	ld	a, (ExprOutput)
  988 D1:DC24 87 -  -  -  	add	a, a
  989 D1:DC25 87 -  -  -  	add	a, a
  990 D1:DC26 87 -  -  -  	add	a, a
  991 D1:DC27 87 -  -  -  	add	a, a
  992 D1:DC28 C6 D5 -  -  	add	a, 0D5h
  993 D1:DC2A CD 26 AD D1 	call	InsertA															;	push hl/de
  994 D1:DC2E 7B -  -  -  	ld	a, e
  995 D1:DC2F 06 00 -  -  	ld	b, OutputInBC
  996 D1:DC31 CD 52 AD D1 	call	GetFunction
  997 D1:DC35 3E E1 -  -  	ld	a, 0E1h
  998 D1:DC37 CD 26 AD D1 	call	InsertA															;	pop hl
  999 D1:DC3B 3E CD -  -  	ld	a, 0CDh
 1000 D1:DC3D 21 54 01 00 	ld	hl, __imulu
 1001 D1:DC41 C3 5A AC D1 	jp	InsertAHL															;	call __imulu
 1002 D1:DC45 -  -  -  -  MulFunctionXXX:
 1003 D1:DC45 DD 7E FC -  	ld	a, (ix-4)
 1004 D1:DC48 B7 -  -  -  	or	a
 1005 D1:DC49 28 10 -  -  	jr	z, MulFunctionNumber
 1006 D1:DC4B 3D -  -  -  	dec	a
 1007 D1:DC4C 28 18 -  -  	jr	z, MulFunctionVariable
 1008 D1:DC4E 3D -  -  -  	dec	a
 1009 D1:DC4F 28 20 -  -  	jr	z, MulFunctionChainPush
 1010 D1:DC51 3D -  -  -  	dec	a
 1011 D1:DC52 28 21 -  -  	jr	z, MulFunctionChainAns
 1012 D1:DC54 3D -  -  -  	dec	a
 1013 D1:DC55 28 21 -  -  	jr	z, MulFunctionFunction
 1014 D1:DC57 C3 E8 AE D1 	jp	MulError
 1015 D1:DC5B -  -  -  -  MulFunctionNumber:
 1016 D1:DC5B 79 -  -  -  	ld	a, c
 1017 D1:DC5C 06 02 -  -  	ld	b, OutputInHL
 1018 D1:DC5E CD 52 AD D1 	call	GetFunction
 1019 D1:DC62 C3 88 DB D1 	jp	MulChainAnsNumber
 1020 D1:DC66 -  -  -  -  MulFunctionVariable:
 1021 D1:DC66 79 -  -  -  	ld	a, c
 1022 D1:DC67 06 02 -  -  	ld	b, OutputInHL
 1023 D1:DC69 CD 52 AD D1 	call	GetFunction
 1024 D1:DC6D C3 06 DC D1 	jp	MulChainAnsVariable
 1025 D1:DC71 -  -  -  -  MulFunctionChainPush:
 1026 D1:DC71 C3 81 AF D1 	jp	UnknownError
 1027 D1:DC75 -  -  -  -  MulFunctionChainAns:
 1028 D1:DC75 59 -  -  -  	ld	e, c
 1029 D1:DC76 18 A8 -  -  	jr	MulChainAnsFunction
 1030 D1:DC78 -  -  -  -  MulFunctionFunction:
 1031 D1:DC78 7B -  -  -  	ld	a, e
 1032 D1:DC79 06 00 -  -  	ld	b, OutputInBC
 1033 D1:DC7B CD 52 AD D1 	call	GetFunction
 1034 D1:DC7F 79 -  -  -  	ld	a, c
 1035 D1:DC80 06 02 -  -  	ld	b, OutputInHL
 1036 D1:DC82 CD 52 AD D1 	call	GetFunction
 1037 D1:DC86 3E CD -  -  	ld	a, 0CDh
 1038 D1:DC88 21 54 01 00 	ld	hl, __imulu
 1039 D1:DC8C C3 5A AC D1 	jp	InsertAHL															;	call __imulu
 1040 D1:DC90 -  -  -  -  
 1041 D1:DC90 -  -  -  -  SwapLEToGE:
 1042 D1:DC90 3E 6E -  -  	ld	a, tGE
 1043 D1:DC92 18 02 -  -  	jr	$+4	
 1044 D1:DC94 -  -  -  -  SwapLTToGT:
 1045 D1:DC94 3E 6C -  -  	ld	a, tGT
 1046 D1:DC96 C5 -  -  -  	push	bc
 1047 D1:DC97 E1 -  -  -  	pop	hl
 1048 D1:DC98 DD 4E FC -  	ld	c, (ix-4)
 1049 D1:DC9B DD 46 F8 -  	ld	b, (ix-8)
 1050 D1:DC9E DD 70 FC -  	ld	(ix-4), b
 1051 D1:DCA1 DD 71 F8 -  	ld	(ix-8), c
 1052 D1:DCA4 EB -  -  -  	ex	de, hl
 1053 D1:DCA5 E5 -  -  -  	push	hl
 1054 D1:DCA6 C1 -  -  -  	pop	bc
 1055 D1:DCA7 C9 -  -  -  	ret
 1056 D1:DCA8 -  -  -  -  
 1057 D1:DCA8 -  -  -  -  GLETNumberXXX:
 1058 D1:DCA8 DD 7E FC -  	ld	a, (ix-4)
 1059 D1:DCAB B7 -  -  -  	or	a
 1060 D1:DCAC 28 10 -  -  	jr	z, GLETNumberNumber
 1061 D1:DCAE 3D -  -  -  	dec	a
 1062 D1:DCAF 28 25 -  -  	jr	z, GLETNumberVariable
 1063 D1:DCB1 3D -  -  -  	dec	a
 1064 D1:DCB2 28 2E -  -  	jr	z, GLETNumberChainPush
 1065 D1:DCB4 3D -  -  -  	dec	a
 1066 D1:DCB5 28 2F -  -  	jr	z, GLETNumberChainAns
 1067 D1:DCB7 3D -  -  -  	dec	a
 1068 D1:DCB8 28 3A -  -  	jr	z, GLETNumberFunction
 1069 D1:DCBA C3 EC AE D1 	jp	GLETError
 1070 D1:DCBE -  -  -  -  GLETNumberNumber:
 1071 D1:DCBE FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1072 D1:DCC2 C5 -  -  -  	push	bc
 1073 D1:DCC3 E1 -  -  -  	pop	hl
 1074 D1:DCC4 3A F6 31 D0 	ld	a, (tempToken)
 1075 D1:DCC8 FE 6E -  -  	cp	tGE
 1076 D1:DCCA 28 01 -  -  	jr	z, +_
 1077 D1:DCCC 37 -  -  -  	scf
 1078 D1:DCCD ED 52 -  -  _:	sbc	hl, de
 1079 D1:DCCF ED 62 -  -  	sbc	hl, hl
 1080 D1:DCD1 23 -  -  -  	inc	hl
 1081 D1:DCD2 DD 2F F9 -  	ld	(ix-7), hl
 1082 D1:DCD5 C9 -  -  -  	ret
 1083 D1:DCD6 -  -  -  -  GLETNumberVariable:
 1084 D1:DCD6 3E 21 -  -  	ld	a, 021h
 1085 D1:DCD8 C5 -  -  -  	push	bc
 1086 D1:DCD9 E1 -  -  -  	pop	hl
 1087 D1:DCDA CD 5A AC D1 	call	InsertAHL															;	ld hl, *
 1088 D1:DCDE C3 F2 DD D1 	jp	GLETChainAnsVariable
 1089 D1:DCE2 -  -  -  -  GLETNumberChainPush:
 1090 D1:DCE2 C3 81 AF D1 	jp	UnknownError
 1091 D1:DCE6 -  -  -  -  GLETNumberChainAns:
 1092 D1:DCE6 CD CB AC D1 	call	MaybeChangeHLToDE
 1093 D1:DCEA 3E 21 -  -  	ld	a, 021h
 1094 D1:DCEC C5 -  -  -  	push	bc
 1095 D1:DCED E1 -  -  -  	pop	hl
 1096 D1:DCEE CD 5A AC D1 	call	InsertAHL															;	ld hl, *
 1097 D1:DCF2 18 6F -  -  	jr	GLETInsert
 1098 D1:DCF4 -  -  -  -  GLETNumberFunction:
 1099 D1:DCF4 7B -  -  -  	ld	a, e
 1100 D1:DCF5 C5 -  -  -  	push	bc
 1101 D1:DCF6 06 01 -  -  		ld	b, OutputInDE
 1102 D1:DCF8 CD 52 AD D1 		call	GetFunction
 1103 D1:DCFC 3E 21 -  -  		ld	a, 021h
 1104 D1:DCFE E1 -  -  -  	pop	hl
 1105 D1:DCFF CD 5A AC D1 	call	InsertAHL															;	ld hl, *
 1106 D1:DD03 18 5E -  -  	jr	GLETInsert
 1107 D1:DD05 -  -  -  -  GLETVariableXXX:
 1108 D1:DD05 DD 7E FC -  	ld	a, (ix-4)
 1109 D1:DD08 B7 -  -  -  	or	a
 1110 D1:DD09 28 12 -  -  	jr	z, GLETVariableNumber
 1111 D1:DD0B 3D -  -  -  	dec	a
 1112 D1:DD0C 28 17 -  -  	jr	z, GLETVariableVariable
 1113 D1:DD0E 3D -  -  -  	dec	a
 1114 D1:DD0F 28 39 -  -  	jr	z, GLETVariableChainPush
 1115 D1:DD11 3D -  -  -  	dec	a
 1116 D1:DD12 28 3A -  -  	jr	z, GLETVariableChainAns
 1117 D1:DD14 3D -  -  -  	dec	a
 1118 D1:DD15 CA 58 DD D1 	jp	z, GLETVariableFunction
 1119 D1:DD19 C3 EC AE D1 	jp	GLETError
 1120 D1:DD1D -  -  -  -  GLETVariableNumber:
 1121 D1:DD1D CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1122 D1:DD21 C3 D8 DD D1 	jp	GLETChainAnsNumber
 1123 D1:DD25 -  -  -  -  GLETVariableVariable:
 1124 D1:DD25 79 -  -  -  	ld	a, c
 1125 D1:DD26 BB -  -  -  	cp	e
 1126 D1:DD27 20 19 -  -  	jr	nz, ++_
 1127 D1:DD29 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1128 D1:DD2D 3A F6 31 D0 	ld	a, (tempToken)
 1129 D1:DD31 D6 6C -  -  	sub	tGT
 1130 D1:DD33 28 02 -  -  	jr	z, +_
 1131 D1:DD35 3E 01 -  -  	ld	a, 1
 1132 D1:DD37 11 00 00 00 _:	ld	de, 0
 1133 D1:DD3B 5F -  -  -  	ld	e, a
 1134 D1:DD3C 36 00 -  -  	ld	(hl), typeNumber
 1135 D1:DD3E 23 -  -  -  	inc	hl
 1136 D1:DD3F ED 1F -  -  	ld	(hl), de
 1137 D1:DD41 C9 -  -  -  	ret
 1138 D1:DD42 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1139 D1:DD46 C3 F2 DD D1 	jp	GLETChainAnsVariable
 1140 D1:DD4A -  -  -  -  GLETVariableChainPush:
 1141 D1:DD4A C3 81 AF D1 	jp	UnknownError
 1142 D1:DD4E -  -  -  -  GLETVariableChainAns:
 1143 D1:DD4E CD CB AC D1 	call	MaybeChangeHLToDE
 1144 D1:DD52 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1145 D1:DD56 18 0B -  -  	jr	GLETInsert
 1146 D1:DD58 -  -  -  -  GLETVariableFunction:
 1147 D1:DD58 7B -  -  -  	ld	a, e
 1148 D1:DD59 06 01 -  -  	ld	b, OutputInDE
 1149 D1:DD5B CD 52 AD D1 	call	GetFunction
 1150 D1:DD5F CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1151 D1:DD63 -  -  -  -  GLETInsert:
 1152 D1:DD63 11 37 ED 52 	ld	de, 052ED37h
 1153 D1:DD67 21 ED 62 23 	ld	hl, 02362EDh
 1154 D1:DD6B 3A F6 31 D0 	ld	a, (tempToken)
 1155 D1:DD6F FE 6C -  -  	cp	tGT
 1156 D1:DD71 28 02 -  -  	jr	z, +_
 1157 D1:DD73 1E B7 -  -  	ld	e, 0B7h
 1158 D1:DD75 C3 AA AC D1 _:	jp	InsertDEHL															;	scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1159 D1:DD79 -  -  -  -  GLETChainPushXXX:
 1160 D1:DD79 DD 7E FC -  	ld	a, (ix-4)
 1161 D1:DD7C B7 -  -  -  	or	a
 1162 D1:DD7D 28 12 -  -  	jr	z, GLETChainPushNumber
 1163 D1:DD7F 3D -  -  -  	dec	a
 1164 D1:DD80 28 17 -  -  	jr	z, GLETChainPushVariable
 1165 D1:DD82 3D -  -  -  	dec	a
 1166 D1:DD83 28 1C -  -  	jr	z, GLETChainPushChainPush
 1167 D1:DD85 3D -  -  -  	dec	a
 1168 D1:DD86 28 1D -  -  	jr	z, GLETChainPushChainAns
 1169 D1:DD88 3D -  -  -  	dec	a
 1170 D1:DD89 CA B1 DD D1 	jp	z, GLETChainPushFunction
 1171 D1:DD8D C3 EC AE D1 	jp	GLETError
 1172 D1:DD91 -  -  -  -  GLETChainPushNumber:
 1173 D1:DD91 3E E1 -  -  	ld	a, 0E1h
 1174 D1:DD93 CD 26 AD D1 	call	InsertA															;	pop hl
 1175 D1:DD97 18 3F -  -  	jr	GLETChainAnsNumber
 1176 D1:DD99 -  -  -  -  GLETChainPushVariable:
 1177 D1:DD99 3E E1 -  -  	ld	a, 0E1h
 1178 D1:DD9B CD 26 AD D1 	call	InsertA															;	pop hl
 1179 D1:DD9F 18 51 -  -  	jr	GLETChainAnsVariable
 1180 D1:DDA1 -  -  -  -  GLETChainPushChainPush:
 1181 D1:DDA1 C3 81 AF D1 	jp	UnknownError
 1182 D1:DDA5 -  -  -  -  GLETChainPushChainAns:
 1183 D1:DDA5 CD CB AC D1 	call	MaybeChangeHLToDE
 1184 D1:DDA9 3E E1 -  -  	ld	a, 0E1h
 1185 D1:DDAB CD 26 AD D1 	call	InsertA															;	pop hl
 1186 D1:DDAF 18 B2 -  -  	jr	GLETInsert
 1187 D1:DDB1 -  -  -  -  GLETChainPushFunction:
 1188 D1:DDB1 7B -  -  -  	ld	a, e
 1189 D1:DDB2 06 01 -  -  	ld	b, OutputInDE
 1190 D1:DDB4 CD 52 AD D1 	call	GetFunction
 1191 D1:DDB8 3E E1 -  -  	ld	a, 0E1h
 1192 D1:DDBA CD 26 AD D1 	call	InsertA															;	pop hl
 1193 D1:DDBE 18 A3 -  -  _:	jr	GLETInsert
 1194 D1:DDC0 -  -  -  -  GLETChainAnsXXX:
 1195 D1:DDC0 DD 7E FC -  	ld	a, (ix-4)
 1196 D1:DDC3 B7 -  -  -  	or	a
 1197 D1:DDC4 28 12 -  -  	jr	z, GLETChainAnsNumber
 1198 D1:DDC6 3D -  -  -  	dec	a
 1199 D1:DDC7 28 29 -  -  	jr	z, GLETChainAnsVariable
 1200 D1:DDC9 3D -  -  -  	dec	a
 1201 D1:DDCA 28 30 -  -  	jr	z, GLETChainAnsChainPush
 1202 D1:DDCC 3D -  -  -  	dec	a
 1203 D1:DDCD 28 31 -  -  	jr	z, GLETChainAnsChainAns
 1204 D1:DDCF 3D -  -  -  	dec	a
 1205 D1:DDD0 CA 04 DE D1 	jp	z, GLETChainAnsFunction
 1206 D1:DDD4 C3 EC AE D1 	jp	GLETError
 1207 D1:DDD8 -  -  -  -  GLETChainAnsNumber:
 1208 D1:DDD8 CD D5 AC D1 	call	MaybeChangeDEToHL
 1209 D1:DDDC 21 F6 31 D0 	ld	hl, tempToken
 1210 D1:DDE0 7E -  -  -  	ld	a, (hl)
 1211 D1:DDE1 FE 6C -  -  	cp	tGT
 1212 D1:DDE3 20 04 -  -  	jr	nz, +_
 1213 D1:DDE5 13 -  -  -  	inc	de
 1214 D1:DDE6 3E 6E -  -  	ld	a, tGE
 1215 D1:DDE8 77 -  -  -  	ld	(hl), a
 1216 D1:DDE9 3E 11 -  -  _:	ld	a, 011h
 1217 D1:DDEB EB -  -  -  	ex	de, hl
 1218 D1:DDEC CD 5A AC D1 	call	InsertAHL															;	ld de, *
 1219 D1:DDF0 18 CC -  -  	jr	--_
 1220 D1:DDF2 -  -  -  -  GLETChainAnsVariable:
 1221 D1:DDF2 CD D5 AC D1 	call	MaybeChangeDEToHL
 1222 D1:DDF6 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1223 D1:DDFA 18 C2 -  -  	jr	--_
 1224 D1:DDFC -  -  -  -  GLETChainAnsChainPush:
 1225 D1:DDFC C3 81 AF D1 	jp	UnknownError
 1226 D1:DE00 -  -  -  -  GLETChainAnsChainAns:
 1227 D1:DE00 C3 81 AF D1 	jp	UnknownError
 1228 D1:DE04 -  -  -  -  GLETChainAnsFunction:
 1229 D1:DE04 3A 5D EC D1 	ld	a, (ExprOutput)
 1230 D1:DE08 87 -  -  -  	add	a, a
 1231 D1:DE09 87 -  -  -  	add	a, a
 1232 D1:DE0A 87 -  -  -  	add	a, a
 1233 D1:DE0B 87 -  -  -  	add	a, a
 1234 D1:DE0C C6 D5 -  -  	add	a, 0D5h
 1235 D1:DE0E CD 26 AD D1 	call	InsertA															;	push hl/de
 1236 D1:DE12 7B -  -  -  	ld	a, e
 1237 D1:DE13 06 01 -  -  	ld	b, OutputInDE
 1238 D1:DE15 CD 52 AD D1 	call	GetFunction
 1239 D1:DE19 3E E1 -  -  	ld	a, 0E1h
 1240 D1:DE1B CD 26 AD D1 	call	InsertA															;	pop hl
 1241 D1:DE1F 18 C8 -  -  _:	jr	--_
 1242 D1:DE21 -  -  -  -  GLETFunctionXXX:
 1243 D1:DE21 DD 7E FC -  	ld	a, (ix-4)
 1244 D1:DE24 B7 -  -  -  	or	a
 1245 D1:DE25 28 10 -  -  	jr	z, GLETFunctionNumber
 1246 D1:DE27 3D -  -  -  	dec	a
 1247 D1:DE28 28 18 -  -  	jr	z, GLETFunctionVariable
 1248 D1:DE2A 3D -  -  -  	dec	a
 1249 D1:DE2B 28 20 -  -  	jr	z, GLETFunctionChainPush
 1250 D1:DE2D 3D -  -  -  	dec	a
 1251 D1:DE2E 28 21 -  -  	jr	z, GLETFunctionChainAns
 1252 D1:DE30 3D -  -  -  	dec	a
 1253 D1:DE31 28 3B -  -  	jr	z, GLETFunctionFunction
 1254 D1:DE33 C3 EC AE D1 	jp	GLETError
 1255 D1:DE37 -  -  -  -  GLETFunctionNumber:
 1256 D1:DE37 79 -  -  -  	ld	a, c
 1257 D1:DE38 06 02 -  -  	ld	b, OutputInHL
 1258 D1:DE3A CD 52 AD D1 	call	GetFunction
 1259 D1:DE3E C3 D8 DD D1 	jp	GLETChainAnsNumber
 1260 D1:DE42 -  -  -  -  GLETFunctionVariable:
 1261 D1:DE42 79 -  -  -  	ld	a, c
 1262 D1:DE43 06 02 -  -  	ld	b, OutputInHL
 1263 D1:DE45 CD 52 AD D1 	call	GetFunction
 1264 D1:DE49 C3 F2 DD D1 	jp	GLETChainAnsVariable
 1265 D1:DE4D -  -  -  -  GLETFunctionChainPush:
 1266 D1:DE4D C3 81 AF D1 	jp	UnknownError
 1267 D1:DE51 -  -  -  -  GLETFunctionChainAns:
 1268 D1:DE51 3A 5D EC D1 	ld	a, (ExprOutput)
 1269 D1:DE55 87 -  -  -  	add	a, a
 1270 D1:DE56 87 -  -  -  	add	a, a
 1271 D1:DE57 87 -  -  -  	add	a, a
 1272 D1:DE58 87 -  -  -  	add	a, a
 1273 D1:DE59 C6 D5 -  -  	add	a, 0D5h
 1274 D1:DE5B CD 26 AD D1 	call	InsertA															;	push hl/de
 1275 D1:DE5F 79 -  -  -  	ld	a, c
 1276 D1:DE60 06 02 -  -  	ld	b, OutputInHL
 1277 D1:DE62 CD 52 AD D1 	call	GetFunction
 1278 D1:DE66 3E D1 -  -  	ld	a, 0D1h
 1279 D1:DE68 CD 26 AD D1 	call	InsertA															;	pop de
 1280 D1:DE6C 18 B1 -  -  	jr	-_
 1281 D1:DE6E -  -  -  -  GLETFunctionFunction:
 1282 D1:DE6E 7B -  -  -  	ld	a, e
 1283 D1:DE6F 06 01 -  -  	ld	b, OutputInDE
 1284 D1:DE71 CD 52 AD D1 	call	GetFunction
 1285 D1:DE75 79 -  -  -  	ld	a, c
 1286 D1:DE76 06 02 -  -  	ld	b, OutputInHL
 1287 D1:DE78 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1288 D1:DE7C CD 52 AD D1 	call	GetFunction
 1289 D1:DE80 18 9D -  -  	jr	-_
 1290 D1:DE82 -  -  -  -  	
 1291 D1:DE82 -  -  -  -  NEQNumberXXX:
 1292 D1:DE82 DD 7E FC -  	ld	a, (ix-4)
 1293 D1:DE85 B7 -  -  -  	or	a
 1294 D1:DE86 28 10 -  -  	jr	z, NEQNumberNumber
 1295 D1:DE88 3D -  -  -  	dec	a
 1296 D1:DE89 28 33 -  -  	jr	z, NEQNumberVariable
 1297 D1:DE8B 3D -  -  -  	dec	a
 1298 D1:DE8C 28 37 -  -  	jr	z, NEQNumberChainPush
 1299 D1:DE8E 3D -  -  -  	dec	a
 1300 D1:DE8F 28 38 -  -  	jr	z, NEQNumberChainAns
 1301 D1:DE91 3D -  -  -  	dec	a
 1302 D1:DE92 28 3B -  -  	jr	z, NEQNumberFunction
 1303 D1:DE94 C3 06 AF D1 	jp	NEQError
 1304 D1:DE98 -  -  -  -  NEQNumberNumber:
 1305 D1:DE98 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1306 D1:DE9C EB -  -  -  	ex	de, hl
 1307 D1:DE9D 3A F6 31 D0 	ld	a, (tempToken)
 1308 D1:DEA1 FE 6A -  -  	cp	tEq
 1309 D1:DEA3 28 0C -  -  	jr	z, +_
 1310 D1:DEA5 B7 -  -  -  	or	a
 1311 D1:DEA6 ED 42 -  -  	sbc	hl, bc
 1312 D1:DEA8 21 00 00 00 	ld	hl, 0
 1313 D1:DEAC 28 01 -  -  	jr	z, $+3
 1314 D1:DEAE 23 -  -  -  	inc	hl
 1315 D1:DEAF 18 09 -  -  	jr	++_
 1316 D1:DEB1 ED 42 -  -  _:	sbc	hl, bc
 1317 D1:DEB3 21 00 00 00 	ld	hl, 0
 1318 D1:DEB7 20 01 -  -  	jr	nz, $+3
 1319 D1:DEB9 23 -  -  -  	inc	hl
 1320 D1:DEBA DD 2F F9 -  _:	ld	(ix-7), hl
 1321 D1:DEBD C9 -  -  -  	ret
 1322 D1:DEBE -  -  -  -  NEQNumberVariable:
 1323 D1:DEBE C5 -  -  -  	push	bc
 1324 D1:DEBF E1 -  -  -  	pop	hl
 1325 D1:DEC0 EB -  -  -  	ex	de, hl
 1326 D1:DEC1 E5 -  -  -  	push	hl
 1327 D1:DEC2 C1 -  -  -  	pop	bc
 1328 D1:DEC3 18 2B -  -  	jr	NEQVariableNumber
 1329 D1:DEC5 -  -  -  -  NEQNumberChainPush:
 1330 D1:DEC5 C3 81 AF D1 	jp	UnknownError
 1331 D1:DEC9 -  -  -  -  NEQNumberChainAns:
 1332 D1:DEC9 C5 -  -  -  	push	bc
 1333 D1:DECA D1 -  -  -  	pop	de
 1334 D1:DECB C3 B5 DF D1 	jp	NEQChainAnsNumber
 1335 D1:DECF -  -  -  -  NEQNumberFunction:
 1336 D1:DECF C5 -  -  -  	push	bc
 1337 D1:DED0 E1 -  -  -  	pop	hl
 1338 D1:DED1 EB -  -  -  	ex	de, hl
 1339 D1:DED2 E5 -  -  -  	push	hl
 1340 D1:DED3 C1 -  -  -  	pop	bc
 1341 D1:DED4 C3 32 E0 D1 	jp	NEQFunctionNumber
 1342 D1:DED8 -  -  -  -  NEQVariableXXX:
 1343 D1:DED8 DD 7E FC -  	ld	a, (ix-4)
 1344 D1:DEDB B7 -  -  -  	or	a
 1345 D1:DEDC 28 12 -  -  	jr	z, NEQVariableNumber
 1346 D1:DEDE 3D -  -  -  	dec	a
 1347 D1:DEDF 28 17 -  -  	jr	z, NEQVariableVariable
 1348 D1:DEE1 3D -  -  -  	dec	a
 1349 D1:DEE2 28 39 -  -  	jr	z, NEQVariableChainPush
 1350 D1:DEE4 3D -  -  -  	dec	a
 1351 D1:DEE5 28 3A -  -  	jr	z, NEQVariableChainAns
 1352 D1:DEE7 3D -  -  -  	dec	a
 1353 D1:DEE8 CA 26 DF D1 	jp	z, NEQVariableFunction
 1354 D1:DEEC C3 06 AF D1 	jp	NEQError
 1355 D1:DEF0 -  -  -  -  NEQVariableNumber:
 1356 D1:DEF0 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1357 D1:DEF4 C3 B5 DF D1 	jp	NEQChainAnsNumber
 1358 D1:DEF8 -  -  -  -  NEQVariableVariable:
 1359 D1:DEF8 79 -  -  -  	ld	a, c
 1360 D1:DEF9 BB -  -  -  	cp	e
 1361 D1:DEFA 20 19 -  -  	jr	nz, ++_
 1362 D1:DEFC FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1363 D1:DF00 3A F6 31 D0 	ld	a, (tempToken)
 1364 D1:DF04 D6 6F -  -  	sub	tNE
 1365 D1:DF06 28 02 -  -  	jr	z, +_
 1366 D1:DF08 3E 01 -  -  	ld	a, 1
 1367 D1:DF0A 11 00 00 00 _:	ld	de, 0
 1368 D1:DF0E 5F -  -  -  	ld	e, a
 1369 D1:DF0F 36 00 -  -  	ld	(hl), typeNumber
 1370 D1:DF11 23 -  -  -  	inc	hl
 1371 D1:DF12 ED 1F -  -  	ld	(hl), de
 1372 D1:DF14 C9 -  -  -  	ret
 1373 D1:DF15 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1374 D1:DF19 C3 D9 DF D1 	jp	NEQChainAnsVariable
 1375 D1:DF1D -  -  -  -  NEQVariableChainPush:
 1376 D1:DF1D C3 81 AF D1 	jp	UnknownError
 1377 D1:DF21 -  -  -  -  NEQVariableChainAns:
 1378 D1:DF21 59 -  -  -  	ld	e, c
 1379 D1:DF22 C3 D9 DF D1 	jp	NEQChainAnsVariable
 1380 D1:DF26 -  -  -  -  NEQVariableFunction:
 1381 D1:DF26 7B -  -  -  	ld	a, e
 1382 D1:DF27 06 01 -  -  	ld	b, OutputInDE
 1383 D1:DF29 CD 52 AD D1 	call	GetFunction
 1384 D1:DF2D CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1385 D1:DF31 -  -  -  -  NEQInsert:
 1386 D1:DF31 21 B7 ED 52 	ld	hl, 052EDB7h
 1387 D1:DF35 CD 5E AC D1 	call	InsertHL															;	or a \ sbc hl, de
 1388 D1:DF39 11 00 00 00 	ld	de, 0
 1389 D1:DF3D 21 20 01 23 	ld	hl, 0230120h
 1390 D1:DF41 3A F6 31 D0 	ld	a, (tempToken)
 1391 D1:DF45 FE 6A -  -  	cp	tEq
 1392 D1:DF47 28 02 -  -  	jr	z, +_
 1393 D1:DF49 2E 28 -  -  	ld	l, 028h
 1394 D1:DF4B 3E 21 -  -  _:	ld	a, 021h
 1395 D1:DF4D C3 A6 AC D1 	jp	InsertADEHL															;	ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1396 D1:DF51 -  -  -  -  NEQChainPushXXX:
 1397 D1:DF51 DD 7E FC -  	ld	a, (ix-4)
 1398 D1:DF54 B7 -  -  -  	or	a
 1399 D1:DF55 28 12 -  -  	jr	z, NEQChainPushNumber
 1400 D1:DF57 3D -  -  -  	dec	a
 1401 D1:DF58 28 17 -  -  	jr	z, NEQChainPushVariable
 1402 D1:DF5A 3D -  -  -  	dec	a
 1403 D1:DF5B 28 1C -  -  	jr	z, NEQChainPushChainPush
 1404 D1:DF5D 3D -  -  -  	dec	a
 1405 D1:DF5E 28 1D -  -  	jr	z, NEQChainPushChainAns
 1406 D1:DF60 3D -  -  -  	dec	a
 1407 D1:DF61 CA 8E DF D1 	jp	z, NEQChainPushFunction
 1408 D1:DF65 C3 06 AF D1 	jp	NEQError
 1409 D1:DF69 -  -  -  -  NEQChainPushNumber:
 1410 D1:DF69 3E E1 -  -  	ld	a, 0E1h
 1411 D1:DF6B CD 26 AD D1 	call	InsertA															;	pop hl
 1412 D1:DF6F 18 44 -  -  	jr	NEQChainAnsNumber
 1413 D1:DF71 -  -  -  -  NEQChainPushVariable:
 1414 D1:DF71 3E E1 -  -  	ld	a, 0E1h
 1415 D1:DF73 CD 26 AD D1 	call	InsertA															;	pop hl
 1416 D1:DF77 18 60 -  -  	jr	NEQChainAnsVariable
 1417 D1:DF79 -  -  -  -  NEQChainPushChainPush:
 1418 D1:DF79 C3 81 AF D1 	jp	UnknownError
 1419 D1:DF7D -  -  -  -  NEQChainPushChainAns:
 1420 D1:DF7D 3A 5D EC D1 	ld	a, (ExprOutput)
 1421 D1:DF81 B7 -  -  -  	or	a
 1422 D1:DF82 3E D1 -  -  	ld	a, 0D1h
 1423 D1:DF84 20 02 -  -  	jr	nz, +_
 1424 D1:DF86 3E E1 -  -  	ld	a, 0E1h
 1425 D1:DF88 CD 26 AD D1 _:	call	InsertA															;	pop hl/de
 1426 D1:DF8C 18 A3 -  -  	jr	NEQInsert
 1427 D1:DF8E -  -  -  -  NEQChainPushFunction:
 1428 D1:DF8E 7B -  -  -  	ld	a, e
 1429 D1:DF8F 06 02 -  -  	ld	b, OutputInHL
 1430 D1:DF91 CD 52 AD D1 	call	GetFunction
 1431 D1:DF95 3E D1 -  -  	ld	a, 0D1h
 1432 D1:DF97 CD 26 AD D1 	call	InsertA															;	pop de
 1433 D1:DF9B 18 94 -  -  _:	jr	NEQInsert
 1434 D1:DF9D -  -  -  -  NEQChainAnsXXX:
 1435 D1:DF9D DD 7E FC -  	ld	a, (ix-4)
 1436 D1:DFA0 B7 -  -  -  	or	a
 1437 D1:DFA1 28 12 -  -  	jr	z, NEQChainAnsNumber
 1438 D1:DFA3 3D -  -  -  	dec	a
 1439 D1:DFA4 28 33 -  -  	jr	z, NEQChainAnsVariable
 1440 D1:DFA6 3D -  -  -  	dec	a
 1441 D1:DFA7 28 4C -  -  	jr	z, NEQChainAnsChainPush
 1442 D1:DFA9 3D -  -  -  	dec	a
 1443 D1:DFAA 28 4D -  -  	jr	z, NEQChainAnsChainAns
 1444 D1:DFAC 3D -  -  -  	dec	a
 1445 D1:DFAD CA FD DF D1 	jp	z, NEQChainAnsFunction
 1446 D1:DFB1 C3 06 AF D1 	jp	NEQError
 1447 D1:DFB5 -  -  -  -  NEQChainAnsNumber:
 1448 D1:DFB5 FD CB C0 5E 	bit	op_is_last_one, (iy+fExpression1)
 1449 D1:DFB9 28 0C -  -  	jr	z, +_
 1450 D1:DFBB 3A F6 31 D0 	ld	a, (tempToken)
 1451 D1:DFBF FE 6F -  -  	cp	tNE
 1452 D1:DFC1 20 04 -  -  	jr	nz, +_
 1453 D1:DFC3 FD CB C0 AE 	res	ans_set_z_flag, (iy+fExpression1)
 1454 D1:DFC7 3A 5D EC D1 _:	ld	a, (ExprOutput)
 1455 D1:DFCB B7 -  -  -  	or	a
 1456 D1:DFCC 3E 11 -  -  	ld	a, 011h
 1457 D1:DFCE 20 02 -  -  	jr	nz, $+4
 1458 D1:DFD0 3E 21 -  -  	ld	a, 021h
 1459 D1:DFD2 EB -  -  -  	ex	de, hl
 1460 D1:DFD3 CD 5A AC D1 	call	InsertAHL															;	ld hl/de, *
 1461 D1:DFD7 18 C2 -  -  	jr	--_
 1462 D1:DFD9 -  -  -  -  NEQChainAnsVariable:
 1463 D1:DFD9 26 17 -  -  	ld	h, 017h
 1464 D1:DFDB 16 03 -  -  	ld	d, 3
 1465 D1:DFDD ED 5C -  -  	mlt	de
 1466 D1:DFDF 7B -  -  -  	ld	a, e
 1467 D1:DFE0 2E DD -  -  	ld	l, 0DDh
 1468 D1:DFE2 CD 70 1D 02 	call	_SetHLUToA
 1469 D1:DFE6 3A 5D EC D1 	ld	a, (ExprOutput)
 1470 D1:DFEA B7 -  -  -  	or	a
 1471 D1:DFEB 20 02 -  -  	jr	nz, $+4
 1472 D1:DFED 26 27 -  -  	ld	h, 027h
 1473 D1:DFEF CD 5E AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1474 D1:DFF3 18 A6 -  -  	jr	--_
 1475 D1:DFF5 -  -  -  -  NEQChainAnsChainPush:
 1476 D1:DFF5 C3 81 AF D1 	jp	UnknownError
 1477 D1:DFF9 -  -  -  -  NEQChainAnsChainAns:
 1478 D1:DFF9 C3 81 AF D1 	jp	UnknownError
 1479 D1:DFFD -  -  -  -  NEQChainAnsFunction:
 1480 D1:DFFD 3A 5D EC D1 	ld	a, (ExprOutput)
 1481 D1:E001 87 -  -  -  	add	a, a
 1482 D1:E002 87 -  -  -  	add	a, a
 1483 D1:E003 87 -  -  -  	add	a, a
 1484 D1:E004 87 -  -  -  	add	a, a
 1485 D1:E005 C6 D5 -  -  	add	a, 0D5h
 1486 D1:E007 CD 26 AD D1 	call	InsertA															;	push hl/de
 1487 D1:E00B 7B -  -  -  	ld	a, e
 1488 D1:E00C 06 02 -  -  	ld	b, OutputInHL
 1489 D1:E00E CD 52 AD D1 	call	GetFunction
 1490 D1:E012 3E D1 -  -  	ld	a, 0D1h
 1491 D1:E014 CD 26 AD D1 	call	InsertA															;	pop de
 1492 D1:E018 C3 31 DF D1 _:	jp	NEQInsert
 1493 D1:E01C -  -  -  -  NEQFunctionXXX:
 1494 D1:E01C DD 7E FC -  	ld	a, (ix-4)
 1495 D1:E01F B7 -  -  -  	or	a
 1496 D1:E020 28 10 -  -  	jr	z, NEQFunctionNumber
 1497 D1:E022 3D -  -  -  	dec	a
 1498 D1:E023 28 18 -  -  	jr	z, NEQFunctionVariable
 1499 D1:E025 3D -  -  -  	dec	a
 1500 D1:E026 28 1C -  -  	jr	z, NEQFunctionChainPush
 1501 D1:E028 3D -  -  -  	dec	a
 1502 D1:E029 28 1D -  -  	jr	z, NEQFunctionChainAns
 1503 D1:E02B 3D -  -  -  	dec	a
 1504 D1:E02C 28 1D -  -  	jr	z, NEQFunctionFunction
 1505 D1:E02E C3 06 AF D1 	jp	NEQError
 1506 D1:E032 -  -  -  -  NEQFunctionNumber:
 1507 D1:E032 79 -  -  -  	ld	a, c
 1508 D1:E033 06 02 -  -  	ld	b, OutputInHL
 1509 D1:E035 CD 52 AD D1 	call	GetFunction
 1510 D1:E039 C3 B5 DF D1 	jp	NEQChainAnsNumber
 1511 D1:E03D -  -  -  -  NEQFunctionVariable:
 1512 D1:E03D 79 -  -  -  	ld	a, c
 1513 D1:E03E 4B -  -  -  	ld	c, e
 1514 D1:E03F 5F -  -  -  	ld	e, a
 1515 D1:E040 C3 26 DF D1 	jp	NEQVariableFunction
 1516 D1:E044 -  -  -  -  NEQFunctionChainPush:
 1517 D1:E044 C3 81 AF D1 	jp	UnknownError
 1518 D1:E048 -  -  -  -  NEQFunctionChainAns:
 1519 D1:E048 59 -  -  -  	ld	e, c
 1520 D1:E049 18 B2 -  -  	jr	NEQChainAnsFunction
 1521 D1:E04B -  -  -  -  NEQFunctionFunction:
 1522 D1:E04B 7B -  -  -  	ld	a, e
 1523 D1:E04C 06 01 -  -  	ld	b, OutputInDE
 1524 D1:E04E CD 52 AD D1 	call	GetFunction
 1525 D1:E052 79 -  -  -  	ld	a, c
 1526 D1:E053 06 02 -  -  	ld	b, OutputInHL
 1527 D1:E055 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1528 D1:E059 CD 52 AD D1 	call	GetFunction
 1529 D1:E05D 18 B9 -  -  	jr	-_
 1530 D1:E05F -  -  -  -  
 1531 D1:E05F -  -  -  -  XORANDNumberXXX:
 1532 D1:E05F DD 7E FC -  	ld	a, (ix-4)
 1533 D1:E062 B7 -  -  -  	or	a
 1534 D1:E063 28 10 -  -  	jr	z, XORANDNumberNumber
 1535 D1:E065 3D -  -  -  	dec	a
 1536 D1:E066 28 59 -  -  	jr	z, XORANDNumberVariable
 1537 D1:E068 3D -  -  -  	dec	a
 1538 D1:E069 28 5D -  -  	jr	z, XORANDNumberChainPush
 1539 D1:E06B 3D -  -  -  	dec	a
 1540 D1:E06C 28 5E -  -  	jr	z, XORANDNumberChainAns
 1541 D1:E06E 3D -  -  -  	dec	a
 1542 D1:E06F 28 61 -  -  	jr	z, XORANDNumberFunction
 1543 D1:E071 C3 14 AF D1 	jp	XORANDError
 1544 D1:E075 -  -  -  -  XORANDNumberNumber:
 1545 D1:E075 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1546 D1:E079 B7 -  -  -  	or	a
 1547 D1:E07A ED 62 -  -  	sbc	hl, hl
 1548 D1:E07C 3A F6 31 D0 	ld	a, (tempToken)
 1549 D1:E080 FE 3D -  -  	cp	tXor
 1550 D1:E082 28 22 -  -  	jr	z, ++_
 1551 D1:E084 FE 3C -  -  	cp	tOr
 1552 D1:E086 28 0F -  -  	jr	z, +_
 1553 D1:E088 CD 48 1D 02 	call	_ChkBCIs0
 1554 D1:E08C 28 2F -  -  	jr	z, +++_
 1555 D1:E08E CD 4C 1D 02 	call	_ChkDEIs0
 1556 D1:E092 28 29 -  -  	jr	z, +++_
 1557 D1:E094 23 -  -  -  	inc	hl
 1558 D1:E095 18 26 -  -  	jr	+++_
 1559 D1:E097 CD 48 1D 02 _:	call	_ChkBCIs0
 1560 D1:E09B 47 -  -  -  	ld	b, a
 1561 D1:E09C CD 4C 1D 02 	call	_ChkDEIs0
 1562 D1:E0A0 B0 -  -  -  	or	a, b
 1563 D1:E0A1 28 1A -  -  	jr	z, ++_
 1564 D1:E0A3 23 -  -  -  	inc	hl
 1565 D1:E0A4 18 17 -  -  	jr	++_
 1566 D1:E0A6 CD 4C 1D 02 _:	call	_ChkDEIs0
 1567 D1:E0AA 11 00 00 00 	ld	de, 0
 1568 D1:E0AE 28 01 -  -  	jr	z, $+3
 1569 D1:E0B0 13 -  -  -  	inc	de
 1570 D1:E0B1 CD 48 1D 02 	call	_ChkBCIs0
 1571 D1:E0B5 3E 00 -  -  	ld	a, 0
 1572 D1:E0B7 28 01 -  -  	jr	z, $+3
 1573 D1:E0B9 3C -  -  -  	inc	a
 1574 D1:E0BA AB -  -  -  	xor	e
 1575 D1:E0BB 5F -  -  -  	ld	e, a
 1576 D1:E0BC EB -  -  -  	ex	de, hl
 1577 D1:E0BD DD 2F F9 -  _:	ld	(ix-7), hl
 1578 D1:E0C0 C9 -  -  -  	ret
 1579 D1:E0C1 -  -  -  -  XORANDNumberVariable:
 1580 D1:E0C1 C5 -  -  -  	push	bc
 1581 D1:E0C2 E1 -  -  -  	pop	hl
 1582 D1:E0C3 EB -  -  -  	ex	de, hl
 1583 D1:E0C4 E5 -  -  -  	push	hl
 1584 D1:E0C5 C1 -  -  -  	pop	bc
 1585 D1:E0C6 18 2B -  -  	jr	XORANDVariableNumber
 1586 D1:E0C8 -  -  -  -  XORANDNumberChainPush:
 1587 D1:E0C8 C3 81 AF D1 	jp	UnknownError
 1588 D1:E0CC -  -  -  -  XORANDNumberChainAns:
 1589 D1:E0CC C5 -  -  -  	push	bc
 1590 D1:E0CD D1 -  -  -  	pop	de
 1591 D1:E0CE C3 BB E1 D1 	jp	XORANDChainAnsNumber
 1592 D1:E0D2 -  -  -  -  XORANDNumberFunction:
 1593 D1:E0D2 C5 -  -  -  	push	bc
 1594 D1:E0D3 E1 -  -  -  	pop	hl
 1595 D1:E0D4 EB -  -  -  	ex	de, hl
 1596 D1:E0D5 E5 -  -  -  	push	hl
 1597 D1:E0D6 C1 -  -  -  	pop	bc
 1598 D1:E0D7 C3 24 E2 D1 	jp	XORANDFunctionNumber
 1599 D1:E0DB -  -  -  -  XORANDVariableXXX:
 1600 D1:E0DB DD 7E FC -  	ld	a, (ix-4)
 1601 D1:E0DE B7 -  -  -  	or	a
 1602 D1:E0DF 28 12 -  -  	jr	z, XORANDVariableNumber
 1603 D1:E0E1 3D -  -  -  	dec	a
 1604 D1:E0E2 28 17 -  -  	jr	z, XORANDVariableVariable
 1605 D1:E0E4 3D -  -  -  	dec	a
 1606 D1:E0E5 28 39 -  -  	jr	z, XORANDVariableChainPush
 1607 D1:E0E7 3D -  -  -  	dec	a
 1608 D1:E0E8 28 3A -  -  	jr	z, XORANDVariableChainAns
 1609 D1:E0EA 3D -  -  -  	dec	a
 1610 D1:E0EB CA 29 E1 D1 	jp	z, XORANDVariableFunction
 1611 D1:E0EF C3 14 AF D1 	jp	XORANDError
 1612 D1:E0F3 -  -  -  -  XORANDVariableNumber:
 1613 D1:E0F3 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1614 D1:E0F7 C3 BB E1 D1 	jp	XORANDChainAnsNumber
 1615 D1:E0FB -  -  -  -  XORANDVariableVariable:
 1616 D1:E0FB 79 -  -  -  	ld	a, c
 1617 D1:E0FC BB -  -  -  	cp	e
 1618 D1:E0FD 20 19 -  -  	jr	nz, ++_
 1619 D1:E0FF FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1620 D1:E103 3A F6 31 D0 	ld	a, (tempToken)
 1621 D1:E107 D6 6F -  -  	sub	tNE
 1622 D1:E109 28 02 -  -  	jr	z, +_
 1623 D1:E10B 3E 01 -  -  	ld	a, 1
 1624 D1:E10D 11 00 00 00 _:	ld	de, 0
 1625 D1:E111 5F -  -  -  	ld	e, a
 1626 D1:E112 36 00 -  -  	ld	(hl), typeNumber
 1627 D1:E114 23 -  -  -  	inc	hl
 1628 D1:E115 ED 1F -  -  	ld	(hl), de
 1629 D1:E117 C9 -  -  -  	ret
 1630 D1:E118 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1631 D1:E11C C3 CD E1 D1 	jp	XORANDChainAnsVariable
 1632 D1:E120 -  -  -  -  XORANDVariableChainPush:
 1633 D1:E120 C3 81 AF D1 	jp	UnknownError
 1634 D1:E124 -  -  -  -  XORANDVariableChainAns:
 1635 D1:E124 59 -  -  -  	ld	e, c
 1636 D1:E125 C3 CD E1 D1 	jp	XORANDChainAnsVariable
 1637 D1:E129 -  -  -  -  XORANDVariableFunction:
 1638 D1:E129 7B -  -  -  	ld	a, e
 1639 D1:E12A 06 01 -  -  	ld	b, OutputInDE
 1640 D1:E12C CD 52 AD D1 	call	GetFunction
 1641 D1:E130 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1642 D1:E134 -  -  -  -  XORANDInsert:
 1643 D1:E134 ED 5B 39 EC 
              D1 -  -  -  	ld	de, (programPtr)
 1644 D1:E139 21 3E F0 D1 	ld	hl, XORANDData
 1645 D1:E13D 06 A2 -  -  	ld	b, 0A2h
 1646 D1:E13F 3A F6 31 D0 	ld	a, (tempToken)
 1647 D1:E143 FE 3D -  -  	cp	tXor
 1648 D1:E145 20 02 -  -  	jr	nz, +_
 1649 D1:E147 06 AA -  -  	ld	b, 0AAh
 1650 D1:E149 FE 3C -  -  _:	cp	tOr
 1651 D1:E14B 20 02 -  -  	jr	nz, +_
 1652 D1:E14D 06 B2 -  -  	ld	b, 0B2h
 1653 D1:E14F 78 -  -  -  _:	ld	a, b
 1654 D1:E150 32 48 F0 D1 	ld	(XORANDSMC), a
 1655 D1:E154 01 10 00 00 	ld	bc, 16
 1656 D1:E158 ED B0 -  -  	ldir
 1657 D1:E15A ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
 1658 D1:E15F C9 -  -  -  	ret
 1659 D1:E160 -  -  -  -  XORANDChainPushXXX:
 1660 D1:E160 DD 7E FC -  	ld	a, (ix-4)
 1661 D1:E163 B7 -  -  -  	or	a
 1662 D1:E164 28 12 -  -  	jr	z, XORANDChainPushNumber
 1663 D1:E166 3D -  -  -  	dec	a
 1664 D1:E167 28 17 -  -  	jr	z, XORANDChainPushVariable
 1665 D1:E169 3D -  -  -  	dec	a
 1666 D1:E16A 28 1C -  -  	jr	z, XORANDChainPushChainPush
 1667 D1:E16C 3D -  -  -  	dec	a
 1668 D1:E16D 28 1D -  -  	jr	z, XORANDChainPushChainAns
 1669 D1:E16F 3D -  -  -  	dec	a
 1670 D1:E170 CA 94 E1 D1 	jp	z, XORANDChainPushFunction
 1671 D1:E174 C3 14 AF D1 	jp	XORANDError
 1672 D1:E178 -  -  -  -  XORANDChainPushNumber:
 1673 D1:E178 3E E1 -  -  	ld	a, 0E1h
 1674 D1:E17A CD 26 AD D1 	call	InsertA															;	pop hl
 1675 D1:E17E 18 3B -  -  	jr	XORANDChainAnsNumber
 1676 D1:E180 -  -  -  -  XORANDChainPushVariable:
 1677 D1:E180 3E E1 -  -  	ld	a, 0E1h
 1678 D1:E182 CD 26 AD D1 	call	InsertA															;	pop hl
 1679 D1:E186 18 45 -  -  	jr	XORANDChainAnsVariable
 1680 D1:E188 -  -  -  -  XORANDChainPushChainPush:
 1681 D1:E188 C3 81 AF D1 	jp	UnknownError
 1682 D1:E18C -  -  -  -  XORANDChainPushChainAns:
 1683 D1:E18C 3E D1 -  -  	ld	a, 0D1h
 1684 D1:E18E CD 26 AD D1 	call	InsertA															;	pop de
 1685 D1:E192 18 A0 -  -  	jr	XORANDInsert
 1686 D1:E194 -  -  -  -  XORANDChainPushFunction:
 1687 D1:E194 7B -  -  -  	ld	a, e
 1688 D1:E195 06 02 -  -  	ld	b, OutputInHL
 1689 D1:E197 CD 52 AD D1 	call	GetFunction
 1690 D1:E19B 3E D1 -  -  	ld	a, 0D1h
 1691 D1:E19D CD 26 AD D1 	call	InsertA															;	pop de
 1692 D1:E1A1 18 91 -  -  _:	jr	XORANDInsert
 1693 D1:E1A3 -  -  -  -  XORANDChainAnsXXX:
 1694 D1:E1A3 DD 7E FC -  	ld	a, (ix-4)
 1695 D1:E1A6 B7 -  -  -  	or	a
 1696 D1:E1A7 28 12 -  -  	jr	z, XORANDChainAnsNumber
 1697 D1:E1A9 3D -  -  -  	dec	a
 1698 D1:E1AA 28 21 -  -  	jr	z, XORANDChainAnsVariable
 1699 D1:E1AC 3D -  -  -  	dec	a
 1700 D1:E1AD 28 3A -  -  	jr	z, XORANDChainAnsChainPush
 1701 D1:E1AF 3D -  -  -  	dec	a
 1702 D1:E1B0 28 3B -  -  	jr	z, XORANDChainAnsChainAns
 1703 D1:E1B2 3D -  -  -  	dec	a
 1704 D1:E1B3 CA F1 E1 D1 	jp	z, XORANDChainAnsFunction
 1705 D1:E1B7 C3 14 AF D1 	jp	XORANDError
 1706 D1:E1BB -  -  -  -  XORANDChainAnsNumber:
 1707 D1:E1BB 3A 5D EC D1 	ld	a, (ExprOutput)
 1708 D1:E1BF B7 -  -  -  	or	a
 1709 D1:E1C0 3E 11 -  -  	ld	a, 011h
 1710 D1:E1C2 20 02 -  -  	jr	nz, +_
 1711 D1:E1C4 3E 21 -  -  	ld	a, 021h
 1712 D1:E1C6 EB -  -  -  _:	ex	de, hl
 1713 D1:E1C7 CD 5A AC D1 	call	InsertAHL															;	ld hl/de, *
 1714 D1:E1CB 18 D4 -  -  	jr	--_
 1715 D1:E1CD -  -  -  -  XORANDChainAnsVariable:
 1716 D1:E1CD 26 17 -  -  	ld	h, 017h
 1717 D1:E1CF 16 03 -  -  	ld	d, 3
 1718 D1:E1D1 ED 5C -  -  	mlt	de
 1719 D1:E1D3 7B -  -  -  	ld	a, e
 1720 D1:E1D4 2E DD -  -  	ld	l, 0DDh
 1721 D1:E1D6 CD 70 1D 02 	call	_SetHLUToA
 1722 D1:E1DA 3A 5D EC D1 	ld	a, (ExprOutput)
 1723 D1:E1DE B7 -  -  -  	or	a
 1724 D1:E1DF 20 02 -  -  	jr	nz, $+4
 1725 D1:E1E1 26 27 -  -  	ld	h, 027h
 1726 D1:E1E3 CD 5E AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1727 D1:E1E7 18 B8 -  -  	jr	--_
 1728 D1:E1E9 -  -  -  -  XORANDChainAnsChainPush:
 1729 D1:E1E9 C3 81 AF D1 	jp	UnknownError
 1730 D1:E1ED -  -  -  -  XORANDChainAnsChainAns:
 1731 D1:E1ED C3 81 AF D1 	jp	UnknownError
 1732 D1:E1F1 -  -  -  -  XORANDChainAnsFunction:
 1733 D1:E1F1 3A 5D EC D1 	ld	a, (ExprOutput)
 1734 D1:E1F5 87 -  -  -  	add	a, a
 1735 D1:E1F6 87 -  -  -  	add	a, a
 1736 D1:E1F7 87 -  -  -  	add	a, a
 1737 D1:E1F8 87 -  -  -  	add	a, a
 1738 D1:E1F9 C6 D5 -  -  	add	a, 0D5h
 1739 D1:E1FB CD 26 AD D1 	call	InsertA															;	push hl/de
 1740 D1:E1FF 7B -  -  -  	ld	a, e
 1741 D1:E200 06 02 -  -  	ld	b, OutputInHL
 1742 D1:E202 CD 52 AD D1 	call	GetFunction
 1743 D1:E206 3E D1 -  -  	ld	a, 0D1h
 1744 D1:E208 CD 26 AD D1 	call	InsertA															;	pop de
 1745 D1:E20C 18 93 -  -  _:	jr	---_
 1746 D1:E20E -  -  -  -  XORANDFunctionXXX:
 1747 D1:E20E DD 7E FC -  	ld	a, (ix-4)
 1748 D1:E211 B7 -  -  -  	or	a
 1749 D1:E212 28 10 -  -  	jr	z, XORANDFunctionNumber
 1750 D1:E214 3D -  -  -  	dec	a
 1751 D1:E215 28 18 -  -  	jr	z, XORANDFunctionVariable
 1752 D1:E217 3D -  -  -  	dec	a
 1753 D1:E218 28 1C -  -  	jr	z, XORANDFunctionChainPush
 1754 D1:E21A 3D -  -  -  	dec	a
 1755 D1:E21B 28 1D -  -  	jr	z, XORANDFunctionChainAns
 1756 D1:E21D 3D -  -  -  	dec	a
 1757 D1:E21E 28 1D -  -  	jr	z, XORANDFunctionFunction
 1758 D1:E220 C3 14 AF D1 	jp	XORANDError
 1759 D1:E224 -  -  -  -  XORANDFunctionNumber:
 1760 D1:E224 79 -  -  -  	ld	a, c
 1761 D1:E225 06 02 -  -  	ld	b, OutputInHL
 1762 D1:E227 CD 52 AD D1 	call	GetFunction
 1763 D1:E22B C3 BB E1 D1 	jp	XORANDChainAnsNumber
 1764 D1:E22F -  -  -  -  XORANDFunctionVariable:
 1765 D1:E22F 79 -  -  -  	ld	a, c
 1766 D1:E230 4B -  -  -  	ld	c, e
 1767 D1:E231 5F -  -  -  	ld	e, a
 1768 D1:E232 C3 29 E1 D1 	jp	XORANDVariableFunction
 1769 D1:E236 -  -  -  -  XORANDFunctionChainPush:
 1770 D1:E236 C3 81 AF D1 	jp	UnknownError
 1771 D1:E23A -  -  -  -  XORANDFunctionChainAns:
 1772 D1:E23A 59 -  -  -  	ld	e, c
 1773 D1:E23B 18 B4 -  -  	jr	XORANDChainAnsFunction
 1774 D1:E23D -  -  -  -  XORANDFunctionFunction:
 1775 D1:E23D 7B -  -  -  	ld	a, e
 1776 D1:E23E 06 01 -  -  	ld	b, OutputInDE
 1777 D1:E240 CD 52 AD D1 	call	GetFunction
 1778 D1:E244 79 -  -  -  	ld	a, c
 1779 D1:E245 06 02 -  -  	ld	b, OutputInHL
 1780 D1:E247 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1781 D1:E24B CD 52 AD D1 	call	GetFunction
 1782 D1:E24F 18 BB -  -  	jr	-_
 1783 D1:E251 -  -  -  -  	
 1784 D1:E251 -  -  -  -  StoNumberXXX:
 1785 D1:E251 DD 7E FC -  	ld	a, (ix-4)
 1786 D1:E254 FE 03 -  -  	cp	typeChainAns
 1787 D1:E256 28 0A -  -  	jr	z, +_
 1788 D1:E258 FE 01 -  -  	cp	typeVariable
 1789 D1:E25A CA 85 E2 D1 	jp	z, ++_
 1790 D1:E25E C3 81 AF D1 	jp	UnknownError
 1791 D1:E262 CD D8 E3 D1 _:	call	StoTestStoToListElement
 1792 D1:E266 C2 81 AF D1 	jp	nz, UnknownError
 1793 D1:E26A 3E 11 -  -  	ld	a, 011h
 1794 D1:E26C C5 -  -  -  	push	bc
 1795 D1:E26D E1 -  -  -  	pop	hl
 1796 D1:E26E CD 5A AC D1 	call	InsertAHL															;	ld de, *
 1797 D1:E272 3E ED -  -  	ld	a, 0EDh
 1798 D1:E274 CD 26 AD D1 	call	InsertA															;	ld (hl), de (1)
 1799 D1:E278 3E 1F -  -  	ld	a, 01Fh
 1800 D1:E27A CD 26 AD D1 	call	InsertA															;	ld (hl), de (2)
 1801 D1:E27E 3E 00 -  -  	ld	a, OutputIsInDE
 1802 D1:E280 32 5E EC D1 	ld	(ExprOutput2), a
 1803 D1:E284 C9 -  -  -  	ret
 1804 D1:E285 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1805 D1:E289 16 03 -  -  	ld	d, 3
 1806 D1:E28B ED 5C -  -  	mlt	de
 1807 D1:E28D 7B -  -  -  	ld	a, e
 1808 D1:E28E CD 70 1D 02 	call	_SetHLUToA
 1809 D1:E292 C5 -  -  -  	push	bc
 1810 D1:E293 D1 -  -  -  	pop	de
 1811 D1:E294 CD 48 1D 02 	call	_ChkBCIs0
 1812 D1:E298 3E 21 -  -  	ld	a, 021h
 1813 D1:E29A 20 08 -  -  	jr	nz, +_
 1814 D1:E29C 11 B7 ED 62 	ld	de, 062EDB7h
 1815 D1:E2A0 C3 AA AC D1 	jp	InsertDEHL															;	or a \ sbc hl, hl \ ld (ix+*), hl
 1816 D1:E2A4 C3 A6 AC D1 _:	jp	InsertADEHL															;	ld hl, * \ ld (ix+*), hl
 1817 D1:E2A8 -  -  -  -  StoVariableXXX:
 1818 D1:E2A8 DD 7E FC -  	ld	a, (ix-4)
 1819 D1:E2AB FE 03 -  -  	cp	typeChainAns
 1820 D1:E2AD 28 0A -  -  	jr	z, +_
 1821 D1:E2AF FE 01 -  -  	cp	typeVariable
 1822 D1:E2B1 CA D9 E2 D1 	jp	z, ++_
 1823 D1:E2B5 C3 81 AF D1 	jp	UnknownError
 1824 D1:E2B9 CD D8 E3 D1 _:	call	StoTestStoToListElement
 1825 D1:E2BD C2 81 AF D1 	jp	nz, UnknownError
 1826 D1:E2C1 59 -  -  -  	ld	e, c
 1827 D1:E2C2 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1828 D1:E2C6 3E ED -  -  	ld	a, 0EDh
 1829 D1:E2C8 CD 26 AD D1 	call	InsertA															;	ld (hl), de (1)
 1830 D1:E2CC 3E 1F -  -  	ld	a, 01Fh
 1831 D1:E2CE CD 26 AD D1 	call	InsertA															;	ld (hl), de (2)
 1832 D1:E2D2 3E 00 -  -  	ld	a, OutputIsInDE
 1833 D1:E2D4 32 5E EC D1 	ld	(ExprOutput2), a
 1834 D1:E2D8 C9 -  -  -  	ret
 1835 D1:E2D9 CD 80 AC D1 _:	call	InsertHIXC
 1836 D1:E2DD 21 DD 2F 00 	ld	hl, 0002FDDh
 1837 D1:E2E1 16 03 -  -  	ld	d, 3
 1838 D1:E2E3 ED 5C -  -  	mlt	de
 1839 D1:E2E5 7B -  -  -  	ld	a, e
 1840 D1:E2E6 CD 70 1D 02 	call	_SetHLUToA
 1841 D1:E2EA C3 5E AC D1 	jp	InsertHL																;	ld ld (ix+*), hl
 1842 D1:E2EE -  -  -  -  StoChainPushXXX:
 1843 D1:E2EE DD 7E FC -  	ld	a, (ix-4)
 1844 D1:E2F1 FE 03 -  -  	cp	typeChainAns
 1845 D1:E2F3 C2 81 AF D1 _:	jp	nz, UnknownError
 1846 D1:E2F7 CD D8 E3 D1 	call	StoTestStoToListElement
 1847 D1:E2FB 20 F6 -  -  	jr	nz, -_
 1848 D1:E2FD 21 D1 ED 1F 	ld	hl, 01FEDD1h
 1849 D1:E301 CD 5E AC D1 	call	InsertHL															;	pop de \ ld (hl), de
 1850 D1:E305 3E 00 -  -  	ld	a, OutputIsInDE
 1851 D1:E307 32 5E EC D1 	ld	(ExprOutput2), a
 1852 D1:E30B C9 -  -  -  	ret
 1853 D1:E30C -  -  -  -  StoChainAnsXXX:
 1854 D1:E30C DD 7E FC -  	ld	a, (ix-4)
 1855 D1:E30F FE 01 -  -  	cp	typeVariable
 1856 D1:E311 C2 28 AF D1 	jp	nz, StoError
 1857 D1:E315 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1858 D1:E319 16 03 -  -  	ld	d, 3
 1859 D1:E31B ED 5C -  -  	mlt	de
 1860 D1:E31D 7B -  -  -  	ld	a, e
 1861 D1:E31E CD 70 1D 02 	call	_SetHLUToA
 1862 D1:E322 3A 5D EC D1 	ld	a, (ExprOutput)
 1863 D1:E326 B7 -  -  -  	or	a
 1864 D1:E327 20 02 -  -  	jr	nz, $+4
 1865 D1:E329 26 1F -  -  	ld	h, 01Fh
 1866 D1:E32B 32 5E EC D1 	ld	(ExprOutput2), a
 1867 D1:E32F C3 5E AC D1 	jp	InsertHL																;	ld (ix+*), hl/de
 1868 D1:E333 -  -  -  -  StoFunctionXXX:
 1869 D1:E333 DD 7E FC -  	ld	a, (ix-4)
 1870 D1:E336 FE 03 -  -  	cp	typeChainAns
 1871 D1:E338 28 0A -  -  	jr	z, +_
 1872 D1:E33A FE 01 -  -  	cp	typeVariable
 1873 D1:E33C CA 6A E3 D1 	jp	z, ++_
 1874 D1:E340 C3 81 AF D1 	jp	UnknownError
 1875 D1:E344 CD D8 E3 D1 _:	call	StoTestStoToListElement
 1876 D1:E348 C2 81 AF D1 	jp	nz, UnknownError
 1877 D1:E34C 79 -  -  -  	ld	a, c
 1878 D1:E34D 06 01 -  -  	ld	b, OutputInDE
 1879 D1:E34F FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1880 D1:E353 CD 52 AD D1 	call	GetFunction
 1881 D1:E357 3E ED -  -  	ld	a, 0EDh
 1882 D1:E359 CD 26 AD D1 	call	InsertA															;	ld (hl), de (1)
 1883 D1:E35D 3E 1F -  -  	ld	a, 01Fh
 1884 D1:E35F CD 26 AD D1 	call	InsertA															;	ld (hl), de (2)
 1885 D1:E363 3E 00 -  -  	ld	a, OutputIsInDE
 1886 D1:E365 32 5E EC D1 	ld	(ExprOutput2), a
 1887 D1:E369 C9 -  -  -  	ret
 1888 D1:E36A 79 -  -  -  _:	ld	a, c
 1889 D1:E36B 06 02 -  -  	ld	b, OutputInHL
 1890 D1:E36D CD 52 AD D1 	call	GetFunction
 1891 D1:E371 21 DD 2F 00 	ld	hl, 0002FDDh
 1892 D1:E375 16 03 -  -  	ld	d, 3
 1893 D1:E377 ED 5C -  -  	mlt	de
 1894 D1:E379 7B -  -  -  	ld	a, e
 1895 D1:E37A CD 70 1D 02 	call	_SetHLUToA
 1896 D1:E37E C3 5E AC D1 	jp	InsertHL																;	ld (ix+*), hl
 1897 D1:E382 -  -  -  -  StoListXXX:
 1898 D1:E382 DD 7E FC -  	ld	a, (ix-4)
 1899 D1:E385 FE 06 -  -  	cp	typeOSList
 1900 D1:E387 C2 28 AF D1 	jp	nz, StoError
 1901 D1:E38B 3E 21 -  -  	ld	a, 021h
 1902 D1:E38D CD 26 AD D1 	call	InsertA															;	ld hl, *
 1903 D1:E391 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1904 D1:E395 2A 4E EC D1 	ld	hl, (programDataDataPtr)
 1905 D1:E399 CD 5E AC D1 	call	InsertHL															;	ld hl, RANDOM
 1906 D1:E39D 3E 11 -  -  	ld	a, 011h
 1907 D1:E39F D5 -  -  -  	push	de
 1908 D1:E3A0 E1 -  -  -  	pop	hl
 1909 D1:E3A1 CD 5A AC D1 	call	InsertAHL															;	ld de, OSList
 1910 D1:E3A5 3E 01 -  -  	ld	a, 01h
 1911 D1:E3A7 CD 26 AD D1 	call	InsertA															;	ld bc, *
 1912 D1:E3AB C5 -  -  -  	push	bc
 1913 D1:E3AC E1 -  -  -  	pop	hl
 1914 D1:E3AD 22 BF E3 D1 	ld	(StartData), hl
 1915 D1:E3B1 ED 27 -  -  	ld	hl, (hl)
 1916 D1:E3B3 E5 -  -  -  	push	hl
 1917 D1:E3B4 C1 -  -  -  	pop	bc
 1918 D1:E3B5 CD 5E AC D1 	call	InsertHL															;	ld bc, LENGTH
 1919 D1:E3B9 ED 5B 4E EC 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1920 D1:E3BE -  -  -  -  StartData = $+1
 1921 D1:E3BE 21 00 00 00 	ld	hl, 0
 1922 D1:E3C2 23 -  -  -  	inc	hl
 1923 D1:E3C3 23 -  -  -  	inc	hl
 1924 D1:E3C4 23 -  -  -  	inc	hl
 1925 D1:E3C5 ED B0 -  -  	ldir
 1926 D1:E3C7 ED 53 4E EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1927 D1:E3CC 3E ED -  -  	ld	a, 0EDh
 1928 D1:E3CE CD 26 AD D1 	call	InsertA															;	ldir (1)
 1929 D1:E3D2 3E B0 -  -  	ld	a, 0B0h
 1930 D1:E3D4 C3 26 AD D1 	jp	InsertA																;	ldir (2)
 1931 D1:E3D8 -  -  -  -  	
 1932 D1:E3D8 -  -  -  -  StoTestStoToListElement:
 1933 D1:E3D8 2A 39 EC D1 	ld	hl, (programPtr)
 1934 D1:E3DC 2B -  -  -  	dec	hl
 1935 D1:E3DD 7E -  -  -  	ld	a, (hl)
 1936 D1:E3DE FE 27 -  -  	cp	027h
 1937 D1:E3E0 20 0B -  -  	jr	nz, StoLastOpcodeNotHLHL
 1938 D1:E3E2 2B -  -  -  	dec	hl
 1939 D1:E3E3 7E -  -  -  	ld	a, (hl)
 1940 D1:E3E4 FE ED -  -  	cp	0EDh
 1941 D1:E3E6 20 05 -  -  	jr	nz, StoLastOpcodeNotHLHL
 1942 D1:E3E8 22 39 EC D1 	ld	(programPtr), hl
 1943 D1:E3EC C9 -  -  -  	ret
 1944 D1:E3ED -  -  -  -  StoLastOpcodeNotHLHL:
 1945 D1:E3ED 2A 39 EC D1 	ld	hl, (programPtr)
 1946 D1:E3F1 2B -  -  -  	dec	hl
 1947 D1:E3F2 2B -  -  -  	dec	hl
 1948 D1:E3F3 2B -  -  -  	dec	hl
 1949 D1:E3F4 2B -  -  -  	dec	hl
 1950 D1:E3F5 7E -  -  -  	ld	a, (hl)
 1951 D1:E3F6 FE 2A -  -  	cp	02Ah
 1952 D1:E3F8 C0 -  -  -  	ret	nz
 1953 D1:E3F9 36 21 -  -  	ld	(hl), 021h
 1954 D1:E3FB C9 -  -  -  	ret
 1955 D1:E3FC 00 -  -  -  	nop
 1956 D1:E3FD 00 -  -  -  	nop
 1957 D1:E3FE 00 -  -  -  	nop
Listing for file "ice.asm"
  453 D1:E3FF -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_for.asm"
    1 D1:E3FF -  -  -  -  functionFor:
    2 D1:E3FF 21 59 EC D1 	ld	hl, amountOfEnds
    3 D1:E403 34 -  -  -  	inc	(hl)
    4 D1:E404 3E 01 -  -  	ld	a, 1
    5 D1:E406 32 56 EC D1 	ld	(openedParensF), a
    6 D1:E40A FD 36 AF 00 	ld	(iy+fFunction2), 0
    7 D1:E40E CD 28 10 02 	call	_IncFetch
    8 D1:E412 D6 41 -  -  	sub	tA
    9 D1:E414 DA 84 E6 D1 	jp	c, functionForSmall
   10 D1:E418 FE 1B -  -  	cp	ttheta+1-tA
   11 D1:E41A D2 84 E6 D1 	jp	nc, functionForSmall
   12 D1:E41E -  -  -  -  	;	loop variable
   13 D1:E41E 47 -  -  -  	ld	b, a
   14 D1:E41F 87 -  -  -  	add	a, a
   15 D1:E420 80 -  -  -  	add	a, b
   16 D1:E421 32 59 E4 D1 	ld	(ForVariable1), a
   17 D1:E425 6F -  -  -  	ld	l, a
   18 D1:E426 E5 -  -  -  	push	hl
   19 D1:E427 CD 28 10 02 		call	_IncFetch
   20 D1:E42B DA 47 AF D1 _:		jp	c, ErrorSyntax
   21 D1:E42F FE 2B -  -  		cp	tComma
   22 D1:E431 C2 47 AF D1 		jp	nz, ErrorSyntax
   23 D1:E435 CD 28 10 02 		call	_IncFetch
   24 D1:E439 -  -  -  -  		;	loop start point
   25 D1:E439 2A 39 EC D1 		ld	hl, (programPtr)
   26 D1:E43D E5 -  -  -  		push	hl
   27 D1:E43E 21 B7 24 D1 			ld	hl, tempArg1
   28 D1:E442 22 39 EC D1 			ld	(programPtr), hl
   29 D1:E446 CD 83 B2 D1 			call	ParseExpression
   30 D1:E44A FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
   31 D1:E44E FD CB BE 86 			res	triggered_a_comma, (iy+fExpression3)
   32 D1:E452 CA 47 AF D1 			jp	z, ErrorSyntax
   33 D1:E456 -  -  -  -  ForVariable1 = $+3
   34 D1:E456 21 DD 2F 00 			ld	hl, 0002FDDh
   35 D1:E45A CD 5E AC D1 			call	InsertHL										;	ld (ix+*), hl
   36 D1:E45E CD 28 10 02 			call	_IncFetch
   37 D1:E462 38 C7 -  -  			jr	c, -_
   38 D1:E464 2A 39 EC D1 			ld	hl, (programPtr)
   39 D1:E468 11 B7 24 D1 			ld	de, tempArg1
   40 D1:E46C B7 -  -  -  			or	a
   41 D1:E46D ED 52 -  -  			sbc	hl, de
   42 D1:E46F EB -  -  -  			ex	de, hl
   43 D1:E470 E1 -  -  -  		pop	hl
   44 D1:E471 22 39 EC D1 		ld	(programPtr), hl
   45 D1:E475 D5 -  -  -  		push	de
   46 D1:E476 -  -  -  -  			;	loop end point
   47 D1:E476 CD 83 B2 D1 			call	ParseExpression
   48 D1:E47A FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
   49 D1:E47E 20 14 -  -  			jr	nz, ForEndPointIsNumber
   50 D1:E480 -  -  -  -  ForEndPointIsExpression:
   51 D1:E480 3E 22 -  -  			ld	a, 022h
   52 D1:E482 CD 26 AD D1 			call	InsertA										;	ld (******), hl
   53 D1:E486 2A 39 EC D1 			ld	hl, (programPtr)
   54 D1:E48A 22 7C E5 D1 			ld	(ForEndPointExpression), hl
   55 D1:E48E CD 5E AC D1 			call	InsertHL										;	ld (RANDOM), hl
   56 D1:E492 18 17 -  -  			jr	ForGetStep
   57 D1:E494 -  -  -  -  ForEndPointIsNumber:
   58 D1:E494 FD CB AF D6 			set	end_point_is_number, (iy+fFunction2)
   59 D1:E498 2A 39 EC D1 			ld	hl, (programPtr)
   60 D1:E49C 2B -  -  -  			dec	hl
   61 D1:E49D 2B -  -  -  			dec	hl
   62 D1:E49E 2B -  -  -  			dec	hl
   63 D1:E49F ED 17 -  -  			ld	de, (hl)
   64 D1:E4A1 2B -  -  -  			dec	hl
   65 D1:E4A2 22 39 EC D1 			ld	(programPtr), hl
   66 D1:E4A6 ED 53 8A E5 
              D1 -  -  -  			ld	(ForFixedEndPoint), de
   67 D1:E4AB -  -  -  -  ForGetStep:
   68 D1:E4AB FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
   69 D1:E4AF FD CB BE 86 			res	triggered_a_comma, (iy+fExpression3)
   70 D1:E4B3 20 0B -  -  			jr	nz, +_
   71 D1:E4B5 -  -  -  -  			;	loop step
   72 D1:E4B5 FD CB AF CE 			set	for_step_is_number, (iy+fFunction2)
   73 D1:E4B9 21 01 00 00 			ld	hl, 1
   74 D1:E4BD E5 -  -  -  			push	hl
   75 D1:E4BE 18 76 -  -  				jr	ForStart
   76 D1:E4C0 CD 28 10 02 _:			call	_IncFetch
   77 D1:E4C4 DA 47 AF D1 			jp	c, ErrorSyntax
   78 D1:E4C8 FE B0 -  -  			cp	tChs
   79 D1:E4CA 20 0C -  -  			jr	nz, +_
   80 D1:E4CC FD CB AF C6 			set	negative_for_step, (iy+fFunction2)
   81 D1:E4D0 CD 28 10 02 			call	_IncFetch
   82 D1:E4D4 DA 47 AF D1 			jp	c, ErrorSyntax
   83 D1:E4D8 FE 41 -  -  _:			cp	tA
   84 D1:E4DA 38 34 -  -  			jr	c, ForGetStepNumber
   85 D1:E4DC FE 5C -  -  			cp	ttheta+1
   86 D1:E4DE D2 10 E5 D1 			jp	nc, ForGetStepNumber
   87 D1:E4E2 -  -  -  -  ForGetStepVariable:
   88 D1:E4E2 FD CB AF 8E 			res	for_step_is_number, (iy+fFunction2)
   89 D1:E4E6 CD 2C 10 02 			call	_CurFetch
   90 D1:E4EA D6 41 -  -  			sub	tA
   91 D1:E4EC 4F -  -  -  			ld	c, a
   92 D1:E4ED CD 80 AC D1 			call	InsertHIXC										;	ld hl, (ix+*)
   93 D1:E4F1 CD C0 0F 02 			call	_NxtFetch
   94 D1:E4F5 DA 47 AF D1 			jp	c, ErrorSyntax
   95 D1:E4F9 FE 3F -  -  			cp	tEnter
   96 D1:E4FB C2 47 AF D1 			jp	nz, ErrorSyntax
   97 D1:E4FF 3E 22 -  -  			ld	a, 022h
   98 D1:E501 CD 26 AD D1 			call	InsertA										;	ld (*), hl
   99 D1:E505 2A 39 EC D1 			ld	hl, (programPtr)
  100 D1:E509 E5 -  -  -  			push	hl
  101 D1:E50A CD 5E AC D1 				call	InsertHL									;	ld (RANDOM), hl
  102 D1:E50E 18 26 -  -  				jr	ForStart
  103 D1:E510 -  -  -  -  ForGetStepNumber:
  104 D1:E510 FD CB AF CE 			set	for_step_is_number, (iy+fFunction2)
  105 D1:E514 CD 83 B2 D1 			call	ParseExpression
  106 D1:E518 FD CB BE 46 			bit	triggered_a_comma, (iy+fExpression3)
  107 D1:E51C 20 BA -  -  			jr	nz, -_
  108 D1:E51E FD CB C0 66 			bit	output_is_number, (iy+fExpression1)
  109 D1:E522 CA 47 AF D1 			jp	z, ErrorSyntax
  110 D1:E526 2A 39 EC D1 			ld	hl, (programPtr)
  111 D1:E52A 2B -  -  -  			dec	hl
  112 D1:E52B 2B -  -  -  			dec	hl
  113 D1:E52C 2B -  -  -  			dec	hl
  114 D1:E52D 2B -  -  -  			dec	hl
  115 D1:E52E 22 39 EC D1 			ld	(programPtr), hl
  116 D1:E532 23 -  -  -  			inc	hl
  117 D1:E533 ED 27 -  -  			ld	hl, (hl)
  118 D1:E535 E5 -  -  -  			push	hl
  119 D1:E536 -  -  -  -  ForStart:
  120 D1:E536 E1 -  -  -  			pop	hl
  121 D1:E537 D1 -  -  -  		pop	de
  122 D1:E538 E5 -  -  -  		push	hl
  123 D1:E539 2A 39 EC D1 			ld	hl, (programPtr)
  124 D1:E53D 19 -  -  -  			add	hl, de
  125 D1:E53E E5 -  -  -  			push	hl
  126 D1:E53F D5 -  -  -  				push	de
  127 D1:E540 C1 -  -  -  				pop	bc
  128 D1:E541 ED 5B 39 EC 
              D1 -  -  -  				ld	de, (programPtr)
  129 D1:E546 21 B7 24 D1 				ld	hl, tempArg1
  130 D1:E54A ED B0 -  -  				ldir
  131 D1:E54C ED 53 39 EC 
              D1 -  -  -  				ld	(programPtr), de
  132 D1:E551 FD CB AF 56 				bit	end_point_is_number, (iy+fFunction2)
  133 D1:E555 20 30 -  -  				jr	nz, ForInsertEndPointNumber
  134 D1:E557 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E557 3E B7 -  -  				ld	a, 0B7h
  136 D1:E559 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  137 D1:E55D 20 08 -  -  				jr	nz, +_
  138 D1:E55F FD CB AF 56 				bit	end_point_is_number, (iy+fFunction2)
  139 D1:E563 20 02 -  -  				jr	nz, +_
  140 D1:E565 3E 37 -  -  				ld	a, 037h
  141 D1:E567 32 99 E5 D1 _:				ld	(ForSetCarryFlag), a
  142 D1:E56B 3E 11 -  -  				ld	a, 011h
  143 D1:E56D CD 26 AD D1 				call	InsertA										;	ld de, *
  144 D1:E571 2A 39 EC D1 				ld	hl, (programPtr)
  145 D1:E575 11 81 7C FC 				ld	de, UserMem-program
  146 D1:E579 19 -  -  -  				add	hl, de
  147 D1:E57A EB -  -  -  				ex	de, hl
  148 D1:E57B -  -  -  -  ForEndPointExpression = $+1
  149 D1:E57B 21 00 00 00 				ld	hl, 0
  150 D1:E57F ED 1F -  -  				ld	(hl), de
  151 D1:E581 CD 5E AC D1 				call	InsertHL										;	ld de, RANDOM
  152 D1:E585 18 11 -  -  				jr	ForSkip
  153 D1:E587 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E587 3E 11 -  -  				ld	a, 011h
  155 D1:E589 -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E589 21 00 00 00 				ld	hl, 0
  157 D1:E58D FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  158 D1:E591 20 01 -  -  				jr	nz, +_
  159 D1:E593 23 -  -  -  				inc	hl
  160 D1:E594 CD 5A AC D1 _:				call	InsertAHL										;	ld de, *
  161 D1:E598 -  -  -  -  ForSkip:
  162 D1:E598 -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E598 21 B7 ED 52 				ld	hl, 052EDB7h
  164 D1:E59C CD 5E AC D1 				call	InsertHL										;	or a \ sbc hl, de
  165 D1:E5A0 3E D2 -  -  				ld	a, 0D2h
  166 D1:E5A2 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  167 D1:E5A6 28 02 -  -  				jr	z, +_
  168 D1:E5A8 C6 08 -  -  				add	a, 8
  169 D1:E5AA CD 26 AD D1 _:				call	InsertA										;	jp [n]c, *
  170 D1:E5AE 2A 39 EC D1 				ld	hl, (programPtr)
  171 D1:E5B2 E5 -  -  -  				push	hl
  172 D1:E5B3 CD 5E AC D1 					call	InsertHL									;	jp [n]c, RANDOM
  173 D1:E5B7 FD 46 AF -  					ld	b, (iy+fFunction2)
  174 D1:E5BA C5 -  -  -  					push	bc
  175 D1:E5BB CD A7 AA D1 						call	ParseProgramUntilEnd
  176 D1:E5BF C1 -  -  -  					pop	bc
  177 D1:E5C0 FD 70 AF -  					ld	(iy+fFunction2), b
  178 D1:E5C3 FE D0 -  -  					cp	tElse
  179 D1:E5C5 CA 47 AF D1 					jp	z, ErrorSyntax
  180 D1:E5C9 DD 21 00 00 
              00 -  -  -  					ld	ix, 0
  181 D1:E5CE DD 39 -  -  					add	ix, sp
  182 D1:E5D0 DD 7E 09 -  					ld	a, (ix+9)
  183 D1:E5D3 21 DD 27 00 					ld	hl, 00027DDh
  184 D1:E5D7 CD 70 1D 02 					call	_SetHLUToA
  185 D1:E5DB CD 5E AC D1 					call	InsertHL									;	ld hl, (ix+*)
  186 D1:E5DF C1 -  -  -  				pop	bc
  187 D1:E5E0 D1 -  -  -  			pop	de
  188 D1:E5E1 E1 -  -  -  		pop	hl
  189 D1:E5E2 D5 -  -  -  		push	de
  190 D1:E5E3 C5 -  -  -  			push	bc
  191 D1:E5E4 FD CB AF 4E 				bit	for_step_is_number, (iy+fFunction2)
  192 D1:E5E8 28 19 -  -  				jr	z, InsertVariableChange
  193 D1:E5EA -  -  -  -  InsertNumberChange:
  194 D1:E5EA EB -  -  -  				ex	de, hl
  195 D1:E5EB 3E 01 -  -  				ld	a, 1
  196 D1:E5ED 32 5D EC D1 				ld	(ExprOutput), a
  197 D1:E5F1 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  198 D1:E5F5 28 06 -  -  				jr	z, $+8
  199 D1:E5F7 CD F3 D5 D1 				call	SubChainAnsNumber
  200 D1:E5FB 18 04 -  -  				jr	$+6
  201 D1:E5FD CD BB D7 D1 				call	AddChainAnsNumber
  202 D1:E601 18 29 -  -  				jr	InsertStop
  203 D1:E603 -  -  -  -  InsertVariableChange:
  204 D1:E603 EB -  -  -  				ex	de, hl
  205 D1:E604 3E 11 -  -  				ld	a, 011h
  206 D1:E606 CD 26 AD D1 				call	InsertA										;	ld de, *
  207 D1:E60A 2A 39 EC D1 				ld	hl, (programPtr)
  208 D1:E60E 01 81 7C FC 				ld	bc, UserMem-program
  209 D1:E612 09 -  -  -  				add	hl, bc
  210 D1:E613 EB -  -  -  				ex	de, hl
  211 D1:E614 ED 1F -  -  				ld	(hl), de
  212 D1:E616 CD 5E AC D1 				call	InsertHL										;	ld de, RANDOM
  213 D1:E61A 3E 19 -  -  				ld	a, 019h
  214 D1:E61C 21 B7 ED 52 				ld	hl, 052EDB7h
  215 D1:E620 FD CB AF 46 				bit	negative_for_step, (iy+fFunction2)
  216 D1:E624 C4 5E AC D1 				call	nz, InsertHL									;	or a \ sbc hl, de
  217 D1:E628 CC 26 AD D1 				call	z, InsertA										;	add hl, de
  218 D1:E62C -  -  -  -  InsertStop:
  219 D1:E62C C1 -  -  -  			pop	bc
  220 D1:E62D D1 -  -  -  		pop	de
  221 D1:E62E E1 -  -  -  	pop	hl
  222 D1:E62F 7D -  -  -  	ld	a, l
  223 D1:E630 21 DD 2F 00 	ld	hl, 0002FDDh
  224 D1:E634 CD 70 1D 02 	call	_SetHLUToA
  225 D1:E638 CD 5E AC D1 	call	InsertHL													;	ld (ix+*), hl
  226 D1:E63C B7 -  -  -  	or	a
  227 D1:E63D ED 52 -  -  	sbc	hl, de
  228 D1:E63F 7C -  -  -  	ld	a, h
  229 D1:E640 B7 -  -  -  	or	a
  230 D1:E641 20 07 -  -  	jr	nz, ForBigLoop
  231 D1:E643 7D -  -  -  	ld	a, l
  232 D1:E644 2F -  -  -  	cpl
  233 D1:E645 3D -  -  -  	dec	a
  234 D1:E646 FE 80 -  -  	cp	%10000000
  235 D1:E648 30 15 -  -  	jr	nc, ForSmallLoop
  236 D1:E64A -  -  -  -  ForBigLoop:
  237 D1:E64A 3E C3 -  -  	ld	a, 0C3h
  238 D1:E64C FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  239 D1:E650 28 02 -  -  	jr	z, $+4
  240 D1:E652 3E D2 -  -  	ld	a, 0D2h
  241 D1:E654 21 81 7C FC 	ld	hl, UserMem-program
  242 D1:E658 19 -  -  -  	add	hl, de
  243 D1:E659 CD 5A AC D1 	call	InsertAHL													;	jp [nc], ******
  244 D1:E65D 18 1A -  -  	jr	ForLoopInsert
  245 D1:E65F -  -  -  -  ForSmallLoop:
  246 D1:E65F DD 6F -  -  	ld	ixl, a
  247 D1:E661 3E 18 -  -  	ld	a, 018h
  248 D1:E663 FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  249 D1:E667 28 02 -  -  	jr	z, $+4
  250 D1:E669 3E 30 -  -  	ld	a, 030h
  251 D1:E66B CD 26 AD D1 	call	InsertA													;	jr [nc], **
  252 D1:E66F DD 7D -  -  	ld	a, ixl
  253 D1:E671 CD 26 AD D1 	call	InsertA													;	jr [nc], **
  254 D1:E675 2A 39 EC D1 	ld	hl, (programPtr)
  255 D1:E679 -  -  -  -  ForLoopInsert:
  256 D1:E679 11 81 7C FC 	ld	de, UserMem-program
  257 D1:E67D 19 -  -  -  	add	hl, de
  258 D1:E67E EB -  -  -  	ex	de, hl
  259 D1:E67F C5 -  -  -  	push	bc
  260 D1:E680 E1 -  -  -  	pop	hl
  261 D1:E681 ED 1F -  -  	ld	(hl), de
  262 D1:E683 C9 -  -  -  	ret
  263 D1:E684 -  -  -  -  	
  264 D1:E684 -  -  -  -  functionForSmall:
  265 D1:E684 CD 83 B2 D1 	call	ParseExpression
  266 D1:E688 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  267 D1:E68C 28 10 -  -  	jr	z, +_
  268 D1:E68E 2A 39 EC D1 	ld	hl, (programPtr)
  269 D1:E692 2B -  -  -  	dec	hl
  270 D1:E693 2B -  -  -  	dec	hl
  271 D1:E694 22 39 EC D1 	ld	(programPtr), hl
  272 D1:E698 2B -  -  -  	dec	hl
  273 D1:E699 2B -  -  -  	dec	hl
  274 D1:E69A 36 06 -  -  	ld	(hl), 06h													;	ld b, *
  275 D1:E69C 18 06 -  -  	jr	++_
  276 D1:E69E 3E 45 -  -  _:	ld	a, 045h
  277 D1:E6A0 CD 26 AD D1 	call	InsertA													;	ld b, l
  278 D1:E6A4 2A 39 EC D1 _:	ld	hl, (programPtr)
  279 D1:E6A8 E5 -  -  -  	push	hl
  280 D1:E6A9 3E C5 -  -  		ld	a, 0C5h
  281 D1:E6AB CD 26 AD D1 		call	InsertA												;	push bc
  282 D1:E6AF CD A7 AA D1 		call	ParseProgramUntilEnd
  283 D1:E6B3 3E C1 -  -  		ld	a, 0C1h
  284 D1:E6B5 CD 26 AD D1 		call	InsertA												;	pop bc
  285 D1:E6B9 D1 -  -  -  	pop	de
  286 D1:E6BA 2A 39 EC D1 	ld	hl, (programPtr)
  287 D1:E6BE B7 -  -  -  	or	a
  288 D1:E6BF ED 52 -  -  	sbc	hl, de
  289 D1:E6C1 7C -  -  -  	ld	a, h
  290 D1:E6C2 B7 -  -  -  	or	a
  291 D1:E6C3 C2 99 AF D1 _:	jp	nz, ErrorTooLargeLoop
  292 D1:E6C7 7D -  -  -  	ld	a, l
  293 D1:E6C8 2F -  -  -  	cpl
  294 D1:E6C9 3D -  -  -  	dec	a
  295 D1:E6CA FE 80 -  -  	cp	%10000000
  296 D1:E6CC DA C3 E6 D1 	jp	c, -_
  297 D1:E6D0 47 -  -  -  	ld	b, a
  298 D1:E6D1 3E 10 -  -  	ld	a, 010h
  299 D1:E6D3 CD 26 AD D1 	call	InsertA													;	djnz *
  300 D1:E6D7 78 -  -  -  	ld	a, b
  301 D1:E6D8 C3 26 AD D1 	jp	InsertA														;	djnz *
Listing for file "ice.asm"
  454 D1:E6DC -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\operators functions\function_C.asm"
    1 D1:E6DC -  -  -  -  CFunction0Args:
    2 D1:E6DC FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
    3 D1:E6E0 C2 47 AF D1 	jp	nz, ErrorSyntax
    4 D1:E6E4 06 00 -  -  	ld	b, 0
    5 D1:E6E6 -  -  -  -  CInsertCallPops:
    6 D1:E6E6 FD CB AE CE 	set	modified_iy, (iy+fAlways1)
    7 D1:E6EA 21 6A EC D1 	ld	hl, usedCroutines
    8 D1:E6EE -  -  -  -  CFunctionArgsSMC = $+1
    9 D1:E6EE 11 00 00 00 	ld	de, 0
   10 D1:E6F2 7B -  -  -  	ld	a, e
   11 D1:E6F3 B7 -  -  -  	or	a, a
   12 D1:E6F4 20 0B -  -  	jr	nz, +_
   13 D1:E6F6 E5 -  -  -  	push	hl
   14 D1:E6F7 21 2E 27 E5 		ld	hl, 0E5272Eh
   15 D1:E6FB CD 5E AC D1 		call	InsertHL								; ld l, lcdBpp8 \ push hl
   16 D1:E6FF 04 -  -  -  		inc	b
   17 D1:E700 E1 -  -  -  	pop	hl
   18 D1:E701 19 -  -  -  _:	add	hl, de
   19 D1:E702 5E -  -  -  	ld	e, (hl)
   20 D1:E703 16 04 -  -  	ld	d, 4
   21 D1:E705 ED 5C -  -  	mlt	de
   22 D1:E707 21 F6 A8 D1 	ld	hl, CData2-CData+UserMem-4
   23 D1:E70B 19 -  -  -  	add	hl, de
   24 D1:E70C CD 7C AC D1 	call	InsertCallHL									; call *
   25 D1:E710 78 -  -  -  	ld	a, b
   26 D1:E711 B7 -  -  -  	or	a
   27 D1:E712 C8 -  -  -  	ret	z
   28 D1:E713 3E E1 -  -  	ld	a, 0E1h
   29 D1:E715 CD 26 AD D1 _:	call	InsertA
   30 D1:E719 10 FA -  -  	djnz	-_
   31 D1:E71B C9 -  -  -  	ret											; pop hl
   32 D1:E71C -  -  -  -  	
   33 D1:E71C -  -  -  -  CFunction1Arg:
   34 D1:E71C FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   35 D1:E720 CA 47 AF D1 	jp	z, ErrorSyntax
   36 D1:E724 2A 39 EC D1 	ld	hl, (programPtr)
   37 D1:E728 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   38 D1:E72C CD DD AC D1 	call	CGetArgumentLast
   39 D1:E730 06 01 -  -  	ld	b, 1
   40 D1:E732 18 B2 -  -  	jr	CInsertCallPops
   41 D1:E734 -  -  -  -  		
   42 D1:E734 -  -  -  -  CFunction2Args:
   43 D1:E734 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   44 D1:E738 CA 47 AF D1 	jp	z, ErrorSyntax
   45 D1:E73C 2A 39 EC D1 	ld	hl, (programPtr)
   46 D1:E740 22 52 E7 D1 	ld	(CFunction2ArgsSMC2), hl
   47 D1:E744 21 B7 24 D1 	ld	hl, tempArg1
   48 D1:E748 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   49 D1:E74C CD E1 AC D1 	call	CGetArgument
   50 D1:E750 E5 -  -  -  	push	hl
   51 D1:E751 -  -  -  -  CFunction2ArgsSMC2 = $+1
   52 D1:E751 21 00 00 00 		ld	hl, 0
   53 D1:E755 FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
   54 D1:E759 CD DD AC D1 		call	CGetArgumentLast
   55 D1:E75D ED 5B 39 EC 
              D1 -  -  -  		ld	de, (programPtr)
   56 D1:E762 E1 -  -  -  	pop	hl
   57 D1:E763 01 B7 24 D1 	ld	bc, tempArg1
   58 D1:E767 CD 55 EA D1 	call	CCheckIfPrevArgIsSame
   59 D1:E76B CD 33 AD D1 	call	CAddArgument
   60 D1:E76F ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
   61 D1:E774 06 02 -  -  	ld	b, 2
   62 D1:E776 C3 E6 E6 D1 	jp	CInsertCallPops
   63 D1:E77A -  -  -  -  	
   64 D1:E77A -  -  -  -  CFunction3Args:
   65 D1:E77A FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   66 D1:E77E CA 47 AF D1 	jp	z, ErrorSyntax
   67 D1:E782 2A 39 EC D1 	ld	hl, (programPtr)
   68 D1:E786 22 AF E7 D1 	ld	(CFunction3ArgsSMC2), hl
   69 D1:E78A 21 B7 24 D1 	ld	hl, tempArg1
   70 D1:E78E FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   71 D1:E792 CD E1 AC D1 	call	CGetArgument
   72 D1:E796 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   73 D1:E79A F5 -  -  -  	push	af
   74 D1:E79B FD CB C0 7E 		bit	output_is_string, (iy+fExpression1)
   75 D1:E79F F5 -  -  -  		push	af
   76 D1:E7A0 E5 -  -  -  			push	hl
   77 D1:E7A1 21 76 70 D0 				ld	hl, tempArg2
   78 D1:E7A5 FD CB B0 5E 				bit	arg2_is_small, (iy+fFunction1)
   79 D1:E7A9 CD E1 AC D1 				call	CGetArgument
   80 D1:E7AD E5 -  -  -  				push	hl
   81 D1:E7AE -  -  -  -  CFunction3ArgsSMC2 = $+1
   82 D1:E7AE 21 00 00 00 					ld	hl, 0
   83 D1:E7B2 FD CB B0 56 					bit	arg3_is_small, (iy+fFunction1)
   84 D1:E7B6 CD DD AC D1 					call	CGetArgumentLast
   85 D1:E7BA ED 5B 39 EC 
              D1 -  -  -  					ld	de, (programPtr)
   86 D1:E7BF E1 -  -  -  				pop	hl
   87 D1:E7C0 01 76 70 D0 				ld	bc, tempArg2
   88 D1:E7C4 CD 55 EA D1 				call	CCheckIfPrevArgIsSame
   89 D1:E7C8 CD 33 AD D1 				call	CAddArgument
   90 D1:E7CC E1 -  -  -  			pop	hl
   91 D1:E7CD 01 B7 24 D1 			ld	bc, tempArg1
   92 D1:E7D1 CD 55 EA D1 			call	CCheckIfPrevArgIsSame
   93 D1:E7D5 B7 -  -  -  			or	a
   94 D1:E7D6 ED 42 -  -  			sbc	hl, bc
   95 D1:E7D8 E5 -  -  -  			push	hl
   96 D1:E7D9 C1 -  -  -  			pop	bc
   97 D1:E7DA 21 B7 24 D1 			ld	hl, tempArg1
   98 D1:E7DE ED A0 -  -  			ldi
   99 D1:E7E0 F1 -  -  -  		pop	af
  100 D1:E7E1 28 0B -  -  		jr	z, +_
  101 D1:E7E3 E5 -  -  -  		push	hl
  102 D1:E7E4 2A 45 EC D1 			ld	hl, (programDataOffsetPtr)
  103 D1:E7E8 2B -  -  -  			dec	hl
  104 D1:E7E9 2B -  -  -  			dec	hl
  105 D1:E7EA 2B -  -  -  			dec	hl
  106 D1:E7EB ED 1F -  -  			ld	(hl), de
  107 D1:E7ED E1 -  -  -  		pop	hl
  108 D1:E7EE ED B0 -  -  _:		ldir
  109 D1:E7F0 ED 53 39 EC 
              D1 -  -  -  		ld	(programPtr), de
  110 D1:E7F5 06 03 -  -  		ld	b, 3
  111 D1:E7F7 CD E6 E6 D1 		call	CInsertCallPops
  112 D1:E7FB 3A EF E6 D1 		ld	a, (CFunctionArgsSMC)
  113 D1:E7FF FE 3B -  -  		cp	a, 59
  114 D1:E801 28 0C -  -  		jr	z, CInsertSprite
  115 D1:E803 FE 3C -  -  		cp	a, 60
  116 D1:E805 28 08 -  -  		jr	z, CInsertSprite
  117 D1:E807 F1 -  -  -  	pop	af
  118 D1:E808 C9 -  -  -  	ret
  119 D1:E809 -  -  -  -  	
  120 D1:E809 -  -  -  -  CInsertSpriteScaled:
  121 D1:E809 01 F3 FF FF 		ld	bc, -13
  122 D1:E80D 18 04 -  -  		jr	+_
  123 D1:E80F -  -  -  -  CInsertSprite:
  124 D1:E80F 01 F5 FF FF 		ld	bc, -11
  125 D1:E813 F1 -  -  -  _:	pop	af
  126 D1:E814 2A 39 EC D1 	ld	hl, (programPtr)
  127 D1:E818 28 1B -  -  	jr	z, +_
  128 D1:E81A 09 -  -  -  	add	hl, bc
  129 D1:E81B E5 -  -  -  	push	hl
  130 D1:E81C ED 27 -  -  		ld	hl, (hl)
  131 D1:E81E E5 -  -  -  		push	hl
  132 D1:E81F D1 -  -  -  		pop	de
  133 D1:E820 29 -  -  -  		add	hl, hl
  134 D1:E821 19 -  -  -  		add	hl, de
  135 D1:E822 ED 5B 0A 32 
              D0 -  -  -  		ld	de, (PrevProgramPtr)
  136 D1:E827 19 -  -  -  		add	hl, de
  137 D1:E828 11 81 7C FC 		ld	de, UserMem - program
  138 D1:E82C 19 -  -  -  		add	hl, de
  139 D1:E82D EB -  -  -  		ex	de, hl
  140 D1:E82E E1 -  -  -  	pop	hl
  141 D1:E82F ED 1F -  -  	ld	(hl), de
  142 D1:E831 2B -  -  -  	dec	hl
  143 D1:E832 36 2A -  -  	ld	(hl), 02Ah									; ld hl, (XXXXXX)
  144 D1:E834 C9 -  -  -  	ret
  145 D1:E835 03 -  -  -  _:	inc	bc
  146 D1:E836 03 -  -  -  	inc	bc
  147 D1:E837 03 -  -  -  	inc	bc
  148 D1:E838 09 -  -  -  	add	hl, bc
  149 D1:E839 22 39 EC D1 	ld	(programPtr), hl
  150 D1:E83D 23 -  -  -  	inc	hl
  151 D1:E83E 23 -  -  -  	inc	hl
  152 D1:E83F ED 27 -  -  	ld	hl, (hl)
  153 D1:E841 E5 -  -  -  	push	hl
  154 D1:E842 3E E5 -  -  		ld	a, 0E5h
  155 D1:E844 CD 26 AD D1 		call	InsertA									; push hl
  156 D1:E848 3E D1 -  -  		ld	a, 0D1h
  157 D1:E84A 21 29 19 11 		ld	hl, 0111929h
  158 D1:E84E CD 5A AC D1 		call	InsertAHL								; pop de \ add hl, hl \ add hl, de \ ld de, ******
  159 D1:E852 2A 0A 32 D0 		ld	hl, (PrevProgramPtr)
  160 D1:E856 11 81 7C FC 		ld	de, UserMem - program
  161 D1:E85A 19 -  -  -  		add	hl, de
  162 D1:E85B CD 5E AC D1 		call	InsertHL								; ld de, XXXXXX
  163 D1:E85F 3E 19 -  -  		ld	a, 019h
  164 D1:E861 21 ED 27 E5 		ld	hl, 0E527EDh
  165 D1:E865 CD 5A AC D1 		call	InsertAHL								; add hl, de \ ld hl, (hl) \ push hl
  166 D1:E869 E1 -  -  -  	pop	hl
  167 D1:E86A CD 7C AC D1 	call	InsertCallHL									; call ******
  168 D1:E86E 21 E1 E1 E1 	ld	hl, 0E1E1E1h
  169 D1:E872 CD 5E AC D1 	call	InsertHL									; pop hl \ pop hl \ pop hl
  170 D1:E876 3A EF E6 D1 	ld	a, (CFunctionArgsSMC)
  171 D1:E87A FE 3E -  -  	cp	a, 62
  172 D1:E87C D8 -  -  -  	ret	c
  173 D1:E87D 3E E1 -  -  	ld	a, 0E1h
  174 D1:E87F CD 26 AD D1 	call	InsertA										; pop hl
  175 D1:E883 C3 26 AD D1 	jp	InsertA										; pop hl
  176 D1:E887 -  -  -  -  	
  177 D1:E887 -  -  -  -  CFunction4Args:
  178 D1:E887 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  179 D1:E88B CA 47 AF D1 	jp	z, ErrorSyntax
  180 D1:E88F 2A 39 EC D1 	ld	hl, (programPtr)
  181 D1:E893 22 BF E8 D1 	ld	(CFunction4ArgsSMC2), hl
  182 D1:E897 21 B7 24 D1 	ld	hl, tempArg1
  183 D1:E89B FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  184 D1:E89F CD E1 AC D1 	call	CGetArgument
  185 D1:E8A3 E5 -  -  -  	push	hl
  186 D1:E8A4 21 76 70 D0 		ld	hl, tempArg2
  187 D1:E8A8 FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
  188 D1:E8AC CD E1 AC D1 		call	CGetArgument
  189 D1:E8B0 E5 -  -  -  		push	hl
  190 D1:E8B1 21 5E 74 D0 			ld	hl, tempArg3
  191 D1:E8B5 FD CB B0 56 			bit	arg3_is_small, (iy+fFunction1)
  192 D1:E8B9 CD E1 AC D1 			call	CGetArgument
  193 D1:E8BD E5 -  -  -  			push	hl
  194 D1:E8BE -  -  -  -  CFunction4ArgsSMC2 = $+1
  195 D1:E8BE 21 00 00 00 				ld	hl, 0
  196 D1:E8C2 FD CB B0 4E 				bit	arg4_is_small, (iy+fFunction1)
  197 D1:E8C6 CD DD AC D1 				call	CGetArgumentLast
  198 D1:E8CA ED 5B 39 EC 
              D1 -  -  -  				ld	de, (programPtr)
  199 D1:E8CF E1 -  -  -  			pop	hl
  200 D1:E8D0 01 5E 74 D0 			ld	bc, tempArg3
  201 D1:E8D4 CD 55 EA D1 			call	CCheckIfPrevArgIsSame
  202 D1:E8D8 CD 33 AD D1 			call	CAddArgument
  203 D1:E8DC E1 -  -  -  		pop	hl
  204 D1:E8DD 01 76 70 D0 		ld	bc, tempArg2
  205 D1:E8E1 CD 55 EA D1 		call	CCheckIfPrevArgIsSame
  206 D1:E8E5 CD 33 AD D1 		call	CAddArgument
  207 D1:E8E9 E1 -  -  -  	pop	hl
  208 D1:E8EA 01 B7 24 D1 	ld	bc, tempArg1
  209 D1:E8EE CD 55 EA D1 	call	CCheckIfPrevArgIsSame
  210 D1:E8F2 CD 33 AD D1 	call	CAddArgument
  211 D1:E8F6 ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
  212 D1:E8FB 06 04 -  -  	ld	b, 4
  213 D1:E8FD C3 E6 E6 D1 	jp	CInsertCallPops
  214 D1:E901 -  -  -  -  	
  215 D1:E901 -  -  -  -  CFunction5Args:
  216 D1:E901 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  217 D1:E905 CA 47 AF D1 	jp	z, ErrorSyntax
  218 D1:E909 2A 39 EC D1 	ld	hl, (programPtr)
  219 D1:E90D 22 4B E9 D1 	ld	(CFunction5ArgsSMC2), hl
  220 D1:E911 21 B7 24 D1 	ld	hl, tempArg1
  221 D1:E915 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  222 D1:E919 CD E1 AC D1 	call	CGetArgument
  223 D1:E91D FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  224 D1:E921 F5 -  -  -  	push	af
  225 D1:E922 E5 -  -  -  		push	hl
  226 D1:E923 21 76 70 D0 			ld	hl, tempArg2
  227 D1:E927 FD CB B0 5E 			bit	arg2_is_small, (iy+fFunction1)
  228 D1:E92B CD E1 AC D1 			call	CGetArgument
  229 D1:E92F E5 -  -  -  			push	hl
  230 D1:E930 21 5E 74 D0 				ld	hl, tempArg3
  231 D1:E934 FD CB B0 56 				bit	arg3_is_small, (iy+fFunction1)
  232 D1:E938 CD E1 AC D1 				call	CGetArgument
  233 D1:E93C E5 -  -  -  				push	hl
  234 D1:E93D 21 46 78 D0 					ld	hl, tempArg4
  235 D1:E941 FD CB B0 4E 					bit	arg4_is_small, (iy+fFunction1)
  236 D1:E945 CD E1 AC D1 					call	CGetArgument
  237 D1:E949 E5 -  -  -  					push	hl
  238 D1:E94A -  -  -  -  CFunction5ArgsSMC2 = $+1
  239 D1:E94A 21 00 00 00 						ld	hl, 0
  240 D1:E94E FD CB B0 46 						bit	arg5_is_small, (iy+fFunction1)
  241 D1:E952 CD DD AC D1 						call	CGetArgumentLast
  242 D1:E956 ED 5B 39 EC 
              D1 -  -  -  						ld	de, (programPtr)
  243 D1:E95B E1 -  -  -  					pop	hl
  244 D1:E95C 01 46 78 D0 					ld	bc, tempArg4
  245 D1:E960 CD 55 EA D1 					call	CCheckIfPrevArgIsSame
  246 D1:E964 CD 33 AD D1 					call	CAddArgument
  247 D1:E968 E1 -  -  -  				pop	hl
  248 D1:E969 01 5E 74 D0 				ld	bc, tempArg3
  249 D1:E96D CD 55 EA D1 				call	CCheckIfPrevArgIsSame
  250 D1:E971 CD 33 AD D1 				call	CAddArgument
  251 D1:E975 E1 -  -  -  			pop	hl
  252 D1:E976 01 76 70 D0 			ld	bc, tempArg2
  253 D1:E97A CD 55 EA D1 			call	CCheckIfPrevArgIsSame
  254 D1:E97E CD 33 AD D1 			call	CAddArgument
  255 D1:E982 E1 -  -  -  		pop	hl
  256 D1:E983 01 B7 24 D1 		ld	bc, tempArg1
  257 D1:E987 CD 55 EA D1 		call	CCheckIfPrevArgIsSame
  258 D1:E98B CD 33 AD D1 		call	CAddArgument
  259 D1:E98F ED 53 39 EC 
              D1 -  -  -  		ld	(programPtr), de
  260 D1:E994 06 05 -  -  		ld	b, 5
  261 D1:E996 CD E6 E6 D1 		call	CInsertCallPops
  262 D1:E99A 3A EF E6 D1 		ld	a, (CFunctionArgsSMC)
  263 D1:E99E FE 3E -  -  		cp	a, 62
  264 D1:E9A0 CA 09 E8 D1 _:		jp	z, CInsertSpriteScaled
  265 D1:E9A4 FE 3F -  -  		cp	a, 63
  266 D1:E9A6 28 F8 -  -  		jr	z, -_
  267 D1:E9A8 F1 -  -  -  	pop	af
  268 D1:E9A9 C9 -  -  -  	ret
  269 D1:E9AA -  -  -  -  	
  270 D1:E9AA -  -  -  -  CFunction6Args:
  271 D1:E9AA FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  272 D1:E9AE CA 47 AF D1 	jp	z, ErrorSyntax
  273 D1:E9B2 2A 39 EC D1 	ld	hl, (programPtr)
  274 D1:E9B6 22 FC E9 D1 	ld	(CFunction6ArgsSMC2), hl
  275 D1:E9BA 21 B7 24 D1 	ld	hl, tempArg1
  276 D1:E9BE FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  277 D1:E9C2 CD E1 AC D1 	call	CGetArgument
  278 D1:E9C6 E5 -  -  -  	push	hl
  279 D1:E9C7 21 76 70 D0 		ld	hl, tempArg2
  280 D1:E9CB FD CB B0 5E 		bit	arg2_is_small, (iy+fFunction1)
  281 D1:E9CF CD E1 AC D1 		call	CGetArgument
  282 D1:E9D3 E5 -  -  -  		push	hl
  283 D1:E9D4 21 5E 74 D0 			ld	hl, tempArg3
  284 D1:E9D8 FD CB B0 56 			bit	arg3_is_small, (iy+fFunction1)
  285 D1:E9DC CD E1 AC D1 			call	CGetArgument
  286 D1:E9E0 E5 -  -  -  			push	hl
  287 D1:E9E1 21 46 78 D0 				ld	hl, tempArg4
  288 D1:E9E5 FD CB B0 4E 				bit	arg4_is_small, (iy+fFunction1)
  289 D1:E9E9 CD E1 AC D1 				call	CGetArgument
  290 D1:E9ED E5 -  -  -  				push	hl
  291 D1:E9EE 21 2E 7C D0 					ld	hl, tempArg5
  292 D1:E9F2 FD CB B0 46 					bit	arg5_is_small, (iy+fFunction1)
  293 D1:E9F6 CD E1 AC D1 					call	CGetArgument
  294 D1:E9FA E5 -  -  -  					push	hl
  295 D1:E9FB -  -  -  -  CFunction6ArgsSMC2 = $+1
  296 D1:E9FB 21 00 00 00 						ld	hl, 0
  297 D1:E9FF BF -  -  -  						cp	a, a					;	reset zero flag
  298 D1:EA00 CD DD AC D1 						call	CGetArgumentLast
  299 D1:EA04 ED 5B 39 EC 
              D1 -  -  -  						ld	de, (programPtr)
  300 D1:EA09 E1 -  -  -  					pop	hl
  301 D1:EA0A 01 2E 7C D0 					ld	bc, tempArg5
  302 D1:EA0E CD 55 EA D1 					call	CCheckIfPrevArgIsSame
  303 D1:EA12 CD 33 AD D1 					call	CAddArgument
  304 D1:EA16 E1 -  -  -  				pop	hl
  305 D1:EA17 01 46 78 D0 				ld	bc, tempArg4
  306 D1:EA1B CD 55 EA D1 				call	CCheckIfPrevArgIsSame
  307 D1:EA1F CD 33 AD D1 				call	CAddArgument
  308 D1:EA23 E1 -  -  -  			pop	hl
  309 D1:EA24 01 5E 74 D0 			ld	bc, tempArg3
  310 D1:EA28 CD 55 EA D1 			call	CCheckIfPrevArgIsSame
  311 D1:EA2C CD 33 AD D1 			call	CAddArgument
  312 D1:EA30 E1 -  -  -  		pop	hl
  313 D1:EA31 01 76 70 D0 		ld	bc, tempArg2
  314 D1:EA35 CD 55 EA D1 		call	CCheckIfPrevArgIsSame
  315 D1:EA39 CD 33 AD D1 		call	CAddArgument
  316 D1:EA3D E1 -  -  -  	pop	hl
  317 D1:EA3E 01 B7 24 D1 	ld	bc, tempArg1
  318 D1:EA42 CD 55 EA D1 	call	CCheckIfPrevArgIsSame
  319 D1:EA46 CD 33 AD D1 	call	CAddArgument
  320 D1:EA4A ED 53 39 EC 
              D1 -  -  -  	ld	(programPtr), de
  321 D1:EA4F 06 06 -  -  	ld	b, 6
  322 D1:EA51 C3 E6 E6 D1 	jp	CInsertCallPops
  323 D1:EA55 -  -  -  -  	
  324 D1:EA55 -  -  -  -  CCheckIfPrevArgIsSame:
  325 D1:EA55 E5 -  -  -  	push	hl
  326 D1:EA56 D5 -  -  -  		push	de
  327 D1:EA57 C5 -  -  -  			push	bc
  328 D1:EA58 B7 -  -  -  				or	a
  329 D1:EA59 ED 42 -  -  				sbc	hl, bc
  330 D1:EA5B EB -  -  -  				ex	de, hl
  331 D1:EA5C ED 52 -  -  				sbc	hl, de
  332 D1:EA5E D1 -  -  -  			pop	de
  333 D1:EA5F 1A -  -  -  _:			ld	a, (de)
  334 D1:EA60 BE -  -  -  			cp	a, (hl)
  335 D1:EA61 23 -  -  -  			inc	hl
  336 D1:EA62 13 -  -  -  			inc	de
  337 D1:EA63 28 FA -  -  			jr	z, -_
  338 D1:EA65 D1 -  -  -  		pop	de
  339 D1:EA66 E1 -  -  -  	pop	hl
  340 D1:EA67 C0 -  -  -  	ret	nz
  341 D1:EA68 E5 -  -  -  	push	hl
  342 D1:EA69 C1 -  -  -  	pop	bc
  343 D1:EA6A 0B -  -  -  	dec	bc
  344 D1:EA6B C9 -  -  -  	ret
Listing for file "ice.asm"
  455 D1:EA6C -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\clibs\graphics.asm"
    1 D1:EA6C -  -  -  -  ; Byte:                                                                 . . . . . . . .
    2 D1:EA6C -  -  -  -  ;       <---> <------->
    3 D1:EA6C -  -  -  -  ;       Args  1 = that argument is small (0-255)
    4 D1:EA6C -  -  -  -  ;       1 1 1:
    5 D1:EA6C -  -  -  -  ;    	bit   1 reset = not implemented
    6 D1:EA6C -  -  -  -  ;		bit   0 set   = special function (none yet)
    7 D1:EA6C -  -  -  -  
    8 D1:EA6C -  -  -  -  CFunctionsArguments:
    9 D1:EA6C 00 -  -  -  Begin:									.db 000000000b
   10 D1:EA6D 00 -  -  -  End_:									.db 000000000b
   11 D1:EA6E 30 -  -  -  SetColor:								.db 000110000b
   12 D1:EA6F 00 -  -  -  SetDefaultPalette:						        .db 000000000b
   13 D1:EA70 E0 -  -  -  SetPalette:								.db 011100000b
   14 D1:EA71 30 -  -  -  FillScreen:								.db 000110000b
   15 D1:EA72 48 -  -  -  SetPixel:								.db 001001000b
   16 D1:EA73 E0 -  -  -  GetPixel:								.db 011100000b
   17 D1:EA74 E0 -  -  -  GetDraw:								.db 011100000b
   18 D1:EA75 30 -  -  -  SetDraw:								.db 000110000b
   19 D1:EA76 00 -  -  -  SwapDraw:								.db 000000000b
   20 D1:EA77 30 -  -  -  Blit:									.db 000110000b
   21 D1:EA78 7C -  -  -  BlitLines:								.db 001111100b
   22 D1:EA79 B5 -  -  -  BlitArea:								.db 010110101b
   23 D1:EA7A 30 -  -  -  PrintChar:								.db 000110000b
   24 D1:EA7B 48 -  -  -  PrintInt:								.db 001001000b
   25 D1:EA7C 48 -  -  -  PrintUInt:								.db 001001000b
   26 D1:EA7D 20 -  -  -  PrintString_:							        .db 000100000b
   27 D1:EA7E 60 -  -  -  PrintStringXY:							        .db 001100000b
   28 D1:EA7F 48 -  -  -  SetTextXY:								.db 001001000b
   29 D1:EA80 30 -  -  -  SetTextBGColor:							        .db 000110000b
   30 D1:EA81 30 -  -  -  SetTextFGColor:							        .db 000110000b
   31 D1:EA82 30 -  -  -  SetTextTransparentColor:				                .db 000110000b
   32 D1:EA83 E0 -  -  -  SetCustomFontData:						        .db 011100000b
   33 D1:EA84 E0 -  -  -  SetCustomFontSpacing:					                .db 011100000b
   34 D1:EA85 30 -  -  -  SetMonospaceFont:						        .db 000110000b
   35 D1:EA86 E0 -  -  -  GetStringWidth:							        .db 011100000b
   36 D1:EA87 E0 -  -  -  GetCharWidth:							        .db 011100000b
   37 D1:EA88 E0 -  -  -  GetTextX:								.db 011100000b
   38 D1:EA89 E0 -  -  -  GetTextY:								.db 011100000b
   39 D1:EA8A 80 -  -  -  Line:									.db 010000000b
   40 D1:EA8B 60 -  -  -  HorizLine:								.db 001100000b
   41 D1:EA8C 60 -  -  -  VertLine:								.db 001100000b
   42 D1:EA8D 60 -  -  -  Circle:									.db 001100000b
   43 D1:EA8E 60 -  -  -  FillCircle:								.db 001100000b
   44 D1:EA8F 80 -  -  -  Rectangle:								.db 010000000b
   45 D1:EA90 80 -  -  -  FillRectangle:							        .db 010000000b
   46 D1:EA91 80 -  -  -  LineNoClip:								.db 010000000b
   47 D1:EA92 60 -  -  -  HorizLineNoClip:						        .db 001100000b
   48 D1:EA93 60 -  -  -  VertLineNoClip:							        .db 001100000b
   49 D1:EA94 60 -  -  -  FillCircleNoClip:						        .db 001100000b
   50 D1:EA95 80 -  -  -  RectangleNoClip:						        .db 010000000b
   51 D1:EA96 80 -  -  -  FillRectangleNoClip:					                .db 010000000b
   52 D1:EA97 82 -  -  -  SetClipRegion:							        .db 010000010b
   53 D1:EA98 E0 -  -  -  GetClipRegion:							        .db 011100000b
   54 D1:EA99 20 -  -  -  ShiftDown:								.db 000100000b
   55 D1:EA9A 20 -  -  -  ShiftUp:								.db 000100000b
   56 D1:EA9B 20 -  -  -  ShiftLeft:								.db 000100000b
   57 D1:EA9C 20 -  -  -  ShiftRight:								.db 000100000b
   58 D1:EA9D E0 -  -  -  Tilemap:								.db 011100000b
   59 D1:EA9E E0 -  -  -  TilemapNoClip:							        .db 011100000b
   60 D1:EA9F E0 -  -  -  TransparentTilemap:						        .db 011100000b
   61 D1:EAA0 E0 -  -  -  TransparentTilemapNoClip:				                .db 011100000b
   62 D1:EAA1 E0 -  -  -  TilePtr:								.db 011100000b
   63 D1:EAA2 E0 -  -  -  TilePtrMapped:							        .db 011100000b
   64 D1:EAA3 E0 -  -  -  LZDecompress:							        .db 011100000b
   65 D1:EAA4 E0 -  -  -  AllocSprite:							        .db 011100000b
   66 D1:EAA5 E0 -  -  -  Sprite:									.db 011100000b
   67 D1:EAA6 E0 -  -  -  TransparentSprite:						        .db 011100000b
   68 D1:EAA7 64 -  -  -  SpriteNoClip:							        .db 001100100b
   69 D1:EAA8 64 -  -  -  TransparentSpriteNoClip:				                .db 001100100b
   70 D1:EAA9 E0 -  -  -  GetSpriteNoClip:						        .db 011100000b
   71 D1:EAAA A7 -  -  -  ScaledSpriteNoClip:						        .db 010100111b
   72 D1:EAAB A7 -  -  -  ScaledTransparentSpriteNoClip:			                        .db 010100111b
   73 D1:EAAC E0 -  -  -  FlipSpriteY:							        .db 011100000b
   74 D1:EAAD E0 -  -  -  FlipSpriteX:							        .db 011100000b
   75 D1:EAAE E0 -  -  -  RotateSpriteC:							        .db 011100000b
   76 D1:EAAF E0 -  -  -  RotateSpriteCC:							        .db 011100000b
   77 D1:EAB0 E0 -  -  -  RotateSpriteHalf:						        .db 011100000b
   78 D1:EAB1 E0 -  -  -  Polygon:								.db 011100000b
   79 D1:EAB2 E0 -  -  -  PolygonNoClip:							        .db 011100000b
   80 D1:EAB3 C0 -  -  -  FillTriangle:							        .db 011000000b
   81 D1:EAB4 C0 -  -  -  FillTriangleNoClip:						        .db 011000000b
   82 D1:EAB5 E0 -  -  -  LZDecompressSprite:						        .db 011100000b
   83 D1:EAB6 58 -  -  -  SetTextScale:							        .db 001011000b
   84 D1:EAB7 30 -  -  -  SetTransparentColor:					                .db 000110000b
   85 D1:EAB8 00 -  -  -  ZeroScreen:								.db 000000000b
   86 D1:EAB9 30 -  -  -  SetTextConfig:							        .db 000110000b
   87 D1:EABA E0 -  -  -  GetSpriteChar:							        .db 011100000b
   88 D1:EABB E0 -  -  -  Lighten:								.db 011100000b
   89 D1:EABC E0 -  -  -  Darken:									.db 011100000b
   90 D1:EABD 30 -  -  -  SetFontHeight:								.db 000110000b
   91 D1:EABE E0 -  -  -  ScaleSprite:								.db 011100000b
   92 D1:EABF 6C -  -  -  FloodFill:								.db 001101100b
Listing for file "ice.asm"
  456 D1:EAC0 -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\ICE\ICE v1.5\data.asm"
    1 D1:EAC0 -  -  -  -  operators_booleans:
    2 D1:EAC0 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0			;	0 = temp +
    3 D1:EACF -  -  -  -  operators_special:
    4 D1:EACF 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db 0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    5 D1:EADD -  -  -  -  	
    6 D1:EADD -  -  -  -  FunctionsWithReturnValue:
    7 D1:EADD AD AB 10 -  	.db tGetKey, trand, tLParen
    8 D1:EAE0 -  -  -  -  FunctionsWithReturnValueArguments:
    9 D1:EAE0 21 1A 19 B8 
              EF 0D BC -  	.db tMean, tMin, tMax, tNot, tExtTok, tSqr, tSqrt
   10 D1:EAE7 -  -  -  -  FunctionsWithReturnValueEnd:
   11 D1:EAE7 -  -  -  -  
   12 D1:EAE7 -  -  -  -  FunctionsWithReturnValueStart:
   13 D1:EAE7 9C D2 D1 7B 
              D0 D1 E6 CC 
              D1 74 CC D1 
              73 CE D1 77 
              CE D1 6F CE 
              D1 -  -  -  	.dl functionRoot, functionSqrt, functionCE, functionNot, functionMax, functionMin, functionMean
   14 D1:EAFC -  -  -  -  
   15 D1:EAFC -  -  -  -  FunctionsSingle:
   16 D1:EAFC E0 DC E1 D8 
              CE D1 D2 DE 
              D3 D5 62 D6 
              D7 2C B3 5F 	.db tOutput, tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet, tProg
   17 D1:EB0C -  -  -  -  FunctionsSingleEnd:
   18 D1:EB0C -  -  -  -  
   19 D1:EB0C -  -  -  -  FunctionsSingleStart:
   20 D1:EB0C C0 C5 D1 E4 
              D0 D1 C1 C7 
              D1 8B C7 D1 
              E7 C6 D1 41 
              D1 D1 DC C7 
              D1 FF E3 D1 	.dl functionPrgm, functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor
   21 D1:EB24 94 C6 D1 0C 
              C8 D1 02 CA 
              D1 13 C9 D1 
              E5 CA D1 C9 
              CA D1 AB CB 
              D1 0B C6 D1 	.dl functionDisp, functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput, functionOutput
   22 D1:EB3C -  -  -  -  	
   23 D1:EB3C -  -  -  -  operator_start:
   24 D1:EB3C E2 D4 D1 38 
              D5 D1 99 D5 
              D1 DB D5 D1 
              6D D6 D1 DC 
              AE D1 -  -  	.dl SubNumberXXX, SubVariableXXX, SubChainPushXXX, SubChainAnsXXX, SubFunctionXXX, SubError
   25 D1:EB4E D6 D6 D1 10 
              D7 D1 5A D7 
              D1 A3 D7 D1 
              43 D8 D1 E0 
              AE D1 -  -  	.dl AddNumberXXX, AddVariableXXX, AddChainPushXXX, AddChainAnsXXX, AddFunctionXXX, AddError
   26 D1:EB60 AC D8 D1 08 
              D9 D1 7B D9 
              D1 C4 D9 D1 
              39 DA D1 E4 
              AE D1 -  -  	.dl DivNumberXXX, DivVariableXXX, DivChainPushXXX, DivChainAnsXXX, DivFunctionXXX, DivError
   27 D1:EB72 96 DA D1 D3 
              DA D1 1E DB 
              D1 6A DB D1 
              45 DC D1 E8 
              AE D1 -  -  	.dl MulNumberXXX, MulVariableXXX, MulChainPushXXX, MulChainAnsXXX, MulFunctionXXX, MulError
   28 D1:EB84 82 DE D1 D8 
              DE D1 51 DF 
              D1 9D DF D1 
              1C E0 D1 06 
              AF D1 -  -  	.dl NEQNumberXXX, NEQVariableXXX, NEQChainPushXXX, NEQChainAnsXXX, NEQFunctionXXX, NEQError
   29 D1:EB96 A8 DC D1 05 
              DD D1 79 DD 
              D1 C0 DD D1 
              21 DE D1 EC 
              AE D1 -  -  	.dl GLETNumberXXX, GLETVariableXXX, GLETChainPushXXX, GLETChainAnsXXX, GLETFunctionXXX, GLETError
   30 D1:EBA8 5F E0 D1 DB 
              E0 D1 60 E1 
              D1 A3 E1 D1 
              0E E2 D1 14 
              AF D1 -  -  	.dl XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   31 D1:EBBA 51 E2 D1 A8 
              E2 D1 EE E2 
              D1 0C E3 D1 
              33 E3 D1 82 
              E3 D1 -  -  	.dl StoNumberXXX, StoVariableXXX, StoChainPushXXX, StoChainAnsXXX, StoFunctionXXX, StoListXXX
   32 D1:EBCC -  -  -  -  	
   33 D1:EBCC -  -  -  -  CArguments:
   34 D1:EBCC DC E6 D1 1C 
              E7 D1 34 E7 
              D1 7A E7 D1 
              87 E8 D1 01 
              E9 D1 AA E9 
              D1 -  -  -  	.dl CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   35 D1:EBE1 -  -  -  -  	
   36 D1:EBE1 -  -  -  -  functionCustomStart:
   37 D1:EBE1 5E D1 D1 2C 
              D3 D1 87 C7 
              D1 AC D3 D1 
              98 D1 D1 0C 
              D2 D1 -  -  	.dl functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm, functionSetBASICVar, functionGetBASICVar
   38 D1:EBF3 -  -  -  -  	
   39 D1:EBF3 07 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 00 -  precedence:	.db 7, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  0
   40 D1:EC02 -  -  -  -  	         ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   41 D1:EC02 00 04 04 05 
              05 03 03 03 
              03 03 03 02 
              02 01 06 -  precedence2: 	.db 0, 4,4,5,5,3,3,3,3,3,3,2, 2,  1,  6
   42 D1:EC11 -  -  -  -  
   43 D1:EC11 -  -  -  -  lists:
   44 D1:EC11 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 2F 
              11 D1 -  -  	.dl L1, L2, L3, L4, L5, L6
   45 D1:EC23 -  -  -  -  	
   46 D1:EC23 -  -  -  -  hexadecimals:
   47 D1:EC23 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   48 D1:EC33 -  -  -  -  	
   49 D1:EC33 5A 32 D0 -  stackPtr:		        .dl stack
   50 D1:EC36 42 36 D0 -  outputPtr:		        .dl output
   51 D1:EC39 00 2C D5 -  programPtr:		        .dl program
   52 D1:EC3C AE 3D D0 -  programNamesPtr:	    .dl programNamesStack
   53 D1:EC3F AE 3D D0 -  labelPtr:		        .dl labelStack
   54 D1:EC42 96 41 D0 -  gotoPtr:		        .dl gotoStack
   55 D1:EC45 7E 45 D0 -  programDataOffsetPtr:	.dl programDataOffsetStack
   56 D1:EC48 5A 4B D0 -  tempStringsPtr:		    .dl tempStringsStack
   57 D1:EC4B 36 51 D0 -  tempListsPtr:		    .dl tempListsStack
   58 D1:EC4E 76 70 D0 -  programDataDataPtr:	    .dl programDataData
   59 D1:EC51 06 F1 D1 -  debugCodePtr:           .dl InsertDebugCode
   60 D1:EC54 00 -  -  -  amountOfPrograms	    .db 0
   61 D1:EC55 00 -  -  -  openedParensE		    .db 0
   62 D1:EC56 00 -  -  -  openedParensF		    .db 0
   63 D1:EC57 00 -  -  -  amountOfArguments	    .db 0
   64 D1:EC58 00 -  -  -  amountOfCRoutines	    .db 0
   65 D1:EC59 00 -  -  -  amountOfEnds		    .db 0
   66 D1:EC5A 00 -  -  -  amountOfInput		    .db 0
   67 D1:EC5B 00 -  -  -  amountOfPause		    .db 0
   68 D1:EC5C 00 -  -  -  amountOfRoot		    .db 0
   69 D1:EC5D 00 -  -  -  ExprOutput		.db 0
   70 D1:EC5E 00 -  -  -  ExprOutput2		.db 0
   71 D1:EC5F 00 -  -  -  AmountOfSubPrograms	.db 0
   72 D1:EC60 -  -  -  -  
   73 D1:EC60 -  -  -  -  varname:
   74 D1:EC60 06 00 00 00 
              00 00 00 00 
              00 00 -  -  	.db ProtProgObj, 0,0,0,0,0,0,0,0,0
   75 D1:EC6A -  -  -  -  	
   76 D1:EC6A -  -  -  -  usedCroutines:
   77 D1:EC6A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .fill	AMOUNT_OF_C_FUNCTIONS, 0
   78 D1:ECBE -  -  -  -  
   79 D1:ECBE -  -  -  -  ICEAppvar:
   80 D1:ECBE 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db AppVarObj, "ICEAPPV", 0
   81 D1:ECC7 -  -  -  -  ICEProgram:
   82 D1:ECC7 06 49 43 45 
              00 -  -  -  	.db ProtProgObj, "ICE", 0
   83 D1:ECCC -  -  -  -  	
   84 D1:ECCC -  -  -  -  ErrorMessageStandard:
   85 D1:ECCC 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db "Invalid arguments for '", 0
   86 D1:ECE4 -  -  -  -  EndErrorMessage:
   87 D1:ECE4 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db "Too many Ends!", 0
   88 D1:ECF3 -  -  -  -  GoodCompileMessage:
   89 D1:ECF3 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db "Succesfully compiled!", 0
   90 D1:ED09 -  -  -  -  NoProgramsMessage:
   91 D1:ED09 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db "No programs found!", 0
   92 D1:ED1C -  -  -  -  InvalidTokenMessage:
   93 D1:ED1C 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db "Unsupported token!", 0
   94 D1:ED2F -  -  -  -  InvalidListArgumentMessage:
   95 D1:ED2F 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db "Only integers in lists supported!", 0
   96 D1:ED51 -  -  -  -  InvalidNameLengthMessage:
   97 D1:ED51 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db "Program name too long!", 0
   98 D1:ED68 -  -  -  -  SameNameMessage:
   99 D1:ED68 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db "Output name is the same as input name!", 0
  100 D1:ED8F -  -  -  -  WrongSpriteDataMessgae:
  101 D1:ED8F 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db "Invalid sprite data!", 0
  102 D1:EDA4 -  -  -  -  FunctionFunctionMessage:
  103 D1:EDA4 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db "You can't use a function in a function!", 0
  104 D1:EDCC -  -  -  -  NotFoundMessage:
  105 D1:EDCC 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db "Program not found!", 0
  106 D1:EDDF -  -  -  -  ImplementMessage:
  107 D1:EDDF 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db "This function has not been implemented yet!", 0
  108 D1:EE0B -  -  -  -  SyntaxErrorMessage:
  109 D1:EE0B 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db "Invalid arguments entered!", 0
  110 D1:EE26 -  -  -  -  TooLargeLoopMessage:
  111 D1:EE26 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db "Too large anonymous loop!", 0
  112 D1:EE40 -  -  -  -  UsedCodeMessage:
  113 D1:EE40 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db "You can't use code before DefineSprite()!", 0
  114 D1:EE6A -  -  -  -  LineNumber:
  115 D1:EE6A 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db "Error on line ", 0
  116 D1:EE79 -  -  -  -  MismatchErrorMessage:
  117 D1:EE79 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db "Mismatched parenthesis!", 0
  118 D1:EE91 -  -  -  -  UnknownMessage:
  119 D1:EE91 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db "Something went wrong! Please report it!", 0
  120 D1:EEB9 -  -  -  -  NotEnoughMem:
  121 D1:EEB9 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db "Not enough free RAM!", 0
  122 D1:EECE -  -  -  -  LabelErrorMessage:
  123 D1:EECE 43 61 6E 27 
              74 20 66 69 
              6E 64 20 73 
              70 65 63 69 
              66 69 63 20 
              6C 61 62 65 
              6C 21 00 -  	.db "Can't find specific label!", 0
  124 D1:EEE9 -  -  -  -  StartParseMessage:
  125 D1:EEE9 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db "Compiling program ", 0
  126 D1:EEFC -  -  -  -  ICEName:
  127 D1:EEFC 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              35 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db "ICE Compiler v1.5 - By Peter \"PT_\" Tillema", 0
  128 D1:EF27 -  -  -  -  PressKey:
  129 D1:EF27 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db "[Press any key to exit]", 0
  130 D1:EF3F -  -  -  -  	
  131 D1:EF3F -  -  -  -  ;MulTable:
  132 D1:EF3F -  -  -  -  ;  1 + log2(x) + popcnt(x) - (popcnt(x) == 1)
  133 D1:EF3F -  -  -  -  ; https://gist.github.com/jacobly0/049c51a353632d7fa284364f4b6244b6
  134 D1:EF3F -  -  -  -  ;	.db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0	                                                                ; 2
  135 D1:EF3F -  -  -  -  ;	.db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0	                                        ; 3
  136 D1:EF3F -  -  -  -  ;	.db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0								; 4
  137 D1:EF3F -  -  -  -  ;	.db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0					; 5
  138 D1:EF3F -  -  -  -  ;	.db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0					; 6
  139 D1:EF3F -  -  -  -  ;	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0			; 7
  140 D1:EF3F -  -  -  -  ;	.db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0							; 8
  141 D1:EF3F -  -  -  -  ;	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0			; 9
  142 D1:EF3F -  -  -  -  ;	.db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0			; 10
  143 D1:EF3F -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0             ; 11
  144 D1:EF3F -  -  -  -  ;	.db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0                        ; 12
  145 D1:EF3F -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0		; 13
  146 D1:EF3F -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 14
  147 D1:EF3F -  -  -  -  ;	.db 8 \	push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0	; 15
  148 D1:EF3F -  -  -  -  ;	.db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0                                       ; 16
  149 D1:EF3F -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0             ; 17
  150 D1:EF3F -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 18
  151 D1:EF3F -  -  -  -  ;	.db 8 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0	; 19
  152 D1:EF3F -  -  -  -  ;	.db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0,0             ; 20
  153 D1:EF3F -  -  -  -  	
  154 D1:EF3F -  -  -  -  InputRoutine:
  155 D1:EF3F CD 14 08 02 	call	_ClrScrn
  156 D1:EF43 CD 28 08 02 	call	_HomeUp
  157 D1:EF47 AF -  -  -  	xor	    a, a
  158 D1:EF48 32 79 08 D0 	ld	    (ioPrompt), a
  159 D1:EF4C 32 99 05 D0 	ld	    (curUnder), a
  160 D1:EF50 CD 20 13 02 	call	_GetStringInput
  161 D1:EF54 2A 4E 24 D0 	ld	    hl, (editSym)
  162 D1:EF58 CD E8 0A 02 	call	_VarNameToOP1HL
  163 D1:EF5C CD 0C 05 02 	call	_ChkFindSym
  164 D1:EF60 1A -  -  -  	ld	    a, (de)
  165 D1:EF61 13 -  -  -  	inc	    de
  166 D1:EF62 13 -  -  -  	inc	    de
  167 D1:EF63 47 -  -  -  	ld	    b, a
  168 D1:EF64 ED 62 -  -  	sbc	    hl, hl
  169 D1:EF66 C5 -  -  -  _:	push	bc
  170 D1:EF67 29 -  -  -              add	    hl, hl
  171 D1:EF68 E5 -  -  -              push	hl
  172 D1:EF69 C1 -  -  -              pop	    bc
  173 D1:EF6A 29 -  -  -              add	    hl, hl
  174 D1:EF6B 29 -  -  -              add	    hl, hl
  175 D1:EF6C 09 -  -  -              add	    hl, bc
  176 D1:EF6D 1A -  -  -              ld	    a, (de)
  177 D1:EF6E D6 30 -  -              sub	    a, t0
  178 D1:EF70 01 00 00 00             ld	    bc, 0
  179 D1:EF74 4F -  -  -              ld	    c, a
  180 D1:EF75 09 -  -  -              add	    hl, bc
  181 D1:EF76 13 -  -  -              inc	    de
  182 D1:EF77 C1 -  -  -  	pop	bc
  183 D1:EF78 10 EC -  -  	djnz	-_
  184 D1:EF7A -  -  -  -  InputOffset = $+2
  185 D1:EF7A DD 2F 00 -  	ld	(ix+0), hl
  186 D1:EF7D C3 78 15 02 	jp	_DeleteTempEditEqu
  187 D1:EF81 -  -  -  -  InputRoutineEnd:
  188 D1:EF81 -  -  -  -  
  189 D1:EF81 -  -  -  -  RandRoutine:
  190 D1:EF81 DD 27 51 -  	ld	hl, (ix+rand1)
  191 D1:EF84 DD 17 54 -  	ld	de, (ix+rand2)
  192 D1:EF87 44 -  -  -  	ld	b, h
  193 D1:EF88 4D -  -  -  	ld	c, l
  194 D1:EF89 29 -  -  -  	add	hl, hl
  195 D1:EF8A CB 13 -  -  	rl	e
  196 D1:EF8C CB 12 -  -  	rl	d
  197 D1:EF8E 29 -  -  -  	add	hl, hl
  198 D1:EF8F CB 13 -  -  	rl	e
  199 D1:EF91 CB 12 -  -  	rl	d
  200 D1:EF93 2C -  -  -  	inc	l
  201 D1:EF94 09 -  -  -  	add	hl, bc
  202 D1:EF95 DD 2F 51 -  	ld	(ix+rand1), hl
  203 D1:EF98 ED 5A -  -  	adc	hl, de
  204 D1:EF9A DD 2F 54 -  	ld	(ix+rand2), hl
  205 D1:EF9D EB -  -  -  	ex	de, hl
  206 D1:EF9E DD 27 57 -  	ld	hl, (ix+rand3)
  207 D1:EFA1 DD 07 5A -  	ld	bc, (ix+rand4)
  208 D1:EFA4 29 -  -  -  	add	hl, hl
  209 D1:EFA5 CB 11 -  -  	rl	c
  210 D1:EFA7 CB 10 -  -  	rl	b
  211 D1:EFA9 DD 0F 5A -  	ld	(ix+rand4), bc
  212 D1:EFAC 9F -  -  -  	sbc	a, a
  213 D1:EFAD E6 C5 -  -  	and	%11000101
  214 D1:EFAF AD -  -  -  	xor	l
  215 D1:EFB0 6F -  -  -  	ld	l, a
  216 D1:EFB1 DD 2F 57 -  	ld	(ix+rand3), hl
  217 D1:EFB4 EB -  -  -  	ex	de, hl
  218 D1:EFB5 09 -  -  -  	add	hl, bc
  219 D1:EFB6 C9 -  -  -  	ret
  220 D1:EFB7 -  -  -  -  RandRoutineEnd:
  221 D1:EFB7 -  -  -  -  
  222 D1:EFB7 -  -  -  -  DispNumberRoutine:
  223 D1:EFB7 3E 12 -  -  	ld	a, 18
  224 D1:EFB9 32 96 05 D0 	ld	(curCol), a
  225 D1:EFBD CD E0 1E 02 	call	_DispHL
  226 D1:EFC1 CD F0 07 02 	call	_NewLine
  227 D1:EFC5 -  -  -  -  	
  228 D1:EFC5 -  -  -  -  DispStringRoutine:
  229 D1:EFC5 AF -  -  -  	xor	a, a
  230 D1:EFC6 32 96 05 D0 	ld	(curCol), a
  231 D1:EFCA CD C0 07 02 	call	_PutS
  232 D1:EFCE CD F0 07 02 	call	_NewLine
  233 D1:EFD2 -  -  -  -  
  234 D1:EFD2 -  -  -  -  PauseRoutine:
  235 D1:EFD2 2B -  -  -  	dec	hl
  236 D1:EFD3 -  -  -  -  PauseRoutine2:
  237 D1:EFD3 0E 6E -  -  	ld	c, 110
  238 D1:EFD5 06 20 -  -  _:	ld	b, 32
  239 D1:EFD7 10 FE -  -  	djnz	$
  240 D1:EFD9 0D -  -  -  	dec	c
  241 D1:EFDA 20 F9 -  -  	jr	nz, -_
  242 D1:EFDC B7 -  -  -  	or	a, a
  243 D1:EFDD 11 FF FF FF 	ld	de, -1
  244 D1:EFE1 19 -  -  -  	add	hl, de
  245 D1:EFE2 38 EF -  -  	jr	c, PauseRoutine2
  246 D1:EFE4 C9 -  -  -  	ret
  247 D1:EFE5 -  -  -  -  PauseRoutineEnd:
  248 D1:EFE5 -  -  -  -  
  249 D1:EFE5 -  -  -  -  MeanRoutine:
  250 D1:EFE5 DD 21 00 00 
              00 -  -  -  	ld	ix, 0
  251 D1:EFEA DD 39 -  -  	add	ix, sp
  252 D1:EFEC 19 -  -  -  	add	hl, de
  253 D1:EFED E5 -  -  -  	push	hl
  254 D1:EFEE DD CB FF 1E 		rr	(ix-1)
  255 D1:EFF2 E1 -  -  -  	pop	hl
  256 D1:EFF3 CB 1C -  -  	rr	h
  257 D1:EFF5 CB 1D -  -  	rr	l
  258 D1:EFF7 DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  259 D1:EFFC C9 -  -  -  	ret
  260 D1:EFFD -  -  -  -  MeanRoutineEnd:
  261 D1:EFFD -  -  -  -  
  262 D1:EFFD -  -  -  -  KeypadRoutine:
  263 D1:EFFD F3 -  -  -  	di
  264 D1:EFFE 21 00 00 F5 	ld	hl, 0F50000h
  265 D1:F002 36 02 -  -  	ld	(hl), 2
  266 D1:F004 AF -  -  -  	xor	a, a
  267 D1:F005 BE -  -  -  _:	cp	a, (hl)
  268 D1:F006 20 FD -  -  	jr	nz, -_
  269 D1:F008 FB -  -  -  	ei
  270 D1:F009 68 -  -  -  	ld	l, b
  271 D1:F00A 7E -  -  -  	ld	a, (hl)
  272 D1:F00B ED 62 -  -  	sbc	hl, hl
  273 D1:F00D A1 -  -  -  	and	c
  274 D1:F00E C8 -  -  -  	ret	z
  275 D1:F00F 2C -  -  -  	inc	l
  276 D1:F010 C9 -  -  -  	ret
  277 D1:F011 -  -  -  -  KeypadRoutineEnd:
  278 D1:F011 -  -  -  -  
  279 D1:F011 -  -  -  -  RootRoutine:
  280 D1:F011 F3 -  -  -  	di
  281 D1:F012 3B -  -  -  	dec sp      ; (sp) = ?
  282 D1:F013 E5 -  -  -  	push hl      ; (sp) = ?uhl
  283 D1:F014 3B -  -  -  		dec sp      ; (sp) = ?uhl?
  284 D1:F015 FD E1 -  -  		pop iy      ; (sp) = ?u, uix = hl?
  285 D1:F017 3B -  -  -  		dec sp      ; (sp) = ?u?
  286 D1:F018 F1 -  -  -  	pop af      ; af = u?
  287 D1:F019 B7 -  -  -  	or  a,a
  288 D1:F01A ED 62 -  -  	sbc hl,hl
  289 D1:F01C EB -  -  -  	ex  de,hl   ; de = 0
  290 D1:F01D ED 62 -  -  	sbc hl,hl   ; hl = 0
  291 D1:F01F 01 40 0C 00 	ld  bc,$C40 ; b = 12, c = 0x40
  292 D1:F023 -  -  -  -  Sqrt24Loop:
  293 D1:F023 91 -  -  -  	sub     a,c
  294 D1:F024 ED 52 -  -  	sbc     hl,de
  295 D1:F026 30 03 -  -  	jr      nc,Sqrt24Skip
  296 D1:F028 81 -  -  -  	add     a,c
  297 D1:F029 ED 5A -  -  	adc     hl,de
  298 D1:F02B -  -  -  -  Sqrt24Skip:
  299 D1:F02B 3F -  -  -  	ccf
  300 D1:F02C CB 13 -  -  	rl	e
  301 D1:F02E CB 12 -  -  	rl	d
  302 D1:F030 FD 29 -  -  	add	iy,iy
  303 D1:F032 17 -  -  -  	rla
  304 D1:F033 ED 6A -  -  	adc	hl,hl
  305 D1:F035 FD 29 -  -  	add	iy,iy
  306 D1:F037 17 -  -  -  	rla
  307 D1:F038 ED 6A -  -  	adc	hl,hl
  308 D1:F03A 10 E7 -  -  	djnz	Sqrt24Loop
  309 D1:F03C EB -  -  -  	ex	de,hl
  310 D1:F03D C9 -  -  -  	ret
  311 D1:F03E -  -  -  -  RootRoutineEnd:
  312 D1:F03E -  -  -  -  
  313 D1:F03E -  -  -  -  XORANDData:
  314 D1:F03E 01 FF FF FF 	ld	bc, -1
  315 D1:F042 09 -  -  -  	add	hl, bc
  316 D1:F043 9F -  -  -  	sbc	a, a
  317 D1:F044 EB -  -  -  	ex	de, hl
  318 D1:F045 57 -  -  -  	ld	d, a
  319 D1:F046 09 -  -  -  	add	hl, bc
  320 D1:F047 9F -  -  -  	sbc	a, a
  321 D1:F048 -  -  -  -  XORANDSMC:
  322 D1:F048 A2 -  -  -  	and	a, d
  323 D1:F049 ED 62 -  -  	sbc	hl, hl
  324 D1:F04B E6 01 -  -  	and	a, 1
  325 D1:F04D 6F -  -  -  	ld	l, a
  326 D1:F04E -  -  -  -      
  327 D1:F04E -  -  -  -  StoBASICVar:
  328 D1:F04E E5 -  -  -      push hl
  329 D1:F04F CD 84 03 02         call _ZeroOP1
  330 D1:F053 21 F9 05 D0         ld hl, OP1+1
  331 D1:F057 70 -  -  -          ld (hl), b
  332 D1:F058 CD 78 03 02         call _OP2Set0
  333 D1:F05C E1 -  -  -      pop hl
  334 D1:F05D 19 -  -  -      add hl, de
  335 D1:F05E B7 -  -  -      or a, a
  336 D1:F05F ED 52 -  -      sbc hl, de
  337 D1:F061 28 3E -  -      jr z, +++_
  338 D1:F063 06 04 -  -      ld b, 4
  339 D1:F065 11 08 06 D0     ld de, OP2+5
  340 D1:F069 3E 0A -  -  _:  ld a, 10
  341 D1:F06B CD 90 1D 02     call _DivHLByA
  342 D1:F06F 4F -  -  -      ld c, a
  343 D1:F070 3E 0A -  -      ld a, 10
  344 D1:F072 CD 90 1D 02     call _DivHLByA
  345 D1:F076 87 -  -  -      add a, a
  346 D1:F077 87 -  -  -      add a, a
  347 D1:F078 87 -  -  -      add a, a
  348 D1:F079 87 -  -  -      add a, a
  349 D1:F07A 81 -  -  -      add a, c
  350 D1:F07B 12 -  -  -      ld (de), a
  351 D1:F07C 1B -  -  -      dec de
  352 D1:F07D 10 EA -  -      djnz -_
  353 D1:F07F 21 04 06 D0     ld hl, OP2+1
  354 D1:F083 36 87 -  -      ld (hl), $87
  355 D1:F085 3A 05 06 D0 _:  ld a, (OP2M)
  356 D1:F089 FE 10 -  -      cp a, $10
  357 D1:F08B 30 14 -  -      jr nc, +_
  358 D1:F08D 21 08 06 D0     ld hl, OP2+5
  359 D1:F091 AF -  -  -      xor a, a
  360 D1:F092 ED 6F -  -      rld
  361 D1:F094 2B -  -  -      dec hl
  362 D1:F095 ED 6F -  -      rld
  363 D1:F097 2B -  -  -      dec hl
  364 D1:F098 ED 6F -  -      rld
  365 D1:F09A 2B -  -  -      dec hl
  366 D1:F09B ED 6F -  -      rld
  367 D1:F09D 2B -  -  -      dec hl
  368 D1:F09E 35 -  -  -      dec (hl)
  369 D1:F09F 18 E4 -  -      jr -_
  370 D1:F0A1 CD 0C 05 02 _:  call _ChkFindSym
  371 D1:F0A5 D4 34 14 02     call nc, _DelVarArc
  372 D1:F0A9 CD 34 05 02     call _CreateReal
  373 D1:F0AD 21 03 06 D0     ld hl, OP2
  374 D1:F0B1 01 09 00 00     ld bc, 9
  375 D1:F0B5 ED B0 -  -      ldir
  376 D1:F0B7 C9 -  -  -      ret
  377 D1:F0B8 -  -  -  -  StoBASICVarEnd:
  378 D1:F0B8 -  -  -  -  
  379 D1:F0B8 -  -  -  -  GetBASICVar:
  380 D1:F0B8 CD 84 03 02     call _ZeroOP1
  381 D1:F0BC 21 F9 05 D0     ld hl, OP1+1
  382 D1:F0C0 70 -  -  -      ld (hl), b
  383 D1:F0C1 CD 10 05 02     call _FindSym
  384 D1:F0C5 D4 60 0F 02     call nc, _RclVarSym
  385 D1:F0C9 CD 70 0F 02     call _ConvOP1
  386 D1:F0CD EB -  -  -      ex de, hl
  387 D1:F0CE C9 -  -  -      ret
  388 D1:F0CF -  -  -  -  GetBASICVarEnd:
  389 D1:F0CF -  -  -  -  
  390 D1:F0CF -  -  -  -  DebugCode:
  391 D1:F0CF 21 4C 4F 47     ld      hl, $474F4C
  392 D1:F0D3 22 F9 05 D0     ld      (OP1+1), hl
  393 D1:F0D7 AF -  -  -      xor     a, a
  394 D1:F0D8 32 FC 05 D0     ld      (OP1+4), a
  395 D1:F0DC CD 08 05 02     call    _FindProgSym
  396 D1:F0E0 D4 34 14 02     call    nc, _DelVarArc
  397 D1:F0E4 DD 27 5D -      ld      hl, (ix+debugPtr)
  398 D1:F0E7 11 76 BB D0     ld      de, debugStart
  399 D1:F0EB B7 -  -  -      or      a, a
  400 D1:F0EC ED 52 -  -      sbc     hl, de
  401 D1:F0EE D5 -  -  -      push    de
  402 D1:F0EF E5 -  -  -              push    hl
  403 D1:F0F0 CD 68 05 02                     call    _CreateProg
  404 D1:F0F4 C1 -  -  -              pop     bc
  405 D1:F0F5 E1 -  -  -      pop     hl
  406 D1:F0F6 13 -  -  -      inc     de
  407 D1:F0F7 13 -  -  -      inc     de
  408 D1:F0F8 78 -  -  -      ld      a, b
  409 D1:F0F9 B1 -  -  -      or      a, c
  410 D1:F0FA 28 02 -  -      jr      z, $+4
  411 D1:F0FC ED B0 -  -      ldir
  412 D1:F0FE C9 -  -  -      ret
  413 D1:F0FF 21 76 BB D0     ld      hl, debugStart
  414 D1:F103 DD 2F 5D -      ld      (ix+debugPtr), hl
  415 D1:F106 -  -  -  -  DebugCodeEnd:
  416 D1:F106 -  -  -  -  
  417 D1:F106 -  -  -  -  InsertDebugCode:
  418 D1:F106 DD 27 5D -      ld      hl, (ix+debugPtr)
  419 D1:F109 77 -  -  -      ld      (hl), a
  420 D1:F10A 23 -  -  -      inc     hl
  421 D1:F10B 1A -  -  -  _:  ld      a, (de)
  422 D1:F10C B7 -  -  -      or      a, a
  423 D1:F10D 28 05 -  -      jr      z, +_
  424 D1:F10F 77 -  -  -      ld      (hl), a
  425 D1:F110 23 -  -  -      inc     hl
  426 D1:F111 13 -  -  -      inc     de
  427 D1:F112 18 F7 -  -      jr      -_
  428 D1:F114 36 3F -  -  _:  ld      (hl), tEnter
  429 D1:F116 23 -  -  -      inc     hl
  430 D1:F117 DD 2F 5D -      ld      (ix+debugPtr), hl
  431 D1:F11A C9 -  -  -      ret
  432 D1:F11B -  -  -  -  InsertDebugCodeEnd:
  433 D1:F11B -  -  -  -  
  434 D1:F11B -  -  -  -  CData:
  435 D1:F11B DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  436 D1:F120 21 DA A8 D1 	ld	hl, LibLoadAppVar - CData + UserMem
  437 D1:F124 CD 20 03 02 	call	_Mov9ToOP1
  438 D1:F128 3E 15 -  -  	ld	a, AppVarObj
  439 D1:F12A 32 F8 05 D0 	ld	(OP1), a
  440 D1:F12E CD 0C 05 02 _:	call	_ChkFindSym
  441 D1:F132 38 24 -  -  	jr	c, NotFound
  442 D1:F134 CD 98 1F 02 	call	_ChkInRAM
  443 D1:F138 20 0E -  -  	jr	nz, InArc
  444 D1:F13A CD 28 06 02 	call	_PushOP1
  445 D1:F13E CD 48 14 02 	call	_Arc_UnArc
  446 D1:F142 CD C4 05 02 	call	_PopOP1
  447 D1:F146 18 E6 -  -  	jr	-_
  448 D1:F148 -  -  -  -  InArc:
  449 D1:F148 EB -  -  -  	ex	de, hl
  450 D1:F149 11 09 00 00 	ld	de, 9
  451 D1:F14D 19 -  -  -  	add	hl, de
  452 D1:F14E 5E -  -  -  	ld	e, (hl)
  453 D1:F14F 19 -  -  -  	add	hl, de
  454 D1:F150 23 -  -  -  	inc	hl
  455 D1:F151 23 -  -  -  	inc	hl
  456 D1:F152 23 -  -  -  	inc	hl
  457 D1:F153 11 F1 A8 D1 	ld	de, RelocationStart - CData + UserMem
  458 D1:F157 E9 -  -  -  	jp	(hl)
  459 D1:F158 -  -  -  -  NotFound:
  460 D1:F158 CD 14 08 02 	call	_ClrScrn
  461 D1:F15C CD 28 08 02 	call	_HomeUp
  462 D1:F160 21 D6 A8 D1 	ld	hl, MissingAppVar - CData + UserMem
  463 D1:F164 CD C0 07 02 	call	_PutS
  464 D1:F168 CD F0 07 02 	call	_NewLine
  465 D1:F16C C3 C0 07 02 	jp	_PutS
  466 D1:F170 -  -  -  -  MissingAppVar:
  467 D1:F170 4E 65 65 64 	.db "Need"
  468 D1:F174 -  -  -  -  LibLoadAppVar:
  469 D1:F174 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db " LibLoad", 0
  470 D1:F17D 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -  	.db "tiny.cc/clibs", 0
  471 D1:F18B -  -  -  -  RelocationStart:
  472 D1:F18B C0 47 52 41 
              50 48 58 00 
              05 -  -  -  	.db 0C0h, "GRAPHX", 0, 5
  473 D1:F194 -  -  -  -  CData2:
Listing for file "ice.asm"
  457 D1:F194 -  -  -  -  
  458 D1:F194 -  -  -  -  stop:
  459 D1:F194 -  -  -  -  
  460 D1:F194 -  -  -  -  .echo stop-start+14
  461 D1:F194 -  -  -  -  
  462 D1:F194 -  -  -  -  .echo L1+20000
