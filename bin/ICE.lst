    1 00:0000 -  -  -  -  #include "ti84pce.inc"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\ti84pce.inc"
Listing for file "ice.asm"
    2 00:0000 -  -  -  -  #include "defines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\defines.asm"
    1 00:0000 -  -  -  -  tempToken               .equ pixelShadow+00
    2 00:0000 -  -  -  -  tempToken2              .equ pixelShadow+01
    3 00:0000 -  -  -  -  InputStartData          .equ pixelShadow+02
    4 00:0000 -  -  -  -  RandStartData           .equ pixelShadow+05
    5 00:0000 -  -  -  -  PauseStartData          .equ pixelShadow+08
    6 00:0000 -  -  -  -  MeanStartData           .equ pixelShadow+11
    7 00:0000 -  -  -  -  KeypadStartData         .equ pixelShadow+14
    8 00:0000 -  -  -  -  RootStartData           .equ pixelShadow+17
    9 00:0000 -  -  -  -  PrevProgramPtr          .equ pixelShadow+20
   10 00:0000 -  -  -  -  SetBASICVarPtr          .equ pixelShadow+23
   11 00:0000 -  -  -  -  GetBASICVarPtr          .equ pixelShadow+26
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  stack                   .equ pixelShadow+00100
   14 00:0000 -  -  -  -  output                  .equ pixelShadow+01100
   15 00:0000 -  -  -  -  programNamesStack       .equ pixelShadow+03000
   16 00:0000 -  -  -  -  labelStack              .equ pixelShadow+03000
   17 00:0000 -  -  -  -  gotoStack               .equ pixelShadow+04000
   18 00:0000 -  -  -  -  programDataOffsetStack  .equ pixelShadow+05000
   19 00:0000 -  -  -  -  tempStringsStack        .equ pixelShadow+06500
   20 00:0000 -  -  -  -  tempListsStack          .equ pixelShadow+08000
   21 00:0000 -  -  -  -  programDataData         .equ pixelShadow+16000
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  tempArg1                .equ saveSScreen+15000
   24 00:0000 -  -  -  -  tempArg2                .equ saveSScreen+16000
   25 00:0000 -  -  -  -  tempArg3                .equ saveSScreen+17000
   26 00:0000 -  -  -  -  tempArg4                .equ saveSScreen+18000
   27 00:0000 -  -  -  -  tempArg5                .equ saveSScreen+19000
   28 00:0000 -  -  -  -  tempArg6                .equ saveSScreen+20000
   29 00:0000 -  -  -  -  
   30 00:0000 -  -  -  -  startTab                .equ saveSScreen
   31 00:0000 -  -  -  -  debugStart              .equ plotSScreen+10000
   32 00:0000 -  -  -  -  
   33 00:0000 -  -  -  -  program                 .equ vRAM+(320*240)
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  fProgram1               .equ -30h
   36 00:0000 -  -  -  -  comp_with_libs          .equ 0                        ; used if compile with C libs
   37 00:0000 -  -  -  -  good_compilation        .equ 1                        ; used if compilation is succesfull
   38 00:0000 -  -  -  -  has_already_input       .equ 2                        ; only once the "Input" routine
   39 00:0000 -  -  -  -  has_already_rand        .equ 3                        ; only once the "rand" routine
   40 00:0000 -  -  -  -  has_already_pause       .equ 4                        ; only once the "Pause" routine
   41 00:0000 -  -  -  -  has_already_mean        .equ 5                        ; only once the "mean()" routine
   42 00:0000 -  -  -  -  has_already_keypad      .equ 6                        ; only once the scanning the keypad
   43 00:0000 -  -  -  -  used_code               .equ 7                        ; DefineSprite( must be in front of all the code
   44 00:0000 -  -  -  -  
   45 00:0000 -  -  -  -  fProgram2               .equ -31h
   46 00:0000 -  -  -  -  has_already_root        .equ 0                        ; only once the "Sqrt(" routine
   47 00:0000 -  -  -  -  has_already_setvar      .equ 1                        ; only once the "SetBASICVar(" routine
   48 00:0000 -  -  -  -  has_already_getvar      .equ 2                        ; only once the "GetBASICVar(" routine
   49 00:0000 -  -  -  -  has_already_debug       .equ 3                        ; only once the routine to insert Lbl/Goto in the debug section
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  fExpression1            .equ -40h
   52 00:0000 -  -  -  -  prev_is_number          .equ 0                        ; used if a number consists of more digits
   53 00:0000 -  -  -  -  chain_operators         .equ 1                        ; used if the calculation is needed for another calculation
   54 00:0000 -  -  -  -  last_token_is_ret       .equ 2                        ; used if last token is "Return"
   55 00:0000 -  -  -  -  op_is_last_one          .equ 3                        ; used if the operator is the last of that line
   56 00:0000 -  -  -  -  output_is_number        .equ 4                        ; used if the calculation is only a single number, loop-statements can be 
   57 00:0000 -  -  -  -  ans_set_z_flag          .equ 5                        ; used if the previous calculation sets the zero flag, useful for loop/conditions
   58 00:0000 -  -  -  -  need_push               .equ 6                        ; used if Ans may not be overwritten
   59 00:0000 -  -  -  -  output_is_string        .equ 7                        ; used for strings
   60 00:0000 -  -  -  -  
   61 00:0000 -  -  -  -  fExpression2            .equ -41h
   62 00:0000 -  -  -  -  use_mean_routine        .equ 0                        ; used if the function is mean()
   63 00:0000 -  -  -  -  last_token_was_not      .equ 1                        ; used if the last token is "not(", which can be optimized at If/Repeat/While
   64 00:0000 -  -  -  -  
   65 00:0000 -  -  -  -  fExpression3            .equ -42h
   66 00:0000 -  -  -  -  triggered_a_comma       .equ 0                        ; used if a comma is entered outside parens, used by functions
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  fFunction1              .equ -50h
   69 00:0000 -  -  -  -  arg1_is_small           .equ 4                        ; used in C functions
   70 00:0000 -  -  -  -  function_implemented    .equ 4                        ; used if C function is implemented
   71 00:0000 -  -  -  -  arg2_is_small           .equ 3                        ; used in C functions
   72 00:0000 -  -  -  -  arg3_is_small           .equ 2                        ; used in C functions
   73 00:0000 -  -  -  -  arg4_is_small           .equ 1                        ; used in C functions
   74 00:0000 -  -  -  -  arg5_is_small           .equ 0                        ; used in C functions
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  fFunction2              .equ -51h
   77 00:0000 -  -  -  -  negative_for_step       .equ 0                        ; used for the step in a For loop
   78 00:0000 -  -  -  -  for_step_is_number      .equ 1                        ; used for the step in a For loop
   79 00:0000 -  -  -  -  end_point_is_number     .equ 2                        ; used for the end point in a For loop
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  fAlways1                .equ -52h
   82 00:0000 -  -  -  -  displayed_det           .equ 0                        ; used if the text of a det( function is displayed in the statusbar
   83 00:0000 -  -  -  -  modified_iy             .equ 1                        ; used if iy is modified by a C routine
   84 00:0000 -  -  -  -  debug_on                .equ 2                        ; used if the user wants to debug
   85 00:0000 -  -  -  -  
   86 00:0000 -  -  -  -  typeNumber              .equ 0
   87 00:0000 -  -  -  -  typeVariable            .equ 1
   88 00:0000 -  -  -  -  typeChainPush           .equ 2
   89 00:0000 -  -  -  -  typeChainAns            .equ 3
   90 00:0000 -  -  -  -  typeReturnValue         .equ 4                        ;    getKey, rand
   91 00:0000 -  -  -  -  typeList                .equ 5
   92 00:0000 -  -  -  -  typeOSList              .equ 6
   93 00:0000 -  -  -  -  typeString              .equ 7
   94 00:0000 -  -  -  -  typeFunction            .equ 00111111b
   95 00:0000 -  -  -  -  typeOperator            .equ 00011111b
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  ChainPush               .equ 0
   98 00:0000 -  -  -  -  ChainAns                .equ 1
   99 00:0000 -  -  -  -  ChainListPush           .equ 2
  100 00:0000 -  -  -  -  ChainListAns            .equ 3
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  OutputInBC              .equ 0
  103 00:0000 -  -  -  -  OutputInDE              .equ 1
  104 00:0000 -  -  -  -  OutputInHL              .equ 2
  105 00:0000 -  -  -  -  
  106 00:0000 -  -  -  -  OutputIsInDE            .equ 0
  107 00:0000 -  -  -  -  OutputIsInHL            .equ 1
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ;---------------------------;
  110 00:0000 -  -  -  -  ;----- User Variables ------;
  111 00:0000 -  -  -  -  ;---------------------------;
  112 00:0000 -  -  -  -  Str0                    .equ saveSScreen+15500
  113 00:0000 -  -  -  -  Str1                    .equ saveSScreen+16000
  114 00:0000 -  -  -  -  Str2                    .equ saveSScreen+16500
  115 00:0000 -  -  -  -  Str3                    .equ saveSScreen+17000
  116 00:0000 -  -  -  -  Str4                    .equ saveSScreen+17500
  117 00:0000 -  -  -  -  Str5                    .equ saveSScreen+18000
  118 00:0000 -  -  -  -  Str6                    .equ saveSScreen+18500
  119 00:0000 -  -  -  -  Str7                    .equ saveSScreen+19000
  120 00:0000 -  -  -  -  Str8                    .equ saveSScreen+19500
  121 00:0000 -  -  -  -  Str9                    .equ saveSScreen+20000
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  L1                      .equ saveSScreen
  124 00:0000 -  -  -  -  L2                      .equ cmdPixelShadow
  125 00:0000 -  -  -  -  L3                      .equ pixelShadow2
  126 00:0000 -  -  -  -  L4                      .equ plotSScreen
  127 00:0000 -  -  -  -  L5                      .equ pixelShadow
  128 00:0000 -  -  -  -  L6                      .equ L1+10000
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ; IX offsets
  131 00:0000 -  -  -  -  vA                      .equ 0
  132 00:0000 -  -  -  -  vB                      .equ 3
  133 00:0000 -  -  -  -  vC                      .equ 6
  134 00:0000 -  -  -  -  vD                      .equ 9
  135 00:0000 -  -  -  -  vE                      .equ 12
  136 00:0000 -  -  -  -  vF                      .equ 15
  137 00:0000 -  -  -  -  vG                      .equ 18
  138 00:0000 -  -  -  -  vH                      .equ 21
  139 00:0000 -  -  -  -  vI                      .equ 24
  140 00:0000 -  -  -  -  vJ                      .equ 27
  141 00:0000 -  -  -  -  vK                      .equ 30
  142 00:0000 -  -  -  -  vL                      .equ 33
  143 00:0000 -  -  -  -  vM                      .equ 36
  144 00:0000 -  -  -  -  vN                      .equ 39
  145 00:0000 -  -  -  -  vO                      .equ 42
  146 00:0000 -  -  -  -  vP                      .equ 45
  147 00:0000 -  -  -  -  vQ                      .equ 48
  148 00:0000 -  -  -  -  vR                      .equ 51
  149 00:0000 -  -  -  -  vS                      .equ 54
  150 00:0000 -  -  -  -  vT                      .equ 57
  151 00:0000 -  -  -  -  vU                      .equ 60
  152 00:0000 -  -  -  -  vV                      .equ 63
  153 00:0000 -  -  -  -  vW                      .equ 66
  154 00:0000 -  -  -  -  vX                      .equ 69
  155 00:0000 -  -  -  -  vY                      .equ 72
  156 00:0000 -  -  -  -  vZ                      .equ 75
  157 00:0000 -  -  -  -  vtheta                  .equ 78
  158 00:0000 -  -  -  -  
  159 00:0000 -  -  -  -  rand1                   .equ 81
  160 00:0000 -  -  -  -  rand2                   .equ 84
  161 00:0000 -  -  -  -  rand3                   .equ 87
  162 00:0000 -  -  -  -  rand4                   .equ 90
  163 00:0000 -  -  -  -  
  164 00:0000 -  -  -  -  debugPtr                .equ 93
Listing for file "ice.asm"
    3 00:0000 -  -  -  -  #include "app.inc"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\app.inc"
    1 00:0000 -  -  -  -  #ifndef APP_INC
    2 00:0000 -  -  -  -  #define APP_INC
    3 00:0000 -  -  -  -  
    4 00:0000 -  -  -  -  ; Created by Matt "MateoConLechuga" Waltz
    5 00:0000 -  -  -  -  ; Performs things to create applications for the CE
    6 00:0000 -  -  -  -  
    7 00:0000 -  -  -  -  #macro app_create()
    8 00:0000             	call	_app_create
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #macro app_start(myappname, description)
   12 00:0000             	app_start(myappname, description, 0, 1)
   13 00:0000             #endmacro
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  #macro app_start(myappname, description, version)
   16 00:0000             	app_start(myappname, description, version, 1)
   17 00:0000             #endmacro
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro app_start(myappname, description, version, use_splash)
   20 00:0000             #ifdef __app_start
   21 00:0000             	.error "App already defined."
   22 00:0000             #endif
   23 00:0000             #define __use_splash eval(use_splash)
   24 00:0000             #define __app_version eval(version)
   25 00:0000             #define __app_start eval($)
   26 00:0000             	.db	$81, $0F, $00
   27 00:0000             #define addr eval(__sig-$)
   28 00:0000             	.dl	(addr>>16)|(addr&$00FF00)|(addr<<16)
   29 00:0000             	.db	$81, $12, $13, $0F
   30 00:0000             	.db	$81, $2D, $0B, "5.0.0.0089", $00
   31 00:0000             	.db	$81, $32, $59, $00
   32 00:0000             	.db	$81, namelen, myappname
   33 00:0000             	.db	$81, $A1, $07
   34 00:0000             	.db	$03, $26, $09, __app_version
   35 00:0000             	.db	$21, $BB, $6E, $DC
   36 00:0000             #define freespace eval(247-($-__app_start))
   37 00:0000             	.db	$00, $0D, freespace
   38 00:0000             	.block	freespace
   39 00:0000             	.db	$81, $7F, $00
   40 00:0000             #define addr eval(__sig-$)
   41 00:0000             	.dl	(addr>>16)|(addr&$00FF00)|(addr<<16)
   42 00:0000             __ahs:
   43 00:0000             	.db	"eZ8"
   44 00:0000             _appname:
   45 00:0000             	.db	myappname
   46 00:0000             #define appnamelen eval($-_appname)
   47 00:0000             #define namelen eval(appnamelen + $40)
   48 00:0000             #if appnamelen <= 8
   49 00:0000             	.block 8-appnamelen
   50 00:0000             #else
   51 00:0000             	.error "App name is too long."
   52 00:0000             #endif
   53 00:0000             	.db	0
   54 00:0000                     .db	1
   55 00:0000             	.db	0, 0
   56 00:0000             	.dl	0
   57 00:0000             	.dl	___app_code_start-__ahs
   58 00:0000             	.dl	__data-__ahs
   59 00:0000             	.dl	__data_end-__data
   60 00:0000             	.dl	___app_code_start-__ahs
   61 00:0000             	.dl	0, 0
   62 00:0000             	.dl	___app_information_string-__ahs
   63 00:0000             	.dl	0, 0, 0, 0
   64 00:0000             ___app_information_string:
   65 00:0000             	.db	description,0
   66 00:0000             ___app_code_start:
   67 00:0000             	ld	hl,___relocate_end-relocated
   68 00:0000             	push	hl
   69 00:0000             	call	$02051C
   70 00:0000             	pop	hl
   71 00:0000             	jp	c,$020768
   72 00:0000             	ld	de,$D1A881
   73 00:0000             	push	hl
   74 00:0000             	ld	($D0118C),hl
   75 00:0000             	call	$020514
   76 00:0000             	ld	a,$E1
   77 00:0000             	ld	($E30800),a
   78 00:0000             	ld	a,$E9
   79 00:0000             	ld	($E30801),a
   80 00:0000             	call	$E30800
   81 00:0000             	ld	bc,12
   82 00:0000             	add	hl,bc
   83 00:0000             	pop	bc
   84 00:0000             	ldir
   85 00:0000             	jp	$D1A881
   86 00:0000             #define __old_app_location eval($)
   87 00:0000             	.org $D1A881
   88 00:0000             #define __g_app_location eval($D1A881)
   89 00:0000             relocated:
   90 00:0000             	ld	hl,___END
   91 00:0000             	push	hl
   92 00:0000             #endmacro
   93 00:0000 -  -  -  -  
   94 00:0000 -  -  -  -  #macro app_create_code()
   95 00:0000             #define _app_create eval($)
   96 00:0000             	ld	hl,_appname
   97 00:0000             	push	hl
   98 00:0000             	call	$021100
   99 00:0000             	pop	bc
  100 00:0000             	jr	z,+_
  101 00:0000             	call	$02126C
  102 00:0000             _:	ld	hl,$3B0000             ; applications start here
  103 00:0000             _:	push	hl
  104 00:0000             	call	$022044                ; locates start of next application header
  105 00:0000             	pop	de
  106 00:0000             	jr	z,+_
  107 00:0000             	jr	-_
  108 00:0000             _:	ex	de,hl
  109 00:0000             	dec	hl
  110 00:0000             	dec	hl
  111 00:0000             	dec	hl
  112 00:0000             	push	hl
  113 00:0000             	di
  114 00:0000             	ld	a,$d1
  115 00:0000             	ld	mb,a
  116 00:0000             	ld.sis	sp,$987e
  117 00:0000             	call.is	+_ & $ffff
  118 00:0000             	pop	hl
  119 00:0000             	ld	de,(__app_end)
  120 00:0000             	or	a,a
  121 00:0000             	sbc	hl,de
  122 00:0000             	ex	de,hl
  123 00:0000             	ld	hl,__app_start
  124 00:0000             	ld	bc,app_real_end-__app_start
  125 00:0000             	call	$02E0
  126 00:0000             	call.is	++_ & $ffff
  127 00:0000             	ld	a,$d0
  128 00:0000             	ld	mb,a
  129 00:0000             	ret
  130 00:0000             
  131 00:0000             	.assume	adl = 0
  132 00:0000             	
  133 00:0000             _:	ld	a,$8C
  134 00:0000             	out0	($24),a
  135 00:0000             	ld	c,4
  136 00:0000             	in0	a,(6)
  137 00:0000             	or	c
  138 00:0000             	out0	(6),a
  139 00:0000             	out0	($28),c
  140 00:0000             	ret.l
  141 00:0000             _:	xor	a,a
  142 00:0000             	out0	($28),a
  143 00:0000             	in0	a,(6)
  144 00:0000             	res	2,a
  145 00:0000             	out0	(6),a
  146 00:0000             	ld	a,$88
  147 00:0000             	out0	($24),a
  148 00:0000             	ret.l
  149 00:0000             	
  150 00:0000             	.assume adl = 1
  151 00:0000             #endmacro
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro app_data()
  154 00:0000             #ifndef __app_start
  155 00:0000             	.error "App not defined."
  156 00:0000             #endif
  157 00:0000             #define ___END eval($)
  158 00:0000             	ld	de,$E30800
  159 00:0000             	ld	bc,___ee-___ss
  160 00:0000             	ld	hl,$+10
  161 00:0000             	ldir
  162 00:0000             	jp	$E30800
  163 00:0000             ___ss:
  164 00:0000             	ld	de,($D0118C)
  165 00:0000             	or	a,a
  166 00:0000             	sbc	hl,hl
  167 00:0000             	ld	($D0118C),hl
  168 00:0000             	ld	hl,$D1A881
  169 00:0000             	call	$020590
  170 00:0000             	jp	$020160
  171 00:0000             ___ee:
  172 00:0000             ___relocate_end:
  173 00:0000             	.org $-__g_app_location+__old_app_location
  174 00:0000             #undefine __g_app_location
  175 00:0000             #undefine __old_app_location
  176 00:0000             #define __data eval($)
  177 00:0000             	.org	$D1787C
  178 00:0000             #endmacro
  179 00:0000 -  -  -  -  
  180 00:0000 -  -  -  -  #macro app_end()
  181 00:0000             	.org	$-$D1787C+__data
  182 00:0000             #define __data_end eval($)
  183 00:0000             __sig:
  184 00:0000             	.db	$02,$3e,$01,$00
  185 00:0000             	.block	256
  186 00:0000             __app_end:
  187 00:0000             	.dl	__app_end-__app_start
  188 00:0000             #define app_real_end eval($)
  189 00:0000             	app_create_code()
  190 00:0000             #endmacro
  191 00:0000 -  -  -  -  
  192 00:0000 -  -  -  -  #endif
Listing for file "ice.asm"
    4 00:0000 -  -  -  -  
    5 00:0000 EF 7B -  -  .db tExtTok, tAsm84CeCmp
    6 00:0002 -  -  -  -  .org UserMem
    7 D1:A881 -  -  -  -  
    8 D1:A881 -  -  -  -  start:
    9 D1:A881 -  -  -  -      ;app_create()
   10 D1:A881 -  -  -  -      ;ret
   11 D1:A881 -  -  -  -      
   12 D1:A881 -  -  -  -  ;app_start("ICE", "(c) 2017")
   13 D1:A881 DD E5 -  -  	push	ix
   14 D1:A883 ED 73 43 B0 
              D1 -  -  -  	ld	(backupSP), sp
   15 D1:A888 2A 17 23 D0 	ld	hl, (begPC)
   16 D1:A88C 22 5D B0 D1 	ld	(backupBegPC), hl
   17 D1:A890 2A 1A 23 D0 	ld	hl, (curPC)
   18 D1:A894 22 65 B0 D1 	ld	(backupCurPC), hl
   19 D1:A898 2A 1D 23 D0 	ld	hl, (endPC)
   20 D1:A89C 22 6D B0 D1 	ld	(backupEndPC), hl
   21 D1:A8A0 CD 48 08 02 	call	_RunIndicOff
   22 D1:A8A4 CD BC BC D1 	call	InstallHooks
   23 D1:A8A8 -  -  -  -  GUI:
   24 D1:A8A8 3E 27 -  -  	ld	a, lcdBpp8
   25 D1:A8AA 32 18 00 E3 	ld	(mpLcdCtrl), a
   26 D1:A8AE 21 00 02 E3 	ld	hl, mpLcdPalette
   27 D1:A8B2 06 00 -  -  	ld	b, 0
   28 D1:A8B4 50 -  -  -  _:	ld	d, b
   29 D1:A8B5 78 -  -  -  	ld	a, b
   30 D1:A8B6 E6 C0 -  -  	and	011000000b
   31 D1:A8B8 CB 3A -  -  	srl	d
   32 D1:A8BA 1F -  -  -  	rra
   33 D1:A8BB 5F -  -  -  	ld	e, a
   34 D1:A8BC 3E 1F -  -  	ld	a, 000011111b
   35 D1:A8BE A0 -  -  -  	and	a, b
   36 D1:A8BF B3 -  -  -  	or	a, e
   37 D1:A8C0 77 -  -  -  	ld	(hl), a
   38 D1:A8C1 23 -  -  -  	inc	hl
   39 D1:A8C2 72 -  -  -  	ld	(hl), d
   40 D1:A8C3 23 -  -  -  	inc	hl
   41 D1:A8C4 04 -  -  -  	inc	b
   42 D1:A8C5 20 ED -  -  	jr	nz, -_
   43 D1:A8C7 21 00 00 D4 	ld	hl, vRAM
   44 D1:A8CB 36 BD -  -  	ld	(hl), 189
   45 D1:A8CD E5 -  -  -  	push	hl
   46 D1:A8CE D1 -  -  -  	pop	de
   47 D1:A8CF 13 -  -  -  	inc	de
   48 D1:A8D0 01 80 0C 00 	ld	bc, 320*10
   49 D1:A8D4 ED B0 -  -  	ldir
   50 D1:A8D6 36 00 -  -  	ld	(hl), 0
   51 D1:A8D8 01 40 01 00 	ld	bc, 320
   52 D1:A8DC ED B0 -  -  	ldir
   53 D1:A8DE 36 FF -  -  	ld	(hl), 255
   54 D1:A8E0 01 3F 1E 01 	ld	bc, 320*229-1
   55 D1:A8E4 ED B0 -  -  	ldir
   56 D1:A8E6 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
   57 D1:A8EA FD CB AE 8E 	res	modified_iy, (iy+fAlways1)
   58 D1:A8EE FD CB AE 96 	res	debug_on, (iy+fAlways1);
   59 D1:A8F2 21 11 EF D1 	ld	hl, ICEName
   60 D1:A8F6 3E 01 -  -  	ld	a, 1
   61 D1:A8F8 32 58 B8 D1 	ld	(TextYPos_ASM), a
   62 D1:A8FC C6 14 -  -  	add	a, 20
   63 D1:A8FE 32 27 B8 D1 	ld	(TextXPos_ASM), a
   64 D1:A902 CD BD B0 D1 	call	PrintString
   65 D1:A906 21 58 B8 D1 	ld	hl, TextYPos_ASM
   66 D1:A90A 34 -  -  -  	inc	(hl)
   67 D1:A90B 34 -  -  -  	inc	(hl)
   68 D1:A90C 2A 9D 25 D0 	ld	hl, (progPtr)
   69 D1:A910 -  -  -  -  FindPrograms:
   70 D1:A910 CD 56 BC D1 	call	FindNextGoodVar
   71 D1:A914 20 34 -  -  	jr	nz, StopFindingPrograms
   72 D1:A916 E5 -  -  -  	push	hl
   73 D1:A917 3A 58 B8 D1 	ld	a, (TextYPos_ASM)
   74 D1:A91B C6 0A -  -  	add	a, 10
   75 D1:A91D 38 28 -  -  	jr	c, +_
   76 D1:A91F 32 58 B8 D1 	ld	(TextYPos_ASM), a
   77 D1:A923 21 0A 00 00 	ld	hl, 10
   78 D1:A927 22 27 B8 D1 	ld	(TextXPos_ASM), hl
   79 D1:A92B 21 D0 EC D1 	ld	hl, AmountOfPrograms
   80 D1:A92F 34 -  -  -  	inc	(hl)
   81 D1:A930 CD 98 1F 02 	call	_ChkInRAM
   82 D1:A934 3E 23 -  -  	ld	a, '#'
   83 D1:A936 DC 25 B8 D1 	call	c, _PrintChar_ASM
   84 D1:A93A 2A B8 EC D1 	ld	hl, (ProgramNamesPtr)
   85 D1:A93E 11 F8 FF FF 	ld	de, -8
   86 D1:A942 19 -  -  -  	add	hl, de
   87 D1:A943 CD BD B0 D1 	call	PrintString
   88 D1:A947 E1 -  -  -  _:	pop	hl
   89 D1:A948 18 C6 -  -  	jr	FindPrograms
   90 D1:A94A -  -  -  -  StopFindingPrograms:
   91 D1:A94A 3E 0D -  -  	ld	a, 13
   92 D1:A94C 32 58 B8 D1 	ld	(TextYPos_ASM), a
   93 D1:A950 21 01 00 00 	ld	hl, 1
   94 D1:A954 22 27 B8 D1 	ld	(TextXPos_ASM), hl
   95 D1:A958 3A D0 EC D1 	ld	a, (AmountOfPrograms)
   96 D1:A95C B7 -  -  -  	or	a, a
   97 D1:A95D CA 57 AF D1 	jp	z, NoProgramsError
   98 D1:A961 32 D2 A9 D1 	ld	(AmountPrograms), a
   99 D1:A965 2E 01 -  -  	ld	l, 1
  100 D1:A967 -  -  -  -  PrintCursor:
  101 D1:A967 5D -  -  -  	ld	e, l
  102 D1:A968 16 0A -  -  	ld	d, 10
  103 D1:A96A ED 5C -  -  	mlt	de
  104 D1:A96C 1C -  -  -  	inc	e
  105 D1:A96D 1C -  -  -  	inc	e
  106 D1:A96E 1C -  -  -  	inc	e
  107 D1:A96F 7B -  -  -  	ld	a, e
  108 D1:A970 32 58 B8 D1 	ld	(TextYPos_ASM), a
  109 D1:A974 AF -  -  -  	xor	a, a
  110 D1:A975 32 7D B8 D1 	ld	(color), a
  111 D1:A979 3C -  -  -  	inc	a
  112 D1:A97A 32 27 B8 D1 	ld	(TextXPos_ASM), a
  113 D1:A97E 3E 3E -  -  	ld	a, '>'
  114 D1:A980 CD 25 B8 D1 	call	_PrintChar_ASM
  115 D1:A984 3E FF -  -  	ld	a, 255
  116 D1:A986 32 7D B8 D1 	ld	(color), a
  117 D1:A98A 3E 01 -  -  	ld	a, 1
  118 D1:A98C 32 27 B8 D1 	ld	(TextXPos_ASM), a
  119 D1:A990 E5 -  -  -  _:	push	hl
  120 D1:A991 CD 4C 01 02 	call	_GetCSC
  121 D1:A995 E1 -  -  -  	pop	hl
  122 D1:A996 B7 -  -  -  	or	a, a
  123 D1:A997 28 F7 -  -  	jr	z, -_
  124 D1:A999 FE 04 -  -  	cp	a, skUp
  125 D1:A99B 28 26 -  -  	jr	z, PressedUp
  126 D1:A99D FE 01 -  -  	cp	a, skDown
  127 D1:A99F 28 2F -  -  	jr	z, PressedDown
  128 D1:A9A1 FE 0F -  -  	cp	a, skClear
  129 D1:A9A3 CA 4C B0 D1 	jp	z, StopProgram
  130 D1:A9A7 FE 09 -  -  	cp	a, skEnter
  131 D1:A9A9 28 08 -  -  	jr	z, PressedEnter
  132 D1:A9AB FE 0A -  -  	cp	a, skAdd
  133 D1:A9AD 20 E1 -  -  	jr	nz, -_
  134 D1:A9AF -  -  -  -  PressedPlus:
  135 D1:A9AF FD CB AE D6 	set	debug_on, (iy+fAlways1)
  136 D1:A9B3 -  -  -  -  PressedEnter:
  137 D1:A9B3 2D -  -  -  	dec	l
  138 D1:A9B4 26 08 -  -  	ld	h, 8
  139 D1:A9B6 ED 6C -  -  	mlt	hl
  140 D1:A9B8 11 AD 3D D0 	ld	de, ProgramNamesStack-1
  141 D1:A9BC 19 -  -  -  	add	hl, de
  142 D1:A9BD CD 20 03 02 	call	_Mov9ToOP1
  143 D1:A9C1 18 1B -  -  	jr	StartParsing
  144 D1:A9C3 -  -  -  -  PressedUp:
  145 D1:A9C3 7D -  -  -  	ld	a, l
  146 D1:A9C4 3D -  -  -  	dec	a
  147 D1:A9C5 28 C9 -  -  	jr	z, -_
  148 D1:A9C7 2D -  -  -  	dec	l
  149 D1:A9C8 3E 17 -  -  	ld	a, 23
  150 D1:A9CA CD 25 B8 D1 	call	_PrintChar_ASM
  151 D1:A9CE 18 97 -  -  	jr	PrintCursor
  152 D1:A9D0 -  -  -  -  PressedDown:
  153 D1:A9D0 7D -  -  -  	ld	a, l
  154 D1:A9D1 -  -  -  -  AmountPrograms = $+1
  155 D1:A9D1 FE 00 -  -  	cp	a, 0
  156 D1:A9D3 28 BB -  -  	jr	z, -_
  157 D1:A9D5 2C -  -  -  	inc	l
  158 D1:A9D6 3E 17 -  -  	ld	a, 23
  159 D1:A9D8 CD 25 B8 D1 	call	_PrintChar_ASM
  160 D1:A9DC 18 89 -  -  	jr	PrintCursor
  161 D1:A9DE -  -  -  -  StartParsing:
  162 D1:A9DE 3E 05 -  -  	ld	a, ProgObj
  163 D1:A9E0 32 F8 05 D0 	ld	(OP1), a
  164 D1:A9E4 CD 0C 05 02 _:	call	_ChkFindSym
  165 D1:A9E8 30 07 -  -  	jr	nc, +_
  166 D1:A9EA 21 F8 05 D0 	ld	hl, OP1
  167 D1:A9EE 34 -  -  -  	inc	(hl)
  168 D1:A9EF 18 F3 -  -  	jr	-_
  169 D1:A9F1 CD 98 1F 02 _:	call	_ChkInRAM
  170 D1:A9F5 30 0A -  -  	jr	nc, +_
  171 D1:A9F7 EB -  -  -  	ex	de, hl
  172 D1:A9F8 11 09 00 00 	ld	de, 9
  173 D1:A9FC 19 -  -  -  	add	hl, de
  174 D1:A9FD 5E -  -  -  	ld	e, (hl)
  175 D1:A9FE 19 -  -  -  	add	hl, de
  176 D1:A9FF 23 -  -  -  	inc	hl
  177 D1:AA00 EB -  -  -  	ex	de, hl
  178 D1:AA01 01 00 00 00 _:	ld	bc, 0
  179 D1:AA05 EB -  -  -  	ex	de, hl
  180 D1:AA06 4E -  -  -  	ld	c, (hl)                                                                ;    BC = program length
  181 D1:AA07 23 -  -  -  	inc	hl
  182 D1:AA08 46 -  -  -  	ld	b, (hl)
  183 D1:AA09 23 -  -  -  	inc	hl
  184 D1:AA0A 22 1A 23 D0 	ld	(curPC), hl
  185 D1:AA0E 22 17 23 D0 	ld	(begPC), hl
  186 D1:AA12 09 -  -  -  	add	hl, bc
  187 D1:AA13 2B -  -  -  	dec	hl
  188 D1:AA14 22 1D 23 D0 	ld	(endPC), hl
  189 D1:AA18 CD A8 B0 D1 	call	PrintCompilingProgram
  190 D1:AA1C FD 36 D0 01 	ld	(iy+fProgram1), 1
  191 D1:AA20 FD 36 CF 00 	ld	(iy+fProgram2), 0
  192 D1:AA24 21 30 F1 D1 	ld	hl, CData
  193 D1:AA28 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  194 D1:AA2D 01 79 00 00 	ld	bc, CData2 - CData
  195 D1:AA31 ED B0 -  -  	ldir
  196 D1:AA33 ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  197 D1:AA38 CD C7 B0 D1 	call	PreScanPrograms
  198 D1:AA3C 3E CD -  -  	ld	a, 0CDh
  199 D1:AA3E 21 48 08 02 	ld	hl, _RunIndicOff
  200 D1:AA42 CD 5A AC D1 	call	InsertAHL                                                            ;    call _RunIndicOff
  201 D1:AA46 2A B5 EC D1 	ld	hl, (programPtr)
  202 D1:AA4A 11 8E 7C FC 	ld	de, 4+4+5+UserMem-program
  203 D1:AA4E 19 -  -  -  	add	hl, de
  204 D1:AA4F CD 5A AC D1 	call	InsertAHL                                                            ;    call *
  205 D1:AA53 01 FD 21 80 	ld	bc, 08021FDh
  206 D1:AA57 11 00 D0 C3 	ld	de, 0C3D000h
  207 D1:AA5B 21 3C 1A 02 	ld	hl, _DrawStatusBar
  208 D1:AA5F CD 9C AC D1 	call	InsertBCDEHL                                                        ;    ld iy, flags \ jp _DrawStatusBar
  209 D1:AA63 2A B5 EC D1 	ld	hl, (programPtr)
  210 D1:AA67 22 0A 32 D0 	ld	(PrevProgramPtr), hl
  211 D1:AA6B 3A D4 EC D1 	ld	a, (amountOfCRoutines)
  212 D1:AA6F B7 -  -  -  	or	a, a
  213 D1:AA70 20 0C -  -  	jr	nz, CompileProgramFull
  214 D1:AA72 FD CB D0 86 	res	comp_with_libs, (iy+fProgram1)
  215 D1:AA76 21 05 2C D5 	ld	hl, program+5
  216 D1:AA7A 22 B5 EC D1 	ld	(programPtr), hl
  217 D1:AA7E -  -  -  -  CompileProgramFull:
  218 D1:AA7E 3A DB EC D1 	ld	a, (AmountOfSubPrograms)
  219 D1:AA82 B7 -  -  -  	or	a, a
  220 D1:AA83 20 22 -  -  	jr	nz, SkipGetProgramName
  221 D1:AA85 21 DE EA D1 	ld	hl, varname
  222 D1:AA89 CD 06 B2 D1 	call	GetProgramName
  223 D1:AA8D 21 F9 05 D0 	ld	hl, OP1+1
  224 D1:AA91 11 DF EA D1 	ld	de, varname+1
  225 D1:AA95 06 08 -  -  	ld	b, 8
  226 D1:AA97 -  -  -  -  CheckNames:
  227 D1:AA97 1A -  -  -  	ld	a, (de)
  228 D1:AA98 B7 -  -  -  	or	a, a
  229 D1:AA99 28 07 -  -  	jr	z, CheckNamesSameLength
  230 D1:AA9B BE -  -  -  	cp	a, (hl)
  231 D1:AA9C 20 09 -  -  	jr	nz, GoodProgramName
  232 D1:AA9E 23 -  -  -  	inc	hl
  233 D1:AA9F 13 -  -  -  	inc	de
  234 D1:AAA0 10 F5 -  -  	djnz	CheckNames
  235 D1:AAA2 -  -  -  -  CheckNamesSameLength:
  236 D1:AAA2 BE -  -  -  	cp	a, (hl)
  237 D1:AAA3 CA 79 AF D1 	jp	z, SameNameError
  238 D1:AAA7 -  -  -  -  GoodProgramName:
  239 D1:AAA7 -  -  -  -  SkipGetProgramName:
  240 D1:AAA7 -  -  -  -  ParseProgramUntilEnd:
  241 D1:AAA7 -  -  -  -  CompileLoop:
  242 D1:AAA7 AF -  -  -  	xor	a, a
  243 D1:AAA8 FD 77 C0 -  	ld	(iy+fExpression1), a
  244 D1:AAAB FD 77 BF -  	ld	(iy+fExpression2), a
  245 D1:AAAE FD 77 BE -  	ld	(iy+fExpression3), a
  246 D1:AAB1 FD 77 B0 -  	ld	(iy+fFunction1), a
  247 D1:AAB4 FD 77 AF -  	ld	(iy+fFunction2), a
  248 D1:AAB7 32 D1 EC D1 	ld	(openedParensE), a
  249 D1:AABB 32 D2 EC D1 	ld	(openedParensF), a
  250 D1:AABF CD 28 10 02 	call	_IncFetch
  251 D1:AAC3 32 F6 31 D0 	ld	(tempToken), a
  252 D1:AAC7 38 58 -  -  	jr	c, FindGotos
  253 D1:AAC9 FE D4 -  -  	cp	a, tEnd
  254 D1:AACB 20 10 -  -  	jr	nz, ++_
  255 D1:AACD 21 D5 EC D1 _:	ld	hl, amountOfEnds
  256 D1:AAD1 7E -  -  -  	ld	a, (hl)
  257 D1:AAD2 35 -  -  -  	dec	(hl)
  258 D1:AAD3 B7 -  -  -  	or	a, a
  259 D1:AAD4 CA 97 AF D1 	jp	z, EndError
  260 D1:AAD8 3A F6 31 D0 	ld	a, (tempToken)
  261 D1:AADC C9 -  -  -  	ret
  262 D1:AADD FE D0 -  -  _:	cp	a, tElse
  263 D1:AADF 28 EC -  -  	jr	z, --_
  264 D1:AAE1 CD 4F B2 D1 	call	ParseLine
  265 D1:AAE5 2A 1A 23 D0 	ld	hl, (curPC)
  266 D1:AAE9 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  267 D1:AAEE B7 -  -  -  	or	a, a
  268 D1:AAEF ED 52 -  -  	sbc	hl, de
  269 D1:AAF1 01 40 01 00 	ld	bc, 320
  270 D1:AAF5 CD 54 01 00 	call	__imulu
  271 D1:AAF9 E5 -  -  -  	push	hl
  272 D1:AAFA 2A 1D 23 D0 	ld	hl, (endPC)
  273 D1:AAFE B7 -  -  -  	or	a, a
  274 D1:AAFF ED 52 -  -  	sbc	hl, de
  275 D1:AB01 23 -  -  -  	inc	hl
  276 D1:AB02 E5 -  -  -  	push	hl
  277 D1:AB03 C1 -  -  -  	pop	bc
  278 D1:AB04 E1 -  -  -  	pop	hl
  279 D1:AB05 CD 40 01 00 	call	__idivu
  280 D1:AB09 E5 -  -  -  	push	hl
  281 D1:AB0A C1 -  -  -  	pop	bc
  282 D1:AB0B 78 -  -  -  	ld	a, b
  283 D1:AB0C B1 -  -  -  	or	a, c
  284 D1:AB0D 28 10 -  -  	jr	z, +_
  285 D1:AB0F 21 00 13 D5 	ld	hl, vRAM+(320*220)
  286 D1:AB13 36 00 -  -  	ld	(hl), 0
  287 D1:AB15 E5 -  -  -  	push	hl
  288 D1:AB16 D1 -  -  -  	pop	de
  289 D1:AB17 13 -  -  -  	inc	de
  290 D1:AB18 0B -  -  -  	dec	bc
  291 D1:AB19 78 -  -  -  	ld	a, b
  292 D1:AB1A B1 -  -  -  	or	a, c
  293 D1:AB1B 28 8A -  -  	jr	z, CompileLoop
  294 D1:AB1D ED B0 -  -  	ldir
  295 D1:AB1F 18 86 -  -  _:	jr	CompileLoop
  296 D1:AB21 -  -  -  -  FindGotos:
  297 D1:AB21 21 D5 EC D1 	ld	hl, amountOfEnds
  298 D1:AB25 7E -  -  -  	ld	a, (hl)
  299 D1:AB26 B7 -  -  -  	or	a, a
  300 D1:AB27 28 02 -  -  	jr	z, +_
  301 D1:AB29 35 -  -  -  	dec	(hl)
  302 D1:AB2A C9 -  -  -  	ret
  303 D1:AB2B 21 DB EC D1 _:	ld	hl, AmountOfSubPrograms
  304 D1:AB2F 7E -  -  -  	ld	a, (hl)
  305 D1:AB30 35 -  -  -  	dec	(hl)
  306 D1:AB31 B7 -  -  -  	or	a, a
  307 D1:AB32 C0 -  -  -  	ret	nz
  308 D1:AB33 -  -  -  -  FindGotosLoop:
  309 D1:AB33 2A BE EC D1 	ld	hl, (gotoPtr)
  310 D1:AB37 11 96 41 D0 	ld	de, gotoStack
  311 D1:AB3B B7 -  -  -  	or	a, a
  312 D1:AB3C ED 52 -  -  	sbc	hl, de
  313 D1:AB3E 28 4F -  -  	jr	z, AddDataToProgramData                                                ;    have we finished all the Goto's?
  314 D1:AB40 19 -  -  -  	add	hl, de
  315 D1:AB41 2B -  -  -  	dec	hl
  316 D1:AB42 2B -  -  -  	dec	hl
  317 D1:AB43 2B -  -  -  	dec	hl
  318 D1:AB44 E5 -  -  -  	push	hl
  319 D1:AB45 ED 27 -  -  	ld	hl, (hl)
  320 D1:AB47 EB -  -  -  	ex	de, hl                                                            ;    de = pointer to goto data
  321 D1:AB48 2A BB EC D1 	ld	hl, (labelPtr)
  322 D1:AB4C -  -  -  -  FindLabels:
  323 D1:AB4C 01 AE 3D D0 	ld	bc, labelStack
  324 D1:AB50 B7 -  -  -  	or	a, a
  325 D1:AB51 ED 42 -  -  	sbc	hl, bc
  326 D1:AB53 CA A3 AF D1 	jp	z, LabelError                ;    have we finished all the Lbl's?
  327 D1:AB57 09 -  -  -  	add	hl, bc
  328 D1:AB58 2B -  -  -  	dec	hl
  329 D1:AB59 2B -  -  -  	dec	hl
  330 D1:AB5A 2B -  -  -  	dec	hl                                                                ;    hl = pointer to label
  331 D1:AB5B -  -  -  -  FindLabel:
  332 D1:AB5B E5 -  -  -  	push	hl
  333 D1:AB5C D5 -  -  -  	push	de
  334 D1:AB5D ED 27 -  -  	ld	hl, (hl)                                                    ;    hl = pointer to label data
  335 D1:AB5F CD D4 AE D1 	call	CompareStrings        ;    is it the right label?
  336 D1:AB63 D1 -  -  -  	pop	de
  337 D1:AB64 E1 -  -  -  	pop	hl
  338 D1:AB65 20 22 -  -  	jr	nz, LabelNotRightOne
  339 D1:AB67 -  -  -  -  RightLabel:
  340 D1:AB67 2B -  -  -  	dec	hl
  341 D1:AB68 2B -  -  -  	dec	hl
  342 D1:AB69 2B -  -  -  	dec	hl
  343 D1:AB6A ED 27 -  -  	ld	hl, (hl)
  344 D1:AB6C 11 81 7C FC 	ld	de, UserMem-program
  345 D1:AB70 19 -  -  -  	add	hl, de
  346 D1:AB71 EB -  -  -  	ex	de, hl                                                            ;    de points to label memory
  347 D1:AB72 E1 -  -  -  	pop	hl                                                                    ;    hl = pointer to goto
  348 D1:AB73 2B -  -  -  	dec	hl
  349 D1:AB74 2B -  -  -  	dec	hl
  350 D1:AB75 2B -  -  -  	dec	hl
  351 D1:AB76 ED 27 -  -  	ld	hl, (hl)                                                                ;    hl = pointer to jump to
  352 D1:AB78 ED 1F -  -  	ld	(hl), de
  353 D1:AB7A 2A BE EC D1 	ld	hl, (gotoPtr)
  354 D1:AB7E 11 FA FF FF 	ld	de, -6
  355 D1:AB82 19 -  -  -  	add	hl, de                                                                ;    get next Goto
  356 D1:AB83 22 BE EC D1 	ld	(gotoPtr), hl
  357 D1:AB87 18 AA -  -  	jr	FindGotosLoop
  358 D1:AB89 -  -  -  -  LabelNotRightOne:
  359 D1:AB89 2B -  -  -  	dec	hl
  360 D1:AB8A 2B -  -  -  	dec	hl
  361 D1:AB8B 2B -  -  -  	dec	hl
  362 D1:AB8C 18 BE -  -  	jr	FindLabels
  363 D1:AB8E -  -  -  -  StopFindLabels:
  364 D1:AB8E E1 -  -  -  	pop	hl
  365 D1:AB8F -  -  -  -  AddDataToProgramData:
  366 D1:AB8F FD CB C0 56 	bit	last_token_is_ret, (iy+fExpression1)
  367 D1:AB93 20 06 -  -  	jr	nz, +_
  368 D1:AB95 3E C9 -  -  	ld	a, 0C9h
  369 D1:AB97 CD 26 AD D1 	call	InsertA                                                            ;    ret
  370 D1:AB9B 2A CA EC D1 _:	ld	hl, (programDataDataPtr)
  371 D1:AB9F 01 76 70 D0 	ld	bc, programDataData
  372 D1:ABA3 B7 -  -  -  	or	a, a
  373 D1:ABA4 ED 42 -  -  	sbc	hl, bc
  374 D1:ABA6 E5 -  -  -  	push	hl
  375 D1:ABA7 C1 -  -  -  	pop	bc                                                                    ;    bc = data length
  376 D1:ABA8 28 3D -  -  	jr	z, CreateProgram                                                        ;    check IF there is data
  377 D1:ABAA ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  378 D1:ABAF 21 76 70 D0 	ld	hl, programDataData
  379 D1:ABB3 B7 -  -  -  	or	a, a
  380 D1:ABB4 ED 52 -  -  	sbc	hl, de
  381 D1:ABB6 E5 -  -  -  	push	hl
  382 D1:ABB7 19 -  -  -  	add	hl, de
  383 D1:ABB8 ED B0 -  -  	ldir	;    move the data to the end of the program
  384 D1:ABBA ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  385 D1:ABBF D1 -  -  -  	pop	de
  386 D1:ABC0 2A C1 EC D1 	ld	hl, (programDataOffsetPtr)
  387 D1:ABC4 -  -  -  -  AddDataLoop:                                                                ;    update all the pointers pointing to data
  388 D1:ABC4 01 7E 45 D0 	ld	bc, programDataOffsetStack
  389 D1:ABC8 B7 -  -  -  	or	a, a
  390 D1:ABC9 ED 42 -  -  	sbc	hl, bc
  391 D1:ABCB 28 1A -  -  	jr	z, CreateProgram                                                        ;    no more pointers left
  392 D1:ABCD 09 -  -  -  	add	hl, bc
  393 D1:ABCE 2B -  -  -  	dec	hl
  394 D1:ABCF 2B -  -  -  	dec	hl
  395 D1:ABD0 2B -  -  -  	dec	hl
  396 D1:ABD1 E5 -  -  -  	push	hl
  397 D1:ABD2 ED 27 -  -  	ld	hl, (hl)                                                            ;    complicated stuff XD
  398 D1:ABD4 E5 -  -  -  	push	hl
  399 D1:ABD5 ED 27 -  -  	ld	hl, (hl)
  400 D1:ABD7 B7 -  -  -  	or	a, a
  401 D1:ABD8 ED 52 -  -  	sbc	hl, de
  402 D1:ABDA 01 81 7C FC 	ld	bc, UserMem-program
  403 D1:ABDE 09 -  -  -  	add	hl, bc
  404 D1:ABDF E5 -  -  -  	push	hl
  405 D1:ABE0 C1 -  -  -  	pop	bc
  406 D1:ABE1 E1 -  -  -  	pop	hl
  407 D1:ABE2 ED 0F -  -  	ld	(hl), bc                                                            ;    ld (XXXXXX), hl
  408 D1:ABE4 E1 -  -  -  	pop	hl
  409 D1:ABE5 18 DD -  -  	jr	AddDataLoop
  410 D1:ABE7 -  -  -  -  CreateProgram:
  411 D1:ABE7 21 DE EA D1 	ld	hl, varname
  412 D1:ABEB CD 20 03 02 	call	_Mov9ToOP1
  413 D1:ABEF CD 0C 05 02 	call	_ChkFindSym
  414 D1:ABF3 38 13 -  -  	jr	c, ++_
  415 D1:ABF5 CD 98 1F 02 	call	_ChkInRAM
  416 D1:ABF9 30 09 -  -  	jr	nc, +_
  417 D1:ABFB CD 48 14 02 	call	_Arc_Unarc
  418 D1:ABFF 01 05 00 00 	ld	bc, 5
  419 D1:AC03 09 -  -  -  	add	hl, bc
  420 D1:AC04 CD 88 05 02 _:	call	_DelVar
  421 D1:AC08 2A B5 EC D1 _:	ld	hl, (programPtr)
  422 D1:AC0C 01 00 2C D5 	ld	bc, program
  423 D1:AC10 B7 -  -  -  	or	a, a
  424 D1:AC11 ED 42 -  -  	sbc	hl, bc
  425 D1:AC13 E5 -  -  -  	push	hl
  426 D1:AC14 01 11 00 00 	ld	bc, 17
  427 D1:AC18 09 -  -  -  	add	hl, bc
  428 D1:AC19 E5 -  -  -  	push	hl
  429 D1:AC1A CD 1C 05 02 	call	_EnoughMem
  430 D1:AC1E 21 D7 EE D1 	ld	hl, NotEnoughMem
  431 D1:AC22 DA BD AF D1 	jp	c, DispFinalString
  432 D1:AC26 E1 -  -  -  	pop	hl
  433 D1:AC27 01 F1 FF FF 	ld	bc, -15
  434 D1:AC2B 09 -  -  -  	add	hl, bc
  435 D1:AC2C CD 34 13 02 	call	_CreateProtProg
  436 D1:AC30 C1 -  -  -  	pop	bc
  437 D1:AC31 13 -  -  -  	inc	de
  438 D1:AC32 13 -  -  -  	inc	de
  439 D1:AC33 21 00 2C D5 	ld	hl, program
  440 D1:AC37 EB -  -  -  	ex	de, hl
  441 D1:AC38 36 EF -  -  	ld	(hl), tExtTok                                                        ;    insert header
  442 D1:AC3A 23 -  -  -  	inc	hl
  443 D1:AC3B 36 7B -  -  	ld	(hl), tAsm84CeCmp
  444 D1:AC3D 23 -  -  -  	inc	hl
  445 D1:AC3E -  -  -  -      ;ld      (hl), 07Fh                                                           ; Cesium recognition
  446 D1:AC3E -  -  -  -      ;inc     hl
  447 D1:AC3E EB -  -  -  	ex	de, hl
  448 D1:AC3F ED B0 -  -  	ldir	;    insert the program data
  449 D1:AC41 21 11 ED D1 	ld	hl, GoodCompileMessage
  450 D1:AC45 FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  451 D1:AC49 C3 BD AF D1 	jp	DispFinalString                                                        ;    DONE :D :D :D
  452 D1:AC4D -  -  -  -  
  453 D1:AC4D -  -  -  -  #include "routines.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\routines.asm"
    1 D1:AC4D -  -  -  -  InsertBCDEAHL:
    2 D1:AC4D E5 -  -  -  	push	hl
    3 D1:AC4E C5 -  -  -  	push	bc
    4 D1:AC4F E1 -  -  -  	pop	hl
    5 D1:AC50 CD 5E AC D1 	call	InsertHL
    6 D1:AC54 EB -  -  -  	ex	de, hl
    7 D1:AC55 CD 5E AC D1 	call	InsertHL
    8 D1:AC59 E1 -  -  -  	pop	hl
    9 D1:AC5A -  -  -  -  InsertAHL:
   10 D1:AC5A CD 26 AD D1 	call	InsertA
   11 D1:AC5E -  -  -  -  InsertHL:
   12 D1:AC5E D5 -  -  -  	push	de
   13 D1:AC5F EB -  -  -  	ex	de, hl
   14 D1:AC60 2A B5 EC D1 	ld	hl, (programPtr)
   15 D1:AC64 ED 1F -  -  	ld	(hl), de
   16 D1:AC66 23 -  -  -  	inc	hl
   17 D1:AC67 23 -  -  -  	inc	hl
   18 D1:AC68 23 -  -  -  	inc	hl
   19 D1:AC69 22 B5 EC D1 	ld	(programPtr), hl
   20 D1:AC6D D1 -  -  -  	pop	de
   21 D1:AC6E C9 -  -  -  	ret
   22 D1:AC6F -  -  -  -      
   23 D1:AC6F -  -  -  -  InsertBC:
   24 D1:AC6F 2A B5 EC D1 	ld	hl, (programPtr)
   25 D1:AC73 70 -  -  -  	ld	(hl), b
   26 D1:AC74 23 -  -  -  	inc	hl
   27 D1:AC75 71 -  -  -  	ld	(hl), c
   28 D1:AC76 23 -  -  -  	inc	hl
   29 D1:AC77 22 B5 EC D1 	ld	(programPtr), hl
   30 D1:AC7B C9 -  -  -  	ret
   31 D1:AC7C -  -  -  -      
   32 D1:AC7C -  -  -  -  InsertCallHL:
   33 D1:AC7C 3E CD -  -  	ld	a, 0CDh
   34 D1:AC7E 18 DA -  -  	jr	InsertAHL
   35 D1:AC80 -  -  -  -      
   36 D1:AC80 -  -  -  -  InsertHIXC:
   37 D1:AC80 26 27 -  -  	ld	h, 027h
   38 D1:AC82 06 03 -  -  	ld	b, 3
   39 D1:AC84 ED 4C -  -  	mlt	bc
   40 D1:AC86 79 -  -  -  	ld	a, c
   41 D1:AC87 18 07 -  -  	jr	InsertFinalIX
   42 D1:AC89 -  -  -  -  InsertIXE:
   43 D1:AC89 26 17 -  -  	ld	h, 017h
   44 D1:AC8B -  -  -  -  InsertIX:
   45 D1:AC8B 16 03 -  -  	ld	d, 3
   46 D1:AC8D ED 5C -  -  	mlt	de
   47 D1:AC8F 7B -  -  -  	ld	a, e
   48 D1:AC90 -  -  -  -  InsertFinalIX:
   49 D1:AC90 2E DD -  -  	ld	l, 0DDh
   50 D1:AC92 CD 70 1D 02 	call	_SetHLUToA
   51 D1:AC96 18 C6 -  -  	jr	InsertHL                                ; ld hl/de/bc, (ix+*)
   52 D1:AC98 -  -  -  -  InsertIXC:
   53 D1:AC98 26 07 -  -  	ld	h, 007h
   54 D1:AC9A 18 EF -  -  	jr	InsertIX
   55 D1:AC9C -  -  -  -  
   56 D1:AC9C -  -  -  -  InsertBCDEHL:
   57 D1:AC9C E5 -  -  -  	push	hl
   58 D1:AC9D C5 -  -  -  	push	bc
   59 D1:AC9E E1 -  -  -  	pop	hl
   60 D1:AC9F CD 5E AC D1 	call	InsertHL
   61 D1:ACA3 E1 -  -  -  	pop	hl
   62 D1:ACA4 18 04 -  -  	jr	InsertDEHL
   63 D1:ACA6 -  -  -  -  InsertADEHL:
   64 D1:ACA6 CD 26 AD D1 	call	InsertA
   65 D1:ACAA -  -  -  -  InsertDEHL:
   66 D1:ACAA EB -  -  -  	ex	de, hl
   67 D1:ACAB CD 5E AC D1 	call	InsertHL
   68 D1:ACAF EB -  -  -  	ex	de, hl
   69 D1:ACB0 18 AC -  -  	jr	InsertHL
   70 D1:ACB2 -  -  -  -      
   71 D1:ACB2 -  -  -  -  MaybeInsertIYFlags:
   72 D1:ACB2 FD CB AE 4E 	bit	modified_iy, (iy+fAlways1)
   73 D1:ACB6 C8 -  -  -  	ret	z
   74 D1:ACB7 FD CB AE 8E 	res	modified_iy, (iy+fAlways1)
   75 D1:ACBB 3E FD -  -  	ld	a, 0FDh
   76 D1:ACBD CD 26 AD D1 	call	InsertA                                    ; ld iy, flags
   77 D1:ACC1 3E 21 -  -  	ld	a, 021h
   78 D1:ACC3 21 80 00 D0 	ld	hl, flags
   79 D1:ACC7 C3 5A AC D1 	jp	InsertAHL                                ; ld iy, flags
   80 D1:ACCB -  -  -  -      
   81 D1:ACCB -  -  -  -  MaybeChangeHLToDE:
   82 D1:ACCB 3A D9 EC D1 	ld	a, (ExprOutput)
   83 D1:ACCF B7 -  -  -  _:	or	a, a
   84 D1:ACD0 C8 -  -  -  	ret	z
   85 D1:ACD1 3E EB -  -  	ld	a, 0EBh
   86 D1:ACD3 18 51 -  -  	jr	InsertA                                    ; ex de, hl
   87 D1:ACD5 -  -  -  -      
   88 D1:ACD5 -  -  -  -  MaybeChangeDEToHL:
   89 D1:ACD5 3A D9 EC D1 	ld	a, (ExprOutput)
   90 D1:ACD9 EE 01 -  -  	xor	a, 1
   91 D1:ACDB 18 F2 -  -  	jr	-_
   92 D1:ACDD -  -  -  -      
   93 D1:ACDD -  -  -  -  CGetArgumentLast:
   94 D1:ACDD 3E C2 -  -  	ld	a, 0C2h
   95 D1:ACDF 18 02 -  -  	jr	+_
   96 D1:ACE1 -  -  -  -  CGetArgument:
   97 D1:ACE1 3E CA -  -  	ld	a, 0CAh
   98 D1:ACE3 32 F8 AC D1 _:	ld	(CGetArgumentLastOrNot), a
   99 D1:ACE7 22 B5 EC D1 	ld	(programPtr), hl
  100 D1:ACEB F5 -  -  -  	push	af
  101 D1:ACEC CD 28 10 02 	call	_IncFetch
  102 D1:ACF0 CD 9D B2 D1 	call	ParseExpression
  103 D1:ACF4 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  104 D1:ACF8 -  -  -  -  CGetArgumentLastOrNot:
  105 D1:ACF8 CA 4B AF D1 	jp	z, ErrorSyntax
  106 D1:ACFC 2A B5 EC D1 	ld	hl, (programPtr)
  107 D1:AD00 F1 -  -  -  	pop	af
  108 D1:AD01 28 14 -  -  	jr	z, InsertPushHLDE
  109 D1:AD03 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  110 D1:AD07 28 0E -  -  	jr	z, InsertPushHLDE
  111 D1:AD09 2B -  -  -  	dec	hl
  112 D1:AD0A 2B -  -  -  	dec	hl
  113 D1:AD0B 22 B5 EC D1 	ld	(programPtr), hl
  114 D1:AD0F 2B -  -  -  	dec	hl
  115 D1:AD10 2B -  -  -  	dec	hl
  116 D1:AD11 36 2E -  -  	ld	(hl), 02Eh                                ; ld l, *
  117 D1:AD13 23 -  -  -  	inc	hl
  118 D1:AD14 ED 17 -  -  	ld	de, (hl)
  119 D1:AD16 73 -  -  -  	ld	(hl), e
  120 D1:AD17 -  -  -  -  InsertPushHLDE:
  121 D1:AD17 3A DA EC D1 	ld	a, (ExprOutput2)
  122 D1:AD1B 87 -  -  -  	add	a, a
  123 D1:AD1C 87 -  -  -  	add	a, a
  124 D1:AD1D 87 -  -  -  	add	a, a
  125 D1:AD1E 87 -  -  -  	add	a, a
  126 D1:AD1F C6 D5 -  -  	add	a, 0D5h
  127 D1:AD21 2A B5 EC D1 	ld	hl, (programPtr)
  128 D1:AD25 23 -  -  -  	inc	hl
  129 D1:AD26 -  -  -  -  InsertA:
  130 D1:AD26 E5 -  -  -  	push	hl
  131 D1:AD27 2A B5 EC D1 	ld	hl, (programPtr)
  132 D1:AD2B 77 -  -  -  	ld	(hl), a
  133 D1:AD2C 23 -  -  -  	inc	hl
  134 D1:AD2D 22 B5 EC D1 	ld	(programPtr), hl
  135 D1:AD31 E1 -  -  -  	pop	hl
  136 D1:AD32 C9 -  -  -  	ret
  137 D1:AD33 -  -  -  -  
  138 D1:AD33 -  -  -  -  CAddArgument:
  139 D1:AD33 C5 -  -  -  	push	bc
  140 D1:AD34 B7 -  -  -  	or	a, a
  141 D1:AD35 ED 42 -  -  	sbc	hl, bc
  142 D1:AD37 E5 -  -  -  	push	hl
  143 D1:AD38 C1 -  -  -  	pop	bc
  144 D1:AD39 E1 -  -  -  	pop	hl
  145 D1:AD3A ED B0 -  -  	ldir
  146 D1:AD3C C9 -  -  -  	ret
  147 D1:AD3D -  -  -  -      
  148 D1:AD3D -  -  -  -  InsertProgramPtrToDataOffset:
  149 D1:AD3D D5 -  -  -  	push	de
  150 D1:AD3E 2A C1 EC D1 	ld	hl, (programDataOffsetPtr)
  151 D1:AD42 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  152 D1:AD47 ED 1F -  -  	ld	(hl), de
  153 D1:AD49 23 -  -  -  	inc	hl
  154 D1:AD4A 23 -  -  -  	inc	hl
  155 D1:AD4B 23 -  -  -  	inc	hl
  156 D1:AD4C 22 C1 EC D1 	ld	(programDataOffsetPtr), hl
  157 D1:AD50 D1 -  -  -  	pop	de
  158 D1:AD51 C9 -  -  -  	ret
  159 D1:AD52 -  -  -  -      
  160 D1:AD52 -  -  -  -  GetFunction:
  161 D1:AD52 C5 -  -  -  	push	bc
  162 D1:AD53 D5 -  -  -  	push	de
  163 D1:AD54 CD 5B AD D1 	call	GetRightFunction
  164 D1:AD58 D1 -  -  -  	pop	de
  165 D1:AD59 C1 -  -  -  	pop	bc
  166 D1:AD5A C9 -  -  -  	ret
  167 D1:AD5B -  -  -  -      
  168 D1:AD5B -  -  -  -  GetRightFunction:
  169 D1:AD5B 05 -  -  -  	dec	b
  170 D1:AD5C CA A0 AD D1 	jp	z, GetFunctionWithOutputInDE
  171 D1:AD60 05 -  -  -  	dec	b
  172 D1:AD61 C2 08 AE D1 	jp	nz, GetFunctionWithOutputInBC
  173 D1:AD65 -  -  -  -  GetFunctionWithOutputInHL:
  174 D1:AD65 FE AD -  -  	cp	a, tGetKey
  175 D1:AD67 20 12 -  -  	jr	nz, FunctionHLNotGetKey
  176 D1:AD69 21 4C 01 02 	ld	hl, _GetCSC
  177 D1:AD6D CD 7C AC D1 	call	InsertCallHL                                ; call _GetCSC
  178 D1:AD71 3E B7 -  -  	ld	a, 0B7h
  179 D1:AD73 21 ED 62 6F 	ld	hl, 06F62EDh
  180 D1:AD77 C3 5A AC D1 	jp	InsertAHL                                ; or a \ sbc hl, hl \ ld l, a
  181 D1:AD7B -  -  -  -  FunctionHLNotGetKey:
  182 D1:AD7B FE AB -  -  	cp	a, trand
  183 D1:AD7D 20 19 -  -  	jr	nz, FunctionHLGetKeyFast
  184 D1:AD7F 3E D5 -  -  	ld	a, 0D5h
  185 D1:AD81 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  186 D1:AD85 C4 26 AD D1 	call	nz, InsertA                                ; push de
  187 D1:AD89 CD 9C AE D1 	call	InsertRandRoutine
  188 D1:AD8D FD CB C0 76 	bit	need_push, (iy+fExpression1)
  189 D1:AD91 C8 -  -  -  	ret	z
  190 D1:AD92 3E D1 -  -  	ld	a, 0D1h
  191 D1:AD94 C3 26 AD D1 	jp	InsertA                                    ; pop de
  192 D1:AD98 -  -  -  -  FunctionHLGetKeyFast:
  193 D1:AD98 CD 3D AE D1 	call	InsertKeypadRoutine1
  194 D1:AD9C C3 64 AE D1 	jp	InsertKeypadRoutine2
  195 D1:ADA0 -  -  -  -  GetFunctionWithOutputInDE:
  196 D1:ADA0 FE AD -  -  	cp	a, tGetKey
  197 D1:ADA2 20 2D -  -  	jr	nz, FunctionDENotGetKey
  198 D1:ADA4 3E E5 -  -  	ld	a, 0E5h
  199 D1:ADA6 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  200 D1:ADAA C4 26 AD D1 	call	nz, InsertA                                ; push hl
  201 D1:ADAE 21 4C 01 02 	ld	hl, _GetCSC
  202 D1:ADB2 CD 7C AC D1 	call	InsertCallHL                                ; call _GetCSC
  203 D1:ADB6 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  204 D1:ADBA 28 06 -  -  	jr	z, $+8
  205 D1:ADBC 3E E1 -  -  	ld	a, 0E1h
  206 D1:ADBE CD 26 AD D1 	call	InsertA                                    ; pop hl
  207 D1:ADC2 3E 11 -  -  	ld	a, 011h
  208 D1:ADC4 CD 26 AD D1 	call	InsertA                                    ; ld de, *
  209 D1:ADC8 AF -  -  -  	xor	a, a
  210 D1:ADC9 21 00 00 5F 	ld	hl, 05F0000h
  211 D1:ADCD C3 5A AC D1 	jp	InsertAHL                                ; ld de, 0 \ ld e, a
  212 D1:ADD1 -  -  -  -  FunctionDENotGetKey:
  213 D1:ADD1 FE AB -  -  	cp	a, trand
  214 D1:ADD3 20 1F -  -  	jr	nz, FunctionDEGetKeyFast
  215 D1:ADD5 3E E5 -  -  	ld	a, 0E5h
  216 D1:ADD7 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  217 D1:ADDB C4 26 AD D1 	call	nz, InsertA                                ; push hl
  218 D1:ADDF CD 9C AE D1 	call	InsertRandRoutine
  219 D1:ADE3 -  -  -  -  FunctionDEGetKeyEnd:
  220 D1:ADE3 3E EB -  -  	ld	a, 0EBh
  221 D1:ADE5 CD 26 AD D1 	call	InsertA                                    ; ex de, hl
  222 D1:ADE9 FD CB C0 76 	bit	need_push, (iy+fExpression1)
  223 D1:ADED C8 -  -  -  	ret	z
  224 D1:ADEE 3E E1 -  -  	ld	a, 0E1h
  225 D1:ADF0 C3 26 AD D1 	jp	InsertA                                    ; pop hl
  226 D1:ADF4 -  -  -  -  FunctionDEGetKeyFast:
  227 D1:ADF4 CD 3D AE D1 	call	InsertKeypadRoutine1
  228 D1:ADF8 3E E5 -  -  	ld	a, 0E5h
  229 D1:ADFA FD CB C0 76 	bit	need_push, (iy+fExpression1)
  230 D1:ADFE C4 26 AD D1 	call	nz, InsertA                                ; push hl
  231 D1:AE02 CD 64 AE D1 	call	InsertKeypadRoutine2
  232 D1:AE06 18 DB -  -  	jr	FunctionDEGetKeyEnd
  233 D1:AE08 -  -  -  -  GetFunctionWithOutputInBC:
  234 D1:AE08 FE AD -  -  	cp	a, tGetKey
  235 D1:AE0A 20 17 -  -  	jr	nz, FunctionBCNotGetKey
  236 D1:AE0C 21 4C 01 02 	ld	hl, _GetCSC
  237 D1:AE10 CD 7C AC D1 	call	InsertCallHL                                ; call _GetCSC
  238 D1:AE14 3E 01 -  -  	ld	a, 001h
  239 D1:AE16 CD 26 AD D1 	call	InsertA                                    ; ld bc, *
  240 D1:AE1A AF -  -  -  	xor	a, a
  241 D1:AE1B 21 00 00 4F 	ld	hl, 04F0000h
  242 D1:AE1F C3 5A AC D1 	jp	InsertAHL                                ; ld bc, 0 \ ld c, a
  243 D1:AE23 -  -  -  -  FunctionBCNotGetKey:
  244 D1:AE23 FE AB -  -  	cp	a, trand
  245 D1:AE25 20 0C -  -  	jr	nz, FunctionBCGetKeyFast
  246 D1:AE27 CD 9C AE D1 	call	InsertRandRoutine
  247 D1:AE2B -  -  -  -  FunctionBCHLToBC:
  248 D1:AE2B 06 E5 -  -  	ld	b, 0E5h
  249 D1:AE2D 0E C1 -  -  	ld	c, 0C1h
  250 D1:AE2F C3 6F AC D1 	jp	InsertBC                                ; push hl \ pop bc
  251 D1:AE33 -  -  -  -  FunctionBCGetKeyFast:
  252 D1:AE33 CD 3D AE D1 	call	InsertKeypadRoutine1
  253 D1:AE37 CD 64 AE D1 	call	InsertKeypadRoutine2
  254 D1:AE3B 18 EE -  -  	jr	FunctionBCHLToBC
  255 D1:AE3D -  -  -  -      
  256 D1:AE3D -  -  -  -  InsertKeypadRoutine1:
  257 D1:AE3D 57 -  -  -  	ld	d, a
  258 D1:AE3E 3E 06 -  -  	ld	a, 006h
  259 D1:AE40 CD 26 AD D1 	call	InsertA                                    ; ld b, *
  260 D1:AE44 7A -  -  -  	ld	a, d                                    ; A = ((A >> 3) & 7) << 1
  261 D1:AE45 3D -  -  -  	dec	a                                   ; A = (A >> 2) & 7 << 1
  262 D1:AE46 0F -  -  -  	rrca	; A = (A >> 2) & 14
  263 D1:AE47 0F -  -  -  	rrca
  264 D1:AE48 E6 0E -  -  	and	a, 00001110b
  265 D1:AE4A 4F -  -  -  	ld	c, a
  266 D1:AE4B 3E 1E -  -  	ld	a, (keyData + 14) & 0FFh
  267 D1:AE4D 91 -  -  -  	sub	a, c
  268 D1:AE4E 47 -  -  -  	ld	b, a
  269 D1:AE4F 0E 0E -  -  	ld	c, 00Eh
  270 D1:AE51 CD 6F AC D1 	call	InsertBC                                ; ld b, X \ ld c, *
  271 D1:AE55 7A -  -  -  	ld	a, d
  272 D1:AE56 3D -  -  -  	dec	a
  273 D1:AE57 E6 07 -  -  	and	a, 000000111b
  274 D1:AE59 3C -  -  -  	inc	a
  275 D1:AE5A 47 -  -  -  	ld	b, a
  276 D1:AE5B AF -  -  -  	xor	a, a
  277 D1:AE5C 37 -  -  -  	scf
  278 D1:AE5D 17 -  -  -  _:	rla
  279 D1:AE5E 10 FD -  -  	djnz	-_
  280 D1:AE60 C3 26 AD D1 	jp	InsertA                                    ; ld c, X
  281 D1:AE64 -  -  -  -      
  282 D1:AE64 -  -  -  -  InsertKeypadRoutine2:
  283 D1:AE64 3E CD -  -  	ld	a, 0CDh
  284 D1:AE66 CD 26 AD D1 	call	InsertA                                    ; call *
  285 D1:AE6A CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  286 D1:AE6E 2A 04 32 D0 	ld	hl, (KeypadStartData)
  287 D1:AE72 FD CB D0 76 	bit	has_already_keypad, (iy+fProgram1)
  288 D1:AE76 C2 5E AC D1 	jp	nz, InsertHL                                ; call XXXXXX
  289 D1:AE7A 2A CA EC D1 	ld	hl, (programDataDataPtr)
  290 D1:AE7E 22 04 32 D0 	ld	(KeypadStartData), hl
  291 D1:AE82 E5 -  -  -  	push	hl
  292 D1:AE83 D1 -  -  -  	pop	de
  293 D1:AE84 CD 5E AC D1 	call	InsertHL                                ; call *
  294 D1:AE88 21 12 F0 D1 	ld	hl, KeypadRoutine
  295 D1:AE8C 01 14 00 00 	ld	bc, KeypadRoutineEnd - KeypadRoutine
  296 D1:AE90 ED B0 -  -  	ldir
  297 D1:AE92 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  298 D1:AE97 FD CB D0 F6 	set	has_already_keypad, (iy+fProgram1)
  299 D1:AE9B C9 -  -  -  	ret
  300 D1:AE9C -  -  -  -      
  301 D1:AE9C -  -  -  -  InsertRandRoutine:
  302 D1:AE9C 3E CD -  -  	ld	a, 0CDh
  303 D1:AE9E CD 26 AD D1 	call	InsertA                                    ; call *
  304 D1:AEA2 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  305 D1:AEA6 2A FB 31 D0 	ld	hl, (RandStartData)
  306 D1:AEAA FD CB D0 5E 	bit	has_already_rand, (iy+fProgram1)
  307 D1:AEAE C2 5E AC D1 	jp	nz, InsertHL                                ; call XXXXXX
  308 D1:AEB2 2A CA EC D1 	ld	hl, (programDataDataPtr)
  309 D1:AEB6 22 FB 31 D0 	ld	(RandStartData), hl
  310 D1:AEBA E5 -  -  -  	push	hl
  311 D1:AEBB D1 -  -  -  	pop	de
  312 D1:AEBC CD 5E AC D1 	call	InsertHL                                ; call XXXXXX
  313 D1:AEC0 21 96 EF D1 	ld	hl, RandRoutine
  314 D1:AEC4 01 36 00 00 	ld	bc, RandRoutineEnd - RandRoutine
  315 D1:AEC8 ED B0 -  -  	ldir
  316 D1:AECA ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  317 D1:AECF FD CB D0 DE 	set	has_already_rand, (iy+fProgram1)
  318 D1:AED3 C9 -  -  -  	ret
  319 D1:AED4 -  -  -  -      
  320 D1:AED4 -  -  -  -  CompareStrings:
  321 D1:AED4 1A -  -  -  	ld	a, (de)
  322 D1:AED5 FE 3F -  -  	cp	a, tEnter
  323 D1:AED7 C8 -  -  -  	ret	z
  324 D1:AED8 BE -  -  -  	cp	a, (hl)
  325 D1:AED9 23 -  -  -  	inc	hl
  326 D1:AEDA 13 -  -  -  	inc	de
  327 D1:AEDB C0 -  -  -  	ret	nz
  328 D1:AEDC 18 F6 -  -  	jr	CompareStrings
  329 D1:AEDE -  -  -  -      
  330 D1:AEDE -  -  -  -  SubError:
  331 D1:AEDE 3E 2D -  -  	ld	a, '-'
  332 D1:AEE0 18 4D -  -  	jr	DispOperatorErrorString
  333 D1:AEE2 -  -  -  -  AddError:
  334 D1:AEE2 3E 2B -  -  	ld	a, '+'
  335 D1:AEE4 18 49 -  -  	jr	DispOperatorErrorString
  336 D1:AEE6 -  -  -  -  DivError:
  337 D1:AEE6 3E 2F -  -  	ld	a, '/'
  338 D1:AEE8 18 45 -  -  	jr	DispOperatorErrorString
  339 D1:AEEA -  -  -  -  MulError:
  340 D1:AEEA 3E 2A -  -  	ld	a, '*'
  341 D1:AEEC 18 41 -  -  	jr	DispOperatorErrorString
  342 D1:AEEE -  -  -  -      
  343 D1:AEEE -  -  -  -  GLETError:
  344 D1:AEEE 3A F7 31 D0 	ld	a, (tempToken2)
  345 D1:AEF2 FE 6E -  -  	cp	a, tGE
  346 D1:AEF4 0E 19 -  -  	ld	c, 019h
  347 D1:AEF6 28 36 -  -  	jr	z, DispOperatorErrorString2
  348 D1:AEF8 FE 6D -  -  	cp	a, tLE
  349 D1:AEFA 0E 17 -  -  	ld	c, 017h
  350 D1:AEFC 28 30 -  -  	jr	z, DispOperatorErrorString2
  351 D1:AEFE FE 6C -  -  	cp	a, tGT
  352 D1:AF00 0E 3E -  -  	ld	c, '>'
  353 D1:AF02 28 2A -  -  	jr	z, DispOperatorErrorString2
  354 D1:AF04 3E 3C -  -  	ld	a, '<'
  355 D1:AF06 18 27 -  -  	jr	DispOperatorErrorString
  356 D1:AF08 -  -  -  -  
  357 D1:AF08 -  -  -  -  NEQError:
  358 D1:AF08 3A F7 31 D0 	ld	a, (tempToken2)
  359 D1:AF0C FE 6A -  -  	cp	a, tEq
  360 D1:AF0E 3E 3D -  -  	ld	a, '='
  361 D1:AF10 28 1D -  -  	jr	z, DispOperatorErrorString
  362 D1:AF12 3E 18 -  -  	ld	a, 018h
  363 D1:AF14 18 19 -  -  	jr	DispOperatorErrorString
  364 D1:AF16 -  -  -  -  XORANDError:
  365 D1:AF16 3A F7 31 D0 	ld	a, (tempToken2)
  366 D1:AF1A FE 3C -  -  	cp	a, tOr
  367 D1:AF1C 0E 7C -  -  	ld	c, '|'
  368 D1:AF1E 28 0E -  -  	jr	z, DispOperatorErrorString2
  369 D1:AF20 FE 3D -  -  	cp	a, tXor
  370 D1:AF22 0E 5E -  -  	ld	c, '^'
  371 D1:AF24 28 08 -  -  	jr	z, DispOperatorErrorString2
  372 D1:AF26 3E 26 -  -  	ld	a, '&'
  373 D1:AF28 18 05 -  -  	jr	DispOperatorErrorString
  374 D1:AF2A -  -  -  -  StoError:
  375 D1:AF2A 3E 1C -  -  	ld	a, 01Ch
  376 D1:AF2C 18 01 -  -  	jr	DispOperatorErrorString
  377 D1:AF2E -  -  -  -      
  378 D1:AF2E -  -  -  -  DispOperatorErrorString2:
  379 D1:AF2E 79 -  -  -  	ld	a, c
  380 D1:AF2F -  -  -  -  DispOperatorErrorString:
  381 D1:AF2F F5 -  -  -  	push	af
  382 D1:AF30 CD 87 B0 D1 	call	ClearScreen
  383 D1:AF34 21 EA EC D1 	ld	hl, ErrorMessageStandard
  384 D1:AF38 CD BD B0 D1 	call	PrintString
  385 D1:AF3C F1 -  -  -  	pop	af
  386 D1:AF3D CD 25 B8 D1 	call	_PrintChar_ASM
  387 D1:AF41 3E 27 -  -  	ld	a, '\''
  388 D1:AF43 CD 25 B8 D1 	call	_PrintChar_ASM
  389 D1:AF47 C3 D5 AF D1 	jp	ReturnToOS
  390 D1:AF4B -  -  -  -      
  391 D1:AF4B -  -  -  -  ErrorSyntax:
  392 D1:AF4B 21 29 EE D1 	ld	hl, SyntaxErrorMessage
  393 D1:AF4F 18 6C -  -  	jr	DispFinalString
  394 D1:AF51 -  -  -  -  MismatchError:
  395 D1:AF51 21 97 EE D1 	ld	hl, MismatchErrorMessage
  396 D1:AF55 18 66 -  -  	jr	DispFinalString
  397 D1:AF57 -  -  -  -  NoProgramsError:
  398 D1:AF57 21 27 ED D1 	ld	hl, NoProgramsMessage
  399 D1:AF5B FD CB D0 CE 	set	good_compilation, (iy+fProgram1)
  400 D1:AF5F 18 5C -  -  	jr	DispFinalString
  401 D1:AF61 -  -  -  -  InvalidTokenError:
  402 D1:AF61 21 3A ED D1 	ld	hl, InvalidTokenMessage
  403 D1:AF65 18 56 -  -  	jr	DispFinalString
  404 D1:AF67 -  -  -  -  InvalidNameLength:
  405 D1:AF67 21 6F ED D1 	ld	hl, InvalidNameLengthMessage
  406 D1:AF6B 18 50 -  -  	jr	DispFinalString
  407 D1:AF6D -  -  -  -  ErrorNotFound:
  408 D1:AF6D 21 EA ED D1 	ld	hl, NotFoundMessage
  409 D1:AF71 18 4A -  -  	jr	DispFinalString
  410 D1:AF73 -  -  -  -  ErrorUsedCode:
  411 D1:AF73 21 5E EE D1 	ld	hl, UsedCodeMessage
  412 D1:AF77 18 44 -  -  	jr	DispFinalString
  413 D1:AF79 -  -  -  -  SameNameError:
  414 D1:AF79 21 86 ED D1 	ld	hl, SameNameMessage
  415 D1:AF7D 18 3E -  -  	jr	DispFinalString
  416 D1:AF7F -  -  -  -  FunctionError:
  417 D1:AF7F 21 C2 ED D1 	ld	hl, FunctionFunctionMessage
  418 D1:AF83 18 38 -  -  	jr	DispFinalString
  419 D1:AF85 -  -  -  -  UnknownError:
  420 D1:AF85 21 AF EE D1 	ld	hl, UnknownMessage
  421 D1:AF89 18 32 -  -  	jr	DispFinalString
  422 D1:AF8B -  -  -  -  WrongSpriteDataError:
  423 D1:AF8B 21 AD ED D1 	ld	hl, WrongSpriteDataMessgae
  424 D1:AF8F 18 2C -  -  	jr	DispFinalString
  425 D1:AF91 -  -  -  -  ImplementError:
  426 D1:AF91 21 FD ED D1 	ld	hl, ImplementMessage
  427 D1:AF95 18 26 -  -  	jr	DispFinalString
  428 D1:AF97 -  -  -  -  EndError:
  429 D1:AF97 21 02 ED D1 	ld	hl, EndErrorMessage
  430 D1:AF9B 18 20 -  -  	jr	DispFinalString
  431 D1:AF9D -  -  -  -  ErrorTooLargeLoop:
  432 D1:AF9D 21 44 EE D1 	ld	hl, TooLargeLoopMessage
  433 D1:AFA1 18 1A -  -  	jr	DispFinalString
  434 D1:AFA3 -  -  -  -  LabelError:
  435 D1:AFA3 D5 -  -  -  	push	de
  436 D1:AFA4 CD 87 B0 D1 	call	ClearScreen
  437 D1:AFA8 21 EC EE D1 	ld	hl, LabelErrorMessage
  438 D1:AFAC CD BD B0 D1 	call	PrintString
  439 D1:AFB0 E1 -  -  -  	pop	hl
  440 D1:AFB1 7E -  -  -  _:	ld	a, (hl)
  441 D1:AFB2 23 -  -  -  	inc	hl
  442 D1:AFB3 FE 3F -  -  	cp	a, tEnter
  443 D1:AFB5 C4 25 B8 D1 	call	nz, _PrintChar_ASM
  444 D1:AFB9 20 F6 -  -  	jr	nz, -_
  445 D1:AFBB 18 18 -  -  	jr	ReturnToOS
  446 D1:AFBD -  -  -  -  DispFinalString:
  447 D1:AFBD 01 01 00 00 	ld	bc, 1
  448 D1:AFC1 ED 43 27 B8 
              D1 -  -  -  	ld	(TextXPos_ASM), bc
  449 D1:AFC6 3E 15 -  -  	ld	a, 21
  450 D1:AFC8 32 58 B8 D1 	ld	(TextYPos_ASM), a
  451 D1:AFCC AF -  -  -  	xor	a, a
  452 D1:AFCD 32 7D B8 D1 	ld	(color), a
  453 D1:AFD1 CD BD B0 D1 	call	PrintString
  454 D1:AFD5 -  -  -  -  ReturnToOS:
  455 D1:AFD5 FD CB D0 4E 	bit	good_compilation, (iy+fProgram1)
  456 D1:AFD9 20 51 -  -  	jr	nz, SkipDisplayLineNumber
  457 D1:AFDB 3E 1E -  -  	ld	a, 30
  458 D1:AFDD 32 58 B8 D1 	ld	(TextYPos_ASM), a
  459 D1:AFE1 21 01 00 00 	ld	hl, 1
  460 D1:AFE5 22 27 B8 D1 	ld	(TextXPos_ASM), hl
  461 D1:AFE9 21 88 EE D1 	ld	hl, LineNumber
  462 D1:AFED CD BD B0 D1 	call	PrintString
  463 D1:AFF1 2A 1A 23 D0 	ld	hl, (curPC)
  464 D1:AFF5 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  465 D1:AFFA B7 -  -  -  	or	a, a
  466 D1:AFFB ED 52 -  -  	sbc	hl, de
  467 D1:AFFD E5 -  -  -  	push	hl
  468 D1:AFFE C1 -  -  -  	pop	bc
  469 D1:AFFF ED 62 -  -  	sbc	hl, hl
  470 D1:B001 23 -  -  -  	inc	hl
  471 D1:B002 EB -  -  -  	ex	de, hl
  472 D1:B003 -  -  -  -  GetAmountOfLines:
  473 D1:B003 78 -  -  -  	ld	a, b
  474 D1:B004 B1 -  -  -  	or	a, c
  475 D1:B005 28 09 -  -  	jr	z, GetAmountOfLinesStop
  476 D1:B007 3E 3F -  -  	ld	a, tEnter
  477 D1:B009 ED B1 -  -  	cpir
  478 D1:B00B 20 03 -  -  	jr	nz, GetAmountOfLinesStop
  479 D1:B00D 13 -  -  -  	inc	de
  480 D1:B00E 18 F3 -  -  	jr	GetAmountOfLines
  481 D1:B010 -  -  -  -  GetAmountOfLinesStop:
  482 D1:B010 EB -  -  -  	ex	de, hl
  483 D1:B011 AF -  -  -  	xor	a, a
  484 D1:B012 11 18 06 D0 	ld	de, OP3+10
  485 D1:B016 12 -  -  -  	ld	(de), a
  486 D1:B017 -  -  -  -  NumberToStringLoop:
  487 D1:B017 3E 0A -  -  	ld	a, 10
  488 D1:B019 CD 90 1D 02 	call	_DivHLByA
  489 D1:B01D C6 30 -  -  	add	a, t0
  490 D1:B01F 1B -  -  -  	dec	de
  491 D1:B020 12 -  -  -  	ld	(de), a
  492 D1:B021 19 -  -  -  	add	hl, de
  493 D1:B022 B7 -  -  -  	or	a, a
  494 D1:B023 ED 52 -  -  	sbc	hl, de
  495 D1:B025 20 F0 -  -  	jr	nz, NumberToStringLoop
  496 D1:B027 EB -  -  -  	ex	de, hl
  497 D1:B028 CD BD B0 D1 	call	PrintString
  498 D1:B02C -  -  -  -  SkipDisplayLineNumber:
  499 D1:B02C 3E E6 -  -  	ld	a, 230
  500 D1:B02E 32 58 B8 D1 	ld	(TextYPos_ASM), a
  501 D1:B032 21 55 00 00 	ld	hl, 85
  502 D1:B036 22 27 B8 D1 	ld	(TextXPos_ASM), hl
  503 D1:B03A 21 3C EF D1 	ld	hl, PressKey
  504 D1:B03E CD BD B0 D1 	call	PrintString
  505 D1:B042 -  -  -  -  backupSP = $+1
  506 D1:B042 31 00 00 00 	ld	sp, 0
  507 D1:B046 DD E1 -  -  	pop	ix
  508 D1:B048 CD 8C 0D 02 	call	_GetKey
  509 D1:B04C -  -  -  -  StopProgram:
  510 D1:B04C 2A 1A 23 D0 	ld	hl, (curPC)
  511 D1:B050 ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  512 D1:B055 37 -  -  -  	scf
  513 D1:B056 ED 52 -  -  	sbc	hl, de
  514 D1:B058 40 22 E3 08 	ld.sis	(errOffset - 0D00000h), hl
  515 D1:B05C -  -  -  -  backupBegPC = $+1
  516 D1:B05C 21 00 00 00 	ld	hl, 0
  517 D1:B060 22 17 23 D0 	ld	(begPC), hl
  518 D1:B064 -  -  -  -  backupCurPC = $+1
  519 D1:B064 21 00 00 00 	ld	hl, 0
  520 D1:B068 22 1A 23 D0 	ld	(curPC), hl
  521 D1:B06C -  -  -  -  backupEndPC = $+1
  522 D1:B06C 21 00 00 00 	ld	hl, 0
  523 D1:B070 22 1D 23 D0 	ld	(endPC), hl
  524 D1:B074 CD 08 08 02 	call	_ClrLCDFull
  525 D1:B078 CD 28 08 02 	call	_HomeUp
  526 D1:B07C 3E 2D -  -  	ld	a, lcdBpp16
  527 D1:B07E 32 18 00 E3 	ld	(mpLcdCtrl), a
  528 D1:B082 CD 3C 1A 02 	call	_DrawStatusBar
  529 D1:B086 C9 -  -  -  	ret
  530 D1:B087 -  -  -  -  ;    bit      good_compilation, (iy+fProgram1)
  531 D1:B087 -  -  -  -  ;    ret      nz
  532 D1:B087 -  -  -  -  ;#include "editor.asm"
  533 D1:B087 -  -  -  -      
  534 D1:B087 -  -  -  -  ClearScreen:
  535 D1:B087 21 00 0F D4 	ld	hl, vRAM+(320*12)
  536 D1:B08B 36 FF -  -  	ld	(hl), 255
  537 D1:B08D E5 -  -  -  	push	hl
  538 D1:B08E D1 -  -  -  	pop	de
  539 D1:B08F 13 -  -  -  	inc	de
  540 D1:B090 01 FF 1C 01 	ld	bc, 320*228-1
  541 D1:B094 ED B0 -  -  	ldir
  542 D1:B096 03 -  -  -  	inc	bc
  543 D1:B097 ED 43 27 B8 
              D1 -  -  -  	ld	(TextXPos_ASM), bc
  544 D1:B09C 3E 0C -  -  	ld	a, 12
  545 D1:B09E 32 58 B8 D1 	ld	(TextYPos_ASM), a
  546 D1:B0A2 AF -  -  -  	xor	a, a
  547 D1:B0A3 32 7D B8 D1 	ld	(color), a
  548 D1:B0A7 C9 -  -  -  	ret
  549 D1:B0A8 -  -  -  -      
  550 D1:B0A8 -  -  -  -  PrintCompilingProgram:
  551 D1:B0A8 AF -  -  -  	xor	a, a
  552 D1:B0A9 32 01 06 D0 	ld	(OP1+9), a
  553 D1:B0AD CD 87 B0 D1 	call	ClearScreen
  554 D1:B0B1 21 FE EE D1 	ld	hl, StartParseMessage
  555 D1:B0B5 CD BD B0 D1 	call	PrintString
  556 D1:B0B9 21 F9 05 D0 	ld	hl, OP1+1
  557 D1:B0BD -  -  -  -      
  558 D1:B0BD -  -  -  -  PrintString:
  559 D1:B0BD 7E -  -  -  	ld	a, (hl)
  560 D1:B0BE 23 -  -  -  	inc	hl
  561 D1:B0BF B7 -  -  -  	or	a, a
  562 D1:B0C0 C4 25 B8 D1 	call	nz, _PrintChar_ASM
  563 D1:B0C4 20 F7 -  -  	jr	nz, PrintString
  564 D1:B0C6 C9 -  -  -  	ret
  565 D1:B0C7 -  -  -  -      
  566 D1:B0C7 -  -  -  -  PreScanPrograms:
  567 D1:B0C7 2A 1D 23 D0 	ld	hl, (endPC)
  568 D1:B0CB ED 5B 17 23 
              D0 -  -  -  	ld	de, (begPC)
  569 D1:B0D0 B7 -  -  -  	or	a, a
  570 D1:B0D1 ED 52 -  -  	sbc	hl, de
  571 D1:B0D3 23 -  -  -  	inc	hl
  572 D1:B0D4 E5 -  -  -  	push	hl
  573 D1:B0D5 C1 -  -  -  	pop	bc
  574 D1:B0D6 2A 1A 23 D0 	ld	hl, (curPC)
  575 D1:B0DA -  -  -  -  ScanLoop:
  576 D1:B0DA 78 -  -  -  	ld	a, b
  577 D1:B0DB B1 -  -  -  	or	a, c
  578 D1:B0DC C8 -  -  -  	ret	z
  579 D1:B0DD 7E -  -  -  	ld	a, (hl)
  580 D1:B0DE CD AC 04 02 	call	_IsA2ByteTok
  581 D1:B0E2 20 02 -  -  	jr	nz, +_
  582 D1:B0E4 23 -  -  -  	inc	hl
  583 D1:B0E5 0B -  -  -  	dec	bc
  584 D1:B0E6 23 -  -  -  _:	inc	hl
  585 D1:B0E7 0B -  -  -  	dec	bc
  586 D1:B0E8 FE B3 -  -  	cp	a, tDet
  587 D1:B0EA 28 2D -  -  	jr	z, ScanFoundDet
  588 D1:B0EC FE D8 -  -  	cp	a, tPause
  589 D1:B0EE 28 13 -  -  	jr	z, ScanFoundPause
  590 D1:B0F0 FE BC -  -  	cp	a, tSqrt
  591 D1:B0F2 28 1A -  -  	jr	z, ScanFoundRoot
  592 D1:B0F4 FE DC -  -  	cp	a, tInput
  593 D1:B0F6 20 E2 -  -  	jr	nz, ScanLoop
  594 D1:B0F8 -  -  -  -  ScanFoundInput:
  595 D1:B0F8 3A D6 EC D1 	ld	a, (amountOfInput)
  596 D1:B0FC 3C -  -  -  	inc	a
  597 D1:B0FD 32 D6 EC D1 	ld	(amountOfInput), a
  598 D1:B101 18 D7 -  -  	jr	ScanLoop
  599 D1:B103 -  -  -  -  ScanFoundPause:
  600 D1:B103 3A D7 EC D1 	ld	a, (amountOfPause)
  601 D1:B107 3C -  -  -  	inc	a
  602 D1:B108 32 D7 EC D1 	ld	(amountOfPause), a
  603 D1:B10C 18 CC -  -  	jr	ScanLoop
  604 D1:B10E -  -  -  -  ScanFoundRoot:
  605 D1:B10E 3A D8 EC D1 	ld	a, (amountOfRoot)
  606 D1:B112 3C -  -  -  	inc	a
  607 D1:B113 32 D8 EC D1 	ld	(amountOfRoot), a
  608 D1:B117 18 C1 -  -  	jr	ScanLoop
  609 D1:B119 -  -  -  -  ScanFoundDet:
  610 D1:B119 7E -  -  -  	ld	a, (hl)
  611 D1:B11A D6 30 -  -  	sub	a, t0
  612 D1:B11C 38 BC -  -  	jr	c, ScanLoop
  613 D1:B11E FE 0A -  -  	cp	a, t9-t0+1
  614 D1:B120 30 B8 -  -  	jr	nc, ScanLoop
  615 D1:B122 11 00 00 00 	ld	de, 0
  616 D1:B126 5F -  -  -  	ld	e, a
  617 D1:B127 23 -  -  -  	inc	hl
  618 D1:B128 0B -  -  -  	dec	bc
  619 D1:B129 78 -  -  -  	ld	a, b
  620 D1:B12A B1 -  -  -  	or	a, c
  621 D1:B12B 28 21 -  -  	jr	z, FoundRightCFunction
  622 D1:B12D 7E -  -  -  	ld	a, (hl)
  623 D1:B12E FE 2B -  -  	cp	a, tComma
  624 D1:B130 28 1C -  -  	jr	z, FoundRightCFunction
  625 D1:B132 FE 3F -  -  	cp	a, tEnter
  626 D1:B134 28 18 -  -  	jr	z, FoundRightCFunction
  627 D1:B136 D6 30 -  -  	sub	a, t0
  628 D1:B138 38 14 -  -  	jr	c, FoundRightCFunction
  629 D1:B13A FE 0A -  -  	cp	a, t9-t0+1
  630 D1:B13C 30 10 -  -  	jr	nc, FoundRightCFunction
  631 D1:B13E E5 -  -  -  	push	hl
  632 D1:B13F EB -  -  -  	ex	de, hl
  633 D1:B140 29 -  -  -  	add	hl, hl
  634 D1:B141 E5 -  -  -  	push	hl
  635 D1:B142 D1 -  -  -  	pop	de
  636 D1:B143 29 -  -  -  	add	hl, hl
  637 D1:B144 29 -  -  -  	add	hl, hl
  638 D1:B145 19 -  -  -  	add	hl, de
  639 D1:B146 11 00 00 00 	ld	de, 0
  640 D1:B14A 5F -  -  -  	ld	e, a
  641 D1:B14B 19 -  -  -  	add	hl, de
  642 D1:B14C EB -  -  -  	ex	de, hl
  643 D1:B14D E1 -  -  -  	pop	hl
  644 D1:B14E -  -  -  -  FoundRightCFunction:
  645 D1:B14E E5 -  -  -  	push	hl
  646 D1:B14F EB -  -  -  	ex	de, hl
  647 D1:B150 11 54 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
  648 D1:B154 B7 -  -  -  	or	a, a
  649 D1:B155 ED 52 -  -  	sbc	hl, de
  650 D1:B157 30 1F -  -  	jr	nc,  WrongCFunction
  651 D1:B159 19 -  -  -  	add	hl, de
  652 D1:B15A EB -  -  -  	ex	de, hl
  653 D1:B15B 21 E8 EA D1 	ld	hl, usedCroutines
  654 D1:B15F 19 -  -  -  	add	hl, de
  655 D1:B160 7E -  -  -  	ld	a, (hl)
  656 D1:B161 B7 -  -  -  	or	a, a
  657 D1:B162 20 14 -  -  	jr	nz, FunctionAlreadyInProgram
  658 D1:B164 -  -  -  -  AddCFunctionToProgram:
  659 D1:B164 3A D4 EC D1 	ld	a, (amountOfCRoutines)
  660 D1:B168 3C -  -  -  	inc	a
  661 D1:B169 77 -  -  -  	ld	(hl), a
  662 D1:B16A 32 D4 EC D1 	ld	(amountOfCRoutines), a
  663 D1:B16E 3E C3 -  -  	ld	a, 0C3h
  664 D1:B170 D5 -  -  -  	push	de
  665 D1:B171 E1 -  -  -  	pop	hl
  666 D1:B172 29 -  -  -  	add	hl, hl
  667 D1:B173 19 -  -  -  	add	hl, de
  668 D1:B174 CD 5A AC D1 	call	InsertAHL                                                                ; jp *
  669 D1:B178 -  -  -  -  FunctionAlreadyInProgram:
  670 D1:B178 -  -  -  -  WrongCFunction:
  671 D1:B178 E1 -  -  -  	pop	hl
  672 D1:B179 C3 DA B0 D1 	jp	ScanLoop
  673 D1:B17D -  -  -  -  
  674 D1:B17D -  -  -  -  GetSpriteData:
  675 D1:B17D B7 -  -  -  	or	a, a
  676 D1:B17E ED 52 -  -  	sbc	hl, de
  677 D1:B180 C8 -  -  -  	ret	z
  678 D1:B181 19 -  -  -  	add	hl, de
  679 D1:B182 1A -  -  -  	ld	a, (de)
  680 D1:B183 D6 30 -  -  	sub	a, t0
  681 D1:B185 DA 8B AF D1 	jp	c, WrongSpriteDataError
  682 D1:B189 FE 11 -  -  	cp	a, tA-t0
  683 D1:B18B 38 0A -  -  	jr	c, +_
  684 D1:B18D D6 11 -  -  	sub	a, tA-t0
  685 D1:B18F FE 06 -  -  	cp	a, tG-tA
  686 D1:B191 D2 8B AF D1 	jp	nc, WrongSpriteDataError
  687 D1:B195 C6 0A -  -  	add	a, 10
  688 D1:B197 87 -  -  -  _:	add	a, a
  689 D1:B198 87 -  -  -  	add	a, a
  690 D1:B199 87 -  -  -  	add	a, a
  691 D1:B19A 87 -  -  -  	add	a, a
  692 D1:B19B DD 67 -  -  	ld	ixh, a
  693 D1:B19D 13 -  -  -  	inc	de
  694 D1:B19E B7 -  -  -  	or	a, a
  695 D1:B19F ED 52 -  -  	sbc	hl, de
  696 D1:B1A1 CA 4B AF D1 	jp	z, ErrorSyntax
  697 D1:B1A5 19 -  -  -  	add	hl, de
  698 D1:B1A6 1A -  -  -  	ld	a, (de)
  699 D1:B1A7 D6 30 -  -  	sub	a, t0
  700 D1:B1A9 DA 8B AF D1 	jp	c, WrongSpriteDataError
  701 D1:B1AD FE 11 -  -  	cp	a, tA-t0
  702 D1:B1AF 38 0A -  -  	jr	c, +_
  703 D1:B1B1 D6 11 -  -  	sub	a, tA-t0
  704 D1:B1B3 FE 06 -  -  	cp	a, tG-tA
  705 D1:B1B5 D2 8B AF D1 	jp	nc, WrongSpriteDataError
  706 D1:B1B9 C6 0A -  -  	add	a, 10
  707 D1:B1BB DD B4 -  -  _:	or	a, ixh
  708 D1:B1BD 02 -  -  -  	ld	(bc), a
  709 D1:B1BE 03 -  -  -  	inc	bc
  710 D1:B1BF 13 -  -  -  	inc	de
  711 D1:B1C0 18 BB -  -  	jr	GetSpriteData
  712 D1:B1C2 -  -  -  -      
  713 D1:B1C2 -  -  -  -  UpdateSpritePointers:
  714 D1:B1C2 C5 -  -  -  	push	bc
  715 D1:B1C3 2A B5 EC D1 	ld	hl, (programPtr)
  716 D1:B1C7 ED 5B 0A 32 
              D0 -  -  -  	ld	de, (PrevProgramPtr)
  717 D1:B1CC B7 -  -  -  	or	a, a
  718 D1:B1CD ED 52 -  -  	sbc	hl, de
  719 D1:B1CF EB -  -  -  	ex	de, hl
  720 D1:B1D0 01 F4 FF FF 	ld	bc, -12
  721 D1:B1D4 09 -  -  -  	add	hl, bc
  722 D1:B1D5 E5 -  -  -  	push	hl
  723 D1:B1D6 ED 27 -  -  	ld	hl, (hl)
  724 D1:B1D8 19 -  -  -  	add	hl, de
  725 D1:B1D9 EB -  -  -  	ex	de, hl
  726 D1:B1DA E1 -  -  -  	pop	hl
  727 D1:B1DB ED 1F -  -  	ld	(hl), de
  728 D1:B1DD FD CB AE 56 	bit	debug_on, (iy+fAlways1);
  729 D1:B1E1 28 21 -  -  	jr	z, +_
  730 D1:B1E3 2A B5 EC D1 	ld	hl, (programPtr)
  731 D1:B1E7 01 B5 7C FC 	ld	bc, DebugCodeEnd - DebugCode - 3 - program + UserMem
  732 D1:B1EB 09 -  -  -  	add	hl, bc
  733 D1:B1EC CD 7C AC D1 	call	InsertCallHL
  734 D1:B1F0 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  735 D1:B1F5 21 E4 F0 D1 	ld	hl, DebugCode
  736 D1:B1F9 01 37 00 00 	ld	bc, DebugCodeEnd - DebugCode
  737 D1:B1FD ED B0 -  -  	ldir
  738 D1:B1FF ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  739 D1:B204 C1 -  -  -  _:	pop	bc
  740 D1:B205 C9 -  -  -  	ret
  741 D1:B206 -  -  -  -      
  742 D1:B206 -  -  -  -  GetProgramName:
  743 D1:B206 E5 -  -  -  	push	hl
  744 D1:B207 CD 28 10 02 	call	_IncFetch
  745 D1:B20B E1 -  -  -  	pop	hl
  746 D1:B20C DA 67 AF D1 	jp	c, InvalidNameLength
  747 D1:B210 23 -  -  -  	inc	hl
  748 D1:B211 FE 3F -  -  	cp	a, tEnter
  749 D1:B213 CA 67 AF D1 	jp	z, InvalidNameLength
  750 D1:B217 FE 41 -  -  	cp	a, tA
  751 D1:B219 DA 61 AF D1 	jp	c, InvalidTokenError
  752 D1:B21D FE 5C -  -  	cp	a, ttheta+1
  753 D1:B21F D2 61 AF D1 	jp	nc, InvalidTokenError
  754 D1:B223 77 -  -  -  	ld	(hl), a
  755 D1:B224 1E 08 -  -  	ld	e, 8
  756 D1:B226 -  -  -  -  GetProgramNameLoop:
  757 D1:B226 E5 -  -  -  	push	hl
  758 D1:B227 CD 28 10 02 	call	_IncFetch
  759 D1:B22B E1 -  -  -  	pop	hl
  760 D1:B22C 23 -  -  -  	inc	hl
  761 D1:B22D 36 00 -  -  	ld	(hl), 0
  762 D1:B22F D8 -  -  -  	ret	c
  763 D1:B230 FE 3F -  -  	cp	a, tEnter
  764 D1:B232 C8 -  -  -  	ret	z
  765 D1:B233 FE 30 -  -  	cp	a, t0
  766 D1:B235 DA 61 AF D1 _:	jp	c, InvalidTokenError
  767 D1:B239 FE 3A -  -  	cp	a, t9+1
  768 D1:B23B 38 0A -  -  	jr	c, +_
  769 D1:B23D FE 41 -  -  	cp	a, tA
  770 D1:B23F 38 F4 -  -  	jr	c, -_
  771 D1:B241 FE 5C -  -  	cp	a, ttheta+1
  772 D1:B243 D2 61 AF D1 	jp	nc, InvalidTokenError
  773 D1:B247 77 -  -  -  _:	ld	(hl), a
  774 D1:B248 1D -  -  -  	dec	e
  775 D1:B249 20 DB -  -  	jr	nz, GetProgramNameLoop
  776 D1:B24B C3 67 AF D1 	jp	InvalidNameLength
Listing for file "ice.asm"
  454 D1:B24F -  -  -  -  #include "parse.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\parse.asm"
    1 D1:B24F -  -  -  -  ParseLine:
    2 D1:B24F CD 2C 10 02 	call	_CurFetch
    3 D1:B253 FE 3F -  -  	cp	a, tEnter
    4 D1:B255 C8 -  -  -  	ret	z
    5 D1:B256 21 78 EB D1 	ld	hl, FunctionsSingle
    6 D1:B25A 01 10 00 00 	ld	bc, FunctionsSingleEnd - FunctionsSingle
    7 D1:B25E ED B1 -  -  	cpir
    8 D1:B260 20 2F -  -  	jr	nz, ParseExpression2
    9 D1:B262 FE 62 -  -  	cp	a, tVarOut
   10 D1:B264 28 10 -  -  	jr	z, +_
   11 D1:B266 FE 2C -  -  	cp	a, tii
   12 D1:B268 28 0C -  -  	jr	z, +_
   13 D1:B26A FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   14 D1:B26E FD CB D0 FE 	set	used_code, (iy+fProgram1)
   15 D1:B272 CC C2 B1 D1 	call	z, UpdateSpritePointers
   16 D1:B276 3A D2 EC D1 _:	ld	a, (openedParensF)
   17 D1:B27A B7 -  -  -  	or	a, a
   18 D1:B27B C2 7F AF D1 	jp	nz, FunctionError
   19 D1:B27F FD 77 B0 -  	ld	(iy+fFunction1), a
   20 D1:B282 FD 77 AF -  	ld	(iy+fFunction2), a
   21 D1:B285 06 03 -  -  	ld	b, 3
   22 D1:B287 ED 4C -  -  	mlt	bc
   23 D1:B289 21 88 EB D1 	ld	hl, FunctionsSingleStart
   24 D1:B28D 09 -  -  -  	add	hl, bc
   25 D1:B28E ED 27 -  -  	ld	hl, (hl)
   26 D1:B290 E9 -  -  -  	jp	(hl)
   27 D1:B291 -  -  -  -      
   28 D1:B291 -  -  -  -  ParseExpression2:
   29 D1:B291 FD CB D0 7E 	bit	used_code, (iy+fProgram1)
   30 D1:B295 FD CB D0 FE 	set	used_code, (iy+fProgram1)
   31 D1:B299 CC C2 B1 D1 	call	z, UpdateSpritePointers
   32 D1:B29D -  -  -  -  ParseExpression:
   33 D1:B29D 21 5A 32 D0 	ld	hl, stack
   34 D1:B2A1 22 AF EC D1 	ld	(stackPtr), hl
   35 D1:B2A5 21 42 36 D0 	ld	hl, output
   36 D1:B2A9 22 B2 EC D1 	ld	(outputPtr), hl
   37 D1:B2AD AF -  -  -  	xor	a, a
   38 D1:B2AE 32 D1 EC D1 	ld	(openedParensE), a
   39 D1:B2B2 FD 77 C0 -  	ld	(iy+fExpression1), a
   40 D1:B2B5 FD 77 BF -  	ld	(iy+fExpression2), a
   41 D1:B2B8 FD 77 BE -  	ld	(iy+fExpression3), a
   42 D1:B2BB CD 2C 10 02 	call	_CurFetch
   43 D1:B2BF -  -  -  -  MainLoopResCarryFlag:
   44 D1:B2BF B7 -  -  -  	or	a, a    
   45 D1:B2C0 -  -  -  -  MainLoop:
   46 D1:B2C0 32 F6 31 D0 	ld	(tempToken), a
   47 D1:B2C4 DA 53 B6 D1 	jp	c, StopParsing
   48 D1:B2C8 FE 30 -  -  	cp	a, t0
   49 D1:B2CA 38 45 -  -  	jr	c, NotANumber
   50 D1:B2CC FE 3A -  -  	cp	a, t9+1
   51 D1:B2CE 30 41 -  -  	jr	nc, NotANumber
   52 D1:B2D0 -  -  -  -  ANumber:
   53 D1:B2D0 -  -  -  -  #include "number.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\number.asm"
    1 D1:B2D0 2A B2 EC D1 	ld	hl, (outputPtr)
    2 D1:B2D4 FD CB C0 46 	bit	prev_is_number, (iy+fExpression1)
    3 D1:B2D8 FD CB C0 C6 	set	prev_is_number, (iy+fExpression1)
    4 D1:B2DC 28 1A -  -  	jr	z, AddNumberToStack
    5 D1:B2DE -  -  -  -  ChangeLastNumberFromStack:
    6 D1:B2DE 2B -  -  -  	dec	hl
    7 D1:B2DF 2B -  -  -  	dec	hl
    8 D1:B2E0 2B -  -  -  	dec	hl
    9 D1:B2E1 E5 -  -  -  	push	hl
   10 D1:B2E2 ED 27 -  -  	ld	hl, (hl)
   11 D1:B2E4 29 -  -  -  	add	hl, hl                                            ;    HL * 10
   12 D1:B2E5 E5 -  -  -  	push	hl
   13 D1:B2E6 D1 -  -  -  	pop	de
   14 D1:B2E7 29 -  -  -  	add	hl, hl
   15 D1:B2E8 29 -  -  -  	add	hl, hl
   16 D1:B2E9 19 -  -  -  	add	hl, de
   17 D1:B2EA D6 30 -  -  	sub	a, t0                                            ;    HL + <number>
   18 D1:B2EC 11 00 00 00 	ld	de, 0
   19 D1:B2F0 5F -  -  -  	ld	e, a
   20 D1:B2F1 19 -  -  -  	add	hl, de
   21 D1:B2F2 D1 -  -  -  	pop	de
   22 D1:B2F3 EB -  -  -  	ex	de, hl
   23 D1:B2F4 ED 1F -  -  	ld	(hl), de
   24 D1:B2F6 18 13 -  -  	jr	NumberStop
   25 D1:B2F8 -  -  -  -  AddNumberToStack:
   26 D1:B2F8 36 00 -  -  	ld	(hl), typeNumber
   27 D1:B2FA 23 -  -  -  	inc	hl
   28 D1:B2FB D6 30 -  -  	sub	a, t0                                                ;    new number
   29 D1:B2FD -  -  -  -  InsertAndUpdatePointer
   30 D1:B2FD 11 00 00 00 	ld	de, 0
   31 D1:B301 5F -  -  -  	ld	e, a
   32 D1:B302 ED 1F -  -  	ld	(hl), de
   33 D1:B304 -  -  -  -  UpdatePointer:
   34 D1:B304 23 -  -  -  	inc	hl
   35 D1:B305 23 -  -  -  	inc	hl
   36 D1:B306 23 -  -  -  	inc	hl
   37 D1:B307 22 B2 EC D1 	ld	(outputPtr), hl
   38 D1:B30B -  -  -  -  NumberStop:
   39 D1:B30B CD 28 10 02 	call	_IncFetch
   40 D1:B30F 18 AF -  -  	jr	MainLoop
Listing for file "C:\programming\Assembly\ICE\ICE ASM\parse.asm"
   54 D1:B311 -  -  -  -  
   55 D1:B311 -  -  -  -  NotANumber:
   56 D1:B311 FD CB C0 86 	res	prev_is_number, (iy+fExpression1)
   57 D1:B315 FE 41 -  -  	cp	a, tA
   58 D1:B317 38 0F -  -  	jr	c, NotAVariable
   59 D1:B319 FE 5C -  -  	cp	a, ttheta+1
   60 D1:B31B 30 0B -  -  	jr	nc, NotAVariable
   61 D1:B31D -  -  -  -  AVariable:
   62 D1:B31D 2A B2 EC D1 	ld	hl, (outputPtr)
   63 D1:B321 36 01 -  -  	ld	(hl), typeVariable
   64 D1:B323 23 -  -  -  	inc	hl
   65 D1:B324 D6 41 -  -  	sub	a, tA
   66 D1:B326 18 D5 -  -  	jr	InsertAndUpdatePointer
   67 D1:B328 -  -  -  -  NotAVariable:
   68 D1:B328 21 3C EB D1 	ld	hl, operators_booleans
   69 D1:B32C 01 0F 00 00 	ld	bc, 15
   70 D1:B330 ED B1 -  -  	cpir
   71 D1:B332 20 75 -  -  	jr	nz, NotABoolean
   72 D1:B334 -  -  -  -  ABoolean:
   73 D1:B334 -  -  -  -  #include "operator.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\operator.asm"
    1 D1:B334 21 6F EC D1 	ld	hl, precedence
    2 D1:B338 09 -  -  -  	add	hl, bc
    3 D1:B339 5E -  -  -  	ld	e, (hl)                                        ;    e = precedence of current token
    4 D1:B33A FE 04 -  -  	cp	a, tStore
    5 D1:B33C CC F0 B7 D1 	call	z, MoveStackEntryToOutput
    6 D1:B340 -  -  -  -  CheckOperator:
    7 D1:B340 2A AF EC D1 	ld	hl, (stackPtr)
    8 D1:B344 01 5A 32 D0 	ld	bc, stack
    9 D1:B348 B7 -  -  -  	or	a, a
   10 D1:B349 ED 42 -  -  	sbc	hl, bc
   11 D1:B34B 28 41 -  -  	jr	z, InsertBoolean
   12 D1:B34D 09 -  -  -  	add	hl, bc
   13 D1:B34E 2B -  -  -  	dec	hl
   14 D1:B34F 2B -  -  -  	dec	hl
   15 D1:B350 2B -  -  -  	dec	hl
   16 D1:B351 2B -  -  -  	dec	hl
   17 D1:B352 7E -  -  -  	ld	a, (hl)
   18 D1:B353 FE 1F -  -  	cp	a, typeOperator
   19 D1:B355 20 37 -  -  	jr	nz, InsertBoolean
   20 D1:B357 23 -  -  -  	inc	hl
   21 D1:B358 7E -  -  -  	ld	a, (hl)
   22 D1:B359 21 3C EB D1 	ld	hl, operators_booleans
   23 D1:B35D 01 0F 00 00 	ld	bc, 15
   24 D1:B361 ED B1 -  -  	cpir
   25 D1:B363 21 7E EC D1 	ld	hl, precedence2
   26 D1:B367 09 -  -  -  	add	hl, bc
   27 D1:B368 7E -  -  -  	ld	a, (hl)                                        ;    a = precedence of last token on stack
   28 D1:B369 BB -  -  -  	cp	a, e                                            ;    if a <= e then move
   29 D1:B36A 38 22 -  -  	jr	c, InsertBoolean
   30 D1:B36C -  -  -  -  MoveBooleanFromStackToOutput:
   31 D1:B36C 7B -  -  -  	ld	a, e                                            ;    save for the precedence of current token
   32 D1:B36D ED 5B B2 EC 
              D1 -  -  -  	ld	de, (outputPtr)
   33 D1:B372 2A AF EC D1 	ld	hl, (stackPtr)
   34 D1:B376 2B -  -  -  	dec	hl
   35 D1:B377 2B -  -  -  	dec	hl
   36 D1:B378 2B -  -  -  	dec	hl
   37 D1:B379 2B -  -  -  	dec	hl
   38 D1:B37A 22 AF EC D1 	ld	(stackPtr), hl
   39 D1:B37E ED A0 -  -  	ldi
   40 D1:B380 ED A0 -  -  	ldi
   41 D1:B382 ED A0 -  -  	ldi
   42 D1:B384 ED A0 -  -  	ldi
   43 D1:B386 ED 53 B2 EC 
              D1 -  -  -  	ld	(outputPtr), de
   44 D1:B38B 5F -  -  -  	ld	e, a
   45 D1:B38C 18 B2 -  -  	jr	CheckOperator
   46 D1:B38E -  -  -  -  InsertBoolean:
   47 D1:B38E 2A AF EC D1 	ld	hl, (stackPtr)
   48 D1:B392 36 1F -  -  	ld	(hl), typeOperator
   49 D1:B394 23 -  -  -  	inc	hl
   50 D1:B395 3A F6 31 D0 	ld	a, (tempToken)
   51 D1:B399 77 -  -  -  	ld	(hl), a
   52 D1:B39A 23 -  -  -  	inc	hl
   53 D1:B39B 23 -  -  -  	inc	hl
   54 D1:B39C 23 -  -  -  	inc	hl
   55 D1:B39D 22 AF EC D1 	ld	(stackPtr), hl
Listing for file "C:\programming\Assembly\ICE\ICE ASM\parse.asm"
   74 D1:B3A1 -  -  -  -  
   75 D1:B3A1 -  -  -  -  ReturnToLoop:
   76 D1:B3A1 CD 28 10 02 	call	_IncFetch
   77 D1:B3A5 C3 C0 B2 D1 	jp	MainLoop
   78 D1:B3A9 -  -  -  -  NotABoolean:
   79 D1:B3A9 FE 2B -  -  	cp	a, tComma
   80 D1:B3AB 28 06 -  -  	jr	z, CloseArgument
   81 D1:B3AD FE 11 -  -  	cp	a, tRParen
   82 D1:B3AF C2 42 B4 D1 	jp	nz, NotACommaOrRParen
   83 D1:B3B3 -  -  -  -  CloseArgument:
   84 D1:B3B3 -  -  -  -  #include "closing.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\closing.asm"
    1 D1:B3B3 21 D1 EC D1 	ld	hl, openedParensE
    2 D1:B3B7 47 -  -  -  	ld	b, a
    3 D1:B3B8 7E -  -  -  	ld	a, (hl)
    4 D1:B3B9 B7 -  -  -  	or	a, a
    5 D1:B3BA 28 6D -  -  	jr	z, MismatchedParens
    6 D1:B3BC 78 -  -  -  	ld	a, b
    7 D1:B3BD FE 2B -  -  	cp	a, tComma
    8 D1:B3BF 28 01 -  -  	jr	z, +_
    9 D1:B3C1 35 -  -  -  	dec	(hl)
   10 D1:B3C2 2A AF EC D1 _:	ld	hl, (stackPtr)
   11 D1:B3C6 01 5A 32 D0 	ld	bc, stack
   12 D1:B3CA B7 -  -  -  	or	a, a
   13 D1:B3CB ED 42 -  -  	sbc	hl, bc
   14 D1:B3CD 28 52 -  -  	jr	z, StopMovingForArgument2
   15 D1:B3CF 09 -  -  -  	add	hl, bc
   16 D1:B3D0 2B -  -  -  	dec	hl
   17 D1:B3D1 2B -  -  -  	dec	hl
   18 D1:B3D2 2B -  -  -  	dec	hl
   19 D1:B3D3 2B -  -  -  	dec	hl
   20 D1:B3D4 7E -  -  -  	ld	a, (hl)
   21 D1:B3D5 FE 3F -  -  	cp	a, typeFunction
   22 D1:B3D7 28 23 -  -  	jr	z, StopMovingForArgument
   23 D1:B3D9 FE 1F -  -  	cp	a, typeOperator
   24 D1:B3DB 20 06 -  -  	jr	nz, +_
   25 D1:B3DD 23 -  -  -  	inc	hl
   26 D1:B3DE 7E -  -  -  	ld	a, (hl)
   27 D1:B3DF 2B -  -  -  	dec	hl
   28 D1:B3E0 B7 -  -  -  	or	a, a
   29 D1:B3E1 28 19 -  -  	jr	z, StopMovingForArgument
   30 D1:B3E3 22 AF EC D1 _:	ld	(stackPtr), hl
   31 D1:B3E7 ED 5B B2 EC 
              D1 -  -  -  	ld	de, (outputPtr)
   32 D1:B3EC ED A0 -  -  	ldi
   33 D1:B3EE ED A0 -  -  	ldi
   34 D1:B3F0 ED A0 -  -  	ldi
   35 D1:B3F2 ED A0 -  -  	ldi
   36 D1:B3F4 ED 53 B2 EC 
              D1 -  -  -  	ld	(outputPtr), de
   37 D1:B3F9 18 C7 -  -  	jr	--_
   38 D1:B3FB 09 -  -  -  _:	add	hl, bc
   39 D1:B3FC -  -  -  -  StopMovingForArgument:
   40 D1:B3FC 3A F6 31 D0 	ld	a, (tempToken)
   41 D1:B400 FE 2B -  -  	cp	a, tComma
   42 D1:B402 28 1D -  -  	jr	z, StopMovingForArgument2
   43 D1:B404 22 AF EC D1 	ld	(stackPtr), hl
   44 D1:B408 23 -  -  -  	inc	hl
   45 D1:B409 7E -  -  -  	ld	a, (hl)
   46 D1:B40A FE 10 -  -  	cp	a, tLParen
   47 D1:B40C 28 13 -  -  	jr	z, StopMovingForArgument2
   48 D1:B40E 2B -  -  -  	dec	hl
   49 D1:B40F ED 5B B2 EC 
              D1 -  -  -  	ld	de, (outputPtr)
   50 D1:B414 ED A0 -  -  	ldi
   51 D1:B416 ED A0 -  -  	ldi
   52 D1:B418 ED A0 -  -  	ldi
   53 D1:B41A ED A0 -  -  	ldi
   54 D1:B41C ED 53 B2 EC 
              D1 -  -  -  	ld	(outputPtr), de
   55 D1:B421 -  -  -  -  StopMovingForArgument2:
   56 D1:B421 CD 28 10 02 	call	_IncFetch
   57 D1:B425 C3 C0 B2 D1 	jp	MainLoop
   58 D1:B429 -  -  -  -  MismatchedParens:
   59 D1:B429 3A D2 EC D1 	ld	a, (openedParensF)
   60 D1:B42D B7 -  -  -  	or	a, a
   61 D1:B42E CA 51 AF D1 	jp	z, MismatchError
   62 D1:B432 3A F6 31 D0 	ld	a, (tempToken)
   63 D1:B436 FE 2B -  -  	cp	a, tComma
   64 D1:B438 20 04 -  -  	jr	nz, +_
   65 D1:B43A FD CB BE C6 	set	triggered_a_comma, (iy+fExpression3)
   66 D1:B43E C3 53 B6 D1 _:	jp	StopParsing
Listing for file "C:\programming\Assembly\ICE\ICE ASM\parse.asm"
   85 D1:B442 -  -  -  -  
   86 D1:B442 -  -  -  -  NotACommaOrRParen:
   87 D1:B442 FE 08 -  -  	cp	a, tLBrace
   88 D1:B444 C2 D4 B4 D1 	jp	nz, NotAList
   89 D1:B448 -  -  -  -  AList:
   90 D1:B448 -  -  -  -  #include "list.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\list.asm"
    1 D1:B448 2A B2 EC D1 	ld	hl, (outputPtr)
    2 D1:B44C 36 05 -  -  	ld	(hl), typeList
    3 D1:B44E 23 -  -  -  	inc	hl
    4 D1:B44F ED 5B C7 EC 
              D1 -  -  -  	ld	de, (tempListsPtr)
    5 D1:B454 ED 1F -  -  	ld	(hl), de
    6 D1:B456 ED 53 B6 B4 
              D1 -  -  -  	ld	(ListLengthSMC), de
    7 D1:B45B 23 -  -  -  	inc	hl
    8 D1:B45C 23 -  -  -  	inc	hl
    9 D1:B45D 23 -  -  -  	inc	hl
   10 D1:B45E 22 B2 EC D1 	ld	(outputPtr), hl
   11 D1:B462 EB -  -  -  	ex	de, hl
   12 D1:B463 23 -  -  -  	inc	hl
   13 D1:B464 23 -  -  -  	inc	hl
   14 D1:B465 23 -  -  -  	inc	hl
   15 D1:B466 22 C7 EC D1 	ld	(tempListsPtr), hl
   16 D1:B46A -  -  -  -  ListStart:
   17 D1:B46A B7 -  -  -  	or	a, a
   18 D1:B46B ED 62 -  -  	sbc	hl, hl
   19 D1:B46D -  -  -  -  ListLoop:
   20 D1:B46D E5 -  -  -  	push	hl
   21 D1:B46E CD 28 10 02 	call	_IncFetch
   22 D1:B472 E1 -  -  -  	pop	hl
   23 D1:B473 FE 30 -  -  	cp	a, t0
   24 D1:B475 38 14 -  -  	jr	c, ListNotNumber
   25 D1:B477 FE 3A -  -  	cp	a, t9+1
   26 D1:B479 30 10 -  -  	jr	nc, ListNotNumber
   27 D1:B47B D6 30 -  -  	sub	a, t0
   28 D1:B47D 29 -  -  -  	add	hl, hl
   29 D1:B47E E5 -  -  -  	push	hl
   30 D1:B47F D1 -  -  -  	pop	de
   31 D1:B480 29 -  -  -  	add	hl, hl
   32 D1:B481 29 -  -  -  	add	hl, hl
   33 D1:B482 19 -  -  -  	add	hl, de
   34 D1:B483 11 00 00 00 	ld	de, 0
   35 D1:B487 5F -  -  -  	ld	e, a
   36 D1:B488 19 -  -  -  	add	hl, de
   37 D1:B489 18 E2 -  -  	jr	ListLoop
   38 D1:B48B -  -  -  -  ListNotNumber:
   39 D1:B48B FE 2B -  -  	cp	a, tComma
   40 D1:B48D 20 10 -  -  	jr	nz, ListNotNumberOrComma
   41 D1:B48F EB -  -  -  	ex	de, hl
   42 D1:B490 2A C7 EC D1 	ld	hl, (tempListsPtr)
   43 D1:B494 ED 1F -  -  	ld	(hl), de
   44 D1:B496 23 -  -  -  	inc	hl
   45 D1:B497 23 -  -  -  	inc	hl
   46 D1:B498 23 -  -  -  	inc	hl
   47 D1:B499 22 C7 EC D1 	ld	(tempListsPtr), hl
   48 D1:B49D 18 CB -  -  	jr	ListStart
   49 D1:B49F -  -  -  -  ListNotNumberOrComma:
   50 D1:B49F FE 09 -  -  	cp	a, tRBrace
   51 D1:B4A1 28 04 -  -  	jr	z, ListStop
   52 D1:B4A3 FE 04 -  -  	cp	a, tStore
   53 D1:B4A5 20 25 -  -  	jr	nz, ListError
   54 D1:B4A7 -  -  -  -  ListStop:
   55 D1:B4A7 EB -  -  -  	ex	de, hl
   56 D1:B4A8 2A C7 EC D1 	ld	hl, (tempListsPtr)
   57 D1:B4AC ED 1F -  -  	ld	(hl), de
   58 D1:B4AE 23 -  -  -  	inc	hl
   59 D1:B4AF 23 -  -  -  	inc	hl
   60 D1:B4B0 23 -  -  -  	inc	hl
   61 D1:B4B1 22 C7 EC D1 	ld	(tempListsPtr),  hl
   62 D1:B4B5 -  -  -  -  ListLengthSMC = $+1
   63 D1:B4B5 11 00 00 00 	ld	de, 0
   64 D1:B4B9 2B -  -  -  	dec	hl
   65 D1:B4BA 2B -  -  -  	dec	hl
   66 D1:B4BB 2B -  -  -  	dec	hl
   67 D1:B4BC B7 -  -  -  	or	a, a
   68 D1:B4BD ED 52 -  -  	sbc	hl, de
   69 D1:B4BF EB -  -  -  	ex	de, hl
   70 D1:B4C0 ED 1F -  -  	ld	(hl), de
   71 D1:B4C2 FE 04 -  -  	cp	a, tStore
   72 D1:B4C4 C4 28 10 02 	call	nz, _IncFetch
   73 D1:B4C8 C3 C0 B2 D1 	jp	MainLoop
   74 D1:B4CC -  -  -  -  ListError:
   75 D1:B4CC 21 4D ED D1 	ld	hl, InvalidListArgumentMessage
   76 D1:B4D0 C3 BD AF D1 	jp	DispFinalString
Listing for file "C:\programming\Assembly\ICE\ICE ASM\parse.asm"
   91 D1:B4D4 -  -  -  -  
   92 D1:B4D4 -  -  -  -  NotAList:
   93 D1:B4D4 FE 5D -  -  	cp	a, tVarLst
   94 D1:B4D6 20 4E -  -  	jr	nz, NotAnOSList
   95 D1:B4D8 -  -  -  -  AnOSList:
   96 D1:B4D8 CD 28 10 02 	call	_IncFetch
   97 D1:B4DC FE 06 -  -  	cp	a, 6
   98 D1:B4DE D2 61 AF D1 	jp	nc, InvalidTokenError
   99 D1:B4E2 4F -  -  -  	ld	c, a
  100 D1:B4E3 06 03 -  -  	ld	b, 3
  101 D1:B4E5 ED 4C -  -  	mlt	bc
  102 D1:B4E7 21 8D EC D1 	ld	hl, lists
  103 D1:B4EB 09 -  -  -  	add	hl, bc
  104 D1:B4EC ED 27 -  -  	ld	hl, (hl)
  105 D1:B4EE EB -  -  -  	ex	de, hl
  106 D1:B4EF 2A B2 EC D1 	ld	hl, (outputPtr)
  107 D1:B4F3 36 06 -  -  	ld	(hl), typeOSList
  108 D1:B4F5 23 -  -  -  	inc	hl
  109 D1:B4F6 ED 1F -  -  	ld	(hl), de
  110 D1:B4F8 23 -  -  -  	inc	hl
  111 D1:B4F9 23 -  -  -  	inc	hl
  112 D1:B4FA 23 -  -  -  	inc	hl
  113 D1:B4FB 22 B2 EC D1 	ld	(outputPtr), hl
  114 D1:B4FF CD 28 10 02 	call	_IncFetch
  115 D1:B503 FE 10 -  -  	cp	a, tLParen
  116 D1:B505 C2 BF B2 D1 	jp	nz, MainLoopResCarryFlag
  117 D1:B509 21 D1 EC D1 	ld	hl, openedParensE
  118 D1:B50D 34 -  -  -  	inc	(hl)
  119 D1:B50E 2A AF EC D1 	ld	hl, (stackPtr)
  120 D1:B512 36 1F -  -  	ld	(hl), typeOperator
  121 D1:B514 23 -  -  -  	inc	hl
  122 D1:B515 36 00 -  -  	ld	(hl), 0
  123 D1:B517 23 -  -  -  	inc	hl
  124 D1:B518 23 -  -  -  	inc	hl
  125 D1:B519 23 -  -  -  	inc	hl
  126 D1:B51A 22 AF EC D1 	ld	(stackPtr), hl
  127 D1:B51E CD 28 10 02 	call	_IncFetch
  128 D1:B522 C3 C0 B2 D1 	jp	MainLoop
  129 D1:B526 -  -  -  -  NotAnOSList:
  130 D1:B526 FE 2A -  -  	cp	a, tString
  131 D1:B528 20 53 -  -  	jr	nz, NotAString
  132 D1:B52A -  -  -  -  AString:
  133 D1:B52A 2A B2 EC D1 	ld	hl, (outputPtr)
  134 D1:B52E 36 07 -  -  	ld	(hl), typeString
  135 D1:B530 23 -  -  -  	inc	hl
  136 D1:B531 ED 5B C4 EC 
              D1 -  -  -  	ld	de, (tempStringsPtr)
  137 D1:B536 ED 1F -  -  	ld	(hl), de
  138 D1:B538 23 -  -  -  	inc	hl
  139 D1:B539 23 -  -  -  	inc	hl
  140 D1:B53A 23 -  -  -  	inc	hl
  141 D1:B53B 22 B2 EC D1 	ld	(outputPtr), hl
  142 D1:B53F -  -  -  -  StringLoop:
  143 D1:B53F CD 28 10 02 	call	_IncFetch
  144 D1:B543 38 2C -  -  	jr	c, StringStop2
  145 D1:B545 FE 3F -  -  	cp	a, tEnter
  146 D1:B547 28 28 -  -  	jr	z, StringStop2
  147 D1:B549 FE 2A -  -  	cp	a, tString
  148 D1:B54B 28 1E -  -  	jr	z, StringStop
  149 D1:B54D FE 04 -  -  	cp	a, tStore
  150 D1:B54F 28 1A -  -  	jr	z, StringStop
  151 D1:B551 CD AC 04 02 	call	_IsA2ByteTok
  152 D1:B555 20 06 -  -  	jr	nz, +_
  153 D1:B557 23 -  -  -  	inc	hl
  154 D1:B558 22 1A 23 D0 	ld	(curPC), hl
  155 D1:B55C 2B -  -  -  	dec	hl
  156 D1:B55D D5 -  -  -  _:	push	de
  157 D1:B55E CD 70 08 02 	call	_Get_Tok_Strng
  158 D1:B562 D1 -  -  -  	pop	de
  159 D1:B563 21 0E 06 D0 	ld	hl, OP3
  160 D1:B567 ED B0 -  -  	ldir
  161 D1:B569 18 D4 -  -  	jr	StringLoop
  162 D1:B56B -  -  -  -  StringStop:
  163 D1:B56B FE 3F -  -  	cp	a, tEnter
  164 D1:B56D C4 28 10 02 	call	nz, _IncFetch
  165 D1:B571 -  -  -  -  StringStop2:
  166 D1:B571 EB -  -  -  	ex	de, hl
  167 D1:B572 36 00 -  -  	ld	(hl), 0
  168 D1:B574 23 -  -  -  	inc	hl
  169 D1:B575 22 C4 EC D1 	ld	(tempStringsPtr), hl
  170 D1:B579 C3 C0 B2 D1 	jp	MainLoop
  171 D1:B57D -  -  -  -  NotAString:
  172 D1:B57D FE 3F -  -  	cp	a, tEnter
  173 D1:B57F CA 53 B6 D1 	jp	z, StopParsing
  174 D1:B583 21 59 EB D1 	ld	hl, FunctionsWithReturnValue
  175 D1:B587 01 0A 00 00 	ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValue
  176 D1:B58B ED B1 -  -  	cpir
  177 D1:B58D C2 61 AF D1 	jp	nz, InvalidTokenError
  178 D1:B591 FE AD -  -  	cp	a, tGetKey
  179 D1:B593 28 0A -  -  	jr	z, AddFunctionToOutput
  180 D1:B595 FE 0D -  -  	cp	a, tSqr
  181 D1:B597 28 06 -  -  	jr	z, AddFunctionToOutput
  182 D1:B599 FE AB -  -  	cp	a, trand
  183 D1:B59B C2 2D B6 D1 	jp	nz, AddFunctionToStack
  184 D1:B59F -  -  -  -  AddFunctionToOutput:
  185 D1:B59F 2A B2 EC D1 	ld	hl, (outputPtr)
  186 D1:B5A3 1E 04 -  -  	ld	e, typeReturnValue
  187 D1:B5A5 FE 0D -  -  	cp	a, tSqr
  188 D1:B5A7 20 02 -  -  	jr	nz, +_
  189 D1:B5A9 1E 3F -  -  	ld	e, typeFunction
  190 D1:B5AB 73 -  -  -  _:	ld	(hl), e
  191 D1:B5AC 23 -  -  -  	inc	hl
  192 D1:B5AD 77 -  -  -  	ld	(hl), a
  193 D1:B5AE 23 -  -  -  	inc	hl
  194 D1:B5AF 23 -  -  -  	inc	hl
  195 D1:B5B0 23 -  -  -  	inc	hl
  196 D1:B5B1 22 B2 EC D1 	ld	(outputPtr), hl
  197 D1:B5B5 FE AD -  -  	cp	a, tGetKey
  198 D1:B5B7 C2 A1 B3 D1 	jp	nz, ReturnToLoop
  199 D1:B5BB CD 28 10 02 	call	_IncFetch
  200 D1:B5BF DA C0 B2 D1 	jp	c, MainLoop
  201 D1:B5C3 FE 10 -  -  	cp	a, tLParen
  202 D1:B5C5 C2 BF B2 D1 	jp	nz, MainLoopResCarryFlag
  203 D1:B5C9 CD 28 10 02 	call	_IncFetch
  204 D1:B5CD DA 4B AF D1 _:	jp	c, ErrorSyntax
  205 D1:B5D1 FE 3F -  -  	cp	a, tEnter
  206 D1:B5D3 CA 4B AF D1 	jp	z, ErrorSyntax
  207 D1:B5D7 D6 30 -  -  	sub	a, t0
  208 D1:B5D9 38 F2 -  -  	jr	c, -_
  209 D1:B5DB FE 0A -  -  	cp	a, t9-t0+1
  210 D1:B5DD D2 4B AF D1 _:	jp	nc, ErrorSyntax
  211 D1:B5E1 11 00 00 00 	ld	de, 0
  212 D1:B5E5 5F -  -  -  	ld	e, a
  213 D1:B5E6 CD 28 10 02 	call	_IncFetch
  214 D1:B5EA 38 35 -  -  	jr	c, AddGetKeyDirect
  215 D1:B5EC FE 3F -  -  	cp	a, tEnter
  216 D1:B5EE 28 31 -  -  	jr	z, AddGetKeyDirect
  217 D1:B5F0 FE 11 -  -  	cp	a, tRParen
  218 D1:B5F2 28 29 -  -  	jr	z, +_
  219 D1:B5F4 FE 04 -  -  	cp	a, tStore
  220 D1:B5F6 28 29 -  -  	jr	z, AddGetKeyDirect
  221 D1:B5F8 D6 30 -  -  	sub	a, t0
  222 D1:B5FA 38 D1 -  -  	jr	c, --_
  223 D1:B5FC FE 0A -  -  	cp	a, t9-t0+1
  224 D1:B5FE 30 DD -  -  	jr	nc, -_
  225 D1:B600 D5 -  -  -  	push	de
  226 D1:B601 E1 -  -  -  	pop	hl
  227 D1:B602 29 -  -  -  	add	hl, hl
  228 D1:B603 29 -  -  -  	add	hl, hl
  229 D1:B604 19 -  -  -  	add	hl, de
  230 D1:B605 29 -  -  -  	add	hl, hl
  231 D1:B606 5F -  -  -  	ld	e, a
  232 D1:B607 19 -  -  -  	add	hl, de
  233 D1:B608 EB -  -  -  	ex	de, hl
  234 D1:B609 CD 28 10 02 	call	_IncFetch
  235 D1:B60D 38 12 -  -  	jr	c, AddGetKeyDirect
  236 D1:B60F FE 3F -  -  	cp	a, tEnter
  237 D1:B611 28 0E -  -  	jr	z, AddGetKeyDirect
  238 D1:B613 FE 04 -  -  	cp	a, tStore
  239 D1:B615 28 0A -  -  	jr	z, AddGetKeyDirect
  240 D1:B617 FE 11 -  -  	cp	a, tRParen
  241 D1:B619 C2 4B AF D1 	jp	nz, ErrorSyntax
  242 D1:B61D CD 28 10 02 _:	call	_IncFetch
  243 D1:B621 -  -  -  -  AddGetKeyDirect:
  244 D1:B621 2A B2 EC D1 	ld	hl, (outputPtr)
  245 D1:B625 2B -  -  -  	dec	hl
  246 D1:B626 2B -  -  -  	dec	hl
  247 D1:B627 2B -  -  -  	dec	hl
  248 D1:B628 73 -  -  -  	ld	(hl), e
  249 D1:B629 C3 C0 B2 D1 	jp	MainLoop
  250 D1:B62D -  -  -  -  AddFunctionToStack:
  251 D1:B62D 21 D1 EC D1 	ld	hl, openedParensE
  252 D1:B631 34 -  -  -  	inc	(hl)
  253 D1:B632 CD AC 04 02 	call	_IsA2ByteTok
  254 D1:B636 CC 28 10 02 	call	z, _IncFetch
  255 D1:B63A 47 -  -  -  	ld	b, a
  256 D1:B63B 2A AF EC D1 	ld	hl, (stackPtr)
  257 D1:B63F 3A F6 31 D0 	ld	a, (tempToken)
  258 D1:B643 36 3F -  -  	ld	(hl), typeFunction
  259 D1:B645 23 -  -  -  	inc	hl
  260 D1:B646 77 -  -  -  	ld	(hl), a
  261 D1:B647 23 -  -  -  	inc	hl
  262 D1:B648 70 -  -  -  	ld	(hl), b
  263 D1:B649 23 -  -  -  	inc	hl
  264 D1:B64A 23 -  -  -  	inc	hl
  265 D1:B64B 22 AF EC D1 	ld	(stackPtr), hl
  266 D1:B64F C3 A1 B3 D1 	jp	ReturnToLoop
  267 D1:B653 -  -  -  -  StopParsing:                                                                ;    move stack to output
  268 D1:B653 CD F0 B7 D1 	call	MoveStackEntryToOutput
  269 D1:B657 2A B2 EC D1 	ld	hl, (outputPtr)
  270 D1:B65B 11 42 36 D0 	ld	de, output
  271 D1:B65F B7 -  -  -  	or	a, a
  272 D1:B660 ED 52 -  -  	sbc	hl, de
  273 D1:B662 E5 -  -  -  	push	hl
  274 D1:B663 C1 -  -  -  	pop	bc                                                                    ;    BC / 4 is amount of elements in the stack
  275 D1:B664 D5 -  -  -  	push	de
  276 D1:B665 E1 -  -  -  	pop	hl
  277 D1:B666 3E 01 -  -  	ld	a, OutputIsInHL
  278 D1:B668 32 D9 EC D1 	ld	(ExprOutput), a
  279 D1:B66C 32 DA EC D1 	ld	(ExprOutput2), a
  280 D1:B670 78 -  -  -  	ld	a, b
  281 D1:B671 B1 -  -  -  	or	a, c
  282 D1:B672 FE 04 -  -  	cp	a, 4
  283 D1:B674 D8 -  -  -  	ret	c
  284 D1:B675 CA 88 B7 D1 	jp	z, ParseSingleArgument
  285 D1:B679 -  -  -  -  Loop:
  286 D1:B679 AF -  -  -  	xor	a, a
  287 D1:B67A FD 77 C0 -  	ld	(iy+fExpression1), a
  288 D1:B67D FD 77 BF -  	ld	(iy+fExpression2), a
  289 D1:B680 ED 42 -  -  	sbc	hl, bc
  290 D1:B682 11 42 36 D0 	ld	de, output
  291 D1:B686 ED 52 -  -  	sbc	hl, de
  292 D1:B688 CA 4B AF D1 	jp	z, ErrorSyntax
  293 D1:B68C 19 -  -  -  	add	hl, de
  294 D1:B68D 09 -  -  -  	add	hl, bc
  295 D1:B68E E5 -  -  -  	push	hl
  296 D1:B68F 21 0C 00 00 	ld	hl, 12
  297 D1:B693 B7 -  -  -  	or	a, a
  298 D1:B694 ED 42 -  -  	sbc	hl, bc
  299 D1:B696 20 04 -  -  	jr	nz, +_
  300 D1:B698 FD CB C0 DE 	set	op_is_last_one, (iy+fExpression1)
  301 D1:B69C E1 -  -  -  _:	pop	hl
  302 D1:B69D 78 -  -  -  	ld	a, b
  303 D1:B69E B1 -  -  -  	or	a, c
  304 D1:B69F FE 04 -  -  	cp	a, 4
  305 D1:B6A1 CA 7E B7 D1 	jp	z, StopParseExpression
  306 D1:B6A5 7E -  -  -  	ld	a, (hl)
  307 D1:B6A6 FE 1F -  -  	cp	a, typeOperator
  308 D1:B6A8 28 5B -  -  	jr	z, ExpressOperator
  309 D1:B6AA FE 3F -  -  	cp	a, typeFunction
  310 D1:B6AC 28 06 -  -  	jr	z, ExpressFunction
  311 D1:B6AE 23 -  -  -  	inc	hl
  312 D1:B6AF 23 -  -  -  	inc	hl
  313 D1:B6B0 23 -  -  -  	inc	hl
  314 D1:B6B1 23 -  -  -  	inc	hl
  315 D1:B6B2 18 C5 -  -  	jr	Loop
  316 D1:B6B4 -  -  -  -  ExpressFunction:
  317 D1:B6B4 23 -  -  -  	inc	hl                                                                    ;    function = a
  318 D1:B6B5 7E -  -  -  	ld	a, (hl)
  319 D1:B6B6 2B -  -  -  	dec	hl
  320 D1:B6B7 C5 -  -  -  	push	bc
  321 D1:B6B8 E5 -  -  -  	push	hl
  322 D1:B6B9 CD BF C5 D1 	call	ExecuteFunction
  323 D1:B6BD D1 -  -  -  	pop	de
  324 D1:B6BE D5 -  -  -  	push	de
  325 D1:B6BF E1 -  -  -  	pop	hl
  326 D1:B6C0 23 -  -  -  	inc	hl
  327 D1:B6C1 23 -  -  -  	inc	hl
  328 D1:B6C2 23 -  -  -  	inc	hl
  329 D1:B6C3 23 -  -  -  	inc	hl
  330 D1:B6C4 3A D3 EC D1 	ld	a, (amountOfArguments)
  331 D1:B6C8 3D -  -  -  	dec	a
  332 D1:B6C9 28 07 -  -  	jr	z, ++_
  333 D1:B6CB 47 -  -  -  	ld	b, a
  334 D1:B6CC 1B -  -  -  _:	dec	de
  335 D1:B6CD 1B -  -  -  	dec	de
  336 D1:B6CE 1B -  -  -  	dec	de
  337 D1:B6CF 1B -  -  -  	dec	de
  338 D1:B6D0 10 FA -  -  	djnz	-_
  339 D1:B6D2 C1 -  -  -  _:	pop	bc
  340 D1:B6D3 D5 -  -  -  	push	de
  341 D1:B6D4 C5 -  -  -  	push	bc
  342 D1:B6D5 E5 -  -  -  	push	hl
  343 D1:B6D6 ED B0 -  -  	ldir
  344 D1:B6D8 E1 -  -  -  	pop	hl
  345 D1:B6D9 C1 -  -  -  	pop	bc
  346 D1:B6DA D1 -  -  -  	pop	de
  347 D1:B6DB EB -  -  -  	ex	de, hl
  348 D1:B6DC 09 -  -  -  	add	hl, bc
  349 D1:B6DD B7 -  -  -  	or	a, a
  350 D1:B6DE ED 52 -  -  	sbc	hl, de
  351 D1:B6E0 E5 -  -  -  	push	hl
  352 D1:B6E1 C1 -  -  -  	pop	bc                                                                    ;    BC = BC+DE-HL
  353 D1:B6E2 78 -  -  -  	ld	a, b
  354 D1:B6E3 B1 -  -  -  	or	a, c
  355 D1:B6E4 FE 04 -  -  	cp	a, 4
  356 D1:B6E6 20 0F -  -  	jr	nz, +_
  357 D1:B6E8 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  358 D1:B6EC CA 7E B7 D1 	jp	z, StopParseExpression
  359 D1:B6F0 DD 27 FD -  	ld	hl, (ix-3)
  360 D1:B6F3 C3 93 B7 D1 	jp	ParseSingleArgument2
  361 D1:B6F7 EB -  -  -  _:	ex	de, hl
  362 D1:B6F8 3A D3 EC D1 	ld	a, (amountOfArguments)
  363 D1:B6FC 47 -  -  -  	ld	b, a
  364 D1:B6FD 2B -  -  -  _:	dec	hl
  365 D1:B6FE 2B -  -  -  	dec	hl
  366 D1:B6FF 2B -  -  -  	dec	hl
  367 D1:B700 2B -  -  -  	dec	hl
  368 D1:B701 10 FA -  -  	djnz	-_
  369 D1:B703 18 4E -  -  	jr	AddChain
  370 D1:B705 -  -  -  -  ExpressOperator:
  371 D1:B705 23 -  -  -  	inc	hl
  372 D1:B706 7E -  -  -  	ld	a, (hl)
  373 D1:B707 2B -  -  -  	dec	hl
  374 D1:B708 C5 -  -  -  	push	bc
  375 D1:B709 E5 -  -  -  	push	hl
  376 D1:B70A DD E1 -  -  	pop	ix
  377 D1:B70C DD 17 FD -  	ld	de, (ix-3)
  378 D1:B70F DD 07 F9 -  	ld	bc, (ix-7)
  379 D1:B712 CD 5F D4 D1 	call	ExecuteOperator
  380 D1:B716 3A DA EC D1 	ld	a, (ExprOutput2)
  381 D1:B71A 32 D9 EC D1 	ld	(ExprOutput), a
  382 D1:B71E ED 12 FC -  	lea	de, ix-4
  383 D1:B721 C1 -  -  -  	pop	bc
  384 D1:B722 21 08 00 00 	ld	hl, 8
  385 D1:B726 19 -  -  -  	add	hl, de
  386 D1:B727 D5 -  -  -  	push	de
  387 D1:B728 C5 -  -  -  	push	bc
  388 D1:B729 ED B0 -  -  	ldir
  389 D1:B72B C1 -  -  -  	pop	bc
  390 D1:B72C 21 F4 FF FF 	ld	hl, -12
  391 D1:B730 09 -  -  -  	add	hl, bc
  392 D1:B731 19 -  -  -  	add	hl, de
  393 D1:B732 B7 -  -  -  	or	a, a
  394 D1:B733 ED 52 -  -  	sbc	hl, de
  395 D1:B735 E5 -  -  -  	push	hl
  396 D1:B736 C1 -  -  -  	pop	bc
  397 D1:B737 E1 -  -  -  	pop	hl
  398 D1:B738 20 0D -  -  	jr	nz, +_
  399 D1:B73A FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  400 D1:B73E CA 7E B7 D1 	jp	z, StopParseExpression
  401 D1:B742 DD 27 F9 -  	ld	hl, (ix-7)
  402 D1:B745 18 4C -  -  	jr	ParseSingleArgument2
  403 D1:B747 03 -  -  -  _:	inc	bc
  404 D1:B748 03 -  -  -  	inc	bc
  405 D1:B749 03 -  -  -  	inc	bc
  406 D1:B74A 03 -  -  -  	inc	bc
  407 D1:B74B FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  408 D1:B74F C2 79 B6 D1 	jp	nz, Loop
  409 D1:B753 -  -  -  -  AddChain:
  410 D1:B753 E5 -  -  -  	push	hl
  411 D1:B754 DD E1 -  -  	pop	ix
  412 D1:B756 1E 03 -  -  	ld	e, typeChainAns
  413 D1:B758 7E -  -  -  	ld	a, (hl)
  414 D1:B759 FE 1F -  -  	cp	a, typeOperator
  415 D1:B75B 30 1A -  -  	jr	nc, ChainAns2
  416 D1:B75D DD B6 04 -  	or	a, (ix+4)
  417 D1:B760 FE 1F -  -  	cp	a, typeOperator
  418 D1:B762 28 13 -  -  	jr	z, ChainAns2
  419 D1:B764 FE 3F -  -  	cp	a, typeFunction
  420 D1:B766 20 07 -  -  	jr	nz, ChainPush2
  421 D1:B768 DD 7E 05 -  	ld	a, (ix+5)
  422 D1:B76B FE B8 -  -  	cp	a, tNot
  423 D1:B76D 20 08 -  -  	jr	nz, ChainAns2
  424 D1:B76F -  -  -  -  ChainPush2:
  425 D1:B76F E5 -  -  -  	push	hl
  426 D1:B770 CD 17 AD D1 	call	InsertPushHLDE
  427 D1:B774 E1 -  -  -  	pop	hl
  428 D1:B775 1E 02 -  -  	ld	e, typeChainPush
  429 D1:B777 -  -  -  -  ChainAns2:
  430 D1:B777 DD 73 FC -  	ld	(ix-4), e
  431 D1:B77A C3 79 B6 D1 	jp	Loop
  432 D1:B77E -  -  -  -      
  433 D1:B77E -  -  -  -  StopParseExpression:
  434 D1:B77E 3A D2 EC D1 	ld	a, (openedParensF)
  435 D1:B782 B7 -  -  -  	or	a, a
  436 D1:B783 C2 D5 AC D1 	jp	nz, MaybeChangeDEToHL
  437 D1:B787 C9 -  -  -  	ret
  438 D1:B788 -  -  -  -      
  439 D1:B788 -  -  -  -  ParseSingleArgument:
  440 D1:B788 7E -  -  -  	ld	a, (hl)
  441 D1:B789 B7 -  -  -  	or	a, a
  442 D1:B78A 20 0D -  -  	jr	nz, ParseSingleNotNumber
  443 D1:B78C FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  444 D1:B790 23 -  -  -  	inc	hl
  445 D1:B791 ED 27 -  -  	ld	hl, (hl)
  446 D1:B793 -  -  -  -  ParseSingleArgument2:
  447 D1:B793 3E 21 -  -  	ld	a, 021h
  448 D1:B795 C3 5A AC D1 	jp	InsertAHL                                                            ;    ld hl, *
  449 D1:B799 -  -  -  -  ParseSingleNotNumber:
  450 D1:B799 3D -  -  -  	dec	a
  451 D1:B79A 20 06 -  -  	jr	nz, ParseSingleNotVariable
  452 D1:B79C 23 -  -  -  	inc	hl
  453 D1:B79D 4E -  -  -  	ld	c, (hl)
  454 D1:B79E C3 80 AC D1 	jp	InsertHIXC
  455 D1:B7A2 -  -  -  -  ParseSingleNotVariable:
  456 D1:B7A2 D6 03 -  -  	sub	a, 3
  457 D1:B7A4 20 0C -  -  	jr	nz, ParseSingleNotFunction
  458 D1:B7A6 23 -  -  -  	inc	hl
  459 D1:B7A7 7E -  -  -  	ld	a, (hl)
  460 D1:B7A8 06 02 -  -  	ld	b, OutputInHL
  461 D1:B7AA FD CB C0 B6 	res	need_push, (iy+fExpression1)
  462 D1:B7AE C3 52 AD D1 	jp	GetFunction
  463 D1:B7B2 -  -  -  -  ParseSingleNotFunction:
  464 D1:B7B2 D6 03 -  -  	sub	a, 3
  465 D1:B7B4 C2 4B AF D1 	jp	nz, ErrorSyntax
  466 D1:B7B8 FD CB C0 FE 	set	output_is_string, (iy+fExpression1)
  467 D1:B7BC E5 -  -  -  	push	hl
  468 D1:B7BD 3E 21 -  -  	ld	a, 021h
  469 D1:B7BF CD 26 AD D1 	call	InsertA                                                        ;    ld hl, *
  470 D1:B7C3 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  471 D1:B7C7 2A CA EC D1 	ld	hl, (programDataDataPtr)
  472 D1:B7CB CD 5E AC D1 	call	InsertHL                                                        ;    ld hl, XXXXXXX
  473 D1:B7CF E1 -  -  -  	pop	hl
  474 D1:B7D0 23 -  -  -  	inc	hl
  475 D1:B7D1 ED 17 -  -  	ld	de, (hl)                                                                ;    hl points to string in string stack
  476 D1:B7D3 ED 27 -  -  	ld	hl, (hl)
  477 D1:B7D5 01 FF FF FF 	ld	bc, -1
  478 D1:B7D9 AF -  -  -  	xor	a, a
  479 D1:B7DA ED B1 -  -  	cpir
  480 D1:B7DC ED 52 -  -  	sbc	hl, de
  481 D1:B7DE E5 -  -  -  	push	hl
  482 D1:B7DF C1 -  -  -  	pop	bc                                                                    ;    bc = length of string
  483 D1:B7E0 EB -  -  -  	ex	de, hl
  484 D1:B7E1 ED 5B CA EC 
              D1 -  -  -  	ld	de, (programDataDataPtr)
  485 D1:B7E6 D5 -  -  -  	push	de
  486 D1:B7E7 ED B0 -  -  	ldir
  487 D1:B7E9 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  488 D1:B7EE E1 -  -  -  	pop	hl
  489 D1:B7EF C9 -  -  -  	ret
  490 D1:B7F0 -  -  -  -      
  491 D1:B7F0 -  -  -  -  MoveStackEntryToOutput:
  492 D1:B7F0 2A AF EC D1 	ld	hl, (stackPtr)
  493 D1:B7F4 11 5A 32 D0 	ld	de, stack
  494 D1:B7F8 B7 -  -  -  	or	a, a
  495 D1:B7F9 ED 52 -  -  	sbc	hl, de
  496 D1:B7FB C8 -  -  -  	ret	z
  497 D1:B7FC 19 -  -  -  	add	hl, de
  498 D1:B7FD 2B -  -  -  	dec	hl
  499 D1:B7FE 2B -  -  -  	dec	hl
  500 D1:B7FF 2B -  -  -  	dec	hl
  501 D1:B800 2B -  -  -  	dec	hl
  502 D1:B801 22 AF EC D1 	ld	(stackPtr), hl
  503 D1:B805 ED 5B B2 EC 
              D1 -  -  -  	ld	de, (outputPtr)
  504 D1:B80A 7E -  -  -  	ld	a, (hl)
  505 D1:B80B FE 3F -  -  	cp	a, typeFunction
  506 D1:B80D 20 07 -  -  	jr	nz, +_
  507 D1:B80F 23 -  -  -  	inc	hl
  508 D1:B810 7E -  -  -  	ld	a, (hl)
  509 D1:B811 2B -  -  -  	dec	hl
  510 D1:B812 FE 10 -  -  	cp	a, tLParen
  511 D1:B814 28 DA -  -  	jr	z, MoveStackEntryToOutput
  512 D1:B816 ED A0 -  -  _:	ldi
  513 D1:B818 ED A0 -  -  	ldi
  514 D1:B81A ED A0 -  -  	ldi
  515 D1:B81C ED A0 -  -  	ldi
  516 D1:B81E ED 53 B2 EC 
              D1 -  -  -  	ld	(outputPtr), de
  517 D1:B823 18 CB -  -  	jr	MoveStackEntryToOutput
Listing for file "ice.asm"
  455 D1:B825 -  -  -  -  #include "putchar.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\putchar.asm"
    1 D1:B825 -  -  -  -  _PrintChar_ASM:
    2 D1:B825 E5 -  -  -  	push	hl
    3 D1:B826 -  -  -  -  TextXPos_ASM = $+1
    4 D1:B826 01 00 00 00 	ld	bc, 0
    5 D1:B82A F5 -  -  -  	push	af
    6 D1:B82B F5 -  -  -  	push	af
    7 D1:B82C C5 -  -  -  	push	bc
    8 D1:B82D B7 -  -  -  	or	a, a
    9 D1:B82E ED 62 -  -  	sbc	hl, hl
   10 D1:B830 6F -  -  -  	ld	l, a
   11 D1:B831 11 93 B8 D1 	ld	de, DefaultCharSpacing_ASM
   12 D1:B835 19 -  -  -  	add	hl, de
   13 D1:B836 7E -  -  -  	ld	a, (hl)
   14 D1:B837 32 7A B8 D1 	ld	(charwidth), a
   15 D1:B83B B7 -  -  -  	or	a, a
   16 D1:B83C ED 62 -  -  	sbc	hl, hl
   17 D1:B83E 6F -  -  -  	ld	l, a
   18 D1:B83F ED 44 -  -  	neg
   19 D1:B841 32 4B B8 D1 	ld	(CharWidthDelta_ASM), a
   20 D1:B845 09 -  -  -  	add	hl, bc
   21 D1:B846 22 27 B8 D1 	ld	(TextXPos_ASM),hl
   22 D1:B84A -  -  -  -  CharWidthDelta_ASM = $+1
   23 D1:B84A 11 FF FF FF 	ld	de, -1
   24 D1:B84E 21 40 01 00 	ld	hl, lcdWidth
   25 D1:B852 19 -  -  -  	add	hl, de
   26 D1:B853 22 87 B8 D1 	ld	(line_change), hl
   27 D1:B857 -  -  -  -  TextYPos_ASM    = $+1
   28 D1:B857 2E 00 -  -  	ld	l, 0
   29 D1:B859 26 A0 -  -  	ld	h, 160
   30 D1:B85B ED 6C -  -  	mlt	hl
   31 D1:B85D 29 -  -  -  	add	hl, hl
   32 D1:B85E 11 00 00 D4 	ld	de, vRAM
   33 D1:B862 19 -  -  -  	add	hl, de
   34 D1:B863 D1 -  -  -  	pop	de
   35 D1:B864 19 -  -  -  	add	hl, de
   36 D1:B865 F1 -  -  -  	pop	af
   37 D1:B866 EB -  -  -  	ex	de, hl
   38 D1:B867 B7 -  -  -  	or	a, a
   39 D1:B868 ED 62 -  -  	sbc	hl, hl
   40 D1:B86A D6 17 -  -  	sub	a, 23
   41 D1:B86C 6F -  -  -  	ld	l, a
   42 D1:B86D 29 -  -  -  	add	hl, hl
   43 D1:B86E 29 -  -  -  	add	hl, hl
   44 D1:B86F 29 -  -  -  	add	hl, hl
   45 D1:B870 01 0E B9 D1 	ld	bc, DefaultTextData_ASM
   46 D1:B874 09 -  -  -  	add	hl, bc
   47 D1:B875 06 08 -  -  	ld	b, 8
   48 D1:B877 -  -  -  -  iloop:
   49 D1:B877 C5 -  -  -  	push	bc
   50 D1:B878 4E -  -  -  	ld	c, (hl)
   51 D1:B879 -  -  -  -  charwidth = $+1
   52 D1:B879 06 00 -  -  	ld	b, 0
   53 D1:B87B EB -  -  -  	ex	de, hl
   54 D1:B87C -  -  -  -  color = $+1
   55 D1:B87C 3E 00 -  -  	ld	a, 0
   56 D1:B87E -  -  -  -  cloop:
   57 D1:B87E CB 21 -  -  	sla	c
   58 D1:B880 30 01 -  -  	jr	nc, +_
   59 D1:B882 77 -  -  -  	ld	(hl), a
   60 D1:B883 23 -  -  -  _:	inc	hl
   61 D1:B884 10 F8 -  -  	djnz	cloop
   62 D1:B886 -  -  -  -  line_change =$+1
   63 D1:B886 01 00 00 00 	ld	bc, 0
   64 D1:B88A 09 -  -  -  	add	hl, bc
   65 D1:B88B EB -  -  -  	ex	de, hl
   66 D1:B88C 23 -  -  -  	inc	hl
   67 D1:B88D C1 -  -  -  	pop	bc
   68 D1:B88E 10 E7 -  -  	djnz	iloop
   69 D1:B890 F1 -  -  -  	pop	af
   70 D1:B891 E1 -  -  -  	pop	hl
   71 D1:B892 C9 -  -  -  	ret
   72 D1:B893 -  -  -  -  
   73 D1:B893 -  -  -  -  DefaultCharSpacing_ASM:
   74 D1:B893 -  -  -  -      ;      0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
   75 D1:B893 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 02 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8    ;    0
   76 D1:B8A3 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8    ;    1
   77 D1:B8B3 03 04 06 08 
              08 08 08 05 
              05 05 08 07 
              04 07 03 08 	.db	3,4,6,8,8,8,8,5,5,5,8,7,4,7,3,8    ;    2
   78 D1:B8C3 08 07 08 08 
              08 08 08 08 
              08 08 03 04 
              06 07 06 07 	.db	8,7,8,8,8,8,8,8,8,8,3,4,6,7,6,7    ;    3
   79 D1:B8D3 08 08 08 08 
              08 08 08 08 
              08 08 08 08 
              08 08 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8    ;    4
   80 D1:B8E3 08 08 08 08 
              08 08 08 08 
              08 08 08 05 
              08 05 08 08 	.db	8,8,8,8,8,8,8,8,8,8,8,5,8,5,8,8    ;    5
   81 D1:B8F3 04 08 08 08 
              08 08 08 08 
              08 05 08 08 
              05 08 08 08 	.db	4,8,8,8,8,8,8,8,8,5,8,8,5,8,8,8    ;    6
   82 D1:B903 08 08 08 08 
              07 08 08 08 
              08 08 08 -  	.db	8,8,8,8,7,8,8,8,8,8,8            ;    7
   83 D1:B90E -  -  -  -   
   84 D1:B90E -  -  -  -  ;-------------------------------------------------------------------------------
   85 D1:B90E -  -  -  -  DefaultTextData_ASM:
   86 D1:B90E FF FF FF FF 
              FF FF FF FF Char000: .db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF    ;    _
   87 D1:B916 18 3C 7E 18 
              18 18 18 00 Char024: .db $18,$3C,$7E,$18,$18,$18,$18,$00    ;    .
   88 D1:B91E 18 18 18 18 
              7E 3C 18 00 Char025: .db $18,$18,$18,$18,$7E,$3C,$18,$00    ;    .
   89 D1:B926 00 18 0C FE 
              0C 18 00 00 Char026: .db $00,$18,$0C,$FE,$0C,$18,$00,$00    ;    .
   90 D1:B92E 00 30 60 FE 
              60 30 00 00 Char027: .db $00,$30,$60,$FE,$60,$30,$00,$00    ;    .
   91 D1:B936 00 18 0C FE 
              0C 18 00 00 Char028: .db $00,$18,$0C,$FE,$0C,$18,$00,$00    ;    ->
   92 D1:B93E 00 24 66 FF 
              66 24 00 00 Char029: .db $00,$24,$66,$FF,$66,$24,$00,$00    ;    .
   93 D1:B946 00 18 3C 7E 
              FF FF 00 00 Char030: .db $00,$18,$3C,$7E,$FF,$FF,$00,$00    ;    .
   94 D1:B94E 00 FF FF 7E 
              3C 18 00 00 Char031: .db $00,$FF,$FF,$7E,$3C,$18,$00,$00    ;    .
   95 D1:B956 00 00 00 00 
              00 00 00 00 Char032: .db $00,$00,$00,$00,$00,$00,$00,$00    ;     
   96 D1:B95E C0 C0 C0 C0 
              C0 00 C0 00 Char033: .db $C0,$C0,$C0,$C0,$C0,$00,$C0,$00    ;    !
   97 D1:B966 D8 D8 D8 00 
              00 00 00 00 Char034: .db $D8,$D8,$D8,$00,$00,$00,$00,$00    ;    "
   98 D1:B96E 6C 6C FE 6C 
              FE 6C 6C 00 Char035: .db $6C,$6C,$FE,$6C,$FE,$6C,$6C,$00    ;    #
   99 D1:B976 18 7E C0 7C 
              06 FC 18 00 Char036: .db $18,$7E,$C0,$7C,$06,$FC,$18,$00    ;    $
  100 D1:B97E 00 C6 CC 18 
              30 66 C6 00 Char037: .db $00,$C6,$CC,$18,$30,$66,$C6,$00    ;    %
  101 D1:B986 38 6C 38 76 
              DC CC 76 00 Char038: .db $38,$6C,$38,$76,$DC,$CC,$76,$00    ;    &
  102 D1:B98E 30 30 60 00 
              00 00 00 00 Char039: .db $30,$30,$60,$00,$00,$00,$00,$00    ;    '
  103 D1:B996 30 60 C0 C0 
              C0 60 30 00 Char040: .db $30,$60,$C0,$C0,$C0,$60,$30,$00    ;    (
  104 D1:B99E C0 60 30 30 
              30 60 C0 00 Char041: .db $C0,$60,$30,$30,$30,$60,$C0,$00    ;    )
  105 D1:B9A6 00 66 3C FF 
              3C 66 00 00 Char042: .db $00,$66,$3C,$FF,$3C,$66,$00,$00    ;    *
  106 D1:B9AE 00 30 30 FC 
              FC 30 30 00 Char043: .db $00,$30,$30,$FC,$FC,$30,$30,$00    ;    +
  107 D1:B9B6 00 00 00 00 
              00 60 60 C0 Char044: .db $00,$00,$00,$00,$00,$60,$60,$C0    ;    ,
  108 D1:B9BE 00 00 00 FC 
              00 00 00 00 Char045: .db $00,$00,$00,$FC,$00,$00,$00,$00    ;    -
  109 D1:B9C6 00 00 00 00 
              00 C0 C0 00 Char046: .db $00,$00,$00,$00,$00,$C0,$C0,$00    ;    .
  110 D1:B9CE 06 0C 18 30 
              60 C0 80 00 Char047: .db $06,$0C,$18,$30,$60,$C0,$80,$00    ;    /
  111 D1:B9D6 7C CE DE F6 
              E6 C6 7C 00 Char048: .db $7C,$CE,$DE,$F6,$E6,$C6,$7C,$00    ;    0
  112 D1:B9DE 30 70 30 30 
              30 30 FC 00 Char049: .db $30,$70,$30,$30,$30,$30,$FC,$00    ;    1
  113 D1:B9E6 7C C6 06 7C 
              C0 C0 FE 00 Char050: .db $7C,$C6,$06,$7C,$C0,$C0,$FE,$00    ;    2
  114 D1:B9EE FC 06 06 3C 
              06 06 FC 00 Char051: .db $FC,$06,$06,$3C,$06,$06,$FC,$00    ;    3
  115 D1:B9F6 0C CC CC CC 
              FE 0C 0C 00 Char052: .db $0C,$CC,$CC,$CC,$FE,$0C,$0C,$00    ;    4
  116 D1:B9FE FE C0 FC 06 
              06 C6 7C 00 Char053: .db $FE,$C0,$FC,$06,$06,$C6,$7C,$00    ;    5
  117 D1:BA06 7C C0 C0 FC 
              C6 C6 7C 00 Char054: .db $7C,$C0,$C0,$FC,$C6,$C6,$7C,$00    ;    6
  118 D1:BA0E FE 06 06 0C 
              18 30 30 00 Char055: .db $FE,$06,$06,$0C,$18,$30,$30,$00    ;    7
  119 D1:BA16 7C C6 C6 7C 
              C6 C6 7C 00 Char056: .db $7C,$C6,$C6,$7C,$C6,$C6,$7C,$00    ;    8
  120 D1:BA1E 7C C6 C6 7E 
              06 06 7C 00 Char057: .db $7C,$C6,$C6,$7E,$06,$06,$7C,$00    ;    9
  121 D1:BA26 00 C0 C0 00 
              00 C0 C0 00 Char058: .db $00,$C0,$C0,$00,$00,$C0,$C0,$00    ;    :
  122 D1:BA2E 00 60 60 00 
              00 60 60 C0 Char059: .db $00,$60,$60,$00,$00,$60,$60,$C0    ;    ;
  123 D1:BA36 18 30 60 C0 
              60 30 18 00 Char060: .db $18,$30,$60,$C0,$60,$30,$18,$00    ;    <
  124 D1:BA3E 00 00 FC 00 
              FC 00 00 00 Char061: .db $00,$00,$FC,$00,$FC,$00,$00,$00    ;    =
  125 D1:BA46 C0 60 30 18 
              30 60 C0 00 Char062: .db $C0,$60,$30,$18,$30,$60,$C0,$00    ;    >
  126 D1:BA4E 78 CC 18 30 
              30 00 30 00 Char063: .db $78,$CC,$18,$30,$30,$00,$30,$00    ;    ?
  127 D1:BA56 7C C6 DE DE 
              DE C0 7E 00 Char064: .db $7C,$C6,$DE,$DE,$DE,$C0,$7E,$00    ;    @
  128 D1:BA5E 38 6C C6 C6 
              FE C6 C6 00 Char065: .db $38,$6C,$C6,$C6,$FE,$C6,$C6,$00    ;    A
  129 D1:BA66 FC C6 C6 FC 
              C6 C6 FC 00 Char066: .db $FC,$C6,$C6,$FC,$C6,$C6,$FC,$00    ;    B
  130 D1:BA6E 7C C6 C0 C0 
              C0 C6 7C 00 Char067: .db $7C,$C6,$C0,$C0,$C0,$C6,$7C,$00    ;    C
  131 D1:BA76 F8 CC C6 C6 
              C6 CC F8 00 Char068: .db $F8,$CC,$C6,$C6,$C6,$CC,$F8,$00    ;    D
  132 D1:BA7E FE C0 C0 F8 
              C0 C0 FE 00 Char069: .db $FE,$C0,$C0,$F8,$C0,$C0,$FE,$00    ;    E
  133 D1:BA86 FE C0 C0 F8 
              C0 C0 C0 00 Char070: .db $FE,$C0,$C0,$F8,$C0,$C0,$C0,$00    ;    F
  134 D1:BA8E 7C C6 C0 C0 
              CE C6 7C 00 Char071: .db $7C,$C6,$C0,$C0,$CE,$C6,$7C,$00    ;    G
  135 D1:BA96 C6 C6 C6 FE 
              C6 C6 C6 00 Char072: .db $C6,$C6,$C6,$FE,$C6,$C6,$C6,$00    ;    H
  136 D1:BA9E 7E 18 18 18 
              18 18 7E 00 Char073: .db $7E,$18,$18,$18,$18,$18,$7E,$00    ;    I
  137 D1:BAA6 06 06 06 06 
              06 C6 7C 00 Char074: .db $06,$06,$06,$06,$06,$C6,$7C,$00    ;    J
  138 D1:BAAE C6 CC D8 F0 
              D8 CC C6 00 Char075: .db $C6,$CC,$D8,$F0,$D8,$CC,$C6,$00    ;    K
  139 D1:BAB6 C0 C0 C0 C0 
              C0 C0 FE 00 Char076: .db $C0,$C0,$C0,$C0,$C0,$C0,$FE,$00    ;    L
  140 D1:BABE C6 EE FE FE 
              D6 C6 C6 00 Char077: .db $C6,$EE,$FE,$FE,$D6,$C6,$C6,$00    ;    M
  141 D1:BAC6 C6 E6 F6 DE 
              CE C6 C6 00 Char078: .db $C6,$E6,$F6,$DE,$CE,$C6,$C6,$00    ;    N
  142 D1:BACE 7C C6 C6 C6 
              C6 C6 7C 00 Char079: .db $7C,$C6,$C6,$C6,$C6,$C6,$7C,$00    ;    O
  143 D1:BAD6 FC C6 C6 FC 
              C0 C0 C0 00 Char080: .db $FC,$C6,$C6,$FC,$C0,$C0,$C0,$00    ;    P
  144 D1:BADE 7C C6 C6 C6 
              D6 DE 7C 06 Char081: .db $7C,$C6,$C6,$C6,$D6,$DE,$7C,$06    ;    Q
  145 D1:BAE6 FC C6 C6 FC 
              D8 CC C6 00 Char082: .db $FC,$C6,$C6,$FC,$D8,$CC,$C6,$00    ;    R
  146 D1:BAEE 7C C6 C0 7C 
              06 C6 7C 00 Char083: .db $7C,$C6,$C0,$7C,$06,$C6,$7C,$00    ;    S
  147 D1:BAF6 FF 18 18 18 
              18 18 18 00 Char084: .db $FF,$18,$18,$18,$18,$18,$18,$00    ;    T
  148 D1:BAFE C6 C6 C6 C6 
              C6 C6 FE 00 Char085: .db $C6,$C6,$C6,$C6,$C6,$C6,$FE,$00    ;    U
  149 D1:BB06 C6 C6 C6 C6 
              C6 7C 38 00 Char086: .db $C6,$C6,$C6,$C6,$C6,$7C,$38,$00    ;    V
  150 D1:BB0E C6 C6 C6 C6 
              D6 FE 6C 00 Char087: .db $C6,$C6,$C6,$C6,$D6,$FE,$6C,$00    ;    W
  151 D1:BB16 C6 C6 6C 38 
              6C C6 C6 00 Char088: .db $C6,$C6,$6C,$38,$6C,$C6,$C6,$00    ;    X
  152 D1:BB1E C6 C6 C6 7C 
              18 30 E0 00 Char089: .db $C6,$C6,$C6,$7C,$18,$30,$E0,$00    ;    Y
  153 D1:BB26 FE 06 0C 18 
              30 60 FE 00 Char090: .db $FE,$06,$0C,$18,$30,$60,$FE,$00    ;    Z
  154 D1:BB2E F0 C0 C0 C0 
              C0 C0 F0 00 Char091: .db $F0,$C0,$C0,$C0,$C0,$C0,$F0,$00    ;    [
  155 D1:BB36 C0 60 30 18 
              0C 06 02 00 Char092: .db $C0,$60,$30,$18,$0C,$06,$02,$00    ;    \
  156 D1:BB3E F0 30 30 30 
              30 30 F0 00 Char093: .db $F0,$30,$30,$30,$30,$30,$F0,$00    ;    ]
  157 D1:BB46 10 38 6C C6 
              00 00 00 00 Char094: .db $10,$38,$6C,$C6,$00,$00,$00,$00    ;    ^
  158 D1:BB4E 00 00 00 00 
              00 00 00 FF Char095: .db $00,$00,$00,$00,$00,$00,$00,$FF    ;    _
  159 D1:BB56 C0 C0 60 00 
              00 00 00 00 Char096: .db $C0,$C0,$60,$00,$00,$00,$00,$00    ;    `
  160 D1:BB5E 00 00 7C 06 
              7E C6 7E 00 Char097: .db $00,$00,$7C,$06,$7E,$C6,$7E,$00    ;    a
  161 D1:BB66 C0 C0 C0 FC 
              C6 C6 FC 00 Char098: .db $C0,$C0,$C0,$FC,$C6,$C6,$FC,$00    ;    b
  162 D1:BB6E 00 00 7C C6 
              C0 C6 7C 00 Char099: .db $00,$00,$7C,$C6,$C0,$C6,$7C,$00    ;    c
  163 D1:BB76 06 06 06 7E 
              C6 C6 7E 00 Char100: .db $06,$06,$06,$7E,$C6,$C6,$7E,$00    ;    d
  164 D1:BB7E 00 00 7C C6 
              FE C0 7C 00 Char101: .db $00,$00,$7C,$C6,$FE,$C0,$7C,$00    ;    e
  165 D1:BB86 1C 36 30 78 
              30 30 78 00 Char102: .db $1C,$36,$30,$78,$30,$30,$78,$00    ;    f
  166 D1:BB8E 00 00 7E C6 
              C6 7E 06 FC Char103: .db $00,$00,$7E,$C6,$C6,$7E,$06,$FC    ;    g
  167 D1:BB96 C0 C0 FC C6 
              C6 C6 C6 00 Char104: .db $C0,$C0,$FC,$C6,$C6,$C6,$C6,$00    ;    h
  168 D1:BB9E 60 00 E0 60 
              60 60 F0 00 Char105: .db $60,$00,$E0,$60,$60,$60,$F0,$00    ;    i
  169 D1:BBA6 06 00 06 06 
              06 06 C6 7C Char106: .db $06,$00,$06,$06,$06,$06,$C6,$7C    ;    j
  170 D1:BBAE C0 C0 CC D8 
              F8 CC C6 00 Char107: .db $C0,$C0,$CC,$D8,$F8,$CC,$C6,$00    ;    k
  171 D1:BBB6 E0 60 60 60 
              60 60 F0 00 Char108: .db $E0,$60,$60,$60,$60,$60,$F0,$00    ;    l
  172 D1:BBBE 00 00 CC FE 
              FE D6 D6 00 Char109: .db $00,$00,$CC,$FE,$FE,$D6,$D6,$00    ;    m
  173 D1:BBC6 00 00 FC C6 
              C6 C6 C6 00 Char110: .db $00,$00,$FC,$C6,$C6,$C6,$C6,$00    ;    n
  174 D1:BBCE 00 00 7C C6 
              C6 C6 7C 00 Char111: .db $00,$00,$7C,$C6,$C6,$C6,$7C,$00    ;    o
  175 D1:BBD6 00 00 FC C6 
              C6 FC C0 C0 Char112: .db $00,$00,$FC,$C6,$C6,$FC,$C0,$C0    ;    p
  176 D1:BBDE 00 00 7E C6 
              C6 7E 06 06 Char113: .db $00,$00,$7E,$C6,$C6,$7E,$06,$06    ;    q
  177 D1:BBE6 00 00 FC C6 
              C0 C0 C0 00 Char114: .db $00,$00,$FC,$C6,$C0,$C0,$C0,$00    ;    r
  178 D1:BBEE 00 00 7E C0 
              7C 06 FC 00 Char115: .db $00,$00,$7E,$C0,$7C,$06,$FC,$00    ;    s
  179 D1:BBF6 30 30 FC 30 
              30 30 1C 00 Char116: .db $30,$30,$FC,$30,$30,$30,$1C,$00    ;    t
  180 D1:BBFE 00 00 C6 C6 
              C6 C6 7E 00 Char117: .db $00,$00,$C6,$C6,$C6,$C6,$7E,$00    ;    u
  181 D1:BC06 00 00 C6 C6 
              C6 7C 38 00 Char118: .db $00,$00,$C6,$C6,$C6,$7C,$38,$00    ;    v
  182 D1:BC0E 00 00 C6 C6 
              D6 FE 6C 00 Char119: .db $00,$00,$C6,$C6,$D6,$FE,$6C,$00    ;    w
  183 D1:BC16 00 00 C6 6C 
              38 6C C6 00 Char120: .db $00,$00,$C6,$6C,$38,$6C,$C6,$00    ;    x
  184 D1:BC1E 00 00 C6 C6 
              C6 7E 06 FC Char121: .db $00,$00,$C6,$C6,$C6,$7E,$06,$FC    ;    y
  185 D1:BC26 00 00 FE 0C 
              38 60 FE 00 Char122: .db $00,$00,$FE,$0C,$38,$60,$FE,$00    ;    z
  186 D1:BC2E 1C 30 30 E0 
              30 30 1C 00 Char123: .db $1C,$30,$30,$E0,$30,$30,$1C,$00    ;    {
  187 D1:BC36 C0 C0 C0 00 
              C0 C0 C0 00 Char124: .db $C0,$C0,$C0,$00,$C0,$C0,$C0,$00    ;    |
  188 D1:BC3E E0 30 30 1C 
              30 30 E0 00 Char125: .db $E0,$30,$30,$1C,$30,$30,$E0,$00    ;    }
  189 D1:BC46 76 DC 00 00 
              00 00 00 00 Char126: .db $76,$DC,$00,$00,$00,$00,$00,$00    ;    ~
  190 D1:BC4E 00 10 38 6C 
              C6 C6 FE 00 Char127: .db $00,$10,$38,$6C,$C6,$C6,$FE,$00    ;    .
Listing for file "ice.asm"
  456 D1:BC56 -  -  -  -  #include "programs.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\programs.asm"
    1 D1:BC56 -  -  -  -  FindNextGoodVar:
    2 D1:BC56 ED 5B 9A 25 
              D0 -  -  -  	ld	de, (pTemp)
    3 D1:BC5B CD 3C 01 02 	call	_CpHLDE
    4 D1:BC5F 20 02 -  -  	jr	nz, FindContinue
    5 D1:BC61 3C -  -  -  	inc	a                                    ;    return nz
    6 D1:BC62 C9 -  -  -  	ret
    7 D1:BC63 -  -  -  -  FindContinue:
    8 D1:BC63 7E -  -  -  	ld	a, (hl)
    9 D1:BC64 2B -  -  -  	dec	hl
   10 D1:BC65 2B -  -  -  	dec	hl
   11 D1:BC66 2B -  -  -  	dec	hl
   12 D1:BC67 FE 05 -  -  	cp	a, ProgObj
   13 D1:BC69 28 04 -  -  	jr	z, FindGoodProgram
   14 D1:BC6B FE 06 -  -  	cp	a, ProtProgObj
   15 D1:BC6D 20 43 -  -  	jr	nz, FindWrongProgram
   16 D1:BC6F -  -  -  -  FindGoodProgram:
   17 D1:BC6F 5E -  -  -  	ld	e, (hl)
   18 D1:BC70 2B -  -  -  	dec	hl
   19 D1:BC71 56 -  -  -  	ld	d, (hl)
   20 D1:BC72 2B -  -  -  	dec	hl
   21 D1:BC73 7E -  -  -  	ld	a, (hl)
   22 D1:BC74 CD 68 1D 02 	call	_SetDEUToA
   23 D1:BC78 FE D0 -  -  	cp	a, 0D0h
   24 D1:BC7A 30 0C -  -  	jr	nc, +_
   25 D1:BC7C E5 -  -  -  	push	hl
   26 D1:BC7D EB -  -  -  	ex	de, hl
   27 D1:BC7E 11 09 00 00 	ld	de, 9
   28 D1:BC82 19 -  -  -  	add	hl, de
   29 D1:BC83 5E -  -  -  	ld	e, (hl)
   30 D1:BC84 1C -  -  -  	inc	e
   31 D1:BC85 19 -  -  -  	add	hl, de
   32 D1:BC86 EB -  -  -  	ex	de, hl
   33 D1:BC87 E1 -  -  -  	pop	hl
   34 D1:BC88 13 -  -  -  _:	inc	de
   35 D1:BC89 13 -  -  -  	inc	de
   36 D1:BC8A 1A -  -  -  	ld	a, (de)
   37 D1:BC8B FE 2C -  -  	cp	a, tii
   38 D1:BC8D 20 25 -  -  	jr	nz, FindWrongProgram2
   39 D1:BC8F 2B -  -  -  	dec	hl
   40 D1:BC90 D5 -  -  -  	push	de
   41 D1:BC91 E5 -  -  -  	push	hl
   42 D1:BC92 2A B8 EC D1 	ld	hl, (ProgramNamesPtr)
   43 D1:BC96 11 08 00 00 	ld	de, 8
   44 D1:BC9A 19 -  -  -  	add	hl, de
   45 D1:BC9B 22 B8 EC D1 	ld	(ProgramNamesPtr), hl
   46 D1:BC9F B7 -  -  -  	or	a, a
   47 D1:BCA0 ED 52 -  -  	sbc	hl, de
   48 D1:BCA2 EB -  -  -  	ex	de, hl
   49 D1:BCA3 E1 -  -  -  	pop	hl
   50 D1:BCA4 46 -  -  -  	ld	b, (hl)
   51 D1:BCA5 48 -  -  -  	ld	c, b
   52 D1:BCA6 2B -  -  -  	dec	hl
   53 D1:BCA7 -  -  -  -  FindCopyProgName:
   54 D1:BCA7 7E -  -  -  	ld	a, (hl)
   55 D1:BCA8 12 -  -  -  	ld	(de), a
   56 D1:BCA9 2B -  -  -  	dec	hl
   57 D1:BCAA 13 -  -  -  	inc	de
   58 D1:BCAB 10 FA -  -  	djnz	FindCopyProgName
   59 D1:BCAD AF -  -  -  	xor	a, a
   60 D1:BCAE 12 -  -  -  	ld	(de), a
   61 D1:BCAF D1 -  -  -  	pop	de
   62 D1:BCB0 BF -  -  -  	cp	a, a
   63 D1:BCB1 C9 -  -  -  	ret
   64 D1:BCB2 -  -  -  -  FindWrongProgram:
   65 D1:BCB2 2B -  -  -  	dec	hl
   66 D1:BCB3 2B -  -  -  	dec	hl
   67 D1:BCB4 -  -  -  -  FindWrongProgram2:
   68 D1:BCB4 2B -  -  -  	dec	hl
   69 D1:BCB5 46 -  -  -  	ld	b, (hl)
   70 D1:BCB6 2B -  -  -  	dec	hl
   71 D1:BCB7 -  -  -  -  FindSkipProgramName:
   72 D1:BCB7 2B -  -  -  	dec	hl
   73 D1:BCB8 10 FD -  -  	djnz	FindSkipProgramName
   74 D1:BCBA 18 9A -  -  	jr	FindNextGoodVar
Listing for file "ice.asm"
  457 D1:BCBC -  -  -  -  #include "hooks.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\hooks.asm"
    1 D1:BCBC -  -  -  -  InstallHooks:
    2 D1:BCBC 21 DC EC D1 	ld	hl, ICEAppvar
    3 D1:BCC0 CD 20 03 02 	call	_Mov9ToOP1
    4 D1:BCC4 CD 0C 05 02 	call	_ChkFindSym
    5 D1:BCC8 38 13 -  -  	jr	c, ++_
    6 D1:BCCA CD 98 1F 02 	call	_ChkInRAM
    7 D1:BCCE 30 09 -  -  	jr	nc, +_
    8 D1:BCD0 CD 48 14 02 	call	_Arc_Unarc
    9 D1:BCD4 01 05 00 00 	ld	bc, 5
   10 D1:BCD8 09 -  -  -  	add	hl, bc
   11 D1:BCD9 CD 88 05 02 _:	call	_DelVar
   12 D1:BCDD 21 A7 08 00 _:	ld	hl, Hooks_end - KeyHook_start
   13 D1:BCE1 CD 30 13 02 	call	_CreateAppVar
   14 D1:BCE5 13 -  -  -  	inc	de
   15 D1:BCE6 13 -  -  -  	inc	de
   16 D1:BCE7 21 18 BD D1 	ld	hl, KeyHook_start
   17 D1:BCEB 01 A7 08 00 	ld	bc, Hooks_end - KeyHook_start
   18 D1:BCEF ED B0 -  -  	ldir
   19 D1:BCF1 CD C8 02 02 	call	_OP4ToOP1
   20 D1:BCF5 CD 48 14 02 	call	_Arc_Unarc
   21 D1:BCF9 CD 0C 05 02 	call	_ChkFindSym
   22 D1:BCFD 21 13 00 00 	ld	hl, 19                                                        ;    archived program header+VAT entry
   23 D1:BD01 19 -  -  -  	add	hl, de
   24 D1:BD02 CD CC 13 02 	call	_SetGetKeyHook
   25 D1:BD06 -  -  -  -      
   26 D1:BD06 11 C8 07 00 	ld	de, KeyHook_end - KeyHook_start
   27 D1:BD0A 19 -  -  -  	add	hl, de
   28 D1:BD0B CD F8 13 02 	call	_SetTokenHook
   29 D1:BD0F -  -  -  -      
   30 D1:BD0F 11 31 00 00 	ld	de, TokenHook_end - TokenHook_start
   31 D1:BD13 19 -  -  -  	add	hl, de
   32 D1:BD14 C3 C4 13 02 	jp	_SetCursorhook
   33 D1:BD18 -  -  -  -      
   34 D1:BD18 -  -  -  -  KeyHook_start:
   35 D1:BD18 83 -  -  -  	.db	83h
   36 D1:BD19 B7 -  -  -  	or	a, a
   37 D1:BD1A C8 -  -  -  	ret	z
   38 D1:BD1B 47 -  -  -  	ld	b, a
   39 D1:BD1C 3A E0 07 D0 	ld	a, (cxCurApp)
   40 D1:BD20 FE 46 -  -  	cp	a, cxPrgmEdit
   41 D1:BD22 78 -  -  -  	ld	a, b
   42 D1:BD23 C0 -  -  -  	ret	nz
   43 D1:BD24 F5 -  -  -  	push	af
   44 D1:BD25 CD A0 20 02 	call	_os_ClearStatusBarLow
   45 D1:BD29 FD CB AE 86 	res	displayed_det, (iy+fAlways1)
   46 D1:BD2D F1 -  -  -  	pop	af
   47 D1:BD2E FE 5A -  -  	cp	a, kTrace
   48 D1:BD30 C0 -  -  -  	ret	nz
   49 D1:BD31 -  -  -  -  DisplayCustomTokensAndCFunctions:
   50 D1:BD31 CD A8 08 02 	call	_CursorOff
   51 D1:BD35 16 00 -  -  	ld	d, 0
   52 D1:BD37 -  -  -  -  DisplayTabWithTokens:
   53 D1:BD37 D5 -  -  -  	push	de
   54 D1:BD38 CD 08 08 02 	call	_ClrLCDFull
   55 D1:BD3C D1 -  -  -  	pop	de
   56 D1:BD3D 21 1E 00 00 	ld	hl, 30
   57 D1:BD41 22 D5 08 D0 	ld	(penRow), hl
   58 D1:BD45 21 0C 00 00 	ld	hl, 12
   59 D1:BD49 22 D2 08 D0 	ld	(penCol), hl
   60 D1:BD4D 06 00 -  -  	ld	b, 0
   61 D1:BD4F 7A -  -  -  	ld	a, d
   62 D1:BD50 1E 03 -  -  	ld	e, 3
   63 D1:BD52 ED 5C -  -  	mlt	de
   64 D1:BD54 21 67 06 00 	ld	hl, TabData - KeyHook_start
   65 D1:BD58 19 -  -  -  	add	hl, de
   66 D1:BD59 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
   67 D1:BD5E 19 -  -  -  	add	hl, de
   68 D1:BD5F ED 27 -  -  	ld	hl, (hl)
   69 D1:BD61 19 -  -  -  	add	hl, de
   70 D1:BD62 57 -  -  -  	ld	d, a
   71 D1:BD63 1E 00 -  -  	ld	e, 0
   72 D1:BD65 18 0F -  -  	jr	DisplayTokensLoop
   73 D1:BD67 -  -  -  -  KeyIsLeft:
   74 D1:BD67 7A -  -  -  	ld	a, d
   75 D1:BD68 B7 -  -  -  	or	a, a
   76 D1:BD69 28 61 -  -  	jr	z, KeyLoop
   77 D1:BD6B 15 -  -  -  	dec	d
   78 D1:BD6C 18 C9 -  -  	jr	DisplayTabWithTokens
   79 D1:BD6E -  -  -  -  KeyIsRight:
   80 D1:BD6E 7A -  -  -  	ld	a, d
   81 D1:BD6F FE 05 -  -  	cp	a, 5
   82 D1:BD71 28 59 -  -  	jr	z, KeyLoop
   83 D1:BD73 14 -  -  -  	inc	d
   84 D1:BD74 18 C1 -  -  	jr	DisplayTabWithTokens
   85 D1:BD76 -  -  -  -  DisplayTokensLoop:
   86 D1:BD76 78 -  -  -  	ld	a, b
   87 D1:BD77 FE 10 -  -  	cp	a, 16
   88 D1:BD79 28 22 -  -  	jr	z, StopDisplayingTokens
   89 D1:BD7B 04 -  -  -  	inc	b
   90 D1:BD7C CD 34 08 02 	call	_VPutS
   91 D1:BD80 E5 -  -  -  	push	hl
   92 D1:BD81 D5 -  -  -  	push	de
   93 D1:BD82 2A D5 08 D0 	ld	hl, (penRow)
   94 D1:BD86 11 0D 00 00 	ld	de, 13
   95 D1:BD8A 19 -  -  -  	add	hl, de
   96 D1:BD8B 22 D5 08 D0 	ld	(penRow), hl
   97 D1:BD8F 21 0C 00 00 	ld	hl, 12
   98 D1:BD93 22 D2 08 D0 	ld	(penCol), hl
   99 D1:BD97 D1 -  -  -  	pop	de
  100 D1:BD98 E1 -  -  -  	pop	hl
  101 D1:BD99 7E -  -  -  	ld	a, (hl)
  102 D1:BD9A B7 -  -  -  	or	a, a
  103 D1:BD9B 20 D9 -  -  	jr	nz, DisplayTokensLoop
  104 D1:BD9D -  -  -  -  StopDisplayingTokens:
  105 D1:BD9D 21 01 00 00 	ld	hl, 1
  106 D1:BDA1 22 D2 08 D0 	ld	(penCol), hl
  107 D1:BDA5 -  -  -  -  GetRightCustomToken:
  108 D1:BDA5 7B -  -  -  	ld	a, e
  109 D1:BDA6 42 -  -  -  	ld	b, d
  110 D1:BDA7 16 0D -  -  	ld	d, 13
  111 D1:BDA9 ED 5C -  -  	mlt	de
  112 D1:BDAB 21 1E 00 00 	ld	hl, 30
  113 D1:BDAF 19 -  -  -  	add	hl, de
  114 D1:BDB0 50 -  -  -  	ld	d, b
  115 D1:BDB1 5F -  -  -  	ld	e, a
  116 D1:BDB2 22 D5 08 D0 	ld	(penRow), hl
  117 D1:BDB6 21 01 00 00 	ld	hl, 1
  118 D1:BDBA 22 D2 08 D0 	ld	(penCol), hl
  119 D1:BDBE E5 -  -  -  	push	hl
  120 D1:BDBF D5 -  -  -  	push	de
  121 D1:BDC0 3E 3E -  -  	ld	a, '>'
  122 D1:BDC2 CD 30 08 02 	call	_VPutMap
  123 D1:BDC6 D1 -  -  -  	pop	de
  124 D1:BDC7 E1 -  -  -  	pop	hl
  125 D1:BDC8 22 D2 08 D0 	ld	(penCol), hl
  126 D1:BDCC -  -  -  -  KeyLoop:
  127 D1:BDCC CD 4C 01 02 	call	_GetCSC
  128 D1:BDD0 B7 -  -  -  	or	a, a
  129 D1:BDD1 28 F9 -  -  	jr	z, KeyLoop
  130 D1:BDD3 FE 02 -  -  	cp	a, skLeft
  131 D1:BDD5 28 90 -  -  	jr	z, KeyIsLeft
  132 D1:BDD7 FE 03 -  -  	cp	a, skRight
  133 D1:BDD9 28 93 -  -  	jr	z, KeyIsRight
  134 D1:BDDB FE 04 -  -  	cp	a, skUp
  135 D1:BDDD 20 1B -  -  	jr	nz, KeyNotUp
  136 D1:BDDF 7B -  -  -  	ld	a, e
  137 D1:BDE0 B7 -  -  -  	or	a, a
  138 D1:BDE1 28 E9 -  -  	jr	z, KeyLoop
  139 D1:BDE3 1D -  -  -  	dec	e
  140 D1:BDE4 -  -  -  -  EraseCursor:
  141 D1:BDE4 D5 -  -  -  	push	de
  142 D1:BDE5 3E 20 -  -  	ld	a, ' '
  143 D1:BDE7 CD 30 08 02 	call	_VPutMap
  144 D1:BDEB 3E 20 -  -  	ld	a, ' '
  145 D1:BDED CD 30 08 02 	call	_VPutMap
  146 D1:BDF1 3E 20 -  -  	ld	a, ' '
  147 D1:BDF3 CD 30 08 02 	call	_VPutMap
  148 D1:BDF7 D1 -  -  -  	pop	de
  149 D1:BDF8 18 AB -  -  	jr	GetRightCustomToken
  150 D1:BDFA -  -  -  -  KeyNotUp:
  151 D1:BDFA FE 01 -  -  	cp	a, skDown
  152 D1:BDFC 20 12 -  -  	jr	nz, KeyNotDown
  153 D1:BDFE 7A -  -  -  	ld	a, d
  154 D1:BDFF FE 05 -  -  	cp	a, 5
  155 D1:BE01 7B -  -  -  	ld	a, e
  156 D1:BE02 20 04 -  -  	jr	nz, +_
  157 D1:BE04 FE 09 -  -  	cp	a, (AMOUNT_OF_C_FUNCTIONS + AMOUNT_OF_CUSTOM_TOKENS)%16 - 1
  158 D1:BE06 28 C4 -  -  	jr	z, KeyLoop
  159 D1:BE08 7B -  -  -  _:	ld	a, e
  160 D1:BE09 FE 0F -  -  	cp	a, 16-1
  161 D1:BE0B 28 BF -  -  	jr	z, KeyLoop
  162 D1:BE0D 1C -  -  -  	inc	e
  163 D1:BE0E 18 D4 -  -  	jr	EraseCursor
  164 D1:BE10 -  -  -  -  KeyNotDown:
  165 D1:BE10 FE 0F -  -  	cp	a, skClear
  166 D1:BE12 28 75 -  -  	jr	z, KeyIsClear
  167 D1:BE14 FE 09 -  -  	cp	a, skEnter
  168 D1:BE16 20 B4 -  -  	jr	nz, KeyLoop
  169 D1:BE18 7B -  -  -  	ld	a, e
  170 D1:BE19 1E 10 -  -  	ld	e, 16
  171 D1:BE1B ED 5C -  -  	mlt	de
  172 D1:BE1D 83 -  -  -  	add	a, e
  173 D1:BE1E D6 06 -  -  	sub	a, AMOUNT_OF_CUSTOM_TOKENS
  174 D1:BE20 38 4F -  -  	jr	c, InsertCustomToken
  175 D1:BE22 21 1F EA D0 	ld	hl, saveSScreen
  176 D1:BE26 36 B3 -  -  	ld	(hl), tDet
  177 D1:BE28 23 -  -  -  	inc	hl
  178 D1:BE29 FE 0A -  -  	cp	a, 10
  179 D1:BE2B 38 17 -  -  	jr	c, +_
  180 D1:BE2D 57 -  -  -  	ld	d, a
  181 D1:BE2E 1E 0A -  -  	ld	e, 10
  182 D1:BE30 AF -  -  -  	xor	a, a
  183 D1:BE31 06 08 -  -  	ld	b, 8
  184 D1:BE33 -  -  -  -  _loop:
  185 D1:BE33 CB 22 -  -  	sla	d
  186 D1:BE35 17 -  -  -  	rla
  187 D1:BE36 BB -  -  -  	cp	a, e
  188 D1:BE37 38 02 -  -  	jr	c, $+4
  189 D1:BE39 93 -  -  -  	sub	a, e
  190 D1:BE3A 14 -  -  -  	inc	d
  191 D1:BE3B 10 F6 -  -  	djnz	_loop
  192 D1:BE3D 5F -  -  -  	ld	e, a
  193 D1:BE3E 7A -  -  -  	ld	a, d
  194 D1:BE3F C6 30 -  -  	add	a, t0
  195 D1:BE41 77 -  -  -  	ld	(hl), a
  196 D1:BE42 23 -  -  -  	inc	hl
  197 D1:BE43 7B -  -  -  	ld	a, e
  198 D1:BE44 C6 30 -  -  _:	add	a, t0
  199 D1:BE46 77 -  -  -  	ld	(hl), a
  200 D1:BE47 23 -  -  -  	inc	hl
  201 D1:BE48 36 00 -  -  	ld	(hl), 0
  202 D1:BE4A 21 1F EA D0 	ld	hl, saveSScreen
  203 D1:BE4E -  -  -  -  InsertCFunctionLoop:
  204 D1:BE4E 7E -  -  -  	ld	a, (hl)
  205 D1:BE4F B7 -  -  -  	or	a, a
  206 D1:BE50 28 37 -  -  	jr	z, BufferSearch
  207 D1:BE52 ED 5B 3D 24 
              D0 -  -  -  	ld	de, (editTail)
  208 D1:BE57 1A -  -  -  	ld	a, (de)
  209 D1:BE58 FE 3F -  -  	cp	a, tEnter
  210 D1:BE5A 16 00 -  -  	ld	d, 0
  211 D1:BE5C 5E -  -  -  	ld	e, (hl)
  212 D1:BE5D 28 09 -  -  	jr	z, +_
  213 D1:BE5F E5 -  -  -  	push	hl
  214 D1:BE60 CD 08 0D 02 	call	_BufReplace
  215 D1:BE64 E1 -  -  -  	pop	hl
  216 D1:BE65 23 -  -  -  	inc	hl
  217 D1:BE66 18 E6 -  -  	jr	InsertCFunctionLoop
  218 D1:BE68 E5 -  -  -  _:	push	hl
  219 D1:BE69 CD 00 0D 02 	call	_BufInsert
  220 D1:BE6D E1 -  -  -  	pop	hl
  221 D1:BE6E 23 -  -  -  	inc	hl
  222 D1:BE6F 18 DD -  -  	jr	InsertCFunctionLoop
  223 D1:BE71 -  -  -  -  InsertCustomToken:
  224 D1:BE71 C6 10 -  -  	add	a, 10+AMOUNT_OF_CUSTOM_TOKENS
  225 D1:BE73 5F -  -  -  	ld	e, a
  226 D1:BE74 16 62 -  -  	ld	d, tVarOut
  227 D1:BE76 2A 3A 24 D0 	ld	hl, (editCursor)
  228 D1:BE7A 7E -  -  -  	ld	a, (hl)
  229 D1:BE7B FE 3F -  -  	cp	a, tEnter
  230 D1:BE7D 28 06 -  -  	jr	z, +_
  231 D1:BE7F CD 08 0D 02 	call	_BufReplace
  232 D1:BE83 18 04 -  -  	jr	BufferSearch
  233 D1:BE85 CD 00 0D 02 _:	call	_BufInsert
  234 D1:BE89 -  -  -  -  KeyIsClear:
  235 D1:BE89 -  -  -  -  BufferSearch:
  236 D1:BE89 01 00 00 00 	ld	bc, 0
  237 D1:BE8D CD F8 0C 02 _:	call	_BufLeft
  238 D1:BE91 28 0C -  -  	jr	z, BufferFound
  239 D1:BE93 7B -  -  -  	ld	a, e
  240 D1:BE94 FE 3F -  -  	cp	a, tEnter
  241 D1:BE96 28 03 -  -  	jr	z, +_
  242 D1:BE98 03 -  -  -  	inc	bc
  243 D1:BE99 18 F2 -  -  	jr	-_
  244 D1:BE9B CD FC 0C 02 _:	call	_BufRight
  245 D1:BE9F -  -  -  -  BufferFound:
  246 D1:BE9F C5 -  -  -  	push	bc
  247 D1:BEA0 CD 08 08 02 	call	_ClrLCDFull
  248 D1:BEA4 CD 18 08 02 	call	_ClrTxtShd
  249 D1:BEA8 11 BF 07 00 	ld	de, CustomTokensProgramText - KeyHook_start
  250 D1:BEAC 2A DB 25 D0 	ld	hl, (rawKeyHookPtr)
  251 D1:BEB0 19 -  -  -  	add	hl, de
  252 D1:BEB1 AF -  -  -  	xor	a, a
  253 D1:BEB2 32 96 05 D0 	ld	(curCol), a
  254 D1:BEB6 32 95 05 D0 	ld	(curRow), a
  255 D1:BEBA CD C0 07 02 	call	_PutS
  256 D1:BEBE 21 5B 06 D0 	ld	hl, progToEdit
  257 D1:BEC2 06 08 -  -  	ld	b, 8
  258 D1:BEC4 7E -  -  -  _:	ld	a, (hl)
  259 D1:BEC5 B7 -  -  -  	or	a, a
  260 D1:BEC6 28 07 -  -  	jr	z, +_
  261 D1:BEC8 CD B8 07 02 	call	_PutC
  262 D1:BECC 23 -  -  -  	inc	hl
  263 D1:BECD 10 F5 -  -  	djnz	-_
  264 D1:BECF CD F0 07 02 _:	call	_NewLine
  265 D1:BED3 3E 3A -  -  	ld	a, ':'
  266 D1:BED5 CD B8 07 02 	call	_PutC
  267 D1:BED9 CD 68 0D 02 	call	_DispEOW
  268 D1:BEDD C1 -  -  -  	pop	bc
  269 D1:BEDE -  -  -  -  MoveCursorOnce:
  270 D1:BEDE 78 -  -  -  	ld	a, b
  271 D1:BEDF B1 -  -  -  	or	a, c
  272 D1:BEE0 28 07 -  -  	jr	z, ReturnToEditor
  273 D1:BEE2 CD 4C 0D 02 	call	_CursorRight
  274 D1:BEE6 0B -  -  -  	dec	bc
  275 D1:BEE7 18 F5 -  -  	jr	MoveCursorOnce
  276 D1:BEE9 -  -  -  -  ReturnToEditor:
  277 D1:BEE9 CD B0 08 02 	call	_CursorOn
  278 D1:BEED 3C -  -  -  	inc	a                                                                    ;    reset zero flag
  279 D1:BEEE 3E 00 -  -  	ld	a, 0
  280 D1:BEF0 C9 -  -  -  	ret
  281 D1:BEF1 -  -  -  -  CustomTokensData:
  282 D1:BEF1 -  -  -  -  Tab1:
  283 D1:BEF1 45 78 65 63 
              48 65 78 28 
              00 -  -  -  C1: .db "ExecHex(", 0
  284 D1:BEFA 44 65 66 69 
              6E 65 53 70 
              72 69 74 65 
              28 00 -  -  C2: .db "DefineSprite(", 0
  285 D1:BF08 43 61 6C 6C 
              20 00 -  -  C3: .db "Call ", 0
  286 D1:BF0E 43 6F 6D 70 
              69 6C 65 50 
              72 67 6D 28 
              00 -  -  -  C4: .db "CompilePrgm(", 0
  287 D1:BF1B 53 65 74 42 
              41 53 49 43 
              56 61 72 28 
              00 -  -  -  C5: .db "SetBASICVar(", 0
  288 D1:BF28 47 65 74 42 
              41 53 49 43 
              56 61 72 28 
              00 -  -  -  C6: .db "GetBASICVar(", 0
  289 D1:BF35 -  -  -  -  
  290 D1:BF35 -  -  -  -  #define AMOUNT_OF_C_FUNCTIONS 84
  291 D1:BF35 -  -  -  -  
  292 D1:BF35 42 65 67 69 
              6E 00 -  -  C6_:  .db "Begin", 0
  293 D1:BF3B 45 6E 64 00 C7_:  .db "End", 0
  294 D1:BF3F 53 65 74 43 
              6F 6C 6F 72 
              00 -  -  -  C8_:  .db "SetColor", 0
  295 D1:BF48 53 65 74 44 
              65 66 61 75 
              6C 74 50 61 
              6C 65 74 74 
              65 00 -  -  C9_:  .db "SetDefaultPalette", 0
  296 D1:BF5A 53 65 74 50 
              61 6C 65 74 
              74 65 00 -  C10_: .db "SetPalette", 0
  297 D1:BF65 46 69 6C 6C 
              53 63 72 65 
              65 6E 00 -  C11_: .db "FillScreen", 0
  298 D1:BF70 53 65 74 50 
              69 78 65 6C 
              00 -  -  -  C12_: .db "SetPixel", 0
  299 D1:BF79 47 65 74 50 
              69 78 65 6C 
              00 -  -  -  C13_: .db "GetPixel", 0
  300 D1:BF82 47 65 74 44 
              72 61 77 00 C14_: .db "GetDraw", 0
  301 D1:BF8A 53 65 74 44 
              72 61 77 00 C15_: .db "SetDraw", 0
  302 D1:BF92 -  -  -  -  Tab2:
  303 D1:BF92 53 77 61 70 
              44 72 61 77 
              00 -  -  -  C16_: .db "SwapDraw", 0
  304 D1:BF9B 42 6C 69 74 
              00 -  -  -  C17_: .db "Blit", 0
  305 D1:BFA0 42 6C 69 74 
              4C 69 6E 65 
              73 00 -  -  C18_: .db "BlitLines", 0
  306 D1:BFAA 42 6C 69 74 
              41 72 65 61 
              00 -  -  -  C19_: .db "BlitArea", 0
  307 D1:BFB3 50 72 69 6E 
              74 43 68 61 
              72 00 -  -  C20_: .db "PrintChar", 0
  308 D1:BFBD 50 72 69 6E 
              74 49 6E 74 
              00 -  -  -  C21_: .db "PrintInt", 0
  309 D1:BFC6 50 72 69 6E 
              74 55 49 6E 
              74 00 -  -  C22_: .db "PrintUInt", 0
  310 D1:BFD0 50 72 69 6E 
              74 53 74 72 
              69 6E 67 00 C23_: .db "PrintString", 0
  311 D1:BFDC 50 72 69 6E 
              74 53 74 72 
              69 6E 67 58 
              59 00 -  -  C24_: .db "PrintStringXY", 0
  312 D1:BFEA 53 65 74 54 
              65 78 74 58 
              59 00 -  -  C25_: .db "SetTextXY", 0
  313 D1:BFF4 53 65 74 54 
              65 78 74 42 
              47 43 6F 6C 
              6F 72 00 -  C26_: .db "SetTextBGColor", 0
  314 D1:C003 53 65 74 54 
              65 78 74 46 
              47 43 6F 6C 
              6F 72 00 -  C27_: .db "SetTextFGColor", 0
  315 D1:C012 53 65 74 54 
              65 78 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C28_: .db "SetTextTransparentColor", 0
  316 D1:C02A 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 44 61 74 
              61 00 -  -  C29_: .db "SetCustomFontData", 0
  317 D1:C03C 53 65 74 43 
              75 73 74 6F 
              6D 46 6F 6E 
              74 53 70 61 
              63 69 6E 67 
              00 -  -  -  C30_: .db "SetCustomFontSpacing", 0
  318 D1:C051 53 65 74 4D 
              6F 6E 6F 73 
              70 61 63 65 
              46 6F 6E 74 
              00 -  -  -  C31_: .db "SetMonospaceFont", 0
  319 D1:C062 -  -  -  -  Tab3:
  320 D1:C062 47 65 74 53 
              74 72 69 6E 
              67 57 69 64 
              74 68 00 -  C32_: .db "GetStringWidth", 0
  321 D1:C071 47 65 74 43 
              68 61 72 57 
              69 64 74 68 
              00 -  -  -  C33_: .db "GetCharWidth", 0
  322 D1:C07E 47 65 74 54 
              65 78 74 58 
              00 -  -  -  C34_: .db "GetTextX", 0
  323 D1:C087 47 65 74 54 
              65 78 74 59 
              00 -  -  -  C35_: .db "GetTextY", 0
  324 D1:C090 4C 69 6E 65 
              00 -  -  -  C36_: .db "Line", 0
  325 D1:C095 48 6F 72 69 
              7A 4C 69 6E 
              65 00 -  -  C37_: .db "HorizLine", 0
  326 D1:C09F 56 65 72 74 
              4C 69 6E 65 
              00 -  -  -  C38_: .db "VertLine", 0
  327 D1:C0A8 43 69 72 63 
              6C 65 00 -  C39_: .db "Circle", 0
  328 D1:C0AF 46 69 6C 6C 
              43 69 72 63 
              6C 65 00 -  C40_: .db "FillCircle", 0
  329 D1:C0BA 52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C41_: .db "Rectangle", 0
  330 D1:C0C4 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 00 -  -  C42_: .db "FillRectangle", 0
  331 D1:C0D2 4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C43_: .db "Line_NoClip", 0
  332 D1:C0DE 48 6F 72 69 
              7A 4C 69 6E 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C44_: .db "HorizLine_NoClip", 0
  333 D1:C0EF 56 65 72 74 
              4C 69 6E 65 
              5F 4E 6F 43 
              6C 69 70 00 C45_: .db "VertLine_NoClip", 0
  334 D1:C0FF 46 69 6C 6C 
              43 69 72 63 
              6C 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C46_: .db "FillCircle_NoClip", 0
  335 D1:C111 52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C47_: .db "Rectangle_NoClip", 0
  336 D1:C122 -  -  -  -  Tab4:
  337 D1:C122 46 69 6C 6C 
              52 65 63 74 
              61 6E 67 6C 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C48_: .db "FillRectangle_NoClip", 0
  338 D1:C137 53 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C49_: .db "SetClipRegion", 0
  339 D1:C145 47 65 74 43 
              6C 69 70 52 
              65 67 69 6F 
              6E 00 -  -  C50_: .db "GetClipRegion", 0
  340 D1:C153 53 68 69 66 
              74 44 6F 77 
              6E 00 -  -  C51_: .db "ShiftDown", 0
  341 D1:C15D 53 68 69 66 
              74 55 70 00 C52_: .db "ShiftUp", 0
  342 D1:C165 53 68 69 66 
              74 4C 65 66 
              74 00 -  -  C53_: .db "ShiftLeft", 0
  343 D1:C16F 53 68 69 66 
              74 52 69 67 
              68 74 00 -  C54_: .db "ShiftRight", 0
  344 D1:C17A 54 69 6C 65 
              6D 61 70 00 C55_: .db "Tilemap", 0
  345 D1:C182 54 69 6C 65 
              6D 61 70 5F 
              4E 6F 43 6C 
              69 70 00 -  C56_: .db "Tilemap_NoClip", 0
  346 D1:C191 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 00 -  C57_: .db "TransparentTilemap", 0
  347 D1:C1A4 54 72 61 6E 
              73 70 61 72 
              65 6E 74 54 
              69 6C 65 6D 
              61 70 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C58_: .db "TransparentTilemap_NoClip", 0
  348 D1:C1BE 54 69 6C 65 
              50 74 72 00 C59_: .db "TilePtr", 0
  349 D1:C1C6 54 69 6C 65 
              50 74 72 4D 
              61 70 70 65 
              64 00 -  -  C60_: .db "TilePtrMapped", 0
  350 D1:C1D4 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              00 -  -  -  C61_: .db "LZDecompress", 0
  351 D1:C1E1 41 6C 6C 6F 
              63 53 70 72 
              69 74 65 00 C62_: .db "AllocSprite", 0
  352 D1:C1ED 53 70 72 69 
              74 65 00 -  C63_: .db "Sprite", 0
  353 D1:C1F4 -  -  -  -  Tab5:
  354 D1:C1F4 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 00 -  -  C64_: .db "TransparentSprite", 0
  355 D1:C206 53 70 72 69 
              74 65 5F 4E 
              6F 43 6C 69 
              70 00 -  -  C65_: .db "Sprite_NoClip", 0
  356 D1:C214 54 72 61 6E 
              73 70 61 72 
              65 6E 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C66_: .db "TransparentSprite_NoClip", 0
  357 D1:C22D 47 65 74 53 
              70 72 69 74 
              65 5F 4E 6F 
              43 6C 69 70 
              00 -  -  -  C67_: .db "GetSprite_NoClip", 0
  358 D1:C23E 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              5F 4E 6F 43 
              6C 69 70 00 C68_: .db "ScaledSprite_NoClip", 0
  359 D1:C252 53 63 61 6C 
              65 64 54 72 
              61 6E 73 70 
              61 72 65 6E 
              74 53 70 72 
              69 74 65 5F 
              4E 6F 43 6C 
              69 70 00 -  C69_: .db "ScaledTransparentSprite_NoClip", 0
  360 D1:C271 46 6C 69 70 
              53 70 72 69 
              74 65 59 00 C70_: .db "FlipSpriteY", 0
  361 D1:C27D 46 6C 69 70 
              53 70 72 69 
              74 65 58 00 C71_: .db "FlipSpriteX", 0
  362 D1:C289 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 00 -  -  C72_: .db "RotateSpriteC", 0
  363 D1:C297 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              43 43 00 -  C73_: .db "RotateSpriteCC", 0
  364 D1:C2A6 52 6F 74 61 
              74 65 53 70 
              72 69 74 65 
              48 61 6C 66 
              00 -  -  -  C74_: .db "RotateSpriteHalf", 0
  365 D1:C2B7 50 6F 6C 79 
              67 6F 6E 00 C75_: .db "Polygon", 0
  366 D1:C2BF 50 6F 6C 79 
              67 6F 6E 5F 
              4E 6F 43 6C 
              69 70 00 -  C76_: .db "Polygon_NoClip", 0
  367 D1:C2CE 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              00 -  -  -  C77_: .db "FillTriangle", 0
  368 D1:C2DB 46 69 6C 6C 
              54 72 69 61 
              6E 67 6C 65 
              5F 4E 6F 43 
              6C 69 70 00 C78_: .db "FillTriangle_NoClip", 0
  369 D1:C2EF 4C 5A 44 65 
              63 6F 6D 70 
              72 65 73 73 
              53 70 72 69 
              74 65 00 -  C79_: .db "LZDecompressSprite", 0
  370 D1:C302 -  -  -  -  Tab6:
  371 D1:C302 53 65 74 54 
              65 78 74 53 
              63 61 6C 65 
              00 -  -  -  C80_: .db "SetTextScale", 0
  372 D1:C30F 53 65 74 54 
              72 61 6E 73 
              70 61 72 65 
              6E 74 43 6F 
              6C 6F 72 00 C81_: .db "SetTransparentColor", 0
  373 D1:C323 5A 65 72 6F 
              53 63 72 65 
              65 6E 00 -  C82_: .db "ZeroScreen", 0
  374 D1:C32E 53 65 74 54 
              65 78 74 43 
              6F 6E 66 69 
              67 00 -  -  C83_: .db "SetTextConfig", 0
  375 D1:C33C 47 65 74 53 
              70 72 69 74 
              65 43 68 61 
              72 00 -  -  C84_: .db "GetSpriteChar", 0
  376 D1:C34A 4C 69 67 68 
              74 65 6E 00 C85_: .db "Lighten", 0
  377 D1:C352 44 61 72 6B 
              65 6E 00 -  C86_: .db "Darken", 0
  378 D1:C359 53 65 74 46 
              6F 6E 74 48 
              65 69 67 68 
              74 00 -  -  C87_: .db "SetFontHeight", 0
  379 D1:C367 53 63 61 6C 
              65 64 53 70 
              72 69 74 65 
              00 -  -  -  C88_: .db "ScaledSprite", 0
  380 D1:C374 46 6C 6F 6F 
              64 46 69 6C 
              6C 00 -  -  C89_: .db "FloodFill", 0
  381 D1:C37E 00 -  -  -  	.db	0
  382 D1:C37F -  -  -  -  TabData:
  383 D1:C37F D9 01 00 -  	.dl	Tab1 - KeyHook_start
  384 D1:C382 7A 02 00 -  	.dl	Tab2 - KeyHook_start
  385 D1:C385 4A 03 00 -  	.dl	Tab3 - KeyHook_start
  386 D1:C388 0A 04 00 -  	.dl	Tab4 - KeyHook_start
  387 D1:C38B DC 04 00 -  	.dl	Tab5 - KeyHook_start
  388 D1:C38E EA 05 00 -  	.dl	Tab6 - KeyHook_start
  389 D1:C391 -  -  -  -      
  390 D1:C391 -  -  -  -  CData5:
  391 D1:C391 1D 02 00 -  	.dl	C6_ - KeyHook_start
  392 D1:C394 23 02 00 -  	.dl	C7_ - KeyHook_start
  393 D1:C397 27 02 00 -  	.dl	C8_ - KeyHook_start
  394 D1:C39A 30 02 00 -  	.dl	C9_ - KeyHook_start
  395 D1:C39D 42 02 00 -  	.dl	C10_ - KeyHook_start
  396 D1:C3A0 4D 02 00 -  	.dl	C11_ - KeyHook_start
  397 D1:C3A3 58 02 00 -  	.dl	C12_ - KeyHook_start
  398 D1:C3A6 61 02 00 -  	.dl	C13_ - KeyHook_start
  399 D1:C3A9 6A 02 00 -  	.dl	C14_ - KeyHook_start
  400 D1:C3AC 72 02 00 -  	.dl	C15_ - KeyHook_start
  401 D1:C3AF 7A 02 00 -  	.dl	C16_ - KeyHook_start
  402 D1:C3B2 83 02 00 -  	.dl	C17_ - KeyHook_start
  403 D1:C3B5 88 02 00 -  	.dl	C18_ - KeyHook_start
  404 D1:C3B8 92 02 00 -  	.dl	C19_ - KeyHook_start
  405 D1:C3BB 9B 02 00 -  	.dl	C20_ - KeyHook_start
  406 D1:C3BE A5 02 00 -  	.dl	C21_ - KeyHook_start
  407 D1:C3C1 AE 02 00 -  	.dl	C22_ - KeyHook_start
  408 D1:C3C4 B8 02 00 -  	.dl	C23_ - KeyHook_start
  409 D1:C3C7 C4 02 00 -  	.dl	C24_ - KeyHook_start
  410 D1:C3CA D2 02 00 -  	.dl	C25_ - KeyHook_start
  411 D1:C3CD DC 02 00 -  	.dl	C26_ - KeyHook_start
  412 D1:C3D0 EB 02 00 -  	.dl	C27_ - KeyHook_start
  413 D1:C3D3 FA 02 00 -  	.dl	C28_ - KeyHook_start
  414 D1:C3D6 12 03 00 -  	.dl	C29_ - KeyHook_start
  415 D1:C3D9 24 03 00 -  	.dl	C30_ - KeyHook_start
  416 D1:C3DC 39 03 00 -  	.dl	C31_ - KeyHook_start
  417 D1:C3DF 4A 03 00 -  	.dl	C32_ - KeyHook_start
  418 D1:C3E2 59 03 00 -  	.dl	C33_ - KeyHook_start
  419 D1:C3E5 66 03 00 -  	.dl	C34_ - KeyHook_start
  420 D1:C3E8 6F 03 00 -  	.dl	C35_ - KeyHook_start
  421 D1:C3EB 78 03 00 -  	.dl	C36_ - KeyHook_start
  422 D1:C3EE 7D 03 00 -  	.dl	C37_ - KeyHook_start
  423 D1:C3F1 87 03 00 -  	.dl	C38_ - KeyHook_start
  424 D1:C3F4 90 03 00 -  	.dl	C39_ - KeyHook_start
  425 D1:C3F7 97 03 00 -  	.dl	C40_ - KeyHook_start
  426 D1:C3FA A2 03 00 -  	.dl	C41_ - KeyHook_start
  427 D1:C3FD AC 03 00 -  	.dl	C42_ - KeyHook_start
  428 D1:C400 BA 03 00 -  	.dl	C43_ - KeyHook_start
  429 D1:C403 C6 03 00 -  	.dl	C44_ - KeyHook_start
  430 D1:C406 D7 03 00 -  	.dl	C45_ - KeyHook_start
  431 D1:C409 E7 03 00 -  	.dl	C46_ - KeyHook_start
  432 D1:C40C F9 03 00 -  	.dl	C47_ - KeyHook_start
  433 D1:C40F 0A 04 00 -  	.dl	C48_ - KeyHook_start
  434 D1:C412 1F 04 00 -  	.dl	C49_ - KeyHook_start
  435 D1:C415 2D 04 00 -  	.dl	C50_ - KeyHook_start
  436 D1:C418 3B 04 00 -  	.dl	C51_ - KeyHook_start
  437 D1:C41B 45 04 00 -  	.dl	C52_ - KeyHook_start
  438 D1:C41E 4D 04 00 -  	.dl	C53_ - KeyHook_start
  439 D1:C421 57 04 00 -  	.dl	C54_ - KeyHook_start
  440 D1:C424 62 04 00 -  	.dl	C55_ - KeyHook_start
  441 D1:C427 6A 04 00 -  	.dl	C56_ - KeyHook_start
  442 D1:C42A 79 04 00 -  	.dl	C57_ - KeyHook_start
  443 D1:C42D 8C 04 00 -  	.dl	C58_ - KeyHook_start
  444 D1:C430 A6 04 00 -  	.dl	C59_ - KeyHook_start
  445 D1:C433 AE 04 00 -  	.dl	C60_ - KeyHook_start
  446 D1:C436 BC 04 00 -  	.dl	C61_ - KeyHook_start
  447 D1:C439 C9 04 00 -  	.dl	C62_ - KeyHook_start
  448 D1:C43C D5 04 00 -  	.dl	C63_ - KeyHook_start
  449 D1:C43F DC 04 00 -  	.dl	C64_ - KeyHook_start
  450 D1:C442 EE 04 00 -  	.dl	C65_ - KeyHook_start
  451 D1:C445 FC 04 00 -  	.dl	C66_ - KeyHook_start
  452 D1:C448 15 05 00 -  	.dl	C67_ - KeyHook_start
  453 D1:C44B 26 05 00 -  	.dl	C68_ - KeyHook_start
  454 D1:C44E 3A 05 00 -  	.dl	C69_ - KeyHook_start
  455 D1:C451 59 05 00 -  	.dl	C70_ - KeyHook_start
  456 D1:C454 65 05 00 -  	.dl	C71_ - KeyHook_start
  457 D1:C457 71 05 00 -  	.dl	C72_ - KeyHook_start
  458 D1:C45A 7F 05 00 -  	.dl	C73_ - KeyHook_start
  459 D1:C45D 8E 05 00 -  	.dl	C74_ - KeyHook_start
  460 D1:C460 9F 05 00 -  	.dl	C75_ - KeyHook_start
  461 D1:C463 A7 05 00 -  	.dl	C76_ - KeyHook_start
  462 D1:C466 B6 05 00 -  	.dl	C77_ - KeyHook_start
  463 D1:C469 C3 05 00 -  	.dl	C78_ - KeyHook_start
  464 D1:C46C D7 05 00 -  	.dl	C79_ - KeyHook_start
  465 D1:C46F EA 05 00 -  	.dl	C80_ - KeyHook_start
  466 D1:C472 F7 05 00 -  	.dl	C81_ - KeyHook_start
  467 D1:C475 0B 06 00 -  	.dl	C82_ - KeyHook_start
  468 D1:C478 16 06 00 -  	.dl	C83_ - KeyHook_start
  469 D1:C47B 24 06 00 -  	.dl	C84_ - KeyHook_start
  470 D1:C47E 32 06 00 -  	.dl	C85_ - KeyHook_start
  471 D1:C481 3A 06 00 -  	.dl	C86_ - KeyHook_start
  472 D1:C484 41 06 00 -  	.dl	C87_ - KeyHook_start
  473 D1:C487 4F 06 00 -  	.dl	C88_ - KeyHook_start
  474 D1:C48A 5C 06 00 -  	.dl	C89_ - KeyHook_start
  475 D1:C48D -  -  -  -      
  476 D1:C48D -  -  -  -  #define AMOUNT_OF_CUSTOM_TOKENS 6
  477 D1:C48D 08 45 78 65 
              63 48 65 78 
              28 00 -  -  Token1: .db 8,  "ExecHex(", 0
  478 D1:C497 0D 44 65 66 
              69 6E 65 53 
              70 72 69 74 
              65 28 00 -  Token2: .db 13, "DefineSprite(", 0
  479 D1:C4A6 05 43 61 6C 
              6C 20 00 -  Token3: .db 5,  "Call ", 0
  480 D1:C4AD 0C 43 6F 6D 
              70 69 6C 65 
              50 72 67 6D 
              28 00 -  -  Token4: .db 12, "CompilePrgm(", 0
  481 D1:C4BB 0C 53 65 74 
              42 41 53 49 
              43 56 61 72 
              28 00 -  -  Token5: .db 12, "SetBASICVar(", 0
  482 D1:C4C9 0C 47 65 74 
              42 41 53 49 
              43 56 61 72 
              28 00 -  -  Token6: .db 12, "GetBASICVar(", 0
  483 D1:C4D7 -  -  -  -  
  484 D1:C4D7 -  -  -  -  CustomTokensProgramText:
  485 D1:C4D7 50 52 4F 47 
              52 41 4D 3A 
              00 -  -  -  	.db	"PROGRAM:", 0
  486 D1:C4E0 -  -  -  -  KeyHook_end:
  487 D1:C4E0 -  -  -  -  
  488 D1:C4E0 -  -  -  -  TokenHook_start:
  489 D1:C4E0 83 -  -  -  	.db	83h
  490 D1:C4E1 7A -  -  -  	ld	a, d
  491 D1:C4E2 FE 04 -  -  	cp	a, 4
  492 D1:C4E4 C0 -  -  -  	ret	nz
  493 D1:C4E5 7B -  -  -  	ld	a, e
  494 D1:C4E6 FE 1A -  -  	cp	a, 5+3+(AMOUNT_OF_CUSTOM_TOKENS*3)
  495 D1:C4E8 D0 -  -  -  	ret	nc
  496 D1:C4E9 D6 05 -  -  	sub	a, 5
  497 D1:C4EB ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
  498 D1:C4F0 21 E7 07 00 	ld	hl, TokenHook_data - KeyHook_start
  499 D1:C4F4 19 -  -  -  	add	hl, de
  500 D1:C4F5 01 00 00 00 	ld	bc, 0
  501 D1:C4F9 4F -  -  -  	ld	c, a
  502 D1:C4FA 09 -  -  -  	add	hl, bc
  503 D1:C4FB ED 27 -  -  	ld	hl, (hl)
  504 D1:C4FD 19 -  -  -  	add	hl, de
  505 D1:C4FE C9 -  -  -  	ret
  506 D1:C4FF -  -  -  -  TokenHook_data:
  507 D1:C4FF 74 07 00 -  	.dl	Token1 - KeyHook_start - 1
  508 D1:C502 7E 07 00 -  	.dl	Token2 - KeyHook_start - 1
  509 D1:C505 8D 07 00 -  	.dl	Token3 - KeyHook_start - 1
  510 D1:C508 94 07 00 -  	.dl	Token4 - KeyHook_start - 1
  511 D1:C50B A2 07 00 -  	.dl	Token5 - KeyHook_start - 1
  512 D1:C50E B0 07 00 -  	.dl	Token6 - KeyHook_start - 1
  513 D1:C511 -  -  -  -  TokenHook_end:
  514 D1:C511 -  -  -  -  
  515 D1:C511 -  -  -  -  CursorHook_start:
  516 D1:C511 83 -  -  -  	.db	83h
  517 D1:C512 FE 24 -  -  	cp	a, 24h
  518 D1:C514 20 06 -  -  	jr	nz, +_
  519 D1:C516 3C -  -  -  	inc	a
  520 D1:C517 3A 99 05 D0 	ld	a, (curUnder)
  521 D1:C51B C9 -  -  -  	ret
  522 D1:C51C FE 22 -  -  _:	cp	a, 22h
  523 D1:C51E C0 -  -  -  	ret	nz
  524 D1:C51F 3A E0 07 D0 	ld	a, (cxCurApp)
  525 D1:C523 FE 46 -  -  	cp	a, cxPrgmEdit
  526 D1:C525 C0 -  -  -  	ret	nz
  527 D1:C526 2A 3A 24 D0 	ld	hl, (editCursor)
  528 D1:C52A 7E -  -  -  	ld	a, (hl)
  529 D1:C52B FE B3 -  -  	cp	a, tDet
  530 D1:C52D C0 -  -  -  	ret	nz
  531 D1:C52E -  -  -  -  DrawDetText:
  532 D1:C52E FD CB AE 46 	bit	displayed_det, (iy+fAlways1)
  533 D1:C532 C0 -  -  -  	ret	nz
  534 D1:C533 2A 3D 24 D0 	ld	hl, (editTail)
  535 D1:C537 23 -  -  -  	inc	hl
  536 D1:C538 7E -  -  -  	ld	a, (hl)
  537 D1:C539 D6 30 -  -  	sub	a, t0
  538 D1:C53B D8 -  -  -  	ret	c
  539 D1:C53C FE 0A -  -  	cp	a, t9-t0+1
  540 D1:C53E ED 4B 40 24 
              D0 -  -  -  	ld	bc, (editBtm)
  541 D1:C543 11 00 00 00 	ld	de, 0
  542 D1:C547 5F -  -  -  	ld	e, a
  543 D1:C548 38 02 -  -  	jr	c, GetDetValueLoop
  544 D1:C54A -  -  -  -  WrongDetValue:
  545 D1:C54A 3C -  -  -  	inc	a
  546 D1:C54B C9 -  -  -  	ret
  547 D1:C54C -  -  -  -  GetDetValueLoop:
  548 D1:C54C 23 -  -  -  	inc	hl
  549 D1:C54D B7 -  -  -  	or	a, a
  550 D1:C54E ED 42 -  -  	sbc	hl, bc
  551 D1:C550 28 1C -  -  	jr	z, GetDetValueStop
  552 D1:C552 09 -  -  -  	add	hl, bc
  553 D1:C553 7E -  -  -  	ld	a, (hl)
  554 D1:C554 D6 30 -  -  	sub	a, t0
  555 D1:C556 38 16 -  -  	jr	c, GetDetValueStop
  556 D1:C558 FE 0A -  -  	cp	a, t9-t0+1
  557 D1:C55A 30 12 -  -  	jr	nc, GetDetValueStop
  558 D1:C55C E5 -  -  -  	push	hl
  559 D1:C55D EB -  -  -  	ex	de, hl
  560 D1:C55E 29 -  -  -  	add	hl, hl
  561 D1:C55F E5 -  -  -  	push	hl
  562 D1:C560 D1 -  -  -  	pop	de
  563 D1:C561 29 -  -  -  	add	hl, hl
  564 D1:C562 29 -  -  -  	add	hl, hl
  565 D1:C563 19 -  -  -  	add	hl, de
  566 D1:C564 11 00 00 00 	ld	de, 0
  567 D1:C568 5F -  -  -  	ld	e, a
  568 D1:C569 19 -  -  -  	add	hl, de
  569 D1:C56A EB -  -  -  	ex	de, hl
  570 D1:C56B E1 -  -  -  	pop	hl
  571 D1:C56C 18 DE -  -  	jr	GetDetValueLoop
  572 D1:C56E -  -  -  -  GetDetValueStop:
  573 D1:C56E EB -  -  -  	ex	de, hl
  574 D1:C56F 11 54 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
  575 D1:C573 B7 -  -  -  	or	a, a
  576 D1:C574 ED 52 -  -  	sbc	hl, de
  577 D1:C576 30 D2 -  -  	jr	nc, WrongDetValue
  578 D1:C578 19 -  -  -  	add	hl, de
  579 D1:C579 26 03 -  -  	ld	h, 3
  580 D1:C57B ED 6C -  -  	mlt	hl
  581 D1:C57D 11 79 06 00 	ld	de, CData5 - KeyHook_start
  582 D1:C581 19 -  -  -  	add	hl, de
  583 D1:C582 ED 5B DB 25 
              D0 -  -  -  	ld	de, (rawKeyHookPtr)
  584 D1:C587 19 -  -  -  	add	hl, de
  585 D1:C588 ED 27 -  -  	ld	hl, (hl)
  586 D1:C58A 19 -  -  -  	add	hl, de
  587 D1:C58B 11 1C E7 00 	ld	de, 000E71Ch
  588 D1:C58F 40 ED 53 AC 
              26 -  -  -  	ld.sis	(drawFGColor & 0FFFFh), de
  589 D1:C594 40 ED 5B CC 
              2A -  -  -  	ld.sis	de, (statusBarBGColor & 0FFFFh)
  590 D1:C599 40 ED 53 AA 
              26 -  -  -  	ld.sis	(drawBGColor & 0FFFFh), de
  591 D1:C59E 3E 0E -  -  	ld	a, 14
  592 D1:C5A0 32 D5 08 D0 	ld	(penRow),a
  593 D1:C5A4 11 02 00 00 	ld	de, 2
  594 D1:C5A8 40 ED 53 D2 
              08 -  -  -  	ld.sis	(penCol & 0FFFFh), de
  595 D1:C5AD CD 34 08 02 	call	_VPutS
  596 D1:C5B1 11 FF FF 00 	ld	de, 0FFFFh
  597 D1:C5B5 40 ED 53 AA 
              26 -  -  -  	ld.sis	(drawBGColor & 0FFFFh), de
  598 D1:C5BA FD CB AE C6 	set	displayed_det, (iy+fAlways1)
  599 D1:C5BE C9 -  -  -  	ret
  600 D1:C5BF -  -  -  -  CursorHook_end:
  601 D1:C5BF -  -  -  -  
  602 D1:C5BF -  -  -  -  Hooks_end:
Listing for file "ice.asm"
  458 D1:C5BF -  -  -  -  #include "operators functions/functions.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\operators functions\functions.asm"
    1 D1:C5BF -  -  -  -  ExecuteFunction:
    2 D1:C5BF E5 -  -  -  	push	hl
    3 D1:C5C0 21 5C EB D1 	ld	hl, FunctionsWithReturnValueArguments
    4 D1:C5C4 01 07 00 00 	ld	bc, FunctionsWithReturnValueEnd - FunctionsWithReturnValueArguments
    5 D1:C5C8 ED B1 -  -  	cpir
    6 D1:C5CA 06 03 -  -  	ld	b, 3
    7 D1:C5CC ED 4C -  -  	mlt	bc
    8 D1:C5CE 21 63 EB D1 	ld	hl, FunctionsWithReturnValueStart
    9 D1:C5D2 09 -  -  -  	add	hl, bc
   10 D1:C5D3 ED 27 -  -  	ld	hl, (hl)
   11 D1:C5D5 22 DB C5 D1 	ld	(JumpFunction), hl
   12 D1:C5D9 E1 -  -  -  	pop	hl
   13 D1:C5DA -  -  -  -  JumpFunction = $+1
   14 D1:C5DA C3 00 00 00 	jp	0
   15 D1:C5DE -  -  -  -      
   16 D1:C5DE -  -  -  -  functionPrgm:
   17 D1:C5DE CD B2 AC D1 	call	MaybeInsertIYFlags
   18 D1:C5E2 3E 21 -  -  	ld	a, 021h
   19 D1:C5E4 CD 26 AD D1 	call	InsertA                                                            ;    ld hl, *
   20 D1:C5E8 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
   21 D1:C5EC 2A CA EC D1 	ld	hl, (programDataDataPtr)
   22 D1:C5F0 E5 -  -  -  	push	hl
   23 D1:C5F1 CD 5E AC D1 	call	InsertHL                                                        ;    ld hl, programname
   24 D1:C5F5 E1 -  -  -  	pop	hl
   25 D1:C5F6 36 05 -  -  	ld	(hl), ProgObj
   26 D1:C5F8 CD 06 B2 D1 	call	GetProgramName
   27 D1:C5FC 23 -  -  -  	inc	hl
   28 D1:C5FD 22 CA EC D1 	ld	(programDataDataPtr), hl
   29 D1:C601 3E CD -  -  	ld	a, 0CDh
   30 D1:C603 21 20 03 02 	ld	hl, _Mov9ToOP1
   31 D1:C607 CD 5A AC D1 	call	InsertAHL                                                            ;    call _Mov9ToOP1
   32 D1:C60B 3E FD -  -  	ld	a, 0FDh
   33 D1:C60D 21 CB 08 CE 	ld	hl, 0CE08CBh
   34 D1:C611 CD 5A AC D1 	call	InsertAHL                                                            ;    set 1, (iy+8)
   35 D1:C615 3E CD -  -  	ld	a, 0CDh
   36 D1:C617 21 00 0F 02 	ld	hl, _ParseInp
   37 D1:C61B CD 5A AC D1 	call	InsertAHL                                                            ;    call _ParseInp
   38 D1:C61F 3E FD -  -  	ld	a, 0FDh
   39 D1:C621 21 CB 08 8E 	ld	hl, 08E08CBh
   40 D1:C625 C3 5A AC D1 	jp	InsertAHL                                                            ;    res 1, (iy+8)
   41 D1:C629 -  -  -  -      
   42 D1:C629 -  -  -  -  
   43 D1:C629 -  -  -  -  functionOutput:
   44 D1:C629 CD B2 AC D1 	call	MaybeInsertIYFlags
   45 D1:C62D 3E 01 -  -  	ld	a, 1
   46 D1:C62F 32 D2 EC D1 	ld	(openedParensF), a
   47 D1:C633 CD 28 10 02 	call	_IncFetch
   48 D1:C637 CD 9D B2 D1 	call	ParseExpression
   49 D1:C63B FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   50 D1:C63F FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   51 D1:C643 CA 4B AF D1 	jp	z, ErrorSyntax
   52 D1:C647 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   53 D1:C64B 20 08 -  -  	jr	nz, OutputRowIsNumber
   54 D1:C64D -  -  -  -  OutputRowIsVariable:
   55 D1:C64D 3E 7D -  -  	ld	a, 07Dh
   56 D1:C64F CD 26 AD D1 	call	InsertA                                                            ;    ld a, l
   57 D1:C653 18 0E -  -  	jr	+_
   58 D1:C655 -  -  -  -  OutputRowIsNumber:
   59 D1:C655 2A B5 EC D1 	ld	hl, (programPtr)
   60 D1:C659 2B -  -  -  	dec	hl
   61 D1:C65A 2B -  -  -  	dec	hl
   62 D1:C65B 22 B5 EC D1 	ld	(programPtr), hl
   63 D1:C65F 2B -  -  -  	dec	hl
   64 D1:C660 2B -  -  -  	dec	hl
   65 D1:C661 36 3E -  -  	ld	(hl), 03Eh                                                            ;    ld a, *
   66 D1:C663 3E 32 -  -  _:	ld	a, 032h
   67 D1:C665 21 95 05 D0 	ld	hl, curRow
   68 D1:C669 CD 5A AC D1 	call	InsertAHL                                                            ;    ld (curRow), a
   69 D1:C66D CD 28 10 02 	call	_IncFetch
   70 D1:C671 CD 9D B2 D1 	call	ParseExpression
   71 D1:C675 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   72 D1:C679 FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   73 D1:C67D CA 4B AF D1 	jp	z, ErrorSyntax
   74 D1:C681 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   75 D1:C685 20 08 -  -  	jr	nz, OutputColumnIsNumber
   76 D1:C687 -  -  -  -  OutputColumnIsVariable:
   77 D1:C687 3E 7D -  -  	ld	a, 07Dh
   78 D1:C689 CD 26 AD D1 	call	InsertA                                                            ;    ld a, l
   79 D1:C68D 18 0E -  -  	jr	+_
   80 D1:C68F -  -  -  -  OutputColumnIsNumber:
   81 D1:C68F 2A B5 EC D1 	ld	hl, (programPtr)
   82 D1:C693 2B -  -  -  	dec	hl
   83 D1:C694 2B -  -  -  	dec	hl
   84 D1:C695 22 B5 EC D1 	ld	(programPtr), hl
   85 D1:C699 2B -  -  -  	dec	hl
   86 D1:C69A 2B -  -  -  	dec	hl
   87 D1:C69B 36 3E -  -  	ld	(hl), 03Eh                                                            ;    ld a, *
   88 D1:C69D 3E 32 -  -  _:	ld	a, 032h
   89 D1:C69F 21 96 05 D0 	ld	hl, curCol
   90 D1:C6A3 CD 5A AC D1 	call	InsertAHL                                                            ;    ld (curCol), a
   91 D1:C6A7 F6 01 -  -  	or	a, 1                                                                    ;    rest zero flag
   92 D1:C6A9 CD C4 C6 D1 	call	DisplayNumberOrString
   93 D1:C6AD C2 4B AF D1 	jp	nz, ErrorSyntax
   94 D1:C6B1 C9 -  -  -  	ret
   95 D1:C6B2 -  -  -  -      
   96 D1:C6B2 -  -  -  -  functionDisp:
   97 D1:C6B2 CD B2 AC D1 	call	MaybeInsertIYFlags
   98 D1:C6B6 3E 01 -  -  	ld	a, 1
   99 D1:C6B8 32 D2 EC D1 	ld	(openedParensF), a
  100 D1:C6BC 3D -  -  -  	dec	a                                                                    ;    set zero flag
  101 D1:C6BD CD C4 C6 D1 	call	DisplayNumberOrString
  102 D1:C6C1 C8 -  -  -  	ret	z
  103 D1:C6C2 18 EE -  -  	jr	functionDisp
  104 D1:C6C4 -  -  -  -      
  105 D1:C6C4 -  -  -  -  DisplayNumberOrString:
  106 D1:C6C4 F5 -  -  -  	push	af
  107 D1:C6C5 CD 28 10 02 	call	_IncFetch
  108 D1:C6C9 CD 9D B2 D1 	call	ParseExpression
  109 D1:C6CD ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  110 D1:C6D2 01 0E 00 00 	ld	bc, 14
  111 D1:C6D6 FD CB C0 7E 	bit	output_is_string, (iy+fExpression1)
  112 D1:C6DA 20 0F -  -  	jr	nz, DispString
  113 D1:C6DC 21 CC EF D1 	ld	hl, DispNumberRoutine
  114 D1:C6E0 F1 -  -  -  	pop	af
  115 D1:C6E1 28 16 -  -  	jr	z, +_
  116 D1:C6E3 21 C6 EF D1 	ld	hl, DispNumberRoutine-6
  117 D1:C6E7 0E 08 -  -  	ld	c, 8
  118 D1:C6E9 18 0E -  -  	jr	+_
  119 D1:C6EB -  -  -  -  DispString:
  120 D1:C6EB 21 DA EF D1 	ld	hl, DispStringRoutine
  121 D1:C6EF 0B -  -  -  	dec	bc
  122 D1:C6F0 F1 -  -  -  	pop	af
  123 D1:C6F1 28 06 -  -  	jr	z, +_
  124 D1:C6F3 21 DF EF D1 	ld	hl, DispStringRoutine+5
  125 D1:C6F7 0E 08 -  -  	ld	c, 8
  126 D1:C6F9 ED B0 -  -  _:	ldir
  127 D1:C6FB ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  128 D1:C700 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  129 D1:C704 C9 -  -  -  	ret
  130 D1:C705 -  -  -  -      
  131 D1:C705 -  -  -  -  functionLbl:
  132 D1:C705 DD 2A BB EC 
              D1 -  -  -  	ld	ix, (labelPtr)
  133 D1:C70A 2A B5 EC D1 	ld	hl, (programPtr)
  134 D1:C70E DD 2F 00 -  	ld	(ix), hl
  135 D1:C711 2A 1A 23 D0 	ld	hl, (curPC)
  136 D1:C715 23 -  -  -  	inc	hl
  137 D1:C716 DD 2F 03 -  	ld	(ix+3), hl
  138 D1:C719 ED 22 06 -  	lea	hl, ix+6
  139 D1:C71C 22 BB EC D1 	ld	(labelPtr), hl
  140 D1:C720 06 D6 -  -  	ld	b, tLbl
  141 D1:C722 -  -  -  -  InsertLblGotoToDebugSection:
  142 D1:C722 FD CB AE 56 	bit	debug_on, (iy+fAlways1)
  143 D1:C726 28 1A -  -  	jr	z, +_
  144 D1:C728 21 3E 00 11 	ld	hl, 011003Eh
  145 D1:C72C 60 -  -  -  	ld	h, b
  146 D1:C72D CD 5E AC D1 	call	InsertHL                                                            ; ld a, * \ ld de, *
  147 D1:C731 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  148 D1:C735 2A CA EC D1 	ld	hl, (programDataDataPtr)
  149 D1:C739 CD 5E AC D1 	call	InsertHL
  150 D1:C73D DD 21 CA EC 
              D1 -  -  -  	ld	ix, programDataDataPtr
  151 D1:C742 CD 28 10 02 _:	call	_IncFetch
  152 D1:C746 38 14 -  -  	jr	c, +_
  153 D1:C748 FE 3F -  -  	cp	a, tEnter
  154 D1:C74A 28 10 -  -  	jr	z, +_
  155 D1:C74C FD CB AE 56 	bit	debug_on, (iy+fAlways1)
  156 D1:C750 28 F0 -  -  	jr	z, -_
  157 D1:C752 DD 27 00 -  	ld	hl, (ix)
  158 D1:C755 77 -  -  -  	ld	(hl), a
  159 D1:C756 23 -  -  -  	inc	hl
  160 D1:C757 DD 2F 00 -  	ld	(ix), hl
  161 D1:C75A 18 E6 -  -  	jr	-_
  162 D1:C75C FD CB AE 56 _:	bit	debug_on, (iy+fAlways1)
  163 D1:C760 C8 -  -  -  	ret	z
  164 D1:C761 DD 27 00 -  	ld	hl, (ix)
  165 D1:C764 36 00 -  -  	ld	(hl), 0
  166 D1:C766 23 -  -  -  	inc	hl
  167 D1:C767 DD 2F 00 -  	ld	(ix), hl
  168 D1:C76A 3E CD -  -  _:	ld	a, 0CDh
  169 D1:C76C CD 26 AD D1 	call	InsertA                                                             ; call *
  170 D1:C770 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  171 D1:C774 FD CB CF 5E 	bit	has_already_debug, (iy+fProgram2)
  172 D1:C778 FD CB CF DE 	set	has_already_debug, (iy+fProgram2)
  173 D1:C77C 20 1F -  -  	jr	nz, +_
  174 D1:C77E 2A CA EC D1 	ld	hl, (programDataDataPtr)
  175 D1:C782 E5 -  -  -  	push	hl
  176 D1:C783 CD 5E AC D1 	call	InsertHL
  177 D1:C787 D1 -  -  -  	pop	de
  178 D1:C788 ED 53 CD EC 
              D1 -  -  -  	ld	(debugCodePtr), de
  179 D1:C78D 21 1B F1 D1 	ld	hl, InsertDebugCode
  180 D1:C791 01 15 00 00 	ld	bc, InsertDebugCodeEnd - InsertDebugCode
  181 D1:C795 ED B0 -  -  	ldir
  182 D1:C797 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  183 D1:C79C C9 -  -  -  	ret
  184 D1:C79D 2A CD EC D1 _:	ld	hl, (debugCodePtr)
  185 D1:C7A1 C3 5E AC D1 	jp	InsertHL
  186 D1:C7A5 -  -  -  -      
  187 D1:C7A5 -  -  -  -  functionCall:
  188 D1:C7A5 3E CD -  -  	ld	a, 0CDh
  189 D1:C7A7 18 02 -  -  	jr	+_
  190 D1:C7A9 -  -  -  -  functionGoto:
  191 D1:C7A9 3E C3 -  -  	ld	a, 0C3h
  192 D1:C7AB DD 2A BE EC 
              D1 -  -  -  _:	ld	ix, (gotoPtr)
  193 D1:C7B0 2A B5 EC D1 	ld	hl, (programPtr)
  194 D1:C7B4 11 01 00 00 	ld	de, 1
  195 D1:C7B8 FD CB AE 56 	bit	debug_on, (iy+fAlways1)
  196 D1:C7BC 28 02 -  -  	jr	z, +_
  197 D1:C7BE 1E 0B -  -  	ld	e, 4+4+2+1
  198 D1:C7C0 19 -  -  -  _:	add	hl, de
  199 D1:C7C1 DD 2F 00 -  	ld	(ix), hl
  200 D1:C7C4 2A 1A 23 D0 	ld	hl, (curPC)
  201 D1:C7C8 23 -  -  -  	inc	hl
  202 D1:C7C9 DD 2F 03 -  	ld	(ix+3), hl
  203 D1:C7CC ED 22 06 -  	lea	hl, ix+6
  204 D1:C7CF 22 BE EC D1 	ld	(gotoPtr), hl
  205 D1:C7D3 F5 -  -  -  	push	af
  206 D1:C7D4 06 D7 -  -  	ld	b, tGoto
  207 D1:C7D6 CD 22 C7 D1 	call	InsertLblGotoToDebugSection
  208 D1:C7DA F1 -  -  -  	pop	af
  209 D1:C7DB C3 5A AC D1 	jp	InsertAHL                                                       ;   jp/call RANDOM
  210 D1:C7DF -  -  -  -      
  211 D1:C7DF -  -  -  -  functionSkipLine:
  212 D1:C7DF 2A 1D 23 D0 	ld	hl, (endPC)
  213 D1:C7E3 ED 5B 1A 23 
              D0 -  -  -  	ld	de, (curPC)
  214 D1:C7E8 B7 -  -  -  	or	a, a
  215 D1:C7E9 ED 52 -  -  	sbc	hl, de
  216 D1:C7EB D8 -  -  -  	ret	c
  217 D1:C7EC 23 -  -  -  	inc	hl
  218 D1:C7ED E5 -  -  -  	push	hl
  219 D1:C7EE C1 -  -  -  	pop	bc
  220 D1:C7EF EB -  -  -  	ex	de, hl
  221 D1:C7F0 3E 3F -  -  	ld	a, tEnter
  222 D1:C7F2 ED B1 -  -  	cpir
  223 D1:C7F4 2B -  -  -  	dec	hl
  224 D1:C7F5 22 1A 23 D0 	ld	(curPC), hl
  225 D1:C7F9 C9 -  -  -  	ret
  226 D1:C7FA -  -  -  -      
  227 D1:C7FA -  -  -  -  functionReturn:
  228 D1:C7FA CD C0 0F 02 	call	_NxtFetch
  229 D1:C7FE 30 04 -  -  	jr	nc, +_
  230 D1:C800 FD CB C0 D6 	set	last_token_is_ret, (iy+fExpression1)
  231 D1:C804 FE CE -  -  _:	cp	tIf
  232 D1:C806 20 1C -  -  	jr	nz, +_
  233 D1:C808 CD 28 10 02 	call	_IncFetch
  234 D1:C80C CD 28 10 02 	call	_IncFetch
  235 D1:C810 CD 9D B2 D1 	call	ParseExpression
  236 D1:C814 3E 19 -  -  	ld	a, 019h
  237 D1:C816 CD 26 AD D1 	call	InsertA                                                            ;    add hl, de
  238 D1:C81A 3E B7 -  -  	ld	a, 0B7h
  239 D1:C81C 21 ED 52 C0 	ld	hl, 0C052EDh
  240 D1:C820 C3 5A AC D1 	jp	InsertAHL                                                            ;    or a \ sbc hl, de \ ret nz
  241 D1:C824 3E C9 -  -  _:	ld	a, 0C9h
  242 D1:C826 C3 26 AD D1 	jp	InsertA                                                                ;    ret
  243 D1:C82A -  -  -  -          
  244 D1:C82A -  -  -  -  functionRepeat:
  245 D1:C82A 21 D5 EC D1 	ld	hl, amountOfEnds
  246 D1:C82E 34 -  -  -  	inc	(hl)
  247 D1:C82F 2A B5 EC D1 	ld	hl, (programPtr)
  248 D1:C833 11 81 7C FC 	ld	de, UserMem - program
  249 D1:C837 19 -  -  -  	add	hl, de
  250 D1:C838 E5 -  -  -  	push	hl
  251 D1:C839 2A 1A 23 D0 	ld	hl, (curPC)
  252 D1:C83D 23 -  -  -  	inc	hl
  253 D1:C83E E5 -  -  -  	push	hl
  254 D1:C83F CD 28 10 02 _:	call	_IncFetch
  255 D1:C843 DA 4B AF D1 	jp	c, ErrorSyntax
  256 D1:C847 FE 3F -  -  	cp	tEnter
  257 D1:C849 20 F4 -  -  	jr	nz, -_
  258 D1:C84B CD A7 AA D1 	call	ParseProgramUntilEnd
  259 D1:C84F FE D0 -  -  	cp	tElse
  260 D1:C851 CA 4B AF D1 	jp	z, ErrorSyntax
  261 D1:C855 ED 5B 1A 23 
              D0 -  -  -  	ld	de, (curPC)
  262 D1:C85A E1 -  -  -  	pop	hl
  263 D1:C85B 22 1A 23 D0 	ld	(curPC), hl
  264 D1:C85F D5 -  -  -  	push	de
  265 D1:C860 CD 9D B2 D1 	call	ParseExpression
  266 D1:C864 D1 -  -  -  	pop	de
  267 D1:C865 ED 53 1A 23 
              D0 -  -  -  	ld	(curPC), de
  268 D1:C86A FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  269 D1:C86E C2 F4 C8 D1 	jp	nz, functionRepeatInfinite
  270 D1:C872 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  271 D1:C876 28 14 -  -  	jr	z, +_
  272 D1:C878 2A B5 EC D1 	ld	hl, (programPtr)
  273 D1:C87C 2B -  -  -  	dec	hl
  274 D1:C87D 2B -  -  -  	dec	hl
  275 D1:C87E 2B -  -  -  	dec	hl
  276 D1:C87F 7E -  -  -  	ld	a, (hl)
  277 D1:C880 DD 67 -  -  	ld	ixh, a
  278 D1:C882 2B -  -  -  	dec	hl
  279 D1:C883 2B -  -  -  	dec	hl
  280 D1:C884 2B -  -  -  	dec	hl
  281 D1:C885 2B -  -  -  	dec	hl
  282 D1:C886 22 B5 EC D1 	ld	(programPtr), hl
  283 D1:C88A 18 1D -  -  	jr	functionRepeatInsert
  284 D1:C88C FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  285 D1:C890 28 0D -  -  	jr	z, InsertNormalRepeat2
  286 D1:C892 2A B5 EC D1 	ld	hl, (programPtr)
  287 D1:C896 11 F8 FF FF 	ld	de, -8
  288 D1:C89A 19 -  -  -  	add	hl, de
  289 D1:C89B 22 B5 EC D1 	ld	(programPtr), hl
  290 D1:C89F -  -  -  -  InsertNormalRepeat2:
  291 D1:C89F 3E 19 -  -  	ld	a, 019h
  292 D1:C8A1 21 B7 ED 52 	ld	hl, 052EDB7h
  293 D1:C8A5 CD 5A AC D1 	call	InsertAHL                                                        ;    add hl, de \ or a \ sbc hl, de
  294 D1:C8A9 -  -  -  -  functionRepeatInsert:
  295 D1:C8A9 01 81 7C FC 	ld	bc, UserMem - program
  296 D1:C8AD 09 -  -  -  	add	hl, bc
  297 D1:C8AE D1 -  -  -  	pop	de
  298 D1:C8AF B7 -  -  -  	or	a, a
  299 D1:C8B0 ED 52 -  -  	sbc	hl, de
  300 D1:C8B2 7C -  -  -  	ld	a, h
  301 D1:C8B3 B7 -  -  -  	or	a, a
  302 D1:C8B4 20 23 -  -  	jr	nz, functionRepeatLarge
  303 D1:C8B6 7D -  -  -  	ld	a, l
  304 D1:C8B7 2F -  -  -  	cpl
  305 D1:C8B8 3D -  -  -  	dec	a
  306 D1:C8B9 FE 80 -  -  	cp	%10000000
  307 D1:C8BB 38 1C -  -  	jr	c, functionRepeatLarge
  308 D1:C8BD -  -  -  -  functionRepeatSmall:
  309 D1:C8BD 47 -  -  -  	ld	b, a
  310 D1:C8BE 3E 28 -  -  	ld	a, 028h
  311 D1:C8C0 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  312 D1:C8C4 28 02 -  -  	jr	z, +_
  313 D1:C8C6 DD 7C -  -  	ld	a, ixh
  314 D1:C8C8 FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  315 D1:C8CC 28 02 -  -  	jr	z, $+4
  316 D1:C8CE EE 08 -  -  	xor	8
  317 D1:C8D0 CD 26 AD D1 	call	InsertA                                                            ;    jr [n]z, *
  318 D1:C8D4 78 -  -  -  	ld	a, b
  319 D1:C8D5 C3 26 AD D1 	jp	InsertA                                                                ;    jr [n]z, *
  320 D1:C8D9 -  -  -  -  functionRepeatLarge:
  321 D1:C8D9 EB -  -  -  	ex	de, hl
  322 D1:C8DA FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  323 D1:C8DE 28 06 -  -  	jr	z, +_
  324 D1:C8E0 DD 7C -  -  	ld	a, ixh
  325 D1:C8E2 C6 A2 -  -  	add	a, 0A2h
  326 D1:C8E4 18 02 -  -  	jr	++_
  327 D1:C8E6 3E CA -  -  _:	ld	a, 0CAh
  328 D1:C8E8 FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  329 D1:C8EC 28 02 -  -  	jr	z, $+4
  330 D1:C8EE EE 08 -  -  	xor	8
  331 D1:C8F0 C3 5A AC D1 	jp	InsertAHL                                                            ;    jp [n]z, XXXXXX
  332 D1:C8F4 -  -  -  -  functionRepeatInfinite:
  333 D1:C8F4 2A B5 EC D1 	ld	hl, (programPtr)
  334 D1:C8F8 2B -  -  -  	dec	hl
  335 D1:C8F9 2B -  -  -  	dec	hl
  336 D1:C8FA 2B -  -  -  	dec	hl
  337 D1:C8FB 2B -  -  -  	dec	hl
  338 D1:C8FC 22 B5 EC D1 	ld	(programPtr), hl
  339 D1:C900 E5 -  -  -  	push	hl
  340 D1:C901 23 -  -  -  	inc	hl
  341 D1:C902 ED 27 -  -  	ld	hl, (hl)
  342 D1:C904 19 -  -  -  	add	hl, de
  343 D1:C905 B7 -  -  -  	or	a, a
  344 D1:C906 ED 52 -  -  	sbc	hl, de
  345 D1:C908 E1 -  -  -  	pop	hl
  346 D1:C909 C0 -  -  -  	ret	nz
  347 D1:C90A 11 81 7C FC 	ld	de, UserMem - program
  348 D1:C90E 19 -  -  -  	add	hl, de
  349 D1:C90F D1 -  -  -  	pop	de
  350 D1:C910 B7 -  -  -  	or	a, a
  351 D1:C911 ED 52 -  -  	sbc	hl, de
  352 D1:C913 7C -  -  -  	ld	a, h
  353 D1:C914 B7 -  -  -  	or	a, a
  354 D1:C915 20 13 -  -  	jr	nz, functionRepeatInfiniteLarge
  355 D1:C917 7D -  -  -  	ld	a, l
  356 D1:C918 2F -  -  -  	cpl
  357 D1:C919 3D -  -  -  	dec	a
  358 D1:C91A FE 80 -  -  	cp	%10000000
  359 D1:C91C 38 0C -  -  	jr	c, functionRepeatInfiniteLarge
  360 D1:C91E -  -  -  -  functionRepeatInfiniteSmall:
  361 D1:C91E 47 -  -  -  	ld	b, a
  362 D1:C91F 3E 18 -  -  	ld	a, 018h
  363 D1:C921 CD 26 AD D1 	call	InsertA                                                            ;    jr *
  364 D1:C925 78 -  -  -  	ld	a, b
  365 D1:C926 C3 26 AD D1 	jp	InsertA                                                                ;    jr *
  366 D1:C92A -  -  -  -  functionRepeatInfiniteLarge:
  367 D1:C92A EB -  -  -  	ex	de, hl
  368 D1:C92B 3E C3 -  -  	ld	a, 0C3h
  369 D1:C92D C3 5A AC D1 	jp	InsertAHL                                                            ;    jp XXXXXX
  370 D1:C931 -  -  -  -  
  371 D1:C931 -  -  -  -  functionIf:
  372 D1:C931 21 D5 EC D1 	ld	hl, amountOfEnds
  373 D1:C935 34 -  -  -  	inc	(hl)
  374 D1:C936 CD 28 10 02 	call	_IncFetch
  375 D1:C93A CD 9D B2 D1 	call	ParseExpression
  376 D1:C93E FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  377 D1:C942 C2 D3 C9 D1 	jp	nz, functionIfInfinite
  378 D1:C946 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  379 D1:C94A 28 14 -  -  	jr	z, InsertNormalIf
  380 D1:C94C 2A B5 EC D1 	ld	hl, (programPtr)
  381 D1:C950 2B -  -  -  	dec	hl
  382 D1:C951 2B -  -  -  	dec	hl
  383 D1:C952 2B -  -  -  	dec	hl
  384 D1:C953 7E -  -  -  	ld	a, (hl)
  385 D1:C954 C6 A2 -  -  	add	a, 0A2h
  386 D1:C956 2B -  -  -  	dec	hl
  387 D1:C957 2B -  -  -  	dec	hl
  388 D1:C958 2B -  -  -  	dec	hl
  389 D1:C959 2B -  -  -  	dec	hl
  390 D1:C95A 22 B5 EC D1 	ld	(programPtr), hl
  391 D1:C95E 18 27 -  -  	jr	InsertIf
  392 D1:C960 -  -  -  -  InsertNormalIf:
  393 D1:C960 FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  394 D1:C964 28 0D -  -  	jr	z, InsertNormalIf2
  395 D1:C966 2A B5 EC D1 	ld	hl, (programPtr)
  396 D1:C96A 11 F8 FF FF 	ld	de, -8
  397 D1:C96E 19 -  -  -  	add	hl, de
  398 D1:C96F 22 B5 EC D1 	ld	(programPtr), hl
  399 D1:C973 -  -  -  -  InsertNormalIf2:
  400 D1:C973 3E 19 -  -  	ld	a, 019h
  401 D1:C975 21 B7 ED 52 	ld	hl, 052EDB7h
  402 D1:C979 CD 5A AC D1 	call	InsertAHL                                                            ;    add hl, de \ or a \ sbc hl, de
  403 D1:C97D 3E CA -  -  	ld	a, 0CAh
  404 D1:C97F FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  405 D1:C983 28 02 -  -  	jr	z, InsertIf
  406 D1:C985 3E C2 -  -  	ld	a, 0C2h
  407 D1:C987 -  -  -  -  InsertIf:
  408 D1:C987 CD 26 AD D1 	call	InsertA                                                            ;    jp z, ******
  409 D1:C98B 2A B5 EC D1 	ld	hl, (programPtr)
  410 D1:C98F E5 -  -  -  	push	hl
  411 D1:C990 CD 5E AC D1 	call	InsertHL                                                        ;    jp z, XXXXXX
  412 D1:C994 CD A7 AA D1 	call	ParseProgramUntilEnd
  413 D1:C998 FE D0 -  -  	cp	tElse
  414 D1:C99A 20 29 -  -  	jr	nz, +_
  415 D1:C99C 21 D5 EC D1 	ld	hl, amountOfEnds
  416 D1:C9A0 34 -  -  -  	inc	(hl)
  417 D1:C9A1 3E C3 -  -  	ld	a, 0C3h
  418 D1:C9A3 CD 26 AD D1 	call	InsertA                                                        ;    jp ******
  419 D1:C9A7 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  420 D1:C9AC CD 5E AC D1 	call	InsertHL                                                        ;    jp XXXXXX
  421 D1:C9B0 01 81 7C FC 	ld	bc, UserMem - program
  422 D1:C9B4 09 -  -  -  	add	hl, bc
  423 D1:C9B5 E5 -  -  -  	push	hl
  424 D1:C9B6 C1 -  -  -  	pop	bc
  425 D1:C9B7 E1 -  -  -  	pop	hl
  426 D1:C9B8 ED 0F -  -  	ld	(hl), bc
  427 D1:C9BA D5 -  -  -  	push	de
  428 D1:C9BB CD A7 AA D1 	call	ParseProgramUntilEnd
  429 D1:C9BF FE D0 -  -  	cp	tElse
  430 D1:C9C1 CA 4B AF D1 	jp	z, ErrorSyntax
  431 D1:C9C5 2A B5 EC D1 _:	ld	hl, (programPtr)
  432 D1:C9C9 11 81 7C FC 	ld	de, UserMem - program
  433 D1:C9CD 19 -  -  -  	add	hl, de
  434 D1:C9CE EB -  -  -  	ex	de, hl
  435 D1:C9CF E1 -  -  -  	pop	hl
  436 D1:C9D0 ED 1F -  -  	ld	(hl), de
  437 D1:C9D2 C9 -  -  -  	ret
  438 D1:C9D3 -  -  -  -  functionIfInfinite:
  439 D1:C9D3 2A B5 EC D1 	ld	hl, (programPtr)
  440 D1:C9D7 2B -  -  -  	dec	hl
  441 D1:C9D8 2B -  -  -  	dec	hl
  442 D1:C9D9 2B -  -  -  	dec	hl
  443 D1:C9DA 2B -  -  -  	dec	hl
  444 D1:C9DB 22 B5 EC D1 	ld	(programPtr), hl
  445 D1:C9DF 23 -  -  -  	inc	hl
  446 D1:C9E0 ED 27 -  -  	ld	hl, (hl)
  447 D1:C9E2 19 -  -  -  	add	hl, de
  448 D1:C9E3 B7 -  -  -  	or	a, a
  449 D1:C9E4 ED 52 -  -  	sbc	hl, de
  450 D1:C9E6 28 1C -  -  	jr	z, functionIfInfiniteFalse
  451 D1:C9E8 CD A7 AA D1 	call	ParseProgramUntilEnd
  452 D1:C9EC FE D0 -  -  	cp	tElse
  453 D1:C9EE C0 -  -  -  	ret	nz
  454 D1:C9EF 2A B5 EC D1 	ld	hl, (programPtr)
  455 D1:C9F3 E5 -  -  -  	push	hl
  456 D1:C9F4 CD A7 AA D1 	call	ParseProgramUntilEnd
  457 D1:C9F8 FE D0 -  -  	cp	tElse
  458 D1:C9FA CA 4B AF D1 	jp	z, ErrorSyntax
  459 D1:C9FE E1 -  -  -  	pop	hl
  460 D1:C9FF 22 B5 EC D1 	ld	(programPtr), hl
  461 D1:CA03 C9 -  -  -  	ret
  462 D1:CA04 -  -  -  -  functionIfInfiniteFalse:
  463 D1:CA04 2A B5 EC D1 	ld	hl, (programPtr)
  464 D1:CA08 E5 -  -  -  	push	hl
  465 D1:CA09 CD A7 AA D1 	call	ParseProgramUntilEnd
  466 D1:CA0D E1 -  -  -  	pop	hl
  467 D1:CA0E 22 B5 EC D1 	ld	(programPtr), hl
  468 D1:CA12 FE D0 -  -  	cp	tElse
  469 D1:CA14 C0 -  -  -  	ret	nz
  470 D1:CA15 CD A7 AA D1 	call	ParseProgramUntilEnd
  471 D1:CA19 FE D0 -  -  	cp	tElse
  472 D1:CA1B CA 4B AF D1 	jp	z, ErrorSyntax
  473 D1:CA1F C9 -  -  -  	ret
  474 D1:CA20 -  -  -  -      
  475 D1:CA20 -  -  -  -  functionWhile:
  476 D1:CA20 21 D5 EC D1 	ld	hl, amountOfEnds
  477 D1:CA24 34 -  -  -  	inc	(hl)
  478 D1:CA25 CD 28 10 02 	call	_IncFetch
  479 D1:CA29 DA 4B AF D1 	jp	c, ErrorSyntax
  480 D1:CA2D FE 3F -  -  	cp	tEnter
  481 D1:CA2F CA 4B AF D1 	jp	z, ErrorSyntax
  482 D1:CA33 2A B5 EC D1 	ld	hl, (programPtr)
  483 D1:CA37 E5 -  -  -  	push	hl
  484 D1:CA38 CD 9D B2 D1 	call	ParseExpression
  485 D1:CA3C FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  486 D1:CA40 20 6A -  -  	jr	nz, functionWhileInfinite
  487 D1:CA42 FD CB C0 6E 	bit	ans_set_z_flag, (iy+fExpression1)
  488 D1:CA46 28 14 -  -  	jr	z, +_
  489 D1:CA48 2A B5 EC D1 	ld	hl, (programPtr)
  490 D1:CA4C 2B -  -  -  	dec	hl
  491 D1:CA4D 2B -  -  -  	dec	hl
  492 D1:CA4E 2B -  -  -  	dec	hl
  493 D1:CA4F 7E -  -  -  	ld	a, (hl)
  494 D1:CA50 C6 A2 -  -  	add	a, 0A2h
  495 D1:CA52 2B -  -  -  	dec	hl
  496 D1:CA53 2B -  -  -  	dec	hl
  497 D1:CA54 2B -  -  -  	dec	hl
  498 D1:CA55 2B -  -  -  	dec	hl
  499 D1:CA56 22 B5 EC D1 	ld	(programPtr), hl
  500 D1:CA5A 18 1F -  -  	jr	InsertNormalWhile
  501 D1:CA5C FD CB BF 4E _:	bit	last_token_was_not, (iy+fExpression2)
  502 D1:CA60 28 0D -  -  	jr	z, InsertNormalWhile2
  503 D1:CA62 2A B5 EC D1 	ld	hl, (programPtr)
  504 D1:CA66 11 F8 FF FF 	ld	de, -8
  505 D1:CA6A 19 -  -  -  	add	hl, de
  506 D1:CA6B 22 B5 EC D1 	ld	(programPtr), hl
  507 D1:CA6F -  -  -  -  InsertNormalWhile2:
  508 D1:CA6F 3E 19 -  -  	ld	a, 019h
  509 D1:CA71 21 B7 ED 52 	ld	hl, 052EDB7h
  510 D1:CA75 CD 5A AC D1 	call	InsertAHL                                                        ;    add hl, de \ or a \ sbc hl, de
  511 D1:CA79 3E CA -  -  	ld	a, 0CAh
  512 D1:CA7B -  -  -  -  InsertNormalWhile:
  513 D1:CA7B FD CB BF 4E 	bit	last_token_was_not, (iy+fExpression2)
  514 D1:CA7F 28 02 -  -  	jr	z, $+4
  515 D1:CA81 EE 08 -  -  	xor	8
  516 D1:CA83 CD 26 AD D1 	call	InsertA                                                        ;    jp z, ******
  517 D1:CA87 2A B5 EC D1 	ld	hl, (programPtr)
  518 D1:CA8B E5 -  -  -  	push	hl
  519 D1:CA8C CD 5E AC D1 	call	InsertHL                                                    ;    jp z, ******
  520 D1:CA90 CD A7 AA D1 	call	ParseProgramUntilEnd
  521 D1:CA94 FE D0 -  -  	cp	tElse
  522 D1:CA96 CA 4B AF D1 	jp	z, ErrorSyntax
  523 D1:CA9A 3E C3 -  -  	ld	a, 0C3h
  524 D1:CA9C D1 -  -  -  	pop	de
  525 D1:CA9D E1 -  -  -  	pop	hl
  526 D1:CA9E 01 81 7C FC 	ld	bc, UserMem - program
  527 D1:CAA2 09 -  -  -  	add	hl, bc
  528 D1:CAA3 CD 5A AC D1 	call	InsertAHL                                                            ;    jp XXXXXX
  529 D1:CAA7 09 -  -  -  	add	hl, bc
  530 D1:CAA8 EB -  -  -  	ex	de, hl
  531 D1:CAA9 ED 1F -  -  	ld	(hl), de
  532 D1:CAAB C9 -  -  -  	ret
  533 D1:CAAC -  -  -  -  functionWhileInfinite:
  534 D1:CAAC 2A B5 EC D1 	ld	hl, (programPtr)
  535 D1:CAB0 2B -  -  -  	dec	hl
  536 D1:CAB1 2B -  -  -  	dec	hl
  537 D1:CAB2 2B -  -  -  	dec	hl
  538 D1:CAB3 2B -  -  -  	dec	hl
  539 D1:CAB4 22 B5 EC D1 	ld	(programPtr), hl
  540 D1:CAB8 23 -  -  -  	inc	hl
  541 D1:CAB9 ED 27 -  -  	ld	hl, (hl)
  542 D1:CABB 19 -  -  -  	add	hl, de
  543 D1:CABC B7 -  -  -  	or	a, a
  544 D1:CABD ED 52 -  -  	sbc	hl, de
  545 D1:CABF 28 16 -  -  	jr	z, +_
  546 D1:CAC1 CD A7 AA D1 	call	ParseProgramUntilEnd
  547 D1:CAC5 FE D0 -  -  	cp	tElse
  548 D1:CAC7 CA 4B AF D1 	jp	z, ErrorSyntax
  549 D1:CACB 3E C3 -  -  	ld	a, 0C3h
  550 D1:CACD E1 -  -  -  	pop	hl
  551 D1:CACE 01 81 7C FC 	ld	bc, UserMem - program
  552 D1:CAD2 09 -  -  -  	add	hl, bc
  553 D1:CAD3 C3 5A AC D1 	jp	InsertAHL                                                            ;    jp XXXXXX
  554 D1:CAD7 CD A7 AA D1 _:	call	ParseProgramUntilEnd
  555 D1:CADB FE D0 -  -  	cp	tElse
  556 D1:CADD CA 4B AF D1 	jp	z, ErrorSyntax
  557 D1:CAE1 E1 -  -  -  	pop	hl
  558 D1:CAE2 22 B5 EC D1 	ld	(programPtr), hl
  559 D1:CAE6 C9 -  -  -  	ret
  560 D1:CAE7 -  -  -  -      
  561 D1:CAE7 -  -  -  -  functionClrHome:
  562 D1:CAE7 CD C0 0F 02 	call	_NxtFetch
  563 D1:CAEB 38 06 -  -  	jr	c, +_
  564 D1:CAED FE 3F -  -  	cp	tEnter
  565 D1:CAEF C2 4B AF D1 	jp	nz, ErrorSyntax
  566 D1:CAF3 21 28 08 02 _:	ld	hl, _HomeUp
  567 D1:CAF7 CD 7C AC D1 	call	InsertCallHL                                                        ;    call _HomeUp
  568 D1:CAFB 21 08 08 02 	ld	hl, _ClrLCDFull
  569 D1:CAFF C3 5A AC D1 	jp	InsertAHL                                                            ;    call _ClrLCDFull
  570 D1:CB03 -  -  -  -      
  571 D1:CB03 -  -  -  -  functionPause:
  572 D1:CB03 CD 28 10 02 	call	_IncFetch
  573 D1:CB07 38 59 -  -  	jr	c, ++_
  574 D1:CB09 FE 3F -  -  	cp	tEnter
  575 D1:CB0B 28 55 -  -  	jr	z, ++_
  576 D1:CB0D CD 9D B2 D1 	call	ParseExpression
  577 D1:CB11 3A D7 EC D1 	ld	a, (amountOfPause)
  578 D1:CB15 3D -  -  -  	dec	a
  579 D1:CB16 CA 9C CB D1 	jp	z, functionPauseOnce
  580 D1:CB1A FD CB D0 66 	bit	has_already_pause, (iy+fProgram1)
  581 D1:CB1E 20 54 -  -  	jr	nz, AddPause
  582 D1:CB20 3E CD -  -  	ld	a, 0CDh
  583 D1:CB22 CD 26 AD D1 	call	InsertA                                                            ;    call *
  584 D1:CB26 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  585 D1:CB2A 2A CA EC D1 	ld	hl, (programDataDataPtr)
  586 D1:CB2E 22 FE 31 D0 	ld	(PauseStartData), hl
  587 D1:CB32 E5 -  -  -  	push	hl
  588 D1:CB33 D1 -  -  -  	pop	de
  589 D1:CB34 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  590 D1:CB38 28 10 -  -  	jr	z, +_
  591 D1:CB3A E5 -  -  -  	push	hl
  592 D1:CB3B 2A B5 EC D1 	ld	hl, (programPtr)
  593 D1:CB3F 2B -  -  -  	dec	hl
  594 D1:CB40 2B -  -  -  	dec	hl
  595 D1:CB41 2B -  -  -  	dec	hl
  596 D1:CB42 2B -  -  -  	dec	hl
  597 D1:CB43 ED 07 -  -  	ld	bc, (hl)
  598 D1:CB45 0B -  -  -  	dec	bc
  599 D1:CB46 ED 0F -  -  	ld	(hl), bc
  600 D1:CB48 E1 -  -  -  	pop	hl
  601 D1:CB49 23 -  -  -  	inc	hl
  602 D1:CB4A CD 5E AC D1 _:	call	InsertHL                                                            ;    call *
  603 D1:CB4E 21 E7 EF D1 	ld	hl, PauseRoutine
  604 D1:CB52 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  605 D1:CB56 ED B0 -  -  	ldir
  606 D1:CB58 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  607 D1:CB5D FD CB D0 E6 	set	has_already_pause, (iy+fProgram1)
  608 D1:CB61 C9 -  -  -  	ret
  609 D1:CB62 21 4C 01 02 _:	ld	hl, _GetCSC
  610 D1:CB66 CD 7C AC D1 	call	InsertCallHL                                                        ;    call _GetCSC
  611 D1:CB6A 3E FE -  -  	ld	a, 0FEh
  612 D1:CB6C 21 09 20 F8 	ld	hl, 0F82009h
  613 D1:CB70 C3 5A AC D1 	jp	InsertAHL                                                            ;    cp tEnter \ jr nz, $-9
  614 D1:CB74 -  -  -  -  AddPause:
  615 D1:CB74 3E CD -  -  	ld	a, 0CDh
  616 D1:CB76 CD 26 AD D1 	call	InsertA                                                            ;    call ******
  617 D1:CB7A CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  618 D1:CB7E 2A FE 31 D0 	ld	hl, (PauseStartData)
  619 D1:CB82 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  620 D1:CB86 28 10 -  -  	jr	z, +_
  621 D1:CB88 E5 -  -  -  	push	hl
  622 D1:CB89 2A B5 EC D1 	ld	hl, (programPtr)
  623 D1:CB8D 2B -  -  -  	dec	hl
  624 D1:CB8E 2B -  -  -  	dec	hl
  625 D1:CB8F 2B -  -  -  	dec	hl
  626 D1:CB90 2B -  -  -  	dec	hl
  627 D1:CB91 ED 17 -  -  	ld	de, (hl)
  628 D1:CB93 1B -  -  -  	dec	de
  629 D1:CB94 ED 1F -  -  	ld	(hl), de
  630 D1:CB96 E1 -  -  -  	pop	hl
  631 D1:CB97 23 -  -  -  	inc	hl
  632 D1:CB98 C3 5E AC D1 _:	jp	InsertHL                                                                ;    call XXXXXX
  633 D1:CB9C -  -  -  -  functionPauseOnce:
  634 D1:CB9C ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  635 D1:CBA1 21 E7 EF D1 	ld	hl, PauseRoutine
  636 D1:CBA5 01 13 00 00 	ld	bc, PauseRoutineEnd - PauseRoutine
  637 D1:CBA9 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  638 D1:CBAD 28 11 -  -  	jr	z, +_
  639 D1:CBAF DD 2A B5 EC 
              D1 -  -  -  	ld	ix, (programPtr)
  640 D1:CBB4 DD 17 FD -  	ld	de, (ix-3)
  641 D1:CBB7 1B -  -  -  	dec	de
  642 D1:CBB8 DD 1F FD -  	ld	(ix-3), de
  643 D1:CBBB ED 12 00 -  	lea	de, ix
  644 D1:CBBE 23 -  -  -  	inc	hl
  645 D1:CBBF 0B -  -  -  	dec	bc
  646 D1:CBC0 ED B0 -  -  _:	ldir
  647 D1:CBC2 1B -  -  -  	dec	de
  648 D1:CBC3 ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  649 D1:CBC8 C9 -  -  -  	ret
  650 D1:CBC9 -  -  -  -      
  651 D1:CBC9 -  -  -  -  functionInput:
  652 D1:CBC9 CD B2 AC D1 	call	MaybeInsertIYFlags
  653 D1:CBCD CD 28 10 02 	call	_IncFetch
  654 D1:CBD1 FE 41 -  -  	cp	tA
  655 D1:CBD3 DA 4B AF D1 	jp	c, ErrorSyntax
  656 D1:CBD7 FE 5C -  -  	cp	ttheta+1
  657 D1:CBD9 D2 4B AF D1 	jp	nc, ErrorSyntax
  658 D1:CBDD CD C0 0F 02 	call	_NxtFetch
  659 D1:CBE1 38 06 -  -  	jr	c, +_
  660 D1:CBE3 FE 3F -  -  	cp	tEnter
  661 D1:CBE5 C2 4B AF D1 	jp	nz, ErrorSyntax
  662 D1:CBE9 3A D6 EC D1 _:	ld	a, (amountOfInput)
  663 D1:CBED 3D -  -  -  	dec	a
  664 D1:CBEE 28 79 -  -  	jr	z, functionInputOnce
  665 D1:CBF0 3E 3E -  -  	ld	a, 03Eh
  666 D1:CBF2 CD 26 AD D1 	call	InsertA                                                            ;    ld a, **
  667 D1:CBF6 CD 2C 10 02 	call	_CurFetch
  668 D1:CBFA D6 41 -  -  	sub	tA
  669 D1:CBFC 47 -  -  -  	ld	b, a
  670 D1:CBFD 87 -  -  -  	add	a, a
  671 D1:CBFE 80 -  -  -  	add	a, b
  672 D1:CBFF CD 26 AD D1 	call	InsertA                                                            ;    ld a, XX
  673 D1:CC03 3E 32 -  -  	ld	a, 032h
  674 D1:CC05 CD 26 AD D1 	call	InsertA                                                            ;    ld (******), a
  675 D1:CC09 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  676 D1:CC0D FD CB D0 56 	bit	has_already_input, (iy+fProgram1)
  677 D1:CC11 20 39 -  -  	jr	nz, AddPointerToInput
  678 D1:CC13 2A CA EC D1 	ld	hl, (programDataDataPtr)
  679 D1:CC17 22 F8 31 D0 	ld	(InputStartData), hl
  680 D1:CC1B 01 3D 00 00 	ld	bc, InputOffset-InputRoutine
  681 D1:CC1F 09 -  -  -  	add	hl, bc
  682 D1:CC20 CD 5E AC D1 	call	InsertHL                                                            ;    ld (XXXXXX), a
  683 D1:CC24 3E CD -  -  	ld	a, 0CDh
  684 D1:CC26 CD 26 AD D1 	call	InsertA                                                            ;    call ******
  685 D1:CC2A CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  686 D1:CC2E 2A CA EC D1 	ld	hl, (programDataDataPtr)
  687 D1:CC32 E5 -  -  -  	push	hl
  688 D1:CC33 D1 -  -  -  	pop	de
  689 D1:CC34 CD 5E AC D1 	call	InsertHL                                                            ;    call XXXXXX
  690 D1:CC38 21 54 EF D1 _:	ld	hl, InputRoutine
  691 D1:CC3C 01 42 00 00 	ld	bc, InputRoutineEnd-InputRoutine
  692 D1:CC40 ED B0 -  -  	ldir
  693 D1:CC42 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
  694 D1:CC47 FD CB D0 D6 	set	has_already_input, (iy+fProgram1)
  695 D1:CC4B C9 -  -  -  	ret
  696 D1:CC4C -  -  -  -  AddPointerToInput:
  697 D1:CC4C 2A F8 31 D0 	ld	hl, (InputStartData)
  698 D1:CC50 E5 -  -  -  	push	hl
  699 D1:CC51 01 3D 00 00 	ld	bc, InputOffset-InputRoutine
  700 D1:CC55 09 -  -  -  	add	hl, bc
  701 D1:CC56 CD 5E AC D1 	call	InsertHL                                                        ;    ld (XXXXXX), a
  702 D1:CC5A 3E CD -  -  	ld	a, 0CDh
  703 D1:CC5C CD 26 AD D1 	call	InsertA                                                        ;    call ******
  704 D1:CC60 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
  705 D1:CC64 E1 -  -  -  	pop	hl
  706 D1:CC65 C3 5E AC D1 	jp	InsertHL                                                                ;    call XXXXXX
  707 D1:CC69 -  -  -  -  functionInputOnce:
  708 D1:CC69 CD 2C 10 02 	call	_CurFetch
  709 D1:CC6D D6 41 -  -  	sub	tA
  710 D1:CC6F 47 -  -  -  	ld	b, a
  711 D1:CC70 87 -  -  -  	add	a, a
  712 D1:CC71 80 -  -  -  	add	a, b
  713 D1:CC72 32 91 EF D1 	ld	(InputOffset), a
  714 D1:CC76 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  715 D1:CC7B 21 54 EF D1 	ld	hl, InputRoutine
  716 D1:CC7F 01 42 00 00 	ld	bc, InputRoutineEnd - InputRoutine
  717 D1:CC83 ED B0 -  -  	ldir
  718 D1:CC85 D5 -  -  -  	push	de
  719 D1:CC86 DD E1 -  -  	pop	ix
  720 D1:CC88 DD 36 FC CD 	ld	(ix-4), 0CDh
  721 D1:CC8C ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  722 D1:CC91 C9 -  -  -  	ret
  723 D1:CC92 -  -  -  -      
  724 D1:CC92 -  -  -  -  functionNot:
  725 D1:CC92 3E 01 -  -  	ld	a, 1
  726 D1:CC94 32 D3 EC D1 	ld	(amountOfArguments), a
  727 D1:CC98 FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
  728 D1:CC9C E5 -  -  -  	push	hl
  729 D1:CC9D DD E1 -  -  	pop	ix
  730 D1:CC9F DD 7E FC -  	ld	a, (ix-4)
  731 D1:CCA2 B7 -  -  -  	or	a, a
  732 D1:CCA3 28 10 -  -  	jr	z, NotNumber
  733 D1:CCA5 3D -  -  -  	dec	a
  734 D1:CCA6 28 23 -  -  	jr	z, NotVariable
  735 D1:CCA8 3D -  -  -  	dec	a
  736 D1:CCA9 28 36 -  -  	jr	z, NotChainPush
  737 D1:CCAB 3D -  -  -  	dec	a
  738 D1:CCAC 28 37 -  -  	jr	z, NotChainAns
  739 D1:CCAE 3D -  -  -  	dec	a
  740 D1:CCAF 28 48 -  -  	jr	z, NotFunction
  741 D1:CCB1 C3 4B AF D1 	jp	ErrorSyntax
  742 D1:CCB5 -  -  -  -  NotNumber:
  743 D1:CCB5 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  744 D1:CCB9 DD 27 FD -  	ld	hl, (ix-3)
  745 D1:CCBC 19 -  -  -  	add	hl, de
  746 D1:CCBD B7 -  -  -  	or	a, a
  747 D1:CCBE ED 52 -  -  	sbc	hl, de
  748 D1:CCC0 21 00 00 00 	ld	hl, 0
  749 D1:CCC4 20 01 -  -  	jr	nz, +_
  750 D1:CCC6 23 -  -  -  	inc	hl
  751 D1:CCC7 DD 2F FD -  _:	ld	(ix-3), hl
  752 D1:CCCA C9 -  -  -  	ret
  753 D1:CCCB -  -  -  -  NotVariable:
  754 D1:CCCB DD 4E FD -  	ld	c, (ix-3)
  755 D1:CCCE 06 03 -  -  	ld	b, 3
  756 D1:CCD0 ED 4C -  -  	mlt	bc
  757 D1:CCD2 79 -  -  -  	ld	a, c
  758 D1:CCD3 21 DD 27 00 	ld	hl, 00027DDh
  759 D1:CCD7 CD 70 1D 02 	call	_SetHLUToA
  760 D1:CCDB CD 5E AC D1 	call	InsertHL                                                            ;    ld hl, (ix+*)
  761 D1:CCDF 18 04 -  -  	jr	NotChainAns
  762 D1:CCE1 -  -  -  -  NotChainPush:
  763 D1:CCE1 C3 85 AF D1 	jp	UnknownError
  764 D1:CCE5 -  -  -  -  NotChainAns:
  765 D1:CCE5 3E 11 -  -  	ld	a, 011h
  766 D1:CCE7 CD 26 AD D1 	call	InsertA                                                            ;    ld de, *
  767 D1:CCEB 3E FF -  -  	ld	a, 0FFh
  768 D1:CCED 11 FF FF 19 	ld	de, 019FFFFh
  769 D1:CCF1 21 ED 62 23 	ld	hl, 02362EDh
  770 D1:CCF5 C3 A6 AC D1 	jp	InsertADEHL                                                            ;    ld de, -1 \ add hl, de \ sbc hl, hl \ inc hl
  771 D1:CCF9 -  -  -  -  NotFunction:
  772 D1:CCF9 DD 7E FD -  	ld	a, (ix-3)
  773 D1:CCFC 06 02 -  -  	ld	b, OutputInHL
  774 D1:CCFE CD 52 AD D1 	call	GetFunction
  775 D1:CD02 18 E1 -  -  	jr	NotChainAns
  776 D1:CD04 -  -  -  -      
  777 D1:CD04 -  -  -  -  functionCE:
  778 D1:CD04 23 -  -  -  	inc	hl
  779 D1:CD05 23 -  -  -  	inc	hl
  780 D1:CD06 7E -  -  -  	ld	a, (hl)
  781 D1:CD07 FE 32 -  -  	cp	tRemainder
  782 D1:CD09 C2 4B AF D1 	jp	nz, ErrorSyntax
  783 D1:CD0D 11 F6 FF FF 	ld	de, -10
  784 D1:CD11 19 -  -  -  	add	hl, de
  785 D1:CD12 -  -  -  -          
  786 D1:CD12 -  -  -  -  functionRemainder:
  787 D1:CD12 3E 02 -  -  	ld	a, 2
  788 D1:CD14 32 D3 EC D1 	ld	(amountOfArguments), a
  789 D1:CD18 7E -  -  -  	ld	a, (hl)
  790 D1:CD19 DD 67 -  -  	ld	ixh, a
  791 D1:CD1B 23 -  -  -  	inc	hl
  792 D1:CD1C E5 -  -  -  	push	hl
  793 D1:CD1D ED 07 -  -  	ld	bc, (hl)
  794 D1:CD1F 23 -  -  -  	inc	hl
  795 D1:CD20 23 -  -  -  	inc	hl
  796 D1:CD21 23 -  -  -  	inc	hl
  797 D1:CD22 7E -  -  -  	ld	a, (hl)
  798 D1:CD23 DD 6F -  -  	ld	ixl, a
  799 D1:CD25 23 -  -  -  	inc	hl
  800 D1:CD26 ED 17 -  -  	ld	de, (hl)
  801 D1:CD28 E1 -  -  -  	pop	hl
  802 D1:CD29 DD 7C -  -  	ld	a, ixh
  803 D1:CD2B B7 -  -  -  	or	a, a
  804 D1:CD2C 28 18 -  -  	jr	z, RemainderNumberXXX
  805 D1:CD2E 3D -  -  -  	dec	a
  806 D1:CD2F CA A6 CD D1 	jp	z, RemainderVariableXXX
  807 D1:CD33 3D -  -  -  	dec	a
  808 D1:CD34 CA EC CD D1 	jp	z, RemainderChainPushXXX
  809 D1:CD38 3D -  -  -  	dec	a
  810 D1:CD39 CA FE CD D1 	jp	z, RemainderChainAnsXXX
  811 D1:CD3D 3D -  -  -  	dec	a
  812 D1:CD3E CA 3D CE D1 	jp	z, RemainderFunctionXXX
  813 D1:CD42 C3 4B AF D1 	jp	ErrorSyntax
  814 D1:CD46 -  -  -  -  RemainderNumberXXX:
  815 D1:CD46 DD 7D -  -  	ld	a, ixl
  816 D1:CD48 B7 -  -  -  	or	a, a
  817 D1:CD49 28 10 -  -  	jr	z, RemainderNumberNumber
  818 D1:CD4B 3D -  -  -  	dec	a
  819 D1:CD4C 28 1F -  -  	jr	z, RemainderNumberVariable
  820 D1:CD4E 3D -  -  -  	dec	a
  821 D1:CD4F 28 28 -  -  	jr	z, RemainderNumberChainPush
  822 D1:CD51 3D -  -  -  	dec	a
  823 D1:CD52 28 29 -  -  	jr	z, RemainderNumberChainAns
  824 D1:CD54 3D -  -  -  	dec	a
  825 D1:CD55 28 38 -  -  	jr	z, RemainderNumberFunction
  826 D1:CD57 C3 4B AF D1 	jp	ErrorSyntax
  827 D1:CD5B -  -  -  -  RemainderNumberNumber:
  828 D1:CD5B FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  829 D1:CD5F E5 -  -  -  	push	hl
  830 D1:CD60 C5 -  -  -  	push	bc
  831 D1:CD61 E1 -  -  -  	pop	hl
  832 D1:CD62 D5 -  -  -  	push	de
  833 D1:CD63 C1 -  -  -  	pop	bc
  834 D1:CD64 CD 44 01 00 	call	__idvrmu
  835 D1:CD68 EB -  -  -  	ex	de, hl
  836 D1:CD69 E1 -  -  -  	pop	hl
  837 D1:CD6A ED 1F -  -  	ld	(hl), de
  838 D1:CD6C C9 -  -  -  	ret
  839 D1:CD6D -  -  -  -  RemainderNumberVariable:
  840 D1:CD6D 3E 21 -  -  	ld	a, 021h
  841 D1:CD6F C5 -  -  -  	push	bc
  842 D1:CD70 E1 -  -  -  	pop	hl
  843 D1:CD71 CD 5A AC D1 	call	InsertAHL                                                            ;    ld hl, *
  844 D1:CD75 C3 22 CE D1 	jp	RemainderChainAnsVariable
  845 D1:CD79 -  -  -  -  RemainderNumberChainPush:
  846 D1:CD79 C3 85 AF D1 	jp	UnknownError
  847 D1:CD7D -  -  -  -  RemainderNumberChainAns:
  848 D1:CD7D 11 E5 C1 21 	ld	de, 021C1E5h
  849 D1:CD81 C5 -  -  -  	push	bc
  850 D1:CD82 E1 -  -  -  	pop	hl
  851 D1:CD83 CD AA AC D1 	call	InsertDEHL                                                            ;    push hl \ pop bc \ ld hl, *
  852 D1:CD87 21 44 01 00 	ld	hl, __idvrmu
  853 D1:CD8B C3 7C AC D1 	jp	InsertCallHL                                                            ;    call __idvrmu
  854 D1:CD8F -  -  -  -  RemainderNumberFunction:
  855 D1:CD8F 7B -  -  -  	ld	a, e
  856 D1:CD90 C5 -  -  -  	push	bc
  857 D1:CD91 06 00 -  -  	ld	b, OutputInBC
  858 D1:CD93 CD 52 AD D1 	call	GetFunction
  859 D1:CD97 E1 -  -  -  	pop	hl
  860 D1:CD98 3E 21 -  -  	ld	a, 021h
  861 D1:CD9A CD 5A AC D1 	call	InsertAHL                                                            ;    ld hl, *
  862 D1:CD9E 21 44 01 00 	ld	hl, __idvrmu
  863 D1:CDA2 C3 7C AC D1 	jp	InsertCallHL                                                            ;    call __idvrmu
  864 D1:CDA6 -  -  -  -  RemainderVariableXXX:
  865 D1:CDA6 DD 7D -  -  	ld	a, ixl
  866 D1:CDA8 B7 -  -  -  	or	a, a
  867 D1:CDA9 28 10 -  -  	jr	z, RemainderVariableNumber
  868 D1:CDAB 3D -  -  -  	dec	a
  869 D1:CDAC 28 13 -  -  	jr	z, RemainderVariableVariable
  870 D1:CDAE 3D -  -  -  	dec	a
  871 D1:CDAF 28 16 -  -  	jr	z, RemainderVariableChainPush
  872 D1:CDB1 3D -  -  -  	dec	a
  873 D1:CDB2 28 17 -  -  	jr	z, RemainderVariableChainAns
  874 D1:CDB4 3D -  -  -  	dec	a
  875 D1:CDB5 28 2C -  -  	jr	z, RemainderVariableFunction
  876 D1:CDB7 C3 4B AF D1 	jp	ErrorSyntax
  877 D1:CDBB -  -  -  -  RemainderVariableNumber:
  878 D1:CDBB CD 80 AC D1 	call	InsertHIXC                                                            ;    ld hl, (ix+*)
  879 D1:CDBF 18 52 -  -  	jr	RemainderChainAnsNumber
  880 D1:CDC1 -  -  -  -  RemainderVariableVariable
  881 D1:CDC1 CD 80 AC D1 	call	InsertHIXC                                                            ;    ld hl, (ix+*)
  882 D1:CDC5 18 5B -  -  	jr	RemainderChainAnsVariable
  883 D1:CDC7 -  -  -  -  RemainderVariableChainPush:
  884 D1:CDC7 C3 85 AF D1 	jp	UnknownError
  885 D1:CDCB -  -  -  -  RemainderVariableChainAns:
  886 D1:CDCB 3E E5 -  -  	ld	a, 0E5h
  887 D1:CDCD CD 26 AD D1 	call	InsertA                                                            ;    push hl
  888 D1:CDD1 3E C1 -  -  	ld	a, 0C1h
  889 D1:CDD3 CD 26 AD D1 	call	InsertA                                                            ;    pop bc
  890 D1:CDD7 CD 80 AC D1 _:	call	InsertHIXC                                                            ;    ld hl, (ix+*)
  891 D1:CDDB 21 44 01 00 	ld	hl, __idvrmu
  892 D1:CDDF C3 7C AC D1 	jp	InsertCallHL                                                            ;    call __idvrmu
  893 D1:CDE3 -  -  -  -  RemainderVariableFunction:
  894 D1:CDE3 7B -  -  -  	ld	a, e
  895 D1:CDE4 06 00 -  -  	ld	b, OutputInBC
  896 D1:CDE6 CD 52 AD D1 	call	GetFunction
  897 D1:CDEA 18 EB -  -  	jr	-_
  898 D1:CDEC -  -  -  -  RemainderChainPushXXX:
  899 D1:CDEC DD 7D -  -  	ld	a, ixl
  900 D1:CDEE FE 03 -  -  	cp	typeChainAns
  901 D1:CDF0 C2 85 AF D1 	jp	nz, UnknownError
  902 D1:CDF4 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  903 D1:CDF8 CD 5A AC D1 	call	InsertAHL                                                            ;    push hl \ pop bc \ pop hl
  904 D1:CDFC 18 1C -  -  	jr	+_
  905 D1:CDFE -  -  -  -  RemainderChainAnsXXX:
  906 D1:CDFE DD 7D -  -  	ld	a, ixl
  907 D1:CE00 B7 -  -  -  	or	a, a
  908 D1:CE01 28 10 -  -  	jr	z, RemainderChainAnsNumber
  909 D1:CE03 3D -  -  -  	dec	a
  910 D1:CE04 28 1C -  -  	jr	z, RemainderChainAnsVariable
  911 D1:CE06 3D -  -  -  	dec	a
  912 D1:CE07 28 1F -  -  	jr	z, RemainderChainAnsChainPush
  913 D1:CE09 3D -  -  -  	dec	a
  914 D1:CE0A 28 20 -  -  	jr	z, RemainderChainAnsChainAns
  915 D1:CE0C 3D -  -  -  	dec	a
  916 D1:CE0D 28 21 -  -  	jr	z, RemainderChainAnsFunction
  917 D1:CE0F C3 4B AF D1 	jp	ErrorSyntax
  918 D1:CE13 -  -  -  -  RemainderChainAnsNumber:
  919 D1:CE13 EB -  -  -  	ex	de, hl
  920 D1:CE14 3E 01 -  -  	ld	a, 001h
  921 D1:CE16 CD 5A AC D1 	call	InsertAHL                                                            ;    ld bc, *
  922 D1:CE1A 21 44 01 00 _:	ld	hl, __idvrmu
  923 D1:CE1E C3 7C AC D1 	jp	InsertCallHL                                                            ;    call __idvrmu
  924 D1:CE22 -  -  -  -  RemainderChainAnsVariable:
  925 D1:CE22 CD 98 AC D1 	call	InsertIXC                                                            ;    ld bc, (ix+*)
  926 D1:CE26 18 F2 -  -  	jr	-_
  927 D1:CE28 -  -  -  -  RemainderChainAnsChainPush:
  928 D1:CE28 C3 85 AF D1 	jp	UnknownError
  929 D1:CE2C -  -  -  -  RemainderChainAnsChainAns:
  930 D1:CE2C C3 85 AF D1 	jp	UnknownError
  931 D1:CE30 -  -  -  -  RemainderChainAnsFunction:
  932 D1:CE30 7B -  -  -  	ld	a, e
  933 D1:CE31 06 00 -  -  	ld	b, OutputInBC
  934 D1:CE33 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  935 D1:CE37 CD 52 AD D1 	call	GetFunction
  936 D1:CE3B 18 DD -  -  	jr	-_
  937 D1:CE3D -  -  -  -  RemainderFunctionXXX:
  938 D1:CE3D DD 7D -  -  	ld	a, ixl
  939 D1:CE3F B7 -  -  -  	or	a, a
  940 D1:CE40 28 10 -  -  	jr	z, RemainderFunctionNumber
  941 D1:CE42 3D -  -  -  	dec	a
  942 D1:CE43 28 16 -  -  	jr	z, RemainderFunctionVariable
  943 D1:CE45 3D -  -  -  	dec	a
  944 D1:CE46 28 1C -  -  	jr	z, RemainderFunctionChainPush
  945 D1:CE48 3D -  -  -  	dec	a
  946 D1:CE49 28 1D -  -  	jr	z, RemainderFunctionChainAns
  947 D1:CE4B 3D -  -  -  	dec	a
  948 D1:CE4C 28 2F -  -  	jr	z, RemainderFunctionFunction
  949 D1:CE4E C3 4B AF D1 	jp	ErrorSyntax
  950 D1:CE52 -  -  -  -  RemainderFunctionNumber:
  951 D1:CE52 79 -  -  -  	ld	a, c
  952 D1:CE53 06 02 -  -  	ld	b, OutputInHL
  953 D1:CE55 CD 52 AD D1 	call	GetFunction
  954 D1:CE59 18 B8 -  -  	jr	RemainderChainAnsNumber
  955 D1:CE5B -  -  -  -  RemainderFunctionVariable:
  956 D1:CE5B 79 -  -  -  	ld	a, c
  957 D1:CE5C 06 02 -  -  	ld	b, OutputInHL
  958 D1:CE5E CD 52 AD D1 	call	GetFunction
  959 D1:CE62 18 BE -  -  	jr	RemainderChainAnsVariable
  960 D1:CE64 -  -  -  -  RemainderFunctionChainPush:
  961 D1:CE64 C3 85 AF D1 	jp	UnknownError
  962 D1:CE68 -  -  -  -  RemainderFunctionChainAns:
  963 D1:CE68 3E E5 -  -  	ld	a, 0E5h
  964 D1:CE6A CD 26 AD D1 	call	InsertA                                                        ;    push hl
  965 D1:CE6E 3E C1 -  -  	ld	a, 0C1h
  966 D1:CE70 CD 26 AD D1 	call	InsertA                                                        ;    pop bc
  967 D1:CE74 79 -  -  -  	ld	a, c
  968 D1:CE75 06 02 -  -  	ld	b, OutputInHL
  969 D1:CE77 CD 52 AD D1 	call	GetFunction
  970 D1:CE7B 18 9D -  -  	jr	-_
  971 D1:CE7D -  -  -  -  RemainderFunctionFunction:
  972 D1:CE7D 7B -  -  -  	ld	a, e
  973 D1:CE7E 06 00 -  -  	ld	b, OutputInBC
  974 D1:CE80 CD 52 AD D1 	call	GetFunction
  975 D1:CE84 79 -  -  -  	ld	a, c
  976 D1:CE85 06 02 -  -  	ld	b, OutputInHL
  977 D1:CE87 CD 52 AD D1 	call	GetFunction
  978 D1:CE8B 18 8D -  -  	jr	-_
  979 D1:CE8D -  -  -  -      
  980 D1:CE8D -  -  -  -  functionMean:
  981 D1:CE8D FD CB BF C6 	set	use_mean_routine, (iy+fExpression2)
  982 D1:CE91 -  -  -  -  functionMax:
  983 D1:CE91 3E 30 -  -  	ld	a, 030h
  984 D1:CE93 18 02 -  -  	jr	+_
  985 D1:CE95 -  -  -  -  functionMin:
  986 D1:CE95 3E 38 -  -  	ld	a, 038h
  987 D1:CE97 32 D4 CF D1 _:	ld	(MaxMinMeanInsertSMC), a
  988 D1:CE9B 3E 02 -  -  	ld	a, 2
  989 D1:CE9D 32 D3 EC D1 	ld	(amountOfArguments), a
  990 D1:CEA1 2B -  -  -  	dec	hl
  991 D1:CEA2 2B -  -  -  	dec	hl
  992 D1:CEA3 2B -  -  -  	dec	hl
  993 D1:CEA4 ED 17 -  -  	ld	de, (hl)
  994 D1:CEA6 2B -  -  -  	dec	hl
  995 D1:CEA7 7E -  -  -  	ld	a, (hl)
  996 D1:CEA8 DD 6F -  -  	ld	ixl, a
  997 D1:CEAA 2B -  -  -  	dec	hl
  998 D1:CEAB 2B -  -  -  	dec	hl
  999 D1:CEAC 2B -  -  -  	dec	hl
 1000 D1:CEAD ED 07 -  -  	ld	bc, (hl)
 1001 D1:CEAF 2B -  -  -  	dec	hl
 1002 D1:CEB0 7E -  -  -  	ld	a, (hl)
 1003 D1:CEB1 23 -  -  -  	inc	hl
 1004 D1:CEB2 B7 -  -  -  	or	a, a
 1005 D1:CEB3 28 18 -  -  	jr	z, MaxMinMeanNumberXXX
 1006 D1:CEB5 3D -  -  -  	dec	a
 1007 D1:CEB6 CA 3C CF D1 	jp	z, MaxMinMeanVariableXXX
 1008 D1:CEBA 3D -  -  -  	dec	a
 1009 D1:CEBB CA 85 CF D1 	jp	z, MaxMinMeanChainPushXXX
 1010 D1:CEBF 3D -  -  -  	dec	a
 1011 D1:CEC0 CA A9 CF D1 	jp	z, MaxMinMeanChainAnsXXX
 1012 D1:CEC4 3D -  -  -  	dec	a
 1013 D1:CEC5 CA F6 CF D1 	jp	z, MaxMinMeanFunctionXXX
 1014 D1:CEC9 C3 4B AF D1 	jp	ErrorSyntax
 1015 D1:CECD -  -  -  -  MaxMinMeanNumberXXX:
 1016 D1:CECD DD 7D -  -  	ld	a, ixl
 1017 D1:CECF B7 -  -  -  	or	a, a
 1018 D1:CED0 28 10 -  -  	jr	z, MaxMinMeanNumberNumber
 1019 D1:CED2 3D -  -  -  	dec	a
 1020 D1:CED3 28 4B -  -  	jr	z, MaxMinMeanNumberVariable
 1021 D1:CED5 3D -  -  -  	dec	a
 1022 D1:CED6 28 4F -  -  	jr	z, MaxMinMeanNumberChainPush
 1023 D1:CED8 3D -  -  -  	dec	a
 1024 D1:CED9 28 50 -  -  	jr	z, MaxMinMeanNumberChainAns
 1025 D1:CEDB 3D -  -  -  	dec	a
 1026 D1:CEDC 28 51 -  -  	jr	z, MaxMinMeanNumberFunction
 1027 D1:CEDE C3 4B AF D1 	jp	ErrorSyntax
 1028 D1:CEE2 -  -  -  -  MaxMinMeanNumberNumber:
 1029 D1:CEE2 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1030 D1:CEE6 E5 -  -  -  	push	hl
 1031 D1:CEE7 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1032 D1:CEEB 20 1C -  -  	jr	nz, ++_
 1033 D1:CEED 3A D4 CF D1 	ld	a, (MaxMinMeanInsertSMC)
 1034 D1:CEF1 C5 -  -  -  	push	bc
 1035 D1:CEF2 E1 -  -  -  	pop	hl
 1036 D1:CEF3 FE 30 -  -  	cp	030h
 1037 D1:CEF5 28 09 -  -  	jr	z, +_
 1038 D1:CEF7 B7 -  -  -  	or	a, a
 1039 D1:CEF8 ED 52 -  -  	sbc	hl, de
 1040 D1:CEFA 19 -  -  -  	add	hl, de
 1041 D1:CEFB 30 01 -  -  	jr	nc, $+3
 1042 D1:CEFD EB -  -  -  	ex	de, hl
 1043 D1:CEFE 18 1C -  -  	jr	+++_
 1044 D1:CF00 B7 -  -  -  _:	or	a, a
 1045 D1:CF01 ED 52 -  -  	sbc	hl, de
 1046 D1:CF03 19 -  -  -  	add	hl, de
 1047 D1:CF04 38 01 -  -  	jr	c, $+3
 1048 D1:CF06 EB -  -  -  	ex	de, hl
 1049 D1:CF07 18 13 -  -  	jr	++_
 1050 D1:CF09 EB -  -  -  _:	ex	de, hl
 1051 D1:CF0A DD 21 00 00 
              00 -  -  -  	ld	ix, 0
 1052 D1:CF0F DD 39 -  -  	add	ix, sp
 1053 D1:CF11 09 -  -  -  	add	hl, bc
 1054 D1:CF12 E5 -  -  -  	push	hl
 1055 D1:CF13 DD CB FF 1E 	rr	(ix-1)
 1056 D1:CF17 D1 -  -  -  	pop	de
 1057 D1:CF18 CB 1A -  -  	rr	d
 1058 D1:CF1A CB 1B -  -  	rr	e
 1059 D1:CF1C E1 -  -  -  _:	pop	hl
 1060 D1:CF1D ED 1F -  -  	ld	(hl), de
 1061 D1:CF1F C9 -  -  -  	ret
 1062 D1:CF20 -  -  -  -  MaxMinMeanNumberVariable:
 1063 D1:CF20 C5 -  -  -  	push	bc
 1064 D1:CF21 E1 -  -  -  	pop	hl
 1065 D1:CF22 EB -  -  -  	ex	de, hl
 1066 D1:CF23 E5 -  -  -  	push	hl
 1067 D1:CF24 C1 -  -  -  	pop	bc
 1068 D1:CF25 18 2A -  -  	jr	MaxMinMeanVariableNumber
 1069 D1:CF27 -  -  -  -  MaxMinMeanNumberChainPush:
 1070 D1:CF27 C3 85 AF D1 	jp	UnknownError
 1071 D1:CF2B -  -  -  -  MaxMinMeanNumberChainAns:
 1072 D1:CF2B C5 -  -  -  	push	bc
 1073 D1:CF2C D1 -  -  -  	pop	de
 1074 D1:CF2D 18 09 -  -  	jr	+_
 1075 D1:CF2F -  -  -  -  MaxMinMeanNumberFunction:
 1076 D1:CF2F 7B -  -  -  	ld	a, e
 1077 D1:CF30 C5 -  -  -  	push	bc
 1078 D1:CF31 06 02 -  -  	ld	b, OutputInHL
 1079 D1:CF33 CD 52 AD D1 	call	GetFunction
 1080 D1:CF37 D1 -  -  -  	pop	de
 1081 D1:CF38 C3 BE CF D1 _:	jp	MaxMinMeanChainAnsNumber
 1082 D1:CF3C -  -  -  -  MaxMinMeanVariableXXX:
 1083 D1:CF3C DD 7D -  -  	ld	a, ixl
 1084 D1:CF3E B7 -  -  -  	or	a, a
 1085 D1:CF3F 28 10 -  -  	jr	z, MaxMinMeanVariableNumber
 1086 D1:CF41 3D -  -  -  	dec	a
 1087 D1:CF42 28 13 -  -  	jr	z, MaxMinMeanVariableVariable
 1088 D1:CF44 3D -  -  -  	dec	a
 1089 D1:CF45 28 18 -  -  	jr	z, MaxMinMeanVariableChainPush
 1090 D1:CF47 3D -  -  -  	dec	a
 1091 D1:CF48 28 2B -  -  	jr	z, MaxMinMeanVariableChainAns
 1092 D1:CF4A 3D -  -  -  	dec	a
 1093 D1:CF4B 28 2F -  -  	jr	z, MaxMinMeanVariableFunction
 1094 D1:CF4D C3 4B AF D1 	jp	ErrorSyntax
 1095 D1:CF51 -  -  -  -  MaxMinMeanVariableNumber:
 1096 D1:CF51 CD 80 AC D1 	call	InsertHIXC                                                            ;    ld hl, (ix+*)
 1097 D1:CF55 18 67 -  -  	jr	MaxMinMeanChainAnsNumber
 1098 D1:CF57 -  -  -  -  MaxMinMeanVariableVariable
 1099 D1:CF57 CD 80 AC D1 	call	InsertHIXC                                                            ;    ld hl, (ix+*)
 1100 D1:CF5B C3 DB CF D1 	jp	MaxMinMeanChainAnsVariable
 1101 D1:CF5F -  -  -  -  MaxMinMeanVariableChainPush:
 1102 D1:CF5F 2A B5 EC D1 	ld	hl, (programPtr)
 1103 D1:CF63 2B -  -  -  	dec	hl
 1104 D1:CF64 7E -  -  -  	ld	a, (hl)
 1105 D1:CF65 FE E5 -  -  	cp	0E5h
 1106 D1:CF67 28 03 -  -  	jr	z, +_
 1107 D1:CF69 36 E1 -  -  	ld	(hl), 0E1h
 1108 D1:CF6B 23 -  -  -  	inc	hl
 1109 D1:CF6C 22 B5 EC D1 _:	ld	(programPtr), hl
 1110 D1:CF70 59 -  -  -  	ld	e, c
 1111 D1:CF71 C3 DB CF D1 	jp	MaxMinMeanChainAnsVariable
 1112 D1:CF75 -  -  -  -  MaxMinMeanVariableChainAns:
 1113 D1:CF75 59 -  -  -  _:	ld	e, c
 1114 D1:CF76 CD 89 AC D1 	call	InsertIXE                                                            ;    ld de, (ix+*)
 1115 D1:CF7A 18 49 -  -  	jr	MaxMinMeanInsert
 1116 D1:CF7C -  -  -  -  MaxMinMeanVariableFunction:
 1117 D1:CF7C 7B -  -  -  	ld	a, e
 1118 D1:CF7D 06 02 -  -  	ld	b, OutputInHL
 1119 D1:CF7F CD 52 AD D1 	call	GetFunction
 1120 D1:CF83 18 F0 -  -  	jr	-_
 1121 D1:CF85 -  -  -  -  MaxMinMeanChainPushXXX:
 1122 D1:CF85 DD 7D -  -  	ld	a, ixl
 1123 D1:CF87 FE 03 -  -  	cp	typeChainAns
 1124 D1:CF89 C2 85 AF D1 	jp	nz, UnknownError
 1125 D1:CF8D FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1126 D1:CF91 20 0E -  -  	jr	nz, +_
 1127 D1:CF93 3E EB -  -  	ld	a, 0EBh
 1128 D1:CF95 CD 26 AD D1 	call	InsertA                                                            ;    ex de, hl
 1129 D1:CF99 3E E1 -  -  	ld	a, 0E1h
 1130 D1:CF9B CD 26 AD D1 	call	InsertA                                                            ;    pop hl
 1131 D1:CF9F 18 24 -  -  	jr	MaxMinMeanInsert
 1132 D1:CFA1 3E D1 -  -  _:	ld	a, 0D1h
 1133 D1:CFA3 CD 26 AD D1 	call	InsertA                                                            ;    pop de
 1134 D1:CFA7 18 1C -  -  	jr	MaxMinMeanInsert
 1135 D1:CFA9 -  -  -  -  MaxMinMeanChainAnsXXX:
 1136 D1:CFA9 DD 7D -  -  	ld	a, ixl
 1137 D1:CFAB B7 -  -  -  	or	a, a
 1138 D1:CFAC 28 10 -  -  	jr	z, MaxMinMeanChainAnsNumber
 1139 D1:CFAE 3D -  -  -  	dec	a
 1140 D1:CFAF 28 2A -  -  	jr	z, MaxMinMeanChainAnsVariable
 1141 D1:CFB1 3D -  -  -  	dec	a
 1142 D1:CFB2 28 2D -  -  	jr	z, MaxMinMeanChainAnsChainPush
 1143 D1:CFB4 3D -  -  -  	dec	a
 1144 D1:CFB5 28 2E -  -  	jr	z, MaxMinMeanChainAnsChainAns
 1145 D1:CFB7 3D -  -  -  	dec	a
 1146 D1:CFB8 28 2F -  -  	jr	z, MaxMinMeanChainAnsFunction
 1147 D1:CFBA C3 4B AF D1 	jp	ErrorSyntax
 1148 D1:CFBE -  -  -  -  MaxMinMeanChainAnsNumber:
 1149 D1:CFBE EB -  -  -  	ex	de, hl
 1150 D1:CFBF 3E 11 -  -  	ld	a, 011h
 1151 D1:CFC1 CD 5A AC D1 	call	InsertAHL                                                            ;    ld de, *
 1152 D1:CFC5 -  -  -  -  MaxMinMeanInsert:
 1153 D1:CFC5 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1154 D1:CFC9 C2 55 D0 D1 	jp	nz, MeanInsert
 1155 D1:CFCD 3E B7 -  -  	ld	a, 0B7h
 1156 D1:CFCF 11 ED 52 19 	ld	de, 01952EDh
 1157 D1:CFD3 -  -  -  -  MaxMinMeanInsertSMC = $+1
 1158 D1:CFD3 21 30 01 EB 	ld	hl, 0EB0130h
 1159 D1:CFD7 C3 A6 AC D1 	jp	InsertADEHL                                                            ;    or a \ sbc hl, de \ add hl, de \ jr [n]c, $+3 \ add hl, de
 1160 D1:CFDB -  -  -  -  MaxMinMeanChainAnsVariable:
 1161 D1:CFDB CD 89 AC D1 	call	InsertIXE                                                            ;    ld de, (ix+*)
 1162 D1:CFDF 18 E4 -  -  	jr	MaxMinMeanInsert
 1163 D1:CFE1 -  -  -  -  MaxMinMeanChainAnsChainPush:
 1164 D1:CFE1 C3 85 AF D1 	jp	UnknownError
 1165 D1:CFE5 -  -  -  -  MaxMinMeanChainAnsChainAns:
 1166 D1:CFE5 C3 85 AF D1 	jp	UnknownError
 1167 D1:CFE9 -  -  -  -  MaxMinMeanChainAnsFunction:
 1168 D1:CFE9 7B -  -  -  	ld	a, e
 1169 D1:CFEA 06 01 -  -  	ld	b, OutputInDE
 1170 D1:CFEC FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1171 D1:CFF0 CD 52 AD D1 	call	GetFunction
 1172 D1:CFF4 18 CF -  -  _:	jr	MaxMinMeanInsert
 1173 D1:CFF6 -  -  -  -  MaxMinMeanFunctionXXX:
 1174 D1:CFF6 DD 7D -  -  	ld	a, ixl
 1175 D1:CFF8 B7 -  -  -  	or	a, a
 1176 D1:CFF9 28 10 -  -  	jr	z, MaxMinMeanFunctionNumber
 1177 D1:CFFB 3D -  -  -  	dec	a
 1178 D1:CFFC 28 16 -  -  	jr	z, MaxMinMeanFunctionVariable
 1179 D1:CFFE 3D -  -  -  	dec	a
 1180 D1:CFFF 28 1C -  -  	jr	z, MaxMinMeanFunctionChainPush
 1181 D1:D001 3D -  -  -  	dec	a
 1182 D1:D002 28 1D -  -  	jr	z, MaxMinMeanFunctionChainAns
 1183 D1:D004 3D -  -  -  	dec	a
 1184 D1:D005 28 38 -  -  	jr	z, MaxMinMeanFunctionFunction
 1185 D1:D007 C3 4B AF D1 	jp	ErrorSyntax
 1186 D1:D00B -  -  -  -  MaxMinMeanFunctionNumber:
 1187 D1:D00B 79 -  -  -  	ld	a, c
 1188 D1:D00C 06 02 -  -  	ld	b, OutputInHL
 1189 D1:D00E CD 52 AD D1 	call	GetFunction
 1190 D1:D012 18 AA -  -  	jr	MaxMinMeanChainAnsNumber
 1191 D1:D014 -  -  -  -  MaxMinMeanFunctionVariable:
 1192 D1:D014 79 -  -  -  	ld	a, c
 1193 D1:D015 06 02 -  -  	ld	b, OutputInHL
 1194 D1:D017 CD 52 AD D1 	call	GetFunction
 1195 D1:D01B 18 BE -  -  	jr	MaxMinMeanChainAnsVariable
 1196 D1:D01D -  -  -  -  MaxMinMeanFunctionChainPush:
 1197 D1:D01D C3 85 AF D1 	jp	UnknownError
 1198 D1:D021 -  -  -  -  MaxMinMeanFunctionChainAns:
 1199 D1:D021 FD CB BF 46 	bit	use_mean_routine, (iy+fExpression2)
 1200 D1:D025 20 13 -  -  	jr	nz, ++_
 1201 D1:D027 3E EB -  -  	ld	a, 0EBh
 1202 D1:D029 CD 26 AD D1 	call	InsertA                                                            ;    ex de, hl
 1203 D1:D02D 79 -  -  -  	ld	a, c
 1204 D1:D02E 06 02 -  -  	ld	b, OutputInHL
 1205 D1:D030 FD CB C0 F6 _:	set	need_push, (iy+fExpression1)
 1206 D1:D034 CD 52 AD D1 	call	GetFunction
 1207 D1:D038 18 8B -  -  	jr	MaxMinMeanInsert
 1208 D1:D03A 79 -  -  -  _:	ld	a, c
 1209 D1:D03B 06 01 -  -  	ld	b, OutputInDE
 1210 D1:D03D 18 F1 -  -  	jr	--_
 1211 D1:D03F -  -  -  -  MaxMinMeanFunctionFunction:
 1212 D1:D03F 7B -  -  -  	ld	a, e
 1213 D1:D040 06 01 -  -  	ld	b, OutputInDE
 1214 D1:D042 CD 52 AD D1 	call	GetFunction
 1215 D1:D046 79 -  -  -  	ld	a, c
 1216 D1:D047 06 02 -  -  	ld	b, OutputInHL
 1217 D1:D049 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1218 D1:D04D CD 52 AD D1 	call	GetFunction
 1219 D1:D051 C3 C5 CF D1 	jp	MaxMinMeanInsert
 1220 D1:D055 -  -  -  -  MeanInsert:
 1221 D1:D055 FD CB D0 6E 	bit	has_already_mean, (iy+fProgram1)
 1222 D1:D059 20 2C -  -  	jr	nz, +_
 1223 D1:D05B 3E CD -  -  	ld	a, 0CDh
 1224 D1:D05D CD 26 AD D1 	call	InsertA                                                            ;    call *
 1225 D1:D061 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1226 D1:D065 2A CA EC D1 	ld	hl, (programDataDataPtr)
 1227 D1:D069 22 01 32 D0 	ld	(MeanStartData), hl
 1228 D1:D06D E5 -  -  -  	push	hl
 1229 D1:D06E D1 -  -  -  	pop	de
 1230 D1:D06F CD 5E AC D1 	call	InsertHL                                                            ;    call *
 1231 D1:D073 21 FA EF D1 	ld	hl, MeanRoutine
 1232 D1:D077 01 18 00 00 	ld	bc, MeanRoutineEnd - MeanRoutine
 1233 D1:D07B ED B0 -  -  	ldir
 1234 D1:D07D ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1235 D1:D082 FD CB D0 EE 	set	has_already_mean, (iy+fProgram1)
 1236 D1:D086 C9 -  -  -  	ret
 1237 D1:D087 3E CD -  -  _:	ld	a, 0CDh
 1238 D1:D089 CD 26 AD D1 	call	InsertA                                                            ;    call ******
 1239 D1:D08D CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1240 D1:D091 2A 01 32 D0 	ld	hl, (MeanStartData)
 1241 D1:D095 C3 5E AC D1 	jp	InsertHL                                                                ;    call XXXXXX
 1242 D1:D099 -  -  -  -      
 1243 D1:D099 -  -  -  -  functionSqrt:
 1244 D1:D099 3E 01 -  -  	ld	a, 1
 1245 D1:D09B 32 D3 EC D1 	ld	(amountOfArguments), a
 1246 D1:D09F FD CB BF CE 	set	last_token_was_not, (iy+fExpression2)
 1247 D1:D0A3 E5 -  -  -  	push	hl
 1248 D1:D0A4 DD E1 -  -  	pop	ix
 1249 D1:D0A6 DD 7E FC -  	ld	a, (ix-4)
 1250 D1:D0A9 B7 -  -  -  	or	a, a
 1251 D1:D0AA 28 10 -  -  	jr	z, SqrtNumber
 1252 D1:D0AC 3D -  -  -  	dec	a
 1253 D1:D0AD 28 1E -  -  	jr	z, SqrtVariable
 1254 D1:D0AF 3D -  -  -  	dec	a
 1255 D1:D0B0 28 31 -  -  	jr	z, SqrtChainPush
 1256 D1:D0B2 3D -  -  -  	dec	a
 1257 D1:D0B3 28 32 -  -  	jr	z, SqrtChainAns
 1258 D1:D0B5 3D -  -  -  	dec	a
 1259 D1:D0B6 28 3F -  -  	jr	z, SqrtFunction
 1260 D1:D0B8 C3 4B AF D1 	jp	ErrorSyntax
 1261 D1:D0BC -  -  -  -  SqrtNumber:
 1262 D1:D0BC FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1263 D1:D0C0 DD 27 FD -  	ld	hl, (ix-3)
 1264 D1:D0C3 E5 -  -  -  	push	hl
 1265 D1:D0C4 C1 -  -  -  	pop	bc
 1266 D1:D0C5 CD 54 01 00 	call	__imulu
 1267 D1:D0C9 DD 2F FD -  	ld	(ix-3), hl
 1268 D1:D0CC C9 -  -  -  	ret
 1269 D1:D0CD -  -  -  -  SqrtVariable:
 1270 D1:D0CD DD 4E FD -  	ld	c, (ix-3)
 1271 D1:D0D0 06 03 -  -  	ld	b, 3
 1272 D1:D0D2 ED 4C -  -  	mlt	bc
 1273 D1:D0D4 79 -  -  -  	ld	a, c
 1274 D1:D0D5 21 DD 27 00 	ld	hl, 00027DDh
 1275 D1:D0D9 CD 70 1D 02 	call	_SetHLUToA
 1276 D1:D0DD CD 5E AC D1 	call	InsertHL                                                            ;    ld hl, (ix+*)
 1277 D1:D0E1 18 08 -  -  	jr	SqrtChainAns2
 1278 D1:D0E3 -  -  -  -  SqrtChainPush:
 1279 D1:D0E3 C3 85 AF D1 	jp	UnknownError
 1280 D1:D0E7 -  -  -  -  SqrtChainAns:
 1281 D1:D0E7 CD D5 AC D1 	call	MaybeChangeDEToHL
 1282 D1:D0EB -  -  -  -  SqrtChainAns2:
 1283 D1:D0EB 11 E5 C1 CD 	ld	de, 0CDC1E5h
 1284 D1:D0EF 21 58 01 00 	ld	hl, __imuls
 1285 D1:D0F3 C3 AA AC D1 	jp	InsertDEHL                                                            ;    push hl \ pop bc \ call __imuls
 1286 D1:D0F7 -  -  -  -  SqrtFunction:
 1287 D1:D0F7 DD 7E FD -  	ld	a, (ix-3)
 1288 D1:D0FA 06 02 -  -  	ld	b, OutputInHL
 1289 D1:D0FC CD 52 AD D1 	call	GetFunction
 1290 D1:D100 18 E9 -  -  	jr	SqrtChainAns2
 1291 D1:D102 -  -  -  -      
 1292 D1:D102 -  -  -  -  functionC:
 1293 D1:D102 3E 01 -  -  	ld	a, 1
 1294 D1:D104 32 D2 EC D1 	ld	(openedParensF), a
 1295 D1:D108 CD 28 10 02 	call	_IncFetch
 1296 D1:D10C CD 9D B2 D1 	call	ParseExpression
 1297 D1:D110 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
 1298 D1:D114 CA 4B AF D1 	jp	z, ErrorSyntax
 1299 D1:D118 2A B5 EC D1 	ld	hl, (programPtr)
 1300 D1:D11C 2B -  -  -  	dec	hl
 1301 D1:D11D 2B -  -  -  	dec	hl
 1302 D1:D11E 2B -  -  -  	dec	hl
 1303 D1:D11F 2B -  -  -  	dec	hl
 1304 D1:D120 22 B5 EC D1 	ld	(programPtr), hl
 1305 D1:D124 23 -  -  -  	inc	hl
 1306 D1:D125 ED 27 -  -  	ld	hl, (hl)
 1307 D1:D127 11 54 00 00 	ld	de, AMOUNT_OF_C_FUNCTIONS
 1308 D1:D12B B7 -  -  -  	or	a, a
 1309 D1:D12C ED 52 -  -  	sbc	hl, de
 1310 D1:D12E D2 4B AF D1 	jp	nc, ErrorSyntax
 1311 D1:D132 19 -  -  -  	add	hl, de
 1312 D1:D133 7D -  -  -  	ld	a, l
 1313 D1:D134 B7 -  -  -  	or	a, a
 1314 D1:D135 ED 62 -  -  	sbc	hl, hl
 1315 D1:D137 6F -  -  -  	ld	l, a
 1316 D1:D138 11 8A EA D1 	ld	de, CFunctionsArguments
 1317 D1:D13C 19 -  -  -  	add	hl, de
 1318 D1:D13D 47 -  -  -  	ld	b, a
 1319 D1:D13E 7E -  -  -  	ld	a, (hl)
 1320 D1:D13F FE E0 -  -  	cp	a, 011100000b
 1321 D1:D141 CA 91 AF D1 	jp	z, ImplementError
 1322 D1:D145 FD 77 B0 -  	ld	(iy+fFunction1), a
 1323 D1:D148 07 -  -  -  	rlca
 1324 D1:D149 07 -  -  -  	rlca
 1325 D1:D14A 07 -  -  -  	rlca
 1326 D1:D14B E6 07 -  -  	and	a, 000000111b
 1327 D1:D14D 4F -  -  -  	ld	c, a
 1328 D1:D14E 78 -  -  -  	ld	a, b
 1329 D1:D14F 06 03 -  -  	ld	b, 3
 1330 D1:D151 ED 4C -  -  	mlt	bc
 1331 D1:D153 21 48 EC D1 	ld	hl, CArguments
 1332 D1:D157 09 -  -  -  	add	hl, bc
 1333 D1:D158 ED 27 -  -  	ld	hl, (hl)
 1334 D1:D15A 32 0D E7 D1 	ld	(CFunctionArgsSMC), a
 1335 D1:D15E E9 -  -  -  	jp	(hl)
 1336 D1:D15F -  -  -  -  
 1337 D1:D15F -  -  -  -  functionCustom:
 1338 D1:D15F CD 28 10 02 	call	_IncFetch
 1339 D1:D163 D6 0A -  -  	sub	10
 1340 D1:D165 DA 4B AF D1 	jp	c, ErrorSyntax
 1341 D1:D169 FE 07 -  -  	cp	AMOUNT_OF_CUSTOM_TOKENS + 1
 1342 D1:D16B D2 4B AF D1 	jp	nc, ErrorSyntax
 1343 D1:D16F 4F -  -  -  	ld	c, a
 1344 D1:D170 06 03 -  -  	ld	b, 3
 1345 D1:D172 ED 4C -  -  	mlt	bc
 1346 D1:D174 21 5D EC D1 	ld	hl, functionCustomStart
 1347 D1:D178 09 -  -  -  	add	hl, bc
 1348 D1:D179 ED 27 -  -  	ld	hl, (hl)
 1349 D1:D17B E9 -  -  -  	jp	(hl)
 1350 D1:D17C -  -  -  -      
 1351 D1:D17C -  -  -  -  functionExecHex:
 1352 D1:D17C CD 28 10 02 	call	_IncFetch
 1353 D1:D180 D8 -  -  -  	ret	c
 1354 D1:D181 FE 3F -  -  	cp	a, tEnter
 1355 D1:D183 C8 -  -  -  	ret	z
 1356 D1:D184 FE 2A -  -  	cp	a, tString
 1357 D1:D186 C8 -  -  -  	ret	z
 1358 D1:D187 21 9F EC D1 	ld	hl, hexadecimals
 1359 D1:D18B 01 10 00 00 	ld	bc, 16
 1360 D1:D18F ED B1 -  -  	cpir
 1361 D1:D191 C2 4B AF D1 _:	jp	nz, ErrorSyntax
 1362 D1:D195 51 -  -  -  	ld	d, c
 1363 D1:D196 CD 28 10 02 	call	_IncFetch
 1364 D1:D19A DA 4B AF D1 	jp	c, ErrorSyntax
 1365 D1:D19E 21 9F EC D1 	ld	hl, hexadecimals
 1366 D1:D1A2 01 10 00 00 	ld	bc, 16
 1367 D1:D1A6 ED B1 -  -  	cpir
 1368 D1:D1A8 20 E7 -  -  	jr	nz, -_
 1369 D1:D1AA 7A -  -  -  	ld	a, d
 1370 D1:D1AB 87 -  -  -  	add	a, a
 1371 D1:D1AC 87 -  -  -  	add	a, a
 1372 D1:D1AD 87 -  -  -  	add	a, a
 1373 D1:D1AE 87 -  -  -  	add	a, a
 1374 D1:D1AF 81 -  -  -  	add	a, c
 1375 D1:D1B0 CD 26 AD D1 	call	InsertA
 1376 D1:D1B4 18 C6 -  -  	jr	functionExecHex
 1377 D1:D1B6 -  -  -  -      
 1378 D1:D1B6 -  -  -  -  functionSetBASICVar:
 1379 D1:D1B6 CD 28 10 02 	call	_IncFetch
 1380 D1:D1BA DA 4B AF D1 	jp	c, ErrorSyntax
 1381 D1:D1BE FE 41 -  -  	cp	a, tA
 1382 D1:D1C0 DA 4B AF D1 	jp	c, ErrorSyntax
 1383 D1:D1C4 FE 5C -  -  	cp	a, ttheta+1
 1384 D1:D1C6 D2 4B AF D1 	jp	nc, ErrorSyntax
 1385 D1:D1CA F5 -  -  -  	push	af
 1386 D1:D1CB CD 28 10 02 	call	_IncFetch
 1387 D1:D1CF DA 4B AF D1 	jp	c, ErrorSyntax
 1388 D1:D1D3 FE 2B -  -  	cp	a, tComma
 1389 D1:D1D5 C2 4B AF D1 	jp	nz, ErrorSyntax
 1390 D1:D1D9 CD 28 10 02 	call	_IncFetch
 1391 D1:D1DD DA 4B AF D1 	jp	c, ErrorSyntax
 1392 D1:D1E1 CD 9D B2 D1 	call	ParseExpression
 1393 D1:D1E5 3E 06 -  -  	ld	a, 006h
 1394 D1:D1E7 CD 26 AD D1 	call	InsertA                                         ; ld b, *
 1395 D1:D1EB F1 -  -  -  	pop	af
 1396 D1:D1EC CD 26 AD D1 	call	InsertA
 1397 D1:D1F0 3E CD -  -  	ld	a, 0CDh
 1398 D1:D1F2 CD 26 AD D1 	call	InsertA
 1399 D1:D1F6 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1400 D1:D1FA FD CB CF 4E 	bit	has_already_setvar, (iy+fProgram2)
 1401 D1:D1FE FD CB CF CE 	set	has_already_setvar, (iy+fProgram2)
 1402 D1:D202 28 08 -  -  	jr	z, +_
 1403 D1:D204 2A 0D 32 D0 	ld	hl, (SetBASICVarPtr)
 1404 D1:D208 C3 5E AC D1 	jp	InsertHL
 1405 D1:D20C 2A CA EC D1 _:	ld	hl, (programDataDataPtr)
 1406 D1:D210 22 0D 32 D0 	ld	(SetBASICVarPtr), hl
 1407 D1:D214 E5 -  -  -  	push	hl
 1408 D1:D215 CD 5E AC D1 	call	InsertHL
 1409 D1:D219 D1 -  -  -  	pop	de
 1410 D1:D21A 21 63 F0 D1 	ld	hl, StoBASICVar
 1411 D1:D21E 01 6A 00 00 	ld	bc, StoBASICVarEnd-StoBASICVar
 1412 D1:D222 ED B0 -  -  	ldir
 1413 D1:D224 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1414 D1:D229 C9 -  -  -  	ret
 1415 D1:D22A -  -  -  -      
 1416 D1:D22A -  -  -  -  functionGetBASICVar:
 1417 D1:D22A 3E 06 -  -  	ld	a, 006h
 1418 D1:D22C CD 26 AD D1 	call	InsertA                                                 ; ld b, *
 1419 D1:D230 CD 28 10 02 	call	_IncFetch
 1420 D1:D234 DA 4B AF D1 	jp	c, ErrorSyntax
 1421 D1:D238 FE 41 -  -  	cp	a, tA
 1422 D1:D23A DA 4B AF D1 	jp	c, ErrorSyntax
 1423 D1:D23E FE 5C -  -  	cp	a, ttheta+1
 1424 D1:D240 D2 4B AF D1 	jp	nc, ErrorSyntax
 1425 D1:D244 CD 26 AD D1 	call	InsertA                                                 ; ld b, X
 1426 D1:D248 3E CD -  -  	ld	a, 0CDh
 1427 D1:D24A CD 26 AD D1 	call	InsertA                                                 ; call *
 1428 D1:D24E CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1429 D1:D252 FD CB CF 56 	bit	has_already_getvar, (iy+fProgram2)
 1430 D1:D256 FD CB CF D6 	set	has_already_getvar, (iy+fProgram2)
 1431 D1:D25A 28 0A -  -  	jr	z, +_
 1432 D1:D25C 2A 10 32 D0 	ld	hl, (GetBASICVarPtr)
 1433 D1:D260 CD 5E AC D1 	call	InsertHL
 1434 D1:D264 18 1D -  -  	jr	++_
 1435 D1:D266 2A CA EC D1 _:	ld	hl, (programDataDataPtr)
 1436 D1:D26A 22 10 32 D0 	ld	(GetBASICVarPtr), hl
 1437 D1:D26E E5 -  -  -  	push	hl
 1438 D1:D26F CD 5E AC D1 	call	InsertHL
 1439 D1:D273 D1 -  -  -  	pop	de
 1440 D1:D274 21 CD F0 D1 	ld	hl, GetBASICVar
 1441 D1:D278 01 17 00 00 	ld	bc, GetBASICVarEnd-GetBASICVar
 1442 D1:D27C ED B0 -  -  	ldir
 1443 D1:D27E ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1444 D1:D283 3E DD -  -  _:	ld	a, 0DDh
 1445 D1:D285 CD 26 AD D1 	call	InsertA                                                 ; ld (ix+*), hl
 1446 D1:D289 3E 2F -  -  	ld	a, 02Fh
 1447 D1:D28B CD 26 AD D1 	call	InsertA                                                 ; ld (ix+*), hl
 1448 D1:D28F CD 28 10 02 	call	_IncFetch
 1449 D1:D293 DA 4B AF D1 	jp	c, ErrorSyntax
 1450 D1:D297 FE 2B -  -  	cp	a, tComma
 1451 D1:D299 C2 4B AF D1 	jp	nz, ErrorSyntax
 1452 D1:D29D CD 28 10 02 	call	_IncFetch
 1453 D1:D2A1 DA 4B AF D1 	jp	c, ErrorSyntax
 1454 D1:D2A5 FE 41 -  -  	cp	a, tA
 1455 D1:D2A7 DA 4B AF D1 	jp	c, ErrorSyntax
 1456 D1:D2AB FE 5C -  -  	cp	a, ttheta+1
 1457 D1:D2AD D2 4B AF D1 	jp	nc, ErrorSyntax
 1458 D1:D2B1 D6 41 -  -  	sub	a, tA
 1459 D1:D2B3 47 -  -  -  	ld	b, a
 1460 D1:D2B4 87 -  -  -  	add	a, a
 1461 D1:D2B5 80 -  -  -  	add	a, b
 1462 D1:D2B6 C3 26 AD D1 	jp	InsertA                                                 ; ld (ix+*), hl
 1463 D1:D2BA -  -  -  -      
 1464 D1:D2BA -  -  -  -  functionRoot:
 1465 D1:D2BA 3E 01 -  -  	ld	a, 1
 1466 D1:D2BC 32 D3 EC D1 	ld	(amountOfArguments), a
 1467 D1:D2C0 E5 -  -  -  	push	hl
 1468 D1:D2C1 DD E1 -  -  	pop	ix
 1469 D1:D2C3 DD 7E FC -  	ld	a, (ix-4)
 1470 D1:D2C6 B7 -  -  -  	or	a, a
 1471 D1:D2C7 28 10 -  -  	jr	z, RootNumber
 1472 D1:D2C9 3D -  -  -  	dec	a
 1473 D1:D2CA 28 20 -  -  	jr	z, RootVariable
 1474 D1:D2CC 3D -  -  -  	dec	a
 1475 D1:D2CD 28 33 -  -  	jr	z, RootChainPush
 1476 D1:D2CF 3D -  -  -  	dec	a
 1477 D1:D2D0 28 34 -  -  	jr	z, RootChainAns
 1478 D1:D2D2 3D -  -  -  	dec	a
 1479 D1:D2D3 28 6A -  -  	jr	z, RootFunction
 1480 D1:D2D5 C3 4B AF D1 	jp	ErrorSyntax
 1481 D1:D2D9 -  -  -  -  RootNumber:
 1482 D1:D2D9 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1483 D1:D2DD DD 27 FD -  	ld	hl, (ix-3)
 1484 D1:D2E0 FD E5 -  -  	push	iy
 1485 D1:D2E2 CD 26 F0 D1 	call	RootRoutine
 1486 D1:D2E6 FD E1 -  -  	pop	iy
 1487 D1:D2E8 DD 2F FD -  	ld	(ix-3), hl
 1488 D1:D2EB C9 -  -  -  	ret
 1489 D1:D2EC -  -  -  -  RootVariable:
 1490 D1:D2EC DD 4E FD -  	ld	c, (ix-3)
 1491 D1:D2EF 06 03 -  -  	ld	b, 3
 1492 D1:D2F1 ED 4C -  -  	mlt	bc
 1493 D1:D2F3 79 -  -  -  	ld	a, c
 1494 D1:D2F4 21 DD 27 00 	ld	hl, 00027DDh
 1495 D1:D2F8 CD 70 1D 02 	call	_SetHLUToA
 1496 D1:D2FC CD 5E AC D1 	call	InsertHL                                                            ;    ld hl, (ix+*)
 1497 D1:D300 18 04 -  -  	jr	RootChainAns
 1498 D1:D302 -  -  -  -  RootChainPush:
 1499 D1:D302 C3 85 AF D1 	jp	UnknownError
 1500 D1:D306 -  -  -  -  RootChainAns:
 1501 D1:D306 FD CB CF 46 	bit	has_already_root, (iy+fProgram2)
 1502 D1:D30A FD CB CF C6 	set	has_already_root, (iy+fProgram2)
 1503 D1:D30E 20 1D -  -  	jr	nz, RootChainAnsRecallRoutine
 1504 D1:D310 -  -  -  -  RootChainAnsAddRoutine:
 1505 D1:D310 FD CB AE CE 	set	modified_iy, (iy+fAlways1)
 1506 D1:D314 ED 5B CA EC 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1507 D1:D319 ED 53 07 32 
              D0 -  -  -  	ld	(RootStartData), de
 1508 D1:D31E 21 26 F0 D1 	ld	hl, RootRoutine
 1509 D1:D322 01 2D 00 00 	ld	bc, RootRoutineEnd - RootRoutine
 1510 D1:D326 ED B0 -  -  	ldir
 1511 D1:D328 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1512 D1:D32D -  -  -  -  RootChainAnsRecallRoutine:
 1513 D1:D32D 3E CD -  -  	ld	a, 0CDh
 1514 D1:D32F CD 26 AD D1 	call	InsertA                                                            ;    call *
 1515 D1:D333 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1516 D1:D337 2A 07 32 D0 	ld	hl, (RootStartData)
 1517 D1:D33B C3 5E AC D1 	jp	InsertHL                                                                ;    call *
 1518 D1:D33F -  -  -  -  RootFunction:
 1519 D1:D33F DD 7E FD -  	ld	a, (ix-3)
 1520 D1:D342 06 02 -  -  	ld	b, OutputInHL
 1521 D1:D344 CD 52 AD D1 	call	GetFunction
 1522 D1:D348 18 BC -  -  	jr	RootChainAns
 1523 D1:D34A -  -  -  -      
 1524 D1:D34A -  -  -  -        
 1525 D1:D34A -  -  -  -      
 1526 D1:D34A -  -  -  -        
 1527 D1:D34A -  -  -  -      
 1528 D1:D34A -  -  -  -        
 1529 D1:D34A -  -  -  -      
 1530 D1:D34A -  -  -  -  functionDefineSprite:
 1531 D1:D34A FD CB D0 7E 	bit	used_code, (iy+fProgram1)
 1532 D1:D34E C2 73 AF D1 	jp	nz, ErrorUsedCode
 1533 D1:D352 3E 01 -  -  	ld	a, 1
 1534 D1:D354 32 D2 EC D1 	ld	(openedParensF), a
 1535 D1:D358 CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1536 D1:D35C 2A CA EC D1 	ld	hl, (programDataDataPtr)
 1537 D1:D360 E5 -  -  -  	push	hl
 1538 D1:D361 D1 -  -  -  	pop	de
 1539 D1:D362 CD 5E AC D1 	call	InsertHL
 1540 D1:D366 06 02 -  -  	ld	b, 2
 1541 D1:D368 D5 -  -  -  _:	push	de
 1542 D1:D369 C5 -  -  -  	push	bc
 1543 D1:D36A CD 28 10 02 	call	_IncFetch
 1544 D1:D36E CD 9D B2 D1 	call	ParseExpression
 1545 D1:D372 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
 1546 D1:D376 CA 4B AF D1 	jp	z, ErrorSyntax
 1547 D1:D37A FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
 1548 D1:D37E CA 4B AF D1 	jp	z, ErrorSyntax
 1549 D1:D382 2A B5 EC D1 	ld	hl, (programPtr)
 1550 D1:D386 2B -  -  -  	dec	hl
 1551 D1:D387 2B -  -  -  	dec	hl
 1552 D1:D388 2B -  -  -  	dec	hl
 1553 D1:D389 2B -  -  -  	dec	hl
 1554 D1:D38A 22 B5 EC D1 	ld	(programPtr), hl
 1555 D1:D38E 23 -  -  -  	inc	hl
 1556 D1:D38F 7E -  -  -  	ld	a, (hl)
 1557 D1:D390 C1 -  -  -  	pop	bc
 1558 D1:D391 D1 -  -  -  	pop	de
 1559 D1:D392 12 -  -  -  	ld	(de), a
 1560 D1:D393 13 -  -  -  	inc	de
 1561 D1:D394 10 D2 -  -  	djnz	-_
 1562 D1:D396 2A B5 EC D1 	ld	hl, (programPtr)
 1563 D1:D39A E5 -  -  -  	push	hl
 1564 D1:D39B ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
 1565 D1:D3A0 CD 28 10 02 	call	_IncFetch
 1566 D1:D3A4 FE 2A -  -  	cp	tString
 1567 D1:D3A6 C2 4B AF D1 	jp	nz, ErrorSyntax
 1568 D1:D3AA CD C0 0F 02 	call	_NxtFetch
 1569 D1:D3AE DA 4B AF D1 	jp	c, ErrorSyntax
 1570 D1:D3B2 FE 3F -  -  	cp	tEnter
 1571 D1:D3B4 CA 4B AF D1 	jp	z, ErrorSyntax
 1572 D1:D3B8 CD 7C D1 D1 	call	functionExecHex
 1573 D1:D3BC 2A B5 EC D1 	ld	hl, (programPtr)
 1574 D1:D3C0 22 CA EC D1 	ld	(programDataDataPtr), hl
 1575 D1:D3C4 E1 -  -  -  	pop	hl
 1576 D1:D3C5 22 B5 EC D1 	ld	(programPtr), hl
 1577 D1:D3C9 C9 -  -  -  	ret
 1578 D1:D3CA -  -  -  -      
 1579 D1:D3CA -  -  -  -  functionCompilePrgm:
 1580 D1:D3CA 2A F8 05 D0 	ld	hl, (OP1)
 1581 D1:D3CE E5 -  -  -  	push	hl
 1582 D1:D3CF 2A FB 05 D0 	ld	hl, (OP1+3)
 1583 D1:D3D3 E5 -  -  -  	push	hl
 1584 D1:D3D4 2A FE 05 D0 	ld	hl, (OP1+6)
 1585 D1:D3D8 E5 -  -  -  	push	hl
 1586 D1:D3D9 21 F8 05 D0 	ld	hl, OP1
 1587 D1:D3DD CD 06 B2 D1 	call	GetProgramName
 1588 D1:D3E1 3E 05 -  -  	ld	a, ProgObj
 1589 D1:D3E3 32 F8 05 D0 	ld	(OP1), a
 1590 D1:D3E7 CD 0C 05 02 	call	_ChkFindSym
 1591 D1:D3EB 30 0D -  -  	jr	nc, +_
 1592 D1:D3ED 21 F8 05 D0 	ld	hl, OP1
 1593 D1:D3F1 34 -  -  -  	inc	(hl)
 1594 D1:D3F2 CD 0C 05 02 	call	_ChkFindSym
 1595 D1:D3F6 DA 6D AF D1 	jp	c, ErrorNotFound
 1596 D1:D3FA CD 98 1F 02 _:	call	_ChkInRAM
 1597 D1:D3FE 30 0A -  -  	jr	nc, +_
 1598 D1:D400 EB -  -  -  	ex	de, hl
 1599 D1:D401 11 09 00 00 	ld	de, 9
 1600 D1:D405 19 -  -  -  	add	hl, de
 1601 D1:D406 5E -  -  -  	ld	e, (hl)
 1602 D1:D407 19 -  -  -  	add	hl, de
 1603 D1:D408 23 -  -  -  	inc	hl
 1604 D1:D409 EB -  -  -  	ex	de, hl
 1605 D1:D40A 2A 17 23 D0 _:	ld	hl, (begPC)
 1606 D1:D40E E5 -  -  -  	push	hl
 1607 D1:D40F 2A 1A 23 D0 	ld	hl, (curPC)
 1608 D1:D413 E5 -  -  -  	push	hl
 1609 D1:D414 2A 1D 23 D0 	ld	hl, (endPC)
 1610 D1:D418 E5 -  -  -  	push	hl
 1611 D1:D419 EB -  -  -  	ex	de, hl
 1612 D1:D41A 01 00 00 00 	ld	bc, 0
 1613 D1:D41E 4E -  -  -  	ld	c, (hl)
 1614 D1:D41F 23 -  -  -  	inc	hl
 1615 D1:D420 22 1A 23 D0 	ld	(curPC), hl
 1616 D1:D424 46 -  -  -  	ld	b, (hl)
 1617 D1:D425 23 -  -  -  	inc	hl
 1618 D1:D426 22 17 23 D0 	ld	(begPC), hl
 1619 D1:D42A 09 -  -  -  	add	hl, bc
 1620 D1:D42B 2B -  -  -  	dec	hl
 1621 D1:D42C 22 1D 23 D0 	ld	(endPC), hl
 1622 D1:D430 CD A8 B0 D1 	call	PrintCompilingProgram
 1623 D1:D434 21 DB EC D1 	ld	hl, AmountOfSubPrograms
 1624 D1:D438 34 -  -  -  	inc	(hl)
 1625 D1:D439 CD 7E AA D1 	call	CompileProgramFull
 1626 D1:D43D E1 -  -  -  	pop	hl
 1627 D1:D43E 22 1D 23 D0 	ld	(endPC), hl
 1628 D1:D442 E1 -  -  -  	pop	hl
 1629 D1:D443 22 1A 23 D0 	ld	(curPC), hl
 1630 D1:D447 E1 -  -  -  	pop	hl
 1631 D1:D448 22 17 23 D0 	ld	(begPC), hl
 1632 D1:D44C E1 -  -  -  	pop	hl
 1633 D1:D44D 22 FE 05 D0 	ld	(OP1+6), hl
 1634 D1:D451 E1 -  -  -  	pop	hl
 1635 D1:D452 22 FB 05 D0 	ld	(OP1+3), hl
 1636 D1:D456 E1 -  -  -  	pop	hl
 1637 D1:D457 22 F8 05 D0 	ld	(OP1), hl
 1638 D1:D45B C3 A8 B0 D1 	jp	PrintCompilingProgram
Listing for file "ice.asm"
  459 D1:D45F -  -  -  -  #include "operators functions/operators.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\operators functions\operators.asm"
    1 D1:D45F -  -  -  -  ExecuteOperator:
    2 D1:D45F 32 F7 31 D0 	ld	(tempToken2), a
    3 D1:D463 21 DA EC D1 	ld	hl, ExprOutput2
    4 D1:D467 36 01 -  -  	ld	(hl), OutputIsInHL
    5 D1:D469 B7 -  -  -  	or	a, a
    6 D1:D46A CA B4 D4 D1 	jp	z, ListElementXXX
    7 D1:D46E FE 6D -  -  	cp	tLE
    8 D1:D470 CC AE DC D1 	call	z, SwapLEToGE
    9 D1:D474 FE 6B -  -  	cp	tLT
   10 D1:D476 CC B2 DC D1 	call	z, SwapLTToGT
   11 D1:D47A 32 F6 31 D0 	ld	(tempToken), a
   12 D1:D47E C5 -  -  -  	push	bc
   13 D1:D47F 21 3C EB D1 	ld	hl, operators_booleans
   14 D1:D483 01 0E 00 00 	ld	bc, 14
   15 D1:D487 ED B1 -  -  	cpir
   16 D1:D489 21 4B EB D1 	ld	hl, operators_special
   17 D1:D48D 09 -  -  -  	add	hl, bc
   18 D1:D48E 4E -  -  -  	ld	c, (hl)
   19 D1:D48F 79 -  -  -  	ld	a, c
   20 D1:D490 FE 04 -  -  	cp	4
   21 D1:D492 20 04 -  -  	jr	nz, +_
   22 D1:D494 FD CB C0 EE 	set	ans_set_z_flag, (iy+fExpression1)
   23 D1:D498 06 12 -  -  _:	ld	b, 18
   24 D1:D49A ED 4C -  -  	mlt	bc
   25 D1:D49C 21 B8 EB D1 	ld	hl, operator_start											;	start of bunch jumps
   26 D1:D4A0 09 -  -  -  	add	hl, bc														;	start of right operator
   27 D1:D4A1 DD 7E F8 -  	ld	a, (ix-8)
   28 D1:D4A4 4F -  -  -  	ld	c, a
   29 D1:D4A5 FE 06 -  -  	cp	6
   30 D1:D4A7 D2 4B AF D1 	jp	nc, ErrorSyntax
   31 D1:D4AB 06 03 -  -  	ld	b, 3
   32 D1:D4AD ED 4C -  -  	mlt	bc
   33 D1:D4AF 09 -  -  -  	add	hl, bc														;	start of right subelement
   34 D1:D4B0 ED 27 -  -  	ld	hl, (hl)
   35 D1:D4B2 C1 -  -  -  	pop	bc
   36 D1:D4B3 E9 -  -  -  	jp	(hl)
   37 D1:D4B4 -  -  -  -  	
   38 D1:D4B4 -  -  -  -  ListElementXXX:
   39 D1:D4B4 DD 7E FC -  	ld	a, (ix-4)
   40 D1:D4B7 B7 -  -  -  	or	a, a
   41 D1:D4B8 28 0C -  -  	jr	z, ListElementNumber
   42 D1:D4BA 3D -  -  -  	dec	a
   43 D1:D4BB 28 14 -  -  	jr	z, ListElementVariable
   44 D1:D4BD 3D -  -  -  	dec	a
   45 D1:D4BE 28 17 -  -  	jr	z, ListElementChainPush
   46 D1:D4C0 3D -  -  -  	dec	a
   47 D1:D4C1 28 18 -  -  	jr	z, ListElementChainAns
   48 D1:D4C3 3D -  -  -  	dec	a
   49 D1:D4C4 28 31 -  -  	jr	z, ListElementFunction
   50 D1:D4C6 -  -  -  -  ListElementNumber:
   51 D1:D4C6 3E 2A -  -  	ld	a, 02Ah
   52 D1:D4C8 C5 -  -  -  	push	bc
   53 D1:D4C9 E1 -  -  -  	pop	hl
   54 D1:D4CA 19 -  -  -  	add	hl, de
   55 D1:D4CB 19 -  -  -  	add	hl, de
   56 D1:D4CC 19 -  -  -  	add	hl, de
   57 D1:D4CD C3 5A AC D1 	jp	InsertAHL															;	ld hl, (*)
   58 D1:D4D1 -  -  -  -  ListElementVariable:
   59 D1:D4D1 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
   60 D1:D4D5 18 08 -  -  	jr	+_
   61 D1:D4D7 -  -  -  -  ListElementChainPush:
   62 D1:D4D7 C3 85 AF D1 	jp	UnknownError
   63 D1:D4DB -  -  -  -  ListElementChainAns:
   64 D1:D4DB CD CB AC D1 	call	MaybeChangeHLToDE
   65 D1:D4DF 3E 21 -  -  _:	ld	a, 021h
   66 D1:D4E1 C5 -  -  -  	push	bc
   67 D1:D4E2 D1 -  -  -  	pop	de
   68 D1:D4E3 21 19 19 19 	ld	hl, 0191919h
   69 D1:D4E7 CD A6 AC D1 	call	InsertADEHL														;	ld hl, * \ add hl, de \ add hl, de \ add hl, de
   70 D1:D4EB 3E ED -  -  	ld	a, 0EDh
   71 D1:D4ED CD 26 AD D1 	call	InsertA															;	ld hl, (hl) (1)
   72 D1:D4F1 3E 27 -  -  	ld	a, 027h
   73 D1:D4F3 C3 26 AD D1 	jp	InsertA																;	ld hl, (hl) (2)
   74 D1:D4F7 -  -  -  -  ListElementFunction:
   75 D1:D4F7 7B -  -  -  	ld	a, e
   76 D1:D4F8 06 01 -  -  	ld	b, OutputInDE
   77 D1:D4FA CD 52 AD D1 	call	GetFunction
   78 D1:D4FE 18 DF -  -  	jr	-_
   79 D1:D500 -  -  -  -  	
   80 D1:D500 -  -  -  -  SubNumberXXX:
   81 D1:D500 DD 7E FC -  	ld	a, (ix-4)
   82 D1:D503 B7 -  -  -  	or	a, a
   83 D1:D504 28 10 -  -  	jr	z, SubNumberNumber
   84 D1:D506 3D -  -  -  	dec	a
   85 D1:D507 28 1A -  -  	jr	z, SubNumberVariable
   86 D1:D509 3D -  -  -  	dec	a
   87 D1:D50A 28 23 -  -  	jr	z, SubNumberChainPush
   88 D1:D50C 3D -  -  -  	dec	a
   89 D1:D50D 28 24 -  -  	jr	z, SubNumberChainAns
   90 D1:D50F 3D -  -  -  	dec	a
   91 D1:D510 28 31 -  -  	jr	z, SubNumberFunction
   92 D1:D512 C3 DE AE D1 	jp	SubError
   93 D1:D516 -  -  -  -  SubNumberNumber:
   94 D1:D516 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
   95 D1:D51A C5 -  -  -  	push	bc
   96 D1:D51B E1 -  -  -  	pop	hl
   97 D1:D51C B7 -  -  -  	or	a, a
   98 D1:D51D ED 52 -  -  	sbc	hl, de
   99 D1:D51F DD 2F F9 -  	ld	(ix-7), hl
  100 D1:D522 C9 -  -  -  	ret
  101 D1:D523 -  -  -  -  SubNumberVariable:
  102 D1:D523 3E 21 -  -  	ld	a, 021h
  103 D1:D525 C5 -  -  -  	push	bc
  104 D1:D526 E1 -  -  -  	pop	hl
  105 D1:D527 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  106 D1:D52B C3 54 D6 D1 	jp	SubChainAnsVariable
  107 D1:D52F -  -  -  -  SubNumberChainPush:
  108 D1:D52F C3 85 AF D1 	jp	UnknownError
  109 D1:D533 -  -  -  -  SubNumberChainAns:
  110 D1:D533 CD CB AC D1 	call	MaybeChangeHLToDE
  111 D1:D537 3E 21 -  -  	ld	a, 021h
  112 D1:D539 C5 -  -  -  	push	bc
  113 D1:D53A D1 -  -  -  	pop	de
  114 D1:D53B 21 B7 ED 52 	ld	hl, 052EDB7h
  115 D1:D53F C3 A6 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  116 D1:D543 -  -  -  -  SubNumberFunction:
  117 D1:D543 7B -  -  -  	ld	a, e
  118 D1:D544 C5 -  -  -  	push	bc
  119 D1:D545 06 01 -  -  	ld	b, OutputInDE
  120 D1:D547 CD 52 AD D1 	call	GetFunction
  121 D1:D54B 3E 21 -  -  	ld	a, 021h
  122 D1:D54D D1 -  -  -  	pop	de
  123 D1:D54E 21 B7 ED 52 	ld	hl, 052EDB7h
  124 D1:D552 C3 A6 AC D1 	jp	InsertADEHL															;	ld hl, * \ or a \ sbc hl, de
  125 D1:D556 -  -  -  -  SubVariableXXX:
  126 D1:D556 DD 7E FC -  	ld	a, (ix-4)
  127 D1:D559 B7 -  -  -  	or	a, a
  128 D1:D55A 28 12 -  -  	jr	z, SubVariableNumber
  129 D1:D55C 3D -  -  -  	dec	a
  130 D1:D55D 28 17 -  -  	jr	z, SubVariableVariable
  131 D1:D55F 3D -  -  -  	dec	a
  132 D1:D560 28 2E -  -  	jr	z, SubVariableChainPush
  133 D1:D562 3D -  -  -  	dec	a
  134 D1:D563 28 2F -  -  	jr	z, SubVariableChainAns
  135 D1:D565 3D -  -  -  	dec	a
  136 D1:D566 CA A4 D5 D1 	jp	z, SubVariableFunction
  137 D1:D56A C3 DE AE D1 	jp	SubError
  138 D1:D56E -  -  -  -  SubVariableNumber:
  139 D1:D56E CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  140 D1:D572 C3 11 D6 D1 	jp	SubChainAnsNumber
  141 D1:D576 -  -  -  -  SubVariableVariable:
  142 D1:D576 79 -  -  -  	ld	a, c
  143 D1:D577 BB -  -  -  	cp	e
  144 D1:D578 20 0E -  -  	jr	nz, +_
  145 D1:D57A FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  146 D1:D57E 36 00 -  -  	ld	(hl), typeNumber
  147 D1:D580 11 00 00 00 	ld	de, 0
  148 D1:D584 23 -  -  -  	inc	hl
  149 D1:D585 ED 1F -  -  	ld	(hl), de
  150 D1:D587 C9 -  -  -  	ret
  151 D1:D588 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  152 D1:D58C C3 54 D6 D1 	jp	SubChainAnsVariable
  153 D1:D590 -  -  -  -  SubVariableChainPush:
  154 D1:D590 C3 85 AF D1 	jp	UnknownError
  155 D1:D594 -  -  -  -  SubVariableChainAns:
  156 D1:D594 CD CB AC D1 	call	MaybeChangeHLToDE
  157 D1:D598 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  158 D1:D59C 21 B7 ED 52 	ld	hl, 052EDB7h
  159 D1:D5A0 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  160 D1:D5A4 -  -  -  -  SubVariableFunction:
  161 D1:D5A4 7B -  -  -  	ld	a, e
  162 D1:D5A5 06 01 -  -  	ld	b, OutputInDE
  163 D1:D5A7 CD 52 AD D1 	call	GetFunction
  164 D1:D5AB CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  165 D1:D5AF 21 B7 ED 52 	ld	hl, 052EDB7h
  166 D1:D5B3 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  167 D1:D5B7 -  -  -  -  SubChainPushXXX:
  168 D1:D5B7 DD 7E FC -  	ld	a, (ix-4)
  169 D1:D5BA B7 -  -  -  	or	a, a
  170 D1:D5BB 28 12 -  -  	jr	z, SubChainPushNumber
  171 D1:D5BD 3D -  -  -  	dec	a
  172 D1:D5BE 28 17 -  -  	jr	z, SubChainPushVariable
  173 D1:D5C0 3D -  -  -  	dec	a
  174 D1:D5C1 28 1C -  -  	jr	z, SubChainPushChainPush
  175 D1:D5C3 3D -  -  -  	dec	a
  176 D1:D5C4 28 1D -  -  	jr	z, SubChainPushChainAns
  177 D1:D5C6 3D -  -  -  	dec	a
  178 D1:D5C7 CA F1 D5 D1 	jp	z, SubChainPushFunction
  179 D1:D5CB C3 DE AE D1 	jp	SubError
  180 D1:D5CF -  -  -  -  SubChainPushNumber:
  181 D1:D5CF 3E E1 -  -  	ld	a, 0E1h
  182 D1:D5D1 CD 26 AD D1 	call	InsertA															;	pop hl
  183 D1:D5D5 18 3A -  -  	jr	SubChainAnsNumber
  184 D1:D5D7 -  -  -  -  SubChainPushVariable:
  185 D1:D5D7 3E E1 -  -  	ld	a, 0E1h
  186 D1:D5D9 CD 26 AD D1 	call	InsertA															;	pop hl
  187 D1:D5DD 18 75 -  -  	jr	SubChainAnsVariable
  188 D1:D5DF -  -  -  -  SubChainPushChainPush:
  189 D1:D5DF C3 85 AF D1 	jp	UnknownError
  190 D1:D5E3 -  -  -  -  SubChainPushChainAns:
  191 D1:D5E3 CD CB AC D1 	call	MaybeChangeHLToDE
  192 D1:D5E7 3E E1 -  -  	ld	a, 0E1h
  193 D1:D5E9 21 B7 ED 52 	ld	hl, 052EDB7h
  194 D1:D5ED C3 5A AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  195 D1:D5F1 -  -  -  -  SubChainPushFunction:
  196 D1:D5F1 3E E1 -  -  	ld	a, 0E1h
  197 D1:D5F3 CD 26 AD D1 	call	InsertA															;	pop hl
  198 D1:D5F7 18 73 -  -  	jr	SubChainAnsFunction
  199 D1:D5F9 -  -  -  -  SubChainAnsXXX:
  200 D1:D5F9 DD 7E FC -  	ld	a, (ix-4)
  201 D1:D5FC B7 -  -  -  	or	a, a
  202 D1:D5FD 28 12 -  -  	jr	z, SubChainAnsNumber
  203 D1:D5FF 3D -  -  -  	dec	a
  204 D1:D600 28 52 -  -  	jr	z, SubChainAnsVariable
  205 D1:D602 3D -  -  -  	dec	a
  206 D1:D603 28 5F -  -  	jr	z, SubChainAnsChainPush
  207 D1:D605 3D -  -  -  	dec	a
  208 D1:D606 28 60 -  -  	jr	z, SubChainAnsChainAns
  209 D1:D608 3D -  -  -  	dec	a
  210 D1:D609 CA 6C D6 D1 	jp	z, SubChainAnsFunction
  211 D1:D60D C3 DE AE D1 	jp	SubError
  212 D1:D611 -  -  -  -  SubChainAnsNumber:
  213 D1:D611 B7 -  -  -  	or	a, a
  214 D1:D612 ED 62 -  -  	sbc	hl, hl
  215 D1:D614 EB -  -  -  	ex	de, hl
  216 D1:D615 ED 52 -  -  	sbc	hl, de
  217 D1:D617 C8 -  -  -  	ret	z
  218 D1:D618 1E 07 -  -  	ld	e, 7
  219 D1:D61A ED 52 -  -  	sbc	hl, de
  220 D1:D61C 30 1C -  -  	jr	nc, SubHLDE
  221 D1:D61E 19 -  -  -  	add	hl, de
  222 D1:D61F 45 -  -  -  	ld	b, l
  223 D1:D620 3A D9 EC D1 	ld	a, (ExprOutput)
  224 D1:D624 B7 -  -  -  	or	a, a
  225 D1:D625 28 09 -  -  	jr	z, ++_
  226 D1:D627 3E 2B -  -  	ld	a, 02Bh
  227 D1:D629 CD 26 AD D1 _:	call	InsertA															;	dec hl/de
  228 D1:D62D 10 FA -  -  	djnz	-_
  229 D1:D62F C9 -  -  -  	ret
  230 D1:D630 3E 00 -  -  _:	ld	a, OutputIsInDE
  231 D1:D632 32 DA EC D1 	ld	(ExprOutput2), a
  232 D1:D636 3E 1B -  -  	ld	a, 01Bh
  233 D1:D638 18 EF -  -  	jr	--_
  234 D1:D63A -  -  -  -  SubHLDE:
  235 D1:D63A 19 -  -  -  	add	hl, de
  236 D1:D63B CD 60 01 00 	call	__ineg
  237 D1:D63F 3A D9 EC D1 	ld	a, (ExprOutput)
  238 D1:D643 B7 -  -  -  	or	a, a
  239 D1:D644 3E 11 -  -  	ld	a, 011h
  240 D1:D646 20 02 -  -  	jr	nz, +_
  241 D1:D648 3E 21 -  -  	ld	a, 021h
  242 D1:D64A CD 5A AC D1 _:	call	InsertAHL															;	ld hl/de, 16777215-*
  243 D1:D64E 3E 19 -  -  	ld	a, 019h
  244 D1:D650 C3 26 AD D1 	jp	InsertA																;	add hl, de
  245 D1:D654 -  -  -  -  SubChainAnsVariable:
  246 D1:D654 CD D5 AC D1 	call	MaybeChangeDEToHL
  247 D1:D658 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
  248 D1:D65C 21 B7 ED 52 	ld	hl, 052EDB7h
  249 D1:D660 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  250 D1:D664 -  -  -  -  SubChainAnsChainPush:
  251 D1:D664 C3 85 AF D1 	jp	UnknownError
  252 D1:D668 -  -  -  -  SubChainAnsChainAns:
  253 D1:D668 C3 85 AF D1 	jp	UnknownError
  254 D1:D66C -  -  -  -  SubChainAnsFunction:
  255 D1:D66C 3A D9 EC D1 	ld	a, (ExprOutput)
  256 D1:D670 87 -  -  -  	add	a, a
  257 D1:D671 87 -  -  -  	add	a, a
  258 D1:D672 87 -  -  -  	add	a, a
  259 D1:D673 87 -  -  -  	add	a, a
  260 D1:D674 C6 D5 -  -  	add	a, 0D5h
  261 D1:D676 CD 26 AD D1 	call	InsertA															;	push hl/de
  262 D1:D67A 7B -  -  -  	ld	a, e
  263 D1:D67B 06 01 -  -  	ld	b, OutputInDE
  264 D1:D67D CD 52 AD D1 	call	GetFunction
  265 D1:D681 3E E1 -  -  	ld	a, 0E1h
  266 D1:D683 21 B7 ED 52 	ld	hl, 052EDB7h
  267 D1:D687 C3 5A AC D1 	jp	InsertAHL															;	pop hl \ or a \ sbc hl, de
  268 D1:D68B -  -  -  -  SubFunctionXXX:
  269 D1:D68B DD 7E FC -  	ld	a, (ix-4)
  270 D1:D68E B7 -  -  -  	or	a, a
  271 D1:D68F 28 10 -  -  	jr	z, SubFunctionNumber
  272 D1:D691 3D -  -  -  	dec	a
  273 D1:D692 28 18 -  -  	jr	z, SubFunctionVariable
  274 D1:D694 3D -  -  -  	dec	a
  275 D1:D695 28 20 -  -  	jr	z, SubFunctionChainPush
  276 D1:D697 3D -  -  -  	dec	a
  277 D1:D698 28 21 -  -  	jr	z, SubFunctionChainAns
  278 D1:D69A 3D -  -  -  	dec	a
  279 D1:D69B 28 3D -  -  	jr	z, SubFunctionFunction
  280 D1:D69D C3 DE AE D1 	jp	SubError
  281 D1:D6A1 -  -  -  -  SubFunctionNumber:
  282 D1:D6A1 79 -  -  -  	ld	a, c
  283 D1:D6A2 06 02 -  -  	ld	b, OutputInHL
  284 D1:D6A4 CD 52 AD D1 	call	GetFunction
  285 D1:D6A8 C3 11 D6 D1 	jp	SubChainAnsNumber
  286 D1:D6AC -  -  -  -  SubFunctionVariable:
  287 D1:D6AC 79 -  -  -  	ld	a, c
  288 D1:D6AD 06 02 -  -  	ld	b, OutputInHL
  289 D1:D6AF CD 52 AD D1 	call	GetFunction
  290 D1:D6B3 C3 54 D6 D1 	jp	SubChainAnsVariable
  291 D1:D6B7 -  -  -  -  SubFunctionChainPush:
  292 D1:D6B7 C3 85 AF D1 	jp	UnknownError
  293 D1:D6BB -  -  -  -  SubFunctionChainAns:
  294 D1:D6BB 3A D9 EC D1 	ld	a, (ExprOutput)
  295 D1:D6BF 87 -  -  -  	add	a, a
  296 D1:D6C0 87 -  -  -  	add	a, a
  297 D1:D6C1 87 -  -  -  	add	a, a
  298 D1:D6C2 87 -  -  -  	add	a, a
  299 D1:D6C3 C6 D5 -  -  	add	a, 0D5h
  300 D1:D6C5 CD 26 AD D1 	call	InsertA															;	push hl/de
  301 D1:D6C9 79 -  -  -  	ld	a, c
  302 D1:D6CA 06 02 -  -  	ld	b, OutputInHL
  303 D1:D6CC CD 52 AD D1 	call	GetFunction
  304 D1:D6D0 3E E1 -  -  	ld	a, 0E1h
  305 D1:D6D2 21 B7 ED 52 	ld	hl, 052EDB7h
  306 D1:D6D6 C3 5A AC D1 	jp	InsertAHL															;	pop de \ or a \ sbc hl, de
  307 D1:D6DA -  -  -  -  SubFunctionFunction:
  308 D1:D6DA 7B -  -  -  	ld	a, e
  309 D1:D6DB 06 02 -  -  	ld	b, OutputInHL
  310 D1:D6DD CD 52 AD D1 	call	GetFunction
  311 D1:D6E1 79 -  -  -  	ld	a, c
  312 D1:D6E2 06 01 -  -  	ld	b, OutputInDE
  313 D1:D6E4 FD CB C0 F6 	set	need_push, (iy+fExpression1)
  314 D1:D6E8 CD 52 AD D1 	call	GetFunction
  315 D1:D6EC 21 B7 ED 52 	ld	hl, 052EDB7h
  316 D1:D6F0 C3 5E AC D1 	jp	InsertHL																;	or a \ sbc hl, de
  317 D1:D6F4 -  -  -  -  
  318 D1:D6F4 -  -  -  -  AddNumberXXX:
  319 D1:D6F4 DD 7E FC -  	ld	a, (ix-4)
  320 D1:D6F7 B7 -  -  -  	or	a, a
  321 D1:D6F8 28 10 -  -  	jr	z, AddNumberNumber
  322 D1:D6FA 3D -  -  -  	dec	a
  323 D1:D6FB 28 17 -  -  	jr	z, AddNumberVariable
  324 D1:D6FD 3D -  -  -  	dec	a
  325 D1:D6FE 28 1B -  -  	jr	z, AddNumberChainPush
  326 D1:D700 3D -  -  -  	dec	a
  327 D1:D701 28 1C -  -  	jr	z, AddNumberChainAns
  328 D1:D703 3D -  -  -  	dec	a
  329 D1:D704 28 1F -  -  	jr	z, AddNumberFunction
  330 D1:D706 C3 E2 AE D1 	jp	AddError
  331 D1:D70A -  -  -  -  AddNumberNumber:
  332 D1:D70A FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  333 D1:D70E EB -  -  -  	ex	de, hl
  334 D1:D70F 09 -  -  -  	add	hl, bc
  335 D1:D710 DD 2F F9 -  	ld	(ix-7), hl
  336 D1:D713 C9 -  -  -  	ret
  337 D1:D714 -  -  -  -  AddNumberVariable:
  338 D1:D714 C5 -  -  -  	push	bc
  339 D1:D715 E1 -  -  -  	pop	hl
  340 D1:D716 EB -  -  -  	ex	de, hl
  341 D1:D717 E5 -  -  -  	push	hl
  342 D1:D718 C1 -  -  -  	pop	bc
  343 D1:D719 18 2B -  -  	jr	AddVariableNumber
  344 D1:D71B -  -  -  -  AddNumberChainPush:
  345 D1:D71B C3 85 AF D1 	jp	UnknownError
  346 D1:D71F -  -  -  -  AddNumberChainAns:
  347 D1:D71F C5 -  -  -  	push	bc
  348 D1:D720 D1 -  -  -  	pop	de
  349 D1:D721 C3 D9 D7 D1 	jp	AddChainAnsNumber
  350 D1:D725 -  -  -  -  AddNumberFunction:
  351 D1:D725 C5 -  -  -  	push	bc
  352 D1:D726 E1 -  -  -  	pop	hl
  353 D1:D727 EB -  -  -  	ex	de, hl
  354 D1:D728 E5 -  -  -  	push	hl
  355 D1:D729 C1 -  -  -  	pop	bc
  356 D1:D72A C3 77 D8 D1 	jp	AddFunctionNumber
  357 D1:D72E -  -  -  -  AddVariableXXX:
  358 D1:D72E DD 7E FC -  	ld	a, (ix-4)
  359 D1:D731 B7 -  -  -  	or	a, a
  360 D1:D732 28 12 -  -  	jr	z, AddVariableNumber
  361 D1:D734 3D -  -  -  	dec	a
  362 D1:D735 28 17 -  -  	jr	z, AddVariableVariable
  363 D1:D737 3D -  -  -  	dec	a
  364 D1:D738 28 1C -  -  	jr	z, AddVariableChainPush
  365 D1:D73A 3D -  -  -  	dec	a
  366 D1:D73B 28 24 -  -  	jr	z, AddVariableChainAns
  367 D1:D73D 3D -  -  -  	dec	a
  368 D1:D73E CA 66 D7 D1 	jp	z, AddVariableFunction
  369 D1:D742 C3 E2 AE D1 	jp	AddError
  370 D1:D746 -  -  -  -  AddVariableNumber:
  371 D1:D746 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  372 D1:D74A C3 D9 D7 D1 	jp	AddChainAnsNumber
  373 D1:D74E -  -  -  -  AddVariableVariable:
  374 D1:D74E CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  375 D1:D752 C3 18 D8 D1 	jp	AddChainAnsVariable
  376 D1:D756 -  -  -  -  AddVariableChainPush:
  377 D1:D756 3E E1 -  -  	ld	a, 0E1h
  378 D1:D758 CD 26 AD D1 	call	InsertA															;	pop hl
  379 D1:D75C 59 -  -  -  	ld	e, c
  380 D1:D75D C3 18 D8 D1 	jp	AddChainAnsVariable
  381 D1:D761 -  -  -  -  AddVariableChainAns:
  382 D1:D761 59 -  -  -  	ld	e, c
  383 D1:D762 C3 18 D8 D1 	jp	AddChainAnsVariable
  384 D1:D766 -  -  -  -  AddVariableFunction:
  385 D1:D766 7B -  -  -  	ld	a, e
  386 D1:D767 06 02 -  -  	ld	b, OutputInHL
  387 D1:D769 CD 52 AD D1 	call	GetFunction
  388 D1:D76D 59 -  -  -  	ld	e, c
  389 D1:D76E CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
  390 D1:D772 3E 19 -  -  	ld	a, 019h
  391 D1:D774 C3 26 AD D1 	jp	InsertA																;	add hl, de
  392 D1:D778 -  -  -  -  AddChainPushXXX:
  393 D1:D778 DD 7E FC -  	ld	a, (ix-4)
  394 D1:D77B B7 -  -  -  	or	a, a
  395 D1:D77C 28 12 -  -  	jr	z, AddChainPushNumber
  396 D1:D77E 3D -  -  -  	dec	a
  397 D1:D77F 28 17 -  -  	jr	z, AddChainPushVariable
  398 D1:D781 3D -  -  -  	dec	a
  399 D1:D782 28 1C -  -  	jr	z, AddChainPushChainPush
  400 D1:D784 3D -  -  -  	dec	a
  401 D1:D785 28 1D -  -  	jr	z, AddChainPushChainAns
  402 D1:D787 3D -  -  -  	dec	a
  403 D1:D788 CA B9 D7 D1 	jp	z, AddChainPushFunction
  404 D1:D78C C3 E2 AE D1 	jp	AddError
  405 D1:D790 -  -  -  -  AddChainPushNumber:
  406 D1:D790 3E E1 -  -  	ld	a, 0E1h
  407 D1:D792 CD 26 AD D1 	call	InsertA															;	pop hl
  408 D1:D796 18 41 -  -  	jr	AddChainAnsNumber
  409 D1:D798 -  -  -  -  AddChainPushVariable:
  410 D1:D798 3E E1 -  -  	ld	a, 0E1h
  411 D1:D79A CD 26 AD D1 	call	InsertA															;	pop hl
  412 D1:D79E 18 78 -  -  	jr	AddChainAnsVariable
  413 D1:D7A0 -  -  -  -  AddChainPushChainPush:
  414 D1:D7A0 C3 85 AF D1 	jp	UnknownError
  415 D1:D7A4 -  -  -  -  AddChainPushChainAns:
  416 D1:D7A4 3A D9 EC D1 	ld	a, (ExprOutput)
  417 D1:D7A8 B7 -  -  -  	or	a, a
  418 D1:D7A9 3E D1 -  -  	ld	a, 0D1h
  419 D1:D7AB 20 02 -  -  	jr	nz, +_
  420 D1:D7AD 3E E1 -  -  	ld	a, 0E1h
  421 D1:D7AF CD 26 AD D1 _:	call	InsertA															;	pop hl/de
  422 D1:D7B3 3E 19 -  -  	ld	a, 019h
  423 D1:D7B5 C3 26 AD D1 	jp	InsertA																;	add hl, de
  424 D1:D7B9 -  -  -  -  AddChainPushFunction:
  425 D1:D7B9 3E E1 -  -  	ld	a, 0E1h
  426 D1:D7BB CD 26 AD D1 	call	InsertA															;	pop hl
  427 D1:D7BF 18 7F -  -  	jr	AddChainAnsFunction
  428 D1:D7C1 -  -  -  -  AddChainAnsXXX:
  429 D1:D7C1 DD 7E FC -  	ld	a, (ix-4)
  430 D1:D7C4 B7 -  -  -  	or	a, a
  431 D1:D7C5 28 12 -  -  	jr	z, AddChainAnsNumber
  432 D1:D7C7 3D -  -  -  	dec	a
  433 D1:D7C8 28 4E -  -  	jr	z, AddChainAnsVariable
  434 D1:D7CA 3D -  -  -  	dec	a
  435 D1:D7CB 28 6B -  -  	jr	z, AddChainAnsChainPush
  436 D1:D7CD 3D -  -  -  	dec	a
  437 D1:D7CE 28 6C -  -  	jr	z, AddChainAnsChainAns
  438 D1:D7D0 3D -  -  -  	dec	a
  439 D1:D7D1 CA 40 D8 D1 	jp	z, AddChainAnsFunction
  440 D1:D7D5 C3 E2 AE D1 	jp	AddError
  441 D1:D7D9 -  -  -  -  AddChainAnsNumber:
  442 D1:D7D9 B7 -  -  -  	or	a, a
  443 D1:D7DA ED 62 -  -  	sbc	hl, hl
  444 D1:D7DC EB -  -  -  	ex	de, hl
  445 D1:D7DD ED 52 -  -  	sbc	hl, de
  446 D1:D7DF C8 -  -  -  	ret	z
  447 D1:D7E0 1E 06 -  -  	ld	e, 6
  448 D1:D7E2 ED 52 -  -  	sbc	hl, de
  449 D1:D7E4 30 1C -  -  	jr	nc, AddHLDE
  450 D1:D7E6 19 -  -  -  	add	hl, de
  451 D1:D7E7 45 -  -  -  	ld	b, l
  452 D1:D7E8 3A D9 EC D1 	ld	a, (ExprOutput)
  453 D1:D7EC B7 -  -  -  	or	a, a
  454 D1:D7ED 28 09 -  -  	jr	z, ++_
  455 D1:D7EF 3E 23 -  -  	ld	a, 023h
  456 D1:D7F1 CD 26 AD D1 _:	call	InsertA															;	inc hl/de
  457 D1:D7F5 10 FA -  -  	djnz	-_
  458 D1:D7F7 C9 -  -  -  	ret
  459 D1:D7F8 3E 00 -  -  _:	ld	a, OutputIsInDE
  460 D1:D7FA 32 DA EC D1 	ld	(ExprOutput2), a
  461 D1:D7FE 3E 13 -  -  	ld	a, 013h
  462 D1:D800 18 EF -  -  	jr	--_
  463 D1:D802 -  -  -  -  AddHLDE:
  464 D1:D802 19 -  -  -  	add	hl, de
  465 D1:D803 3A D9 EC D1 	ld	a, (ExprOutput)
  466 D1:D807 B7 -  -  -  	or	a, a
  467 D1:D808 3E 11 -  -  	ld	a, 011h
  468 D1:D80A 20 02 -  -  	jr	nz, +_
  469 D1:D80C 3E 21 -  -  	ld	a, 021h
  470 D1:D80E CD 5A AC D1 _:	call	InsertAHL															;	ld hl/de, *
  471 D1:D812 3E 19 -  -  	ld	a, 019h
  472 D1:D814 C3 26 AD D1 	jp	InsertA																;	add hl, de
  473 D1:D818 -  -  -  -  AddChainAnsVariable:
  474 D1:D818 26 17 -  -  	ld	h, 017h
  475 D1:D81A 16 03 -  -  	ld	d, 3
  476 D1:D81C ED 5C -  -  	mlt	de
  477 D1:D81E 7B -  -  -  	ld	a, e
  478 D1:D81F 2E DD -  -  	ld	l, 0DDh
  479 D1:D821 CD 70 1D 02 	call	_SetHLUToA
  480 D1:D825 3A D9 EC D1 	ld	a, (ExprOutput)
  481 D1:D829 B7 -  -  -  	or	a, a
  482 D1:D82A 20 02 -  -  	jr	nz, +_
  483 D1:D82C 26 27 -  -  	ld	h, 027h
  484 D1:D82E CD 5E AC D1 _:	call	InsertHL															;	ld hl/de, (ix+*)
  485 D1:D832 3E 19 -  -  	ld	a, 019h
  486 D1:D834 C3 26 AD D1 	jp	InsertA																;	add hl, de
  487 D1:D838 -  -  -  -  AddChainAnsChainPush:
  488 D1:D838 C3 85 AF D1 	jp	UnknownError
  489 D1:D83C -  -  -  -  AddChainAnsChainAns:
  490 D1:D83C C3 85 AF D1 	jp	UnknownError
  491 D1:D840 -  -  -  -  AddChainAnsFunction:
  492 D1:D840 3A D9 EC D1 	ld	a, (ExprOutput)
  493 D1:D844 87 -  -  -  	add	a, a
  494 D1:D845 87 -  -  -  	add	a, a
  495 D1:D846 87 -  -  -  	add	a, a
  496 D1:D847 87 -  -  -  	add	a, a
  497 D1:D848 C6 D5 -  -  	add	a, 0D5h
  498 D1:D84A CD 26 AD D1 	call	InsertA															;	push hl/de
  499 D1:D84E 7B -  -  -  	ld	a, e
  500 D1:D84F 06 02 -  -  	ld	b, OutputInHL
  501 D1:D851 CD 52 AD D1 	call	GetFunction
  502 D1:D855 3E D1 -  -  	ld	a, 0D1h
  503 D1:D857 CD 26 AD D1 	call	InsertA															;	pop de
  504 D1:D85B 3E 19 -  -  	ld	a, 019h
  505 D1:D85D C3 26 AD D1 	jp	InsertA																;	add hl, de
  506 D1:D861 -  -  -  -  AddFunctionXXX:
  507 D1:D861 DD 7E FC -  	ld	a, (ix-4)
  508 D1:D864 B7 -  -  -  	or	a, a
  509 D1:D865 28 10 -  -  	jr	z, AddFunctionNumber
  510 D1:D867 3D -  -  -  	dec	a
  511 D1:D868 28 18 -  -  	jr	z, AddFunctionVariable
  512 D1:D86A 3D -  -  -  	dec	a
  513 D1:D86B 28 20 -  -  	jr	z, AddFunctionChainPush
  514 D1:D86D 3D -  -  -  	dec	a
  515 D1:D86E 28 21 -  -  	jr	z, AddFunctionChainAns
  516 D1:D870 3D -  -  -  	dec	a
  517 D1:D871 28 3F -  -  	jr	z, AddFunctionFunction
  518 D1:D873 C3 E2 AE D1 	jp	AddError
  519 D1:D877 -  -  -  -  AddFunctionNumber:
  520 D1:D877 79 -  -  -  	ld	a, c
  521 D1:D878 06 02 -  -  	ld	b, OutputInHL
  522 D1:D87A CD 52 AD D1 	call	GetFunction
  523 D1:D87E C3 D9 D7 D1 	jp	AddChainAnsNumber
  524 D1:D882 -  -  -  -  AddFunctionVariable:
  525 D1:D882 79 -  -  -  	ld	a, c
  526 D1:D883 06 02 -  -  	ld	b, OutputInHL
  527 D1:D885 CD 52 AD D1 	call	GetFunction
  528 D1:D889 C3 18 D8 D1 	jp	AddChainAnsVariable
  529 D1:D88D -  -  -  -  AddFunctionChainPush:
  530 D1:D88D C3 85 AF D1 	jp	UnknownError
  531 D1:D891 -  -  -  -  AddFunctionChainAns:
  532 D1:D891 3A D9 EC D1 	ld	a, (ExprOutput)
  533 D1:D895 87 -  -  -  	add	a, a
  534 D1:D896 87 -  -  -  	add	a, a
  535 D1:D897 87 -  -  -  	add	a, a
  536 D1:D898 87 -  -  -  	add	a, a
  537 D1:D899 C6 D5 -  -  	add	a, 0D5h
  538 D1:D89B CD 26 AD D1 	call	InsertA															;	push hl/de
  539 D1:D89F 79 -  -  -  	ld	a, c
  540 D1:D8A0 06 02 -  -  	ld	b, OutputInHL
  541 D1:D8A2 CD 52 AD D1 	call	GetFunction
  542 D1:D8A6 3E D1 -  -  	ld	a, 0D1h
  543 D1:D8A8 CD 26 AD D1 	call	InsertA															;	pop de
  544 D1:D8AC 3E 19 -  -  	ld	a, 019h
  545 D1:D8AE C3 26 AD D1 	jp	InsertA																;	add hl, de
  546 D1:D8B2 -  -  -  -  AddFunctionFunction:
  547 D1:D8B2 7B -  -  -  	ld	a, e
  548 D1:D8B3 06 02 -  -  	ld	b, OutputInHL
  549 D1:D8B5 CD 52 AD D1 	call	GetFunction
  550 D1:D8B9 79 -  -  -  	ld	a, c
  551 D1:D8BA 06 01 -  -  	ld	b, OutputInDE
  552 D1:D8BC FD CB C0 F6 	set	need_push, (iy+fExpression1)
  553 D1:D8C0 CD 52 AD D1 	call	GetFunction
  554 D1:D8C4 3E 19 -  -  	ld	a, 019h
  555 D1:D8C6 C3 26 AD D1 	jp	InsertA																;	add hl, de
  556 D1:D8CA -  -  -  -  	
  557 D1:D8CA -  -  -  -  DivNumberXXX:
  558 D1:D8CA DD 7E FC -  	ld	a, (ix-4)
  559 D1:D8CD B7 -  -  -  	or	a, a
  560 D1:D8CE 28 10 -  -  	jr	z, DivNumberNumber
  561 D1:D8D0 3D -  -  -  	dec	a
  562 D1:D8D1 28 1D -  -  	jr	z, DivNumberVariable
  563 D1:D8D3 3D -  -  -  	dec	a
  564 D1:D8D4 28 26 -  -  	jr	z, DivNumberChainPush
  565 D1:D8D6 3D -  -  -  	dec	a
  566 D1:D8D7 28 27 -  -  	jr	z, DivNumberChainAns
  567 D1:D8D9 3D -  -  -  	dec	a
  568 D1:D8DA 28 39 -  -  	jr	z, DivNumberFunction
  569 D1:D8DC C3 E6 AE D1 	jp	DivError
  570 D1:D8E0 -  -  -  -  DivNumberNumber:
  571 D1:D8E0 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  572 D1:D8E4 C5 -  -  -  	push	bc
  573 D1:D8E5 E1 -  -  -  	pop	hl
  574 D1:D8E6 D5 -  -  -  	push	de
  575 D1:D8E7 C1 -  -  -  	pop	bc
  576 D1:D8E8 CD 44 01 00 	call	__idvrmu
  577 D1:D8EC DD 1F F9 -  	ld	(ix-7), de
  578 D1:D8EF C9 -  -  -  	ret
  579 D1:D8F0 -  -  -  -  DivNumberVariable:
  580 D1:D8F0 3E 21 -  -  	ld	a, 021h
  581 D1:D8F2 C5 -  -  -  	push	bc
  582 D1:D8F3 E1 -  -  -  	pop	hl
  583 D1:D8F4 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  584 D1:D8F8 C3 28 DA D1 	jp	DivChainAnsVariable
  585 D1:D8FC -  -  -  -  DivNumberChainPush:
  586 D1:D8FC C3 85 AF D1 	jp	UnknownError
  587 D1:D900 -  -  -  -  DivNumberChainAns:
  588 D1:D900 11 E5 C1 21 	ld	de, 021C1E5h
  589 D1:D904 C5 -  -  -  	push	bc
  590 D1:D905 E1 -  -  -  	pop	hl
  591 D1:D906 3A D9 EC D1 	ld	a, (ExprOutput)
  592 D1:D90A B7 -  -  -  	or	a, a
  593 D1:D90B 20 02 -  -  	jr	nz, +_
  594 D1:D90D 1E D5 -  -  	ld	e, 0D5h
  595 D1:D90F CD AA AC D1 _:	call	InsertDEHL															;	push hl/de \ pop bc \ ld hl, *
  596 D1:D913 18 74 -  -  	jr	DivInsert
  597 D1:D915 -  -  -  -  DivNumberFunction:
  598 D1:D915 7B -  -  -  	ld	a, e
  599 D1:D916 C5 -  -  -  	push	bc
  600 D1:D917 06 00 -  -  	ld	b, OutputInBC
  601 D1:D919 CD 52 AD D1 	call	GetFunction
  602 D1:D91D 3E 21 -  -  	ld	a, 021h
  603 D1:D91F E1 -  -  -  	pop	hl
  604 D1:D920 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
  605 D1:D924 18 63 -  -  	jr	DivInsert
  606 D1:D926 -  -  -  -  DivVariableXXX:
  607 D1:D926 DD 7E FC -  	ld	a, (ix-4)
  608 D1:D929 B7 -  -  -  	or	a, a
  609 D1:D92A 28 12 -  -  	jr	z, DivVariableNumber
  610 D1:D92C 3D -  -  -  	dec	a
  611 D1:D92D 28 17 -  -  	jr	z, DivVariableVariable
  612 D1:D92F 3D -  -  -  	dec	a
  613 D1:D930 28 2E -  -  	jr	z, DivVariableChainPush
  614 D1:D932 3D -  -  -  	dec	a
  615 D1:D933 28 2F -  -  	jr	z, DivVariableChainAns
  616 D1:D935 3D -  -  -  	dec	a
  617 D1:D936 CA 7E D9 D1 	jp	z, DivVariableFunction
  618 D1:D93A C3 E6 AE D1 	jp	DivError
  619 D1:D93E -  -  -  -  DivVariableNumber:
  620 D1:D93E CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  621 D1:D942 C3 FA D9 D1 	jp	DivChainAnsNumber
  622 D1:D946 -  -  -  -  DivVariableVariable:
  623 D1:D946 79 -  -  -  	ld	a, c
  624 D1:D947 BB -  -  -  	cp	e
  625 D1:D948 20 0E -  -  	jr	nz, +_
  626 D1:D94A FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  627 D1:D94E 36 00 -  -  	ld	(hl), typeNumber
  628 D1:D950 11 01 00 00 	ld	de, 1
  629 D1:D954 23 -  -  -  	inc	hl
  630 D1:D955 ED 1F -  -  	ld	(hl), de
  631 D1:D957 C9 -  -  -  	ret
  632 D1:D958 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
  633 D1:D95C C3 28 DA D1 	jp	DivChainAnsVariable
  634 D1:D960 -  -  -  -  DivVariableChainPush:
  635 D1:D960 C3 85 AF D1 	jp	UnknownError
  636 D1:D964 -  -  -  -  DivVariableChainAns:
  637 D1:D964 3A D9 EC D1 	ld	a, (ExprOutput)
  638 D1:D968 87 -  -  -  	add	a, a
  639 D1:D969 87 -  -  -  	add	a, a
  640 D1:D96A 87 -  -  -  	add	a, a
  641 D1:D96B 87 -  -  -  	add	a, a
  642 D1:D96C C6 D5 -  -  	add	a, 0D5h
  643 D1:D96E CD 26 AD D1 	call	InsertA															;	push hl/de
  644 D1:D972 3E C1 -  -  	ld	a, 0C1h
  645 D1:D974 CD 26 AD D1 	call	InsertA															;	pop bc
  646 D1:D978 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  647 D1:D97C 18 0B -  -  	jr	DivInsert
  648 D1:D97E -  -  -  -  DivVariableFunction:
  649 D1:D97E 7B -  -  -  	ld	a, e
  650 D1:D97F 06 00 -  -  	ld	b, OutputInBC
  651 D1:D981 CD 52 AD D1 	call	GetFunction
  652 D1:D985 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  653 D1:D989 -  -  -  -  DivInsert:
  654 D1:D989 3E 00 -  -  	ld	a, OutputIsInDE
  655 D1:D98B 32 DA EC D1 	ld	(ExprOutput2), a
  656 D1:D98F 3E CD -  -  	ld	a, 0CDh
  657 D1:D991 21 44 01 00 	ld	hl, __idvrmu
  658 D1:D995 C3 5A AC D1 	jp	InsertAHL															;	call __idvrmu
  659 D1:D999 -  -  -  -  DivChainPushXXX:
  660 D1:D999 DD 7E FC -  	ld	a, (ix-4)
  661 D1:D99C B7 -  -  -  	or	a, a
  662 D1:D99D 28 12 -  -  	jr	z, DivChainPushNumber
  663 D1:D99F 3D -  -  -  	dec	a
  664 D1:D9A0 28 17 -  -  	jr	z, DivChainPushVariable
  665 D1:D9A2 3D -  -  -  	dec	a
  666 D1:D9A3 28 1C -  -  	jr	z, DivChainPushChainPush
  667 D1:D9A5 3D -  -  -  	dec	a
  668 D1:D9A6 28 1D -  -  	jr	z, DivChainPushChainAns
  669 D1:D9A8 3D -  -  -  	dec	a
  670 D1:D9A9 CA DA D9 D1 	jp	z, DivChainPushFunction
  671 D1:D9AD C3 E6 AE D1 	jp	DivError
  672 D1:D9B1 -  -  -  -  DivChainPushNumber:
  673 D1:D9B1 3E E1 -  -  	ld	a, 0E1h
  674 D1:D9B3 CD 26 AD D1 	call	InsertA															;	pop hl
  675 D1:D9B7 18 41 -  -  	jr	DivChainAnsNumber
  676 D1:D9B9 -  -  -  -  DivChainPushVariable:
  677 D1:D9B9 3E E1 -  -  	ld	a, 0E1h
  678 D1:D9BB CD 26 AD D1 	call	InsertA															;	pop hl
  679 D1:D9BF 18 67 -  -  	jr	DivChainAnsVariable
  680 D1:D9C1 -  -  -  -  DivChainPushChainPush:
  681 D1:D9C1 C3 85 AF D1 	jp	UnknownError
  682 D1:D9C5 -  -  -  -  DivChainPushChainAns:
  683 D1:D9C5 21 E5 C1 E1 	ld	hl, 0E1C1E5h
  684 D1:D9C9 3A D9 EC D1 	ld	a, (ExprOutput)
  685 D1:D9CD 87 -  -  -  	add	a, a
  686 D1:D9CE 87 -  -  -  	add	a, a
  687 D1:D9CF 87 -  -  -  	add	a, a
  688 D1:D9D0 87 -  -  -  	add	a, a
  689 D1:D9D1 C6 D5 -  -  	add	a, 0D5h
  690 D1:D9D3 6F -  -  -  	ld	l, a
  691 D1:D9D4 CD 5E AC D1 	call	InsertHL															;	push hl/de \ pop bc \ pop hl
  692 D1:D9D8 18 AF -  -  _:	jr	DivInsert
  693 D1:D9DA -  -  -  -  DivChainPushFunction:
  694 D1:D9DA 3E E1 -  -  	ld	a, 0E1h
  695 D1:D9DC CD 26 AD D1 	call	InsertA															;	pop hl
  696 D1:D9E0 18 58 -  -  	jr	DivChainAnsFunction
  697 D1:D9E2 -  -  -  -  DivChainAnsXXX:
  698 D1:D9E2 DD 7E FC -  	ld	a, (ix-4)
  699 D1:D9E5 B7 -  -  -  	or	a, a
  700 D1:D9E6 28 12 -  -  	jr	z, DivChainAnsNumber
  701 D1:D9E8 3D -  -  -  	dec	a
  702 D1:D9E9 28 3D -  -  	jr	z, DivChainAnsVariable
  703 D1:D9EB 3D -  -  -  	dec	a
  704 D1:D9EC 28 44 -  -  	jr	z, DivChainAnsChainPush
  705 D1:D9EE 3D -  -  -  	dec	a
  706 D1:D9EF 28 45 -  -  	jr	z, DivChainAnsChainAns
  707 D1:D9F1 3D -  -  -  	dec	a
  708 D1:D9F2 CA 3A DA D1 	jp	z, DivChainAnsFunction
  709 D1:D9F6 C3 E6 AE D1 	jp	DivError
  710 D1:D9FA -  -  -  -  DivChainAnsNumber:
  711 D1:D9FA CD D5 AC D1 	call	MaybeChangeDEToHL
  712 D1:D9FE 3E 01 -  -  	ld	a, 001h
  713 D1:DA00 EB -  -  -  	ex	de, hl
  714 D1:DA01 11 00 01 00 	ld	de, 256
  715 D1:DA05 B7 -  -  -  	or	a, a
  716 D1:DA06 ED 52 -  -  	sbc	hl, de
  717 D1:DA08 30 17 -  -  	jr	nc, +_
  718 D1:DA0A 19 -  -  -  	add	hl, de
  719 D1:DA0B 4D -  -  -  	ld	c, l
  720 D1:DA0C 3E 3E -  -  	ld	a, 03Eh
  721 D1:DA0E CD 26 AD D1 	call	InsertA															;	ld a, *
  722 D1:DA12 79 -  -  -  	ld	a, c
  723 D1:DA13 CD 26 AD D1 	call	InsertA															;	ld a, *
  724 D1:DA17 3E CD -  -  	ld	a, 0CDh
  725 D1:DA19 21 90 1D 02 	ld	hl, _DivHLByA
  726 D1:DA1D C3 5A AC D1 	jp	InsertAHL															;	call _DivHLByA
  727 D1:DA21 19 -  -  -  _:	add	hl, de
  728 D1:DA22 CD 5A AC D1 	call	InsertAHL															;	ld bc, *
  729 D1:DA26 18 B0 -  -  _:	jr	---_
  730 D1:DA28 -  -  -  -  DivChainAnsVariable:
  731 D1:DA28 CD D5 AC D1 	call	MaybeChangeDEToHL
  732 D1:DA2C CD 98 AC D1 	call	InsertIXC
  733 D1:DA30 18 F4 -  -  	jr	-_
  734 D1:DA32 -  -  -  -  DivChainAnsChainPush:
  735 D1:DA32 C3 85 AF D1 	jp	UnknownError
  736 D1:DA36 -  -  -  -  DivChainAnsChainAns:
  737 D1:DA36 C3 85 AF D1 	jp	UnknownError
  738 D1:DA3A -  -  -  -  DivChainAnsFunction:
  739 D1:DA3A 3A D9 EC D1 	ld	a, (ExprOutput)
  740 D1:DA3E 87 -  -  -  	add	a, a
  741 D1:DA3F 87 -  -  -  	add	a, a
  742 D1:DA40 87 -  -  -  	add	a, a
  743 D1:DA41 87 -  -  -  	add	a, a
  744 D1:DA42 C6 D5 -  -  	add	a, 0D5h
  745 D1:DA44 CD 26 AD D1 	call	InsertA															;	push hl/de
  746 D1:DA48 7B -  -  -  	ld	a, e
  747 D1:DA49 06 00 -  -  	ld	b, OutputInBC
  748 D1:DA4B CD 52 AD D1 	call	GetFunction
  749 D1:DA4F 3E E1 -  -  	ld	a, 0E1h
  750 D1:DA51 CD 26 AD D1 	call	InsertA															;	pop hl
  751 D1:DA55 18 CF -  -  _:	jr	--_
  752 D1:DA57 -  -  -  -  DivFunctionXXX:
  753 D1:DA57 DD 7E FC -  	ld	a, (ix-4)
  754 D1:DA5A B7 -  -  -  	or	a, a
  755 D1:DA5B 28 10 -  -  	jr	z, DivFunctionNumber
  756 D1:DA5D 3D -  -  -  	dec	a
  757 D1:DA5E 28 18 -  -  	jr	z, DivFunctionVariable
  758 D1:DA60 3D -  -  -  	dec	a
  759 D1:DA61 28 20 -  -  	jr	z, DivFunctionChainPush
  760 D1:DA63 3D -  -  -  	dec	a
  761 D1:DA64 28 21 -  -  	jr	z, DivFunctionChainAns
  762 D1:DA66 3D -  -  -  	dec	a
  763 D1:DA67 28 3B -  -  	jr	z, DivFunctionFunction
  764 D1:DA69 C3 E6 AE D1 	jp	DivError
  765 D1:DA6D -  -  -  -  DivFunctionNumber:
  766 D1:DA6D 79 -  -  -  	ld	a, c
  767 D1:DA6E 06 02 -  -  	ld	b, OutputInHL
  768 D1:DA70 CD 52 AD D1 	call	GetFunction
  769 D1:DA74 C3 FA D9 D1 	jp	DivChainAnsNumber
  770 D1:DA78 -  -  -  -  DivFunctionVariable:
  771 D1:DA78 79 -  -  -  	ld	a, c
  772 D1:DA79 06 02 -  -  	ld	b, OutputInHL
  773 D1:DA7B CD 52 AD D1 	call	GetFunction
  774 D1:DA7F C3 28 DA D1 	jp	DivChainAnsVariable
  775 D1:DA83 -  -  -  -  DivFunctionChainPush:
  776 D1:DA83 C3 85 AF D1 	jp	UnknownError
  777 D1:DA87 -  -  -  -  DivFunctionChainAns:
  778 D1:DA87 3A D9 EC D1 	ld	a, (ExprOutput)
  779 D1:DA8B 87 -  -  -  	add	a, a
  780 D1:DA8C 87 -  -  -  	add	a, a
  781 D1:DA8D 87 -  -  -  	add	a, a
  782 D1:DA8E 87 -  -  -  	add	a, a
  783 D1:DA8F C6 D5 -  -  	add	a, 0D5h
  784 D1:DA91 CD 26 AD D1 	call	InsertA															;	push hl/de
  785 D1:DA95 3E C1 -  -  	ld	a, 0C1h
  786 D1:DA97 CD 26 AD D1 	call	InsertA															;	pop bc
  787 D1:DA9B 79 -  -  -  	ld	a, c
  788 D1:DA9C 06 02 -  -  	ld	b, OutputInHL
  789 D1:DA9E CD 52 AD D1 	call	GetFunction
  790 D1:DAA2 18 B1 -  -  	jr	-_
  791 D1:DAA4 -  -  -  -  DivFunctionFunction:
  792 D1:DAA4 7B -  -  -  	ld	a, e
  793 D1:DAA5 06 00 -  -  	ld	b, OutputInBC
  794 D1:DAA7 CD 52 AD D1 	call	GetFunction
  795 D1:DAAB 79 -  -  -  	ld	a, c
  796 D1:DAAC 06 02 -  -  	ld	b, OutputInHL
  797 D1:DAAE CD 52 AD D1 	call	GetFunction
  798 D1:DAB2 18 A1 -  -  	jr	-_
  799 D1:DAB4 -  -  -  -  	
  800 D1:DAB4 -  -  -  -  MulNumberXXX:
  801 D1:DAB4 DD 7E FC -  	ld	a, (ix-4)
  802 D1:DAB7 B7 -  -  -  	or	a, a
  803 D1:DAB8 28 10 -  -  	jr	z, MulNumberNumber
  804 D1:DABA 3D -  -  -  	dec	a
  805 D1:DABB 28 1A -  -  	jr	z, MulNumberVariable
  806 D1:DABD 3D -  -  -  	dec	a
  807 D1:DABE 28 1E -  -  	jr	z, MulNumberChainPush
  808 D1:DAC0 3D -  -  -  	dec	a
  809 D1:DAC1 28 1F -  -  	jr	z, MulNumberChainAns
  810 D1:DAC3 3D -  -  -  	dec	a
  811 D1:DAC4 28 22 -  -  	jr	z, MulNumberFunction
  812 D1:DAC6 C3 EA AE D1 	jp	MulError
  813 D1:DACA -  -  -  -  MulNumberNumber:
  814 D1:DACA FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
  815 D1:DACE EB -  -  -  	ex	de, hl
  816 D1:DACF CD 54 01 00 	call	__imulu
  817 D1:DAD3 DD 2F F9 -  	ld	(ix-7), hl
  818 D1:DAD6 C9 -  -  -  	ret
  819 D1:DAD7 -  -  -  -  MulNumberVariable:
  820 D1:DAD7 C5 -  -  -  	push	bc
  821 D1:DAD8 E1 -  -  -  	pop	hl
  822 D1:DAD9 EB -  -  -  	ex	de, hl
  823 D1:DADA E5 -  -  -  	push	hl
  824 D1:DADB C1 -  -  -  	pop	bc
  825 D1:DADC 18 2B -  -  	jr	MulVariableNumber
  826 D1:DADE -  -  -  -  MulNumberChainPush:
  827 D1:DADE C3 85 AF D1 	jp	UnknownError
  828 D1:DAE2 -  -  -  -  MulNumberChainAns:
  829 D1:DAE2 C5 -  -  -  	push	bc
  830 D1:DAE3 D1 -  -  -  	pop	de
  831 D1:DAE4 C3 A6 DB D1 	jp	MulChainAnsNumber
  832 D1:DAE8 -  -  -  -  MulNumberFunction:
  833 D1:DAE8 C5 -  -  -  	push	bc
  834 D1:DAE9 E1 -  -  -  	pop	hl
  835 D1:DAEA EB -  -  -  	ex	de, hl
  836 D1:DAEB E5 -  -  -  	push	hl
  837 D1:DAEC C1 -  -  -  	pop	bc
  838 D1:DAED C3 79 DC D1 	jp	MulFunctionNumber
  839 D1:DAF1 -  -  -  -  MulVariableXXX:
  840 D1:DAF1 DD 7E FC -  	ld	a, (ix-4)
  841 D1:DAF4 B7 -  -  -  	or	a, a
  842 D1:DAF5 28 12 -  -  	jr	z, MulVariableNumber
  843 D1:DAF7 3D -  -  -  	dec	a
  844 D1:DAF8 28 17 -  -  	jr	z, MulVariableVariable
  845 D1:DAFA 3D -  -  -  	dec	a
  846 D1:DAFB 28 1C -  -  	jr	z, MulVariableChainPush
  847 D1:DAFD 3D -  -  -  	dec	a
  848 D1:DAFE 28 24 -  -  	jr	z, MulVariableChainAns
  849 D1:DB00 3D -  -  -  	dec	a
  850 D1:DB01 CA 29 DB D1 	jp	z, MulVariableFunction
  851 D1:DB05 C3 EA AE D1 	jp	MulError
  852 D1:DB09 -  -  -  -  MulVariableNumber:
  853 D1:DB09 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  854 D1:DB0D C3 A6 DB D1 	jp	MulChainAnsNumber
  855 D1:DB11 -  -  -  -  MulVariableVariable:
  856 D1:DB11 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
  857 D1:DB15 C3 24 DC D1 	jp	MulChainAnsVariable
  858 D1:DB19 -  -  -  -  MulVariableChainPush:
  859 D1:DB19 3E E1 -  -  	ld	a, 0E1h
  860 D1:DB1B CD 26 AD D1 	call	InsertA															;	pop hl
  861 D1:DB1F 59 -  -  -  	ld	e, c
  862 D1:DB20 C3 24 DC D1 	jp	MulChainAnsVariable
  863 D1:DB24 -  -  -  -  MulVariableChainAns:
  864 D1:DB24 59 -  -  -  	ld	e, c
  865 D1:DB25 C3 24 DC D1 	jp	MulChainAnsVariable
  866 D1:DB29 -  -  -  -  MulVariableFunction:
  867 D1:DB29 7B -  -  -  	ld	a, e
  868 D1:DB2A 06 02 -  -  	ld	b, OutputInHL
  869 D1:DB2C CD 52 AD D1 	call	GetFunction
  870 D1:DB30 CD 98 AC D1 	call	InsertIXC
  871 D1:DB34 21 54 01 00 	ld	hl, __imulu
  872 D1:DB38 C3 7C AC D1 	jp	InsertCallHL															;	call __imulu
  873 D1:DB3C -  -  -  -  MulChainPushXXX:
  874 D1:DB3C DD 7E FC -  	ld	a, (ix-4)
  875 D1:DB3F B7 -  -  -  	or	a, a
  876 D1:DB40 28 12 -  -  	jr	z, MulChainPushNumber
  877 D1:DB42 3D -  -  -  	dec	a
  878 D1:DB43 28 17 -  -  	jr	z, MulChainPushVariable
  879 D1:DB45 3D -  -  -  	dec	a
  880 D1:DB46 28 1E -  -  	jr	z, MulChainPushChainPush
  881 D1:DB48 3D -  -  -  	dec	a
  882 D1:DB49 28 1F -  -  	jr	z, MulChainPushChainAns
  883 D1:DB4B 3D -  -  -  	dec	a
  884 D1:DB4C CA 7E DB D1 	jp	z, MulChainPushFunction
  885 D1:DB50 C3 EA AE D1 	jp	MulError
  886 D1:DB54 -  -  -  -  MulChainPushNumber:
  887 D1:DB54 3E E1 -  -  	ld	a, 0E1h
  888 D1:DB56 CD 26 AD D1 	call	InsertA															;	pop hl
  889 D1:DB5A 18 4A -  -  	jr	MulChainAnsNumber
  890 D1:DB5C -  -  -  -  MulChainPushVariable:
  891 D1:DB5C 3E E1 -  -  	ld	a, 0E1h
  892 D1:DB5E CD 26 AD D1 	call	InsertA															;	pop hl
  893 D1:DB62 C3 24 DC D1 	jp	MulChainAnsVariable
  894 D1:DB66 -  -  -  -  MulChainPushChainPush:
  895 D1:DB66 C3 85 AF D1 	jp	UnknownError
  896 D1:DB6A -  -  -  -  MulChainPushChainAns:
  897 D1:DB6A CD D5 AC D1 	call	MaybeChangeDEToHL
  898 D1:DB6E 3E C1 -  -  	ld	a, 0C1h
  899 D1:DB70 CD 26 AD D1 	call	InsertA															;	pop bc
  900 D1:DB74 3E CD -  -  	ld	a, 0CDh
  901 D1:DB76 21 54 01 00 	ld	hl, __imulu
  902 D1:DB7A C3 5A AC D1 	jp	InsertAHL															;	call __imulu
  903 D1:DB7E -  -  -  -  MulChainPushFunction:
  904 D1:DB7E 3E E1 -  -  	ld	a, 0E1h
  905 D1:DB80 CD 26 AD D1 	call	InsertA															;	pop hl
  906 D1:DB84 C3 3E DC D1 	jp	MulChainAnsFunction
  907 D1:DB88 -  -  -  -  MulChainAnsXXX:
  908 D1:DB88 DD 7E FC -  	ld	a, (ix-4)
  909 D1:DB8B B7 -  -  -  	or	a, a
  910 D1:DB8C 28 18 -  -  	jr	z, MulChainAnsNumber
  911 D1:DB8E 3D -  -  -  	dec	a
  912 D1:DB8F CA 24 DC D1 	jp	z, MulChainAnsVariable
  913 D1:DB93 3D -  -  -  	dec	a
  914 D1:DB94 CA 36 DC D1 	jp	z, MulChainAnsChainPush
  915 D1:DB98 3D -  -  -  	dec	a
  916 D1:DB99 CA 3A DC D1 	jp	z, MulChainAnsChainAns
  917 D1:DB9D 3D -  -  -  	dec	a
  918 D1:DB9E CA 3E DC D1 	jp	z, MulChainAnsFunction
  919 D1:DBA2 C3 EA AE D1 	jp	MulError
  920 D1:DBA6 -  -  -  -  MulChainAnsNumber:
  921 D1:DBA6 CD 4C 1D 02 	call	_ChkDEIs0
  922 D1:DBAA 20 08 -  -  	jr	nz, +_
  923 D1:DBAC 21 B7 ED 62 	ld	hl, 062EDB7h
  924 D1:DBB0 C3 5E AC D1 	jp	InsertHL
  925 D1:DBB4 D5 -  -  -  _:	push	de
  926 D1:DBB5 E1 -  -  -  	pop	hl
  927 D1:DBB6 06 00 -  -  	ld	b, 0
  928 D1:DBB8 3E 1A -  -  	ld	a, 26
  929 D1:DBBA 3D -  -  -  _:	dec	a
  930 D1:DBBB 29 -  -  -  	add	hl, hl
  931 D1:DBBC 30 FC -  -  	jr	nc, -_
  932 D1:DBBE 88 -  -  -  _:	adc	a, b
  933 D1:DBBF ED 6A -  -  	adc	hl, hl
  934 D1:DBC1 20 FB -  -  	jr	nz, -_
  935 D1:DBC3 CB 10 -  -  	rl	b
  936 D1:DBC5 20 02 -  -  	jr	nz, +_
  937 D1:DBC7 D6 03 -  -  	sub	a, 3
  938 D1:DBC9 FE 0A -  -  _:	cp	a, 10
  939 D1:DBCB 38 28 -  -  	jr	c, ++_
  940 D1:DBCD CD D5 AC D1 	call	MaybeChangeDEToHL
  941 D1:DBD1 21 00 FF FF 	ld	hl, -256
  942 D1:DBD5 19 -  -  -  	add	hl, de
  943 D1:DBD6 38 0E -  -  	jr	c, +_
  944 D1:DBD8 21 3E 00 CD 	ld	hl, 0CD003Eh
  945 D1:DBDC 63 -  -  -  	ld	h, e
  946 D1:DBDD 11 50 01 00 	ld	de, __imul_b
  947 D1:DBE1 EB -  -  -  	ex	de, hl
  948 D1:DBE2 C3 AA AC D1 	jp	InsertDEHL
  949 D1:DBE6 3E 01 -  -  _:	ld	a, 001h
  950 D1:DBE8 EB -  -  -  	ex	de, hl
  951 D1:DBE9 CD 5A AC D1 	call	InsertAHL
  952 D1:DBED 21 54 01 00 	ld	hl, __imulu
  953 D1:DBF1 C3 7C AC D1 	jp	InsertCallHL
  954 D1:DBF5 10 15 -  -  _:	djnz	+_
  955 D1:DBF7 3A D9 EC D1 	ld	a, (ExprOutput)
  956 D1:DBFB 0F -  -  -  	rrca
  957 D1:DBFC 3F -  -  -  	ccf
  958 D1:DBFD 9F -  -  -  	sbc	a, a
  959 D1:DBFE E6 F0 -  -  	and	a, 0D5h - 0E5h
  960 D1:DC00 C6 E5 -  -  	add	a, 0E5h
  961 D1:DC02 CD 26 AD D1 	call	InsertA
  962 D1:DC06 EE 34 -  -  	xor	a, 0E5h ^ 0D1h 										; == 0D5h ^ 0E1h
  963 D1:DC08 CD 26 AD D1 	call	InsertA
  964 D1:DC0C EB -  -  -  _:	ex	de, hl
  965 D1:DC0D 37 -  -  -  	scf
  966 D1:DC0E ED 6A -  -  _:	adc	hl, hl
  967 D1:DC10 30 FC -  -  	jr	nc, -_
  968 D1:DC12 B7 -  -  -  _:	or	a, a
  969 D1:DC13 ED 6A -  -  	adc	hl, hl
  970 D1:DC15 C8 -  -  -  	ret	z
  971 D1:DC16 3E 29 -  -  	ld	a, 029h
  972 D1:DC18 CD 26 AD D1 	call	InsertA
  973 D1:DC1C 3E 19 -  -  	ld	a, 019h
  974 D1:DC1E DC 26 AD D1 	call	c, InsertA
  975 D1:DC22 18 EE -  -  	jr	-_
  976 D1:DC24 -  -  -  -  MulChainAnsVariable:
  977 D1:DC24 CD D5 AC D1 	call	MaybeChangeDEToHL
  978 D1:DC28 CD 98 AC D1 	call	InsertIXC															;	ld bc, (ix+*)
  979 D1:DC2C 3E CD -  -  	ld	a, 0CDh
  980 D1:DC2E 21 54 01 00 	ld	hl, __imulu
  981 D1:DC32 C3 5A AC D1 	jp	InsertAHL															;	call __imulu
  982 D1:DC36 -  -  -  -  MulChainAnsChainPush:
  983 D1:DC36 C3 85 AF D1 	jp	UnknownError
  984 D1:DC3A -  -  -  -  MulChainAnsChainAns:
  985 D1:DC3A C3 85 AF D1 	jp	UnknownError
  986 D1:DC3E -  -  -  -  MulChainAnsFunction:
  987 D1:DC3E 3A D9 EC D1 	ld	a, (ExprOutput)
  988 D1:DC42 87 -  -  -  	add	a, a
  989 D1:DC43 87 -  -  -  	add	a, a
  990 D1:DC44 87 -  -  -  	add	a, a
  991 D1:DC45 87 -  -  -  	add	a, a
  992 D1:DC46 C6 D5 -  -  	add	a, 0D5h
  993 D1:DC48 CD 26 AD D1 	call	InsertA															;	push hl/de
  994 D1:DC4C 7B -  -  -  	ld	a, e
  995 D1:DC4D 06 00 -  -  	ld	b, OutputInBC
  996 D1:DC4F CD 52 AD D1 	call	GetFunction
  997 D1:DC53 3E E1 -  -  	ld	a, 0E1h
  998 D1:DC55 CD 26 AD D1 	call	InsertA															;	pop hl
  999 D1:DC59 3E CD -  -  	ld	a, 0CDh
 1000 D1:DC5B 21 54 01 00 	ld	hl, __imulu
 1001 D1:DC5F C3 5A AC D1 	jp	InsertAHL															;	call __imulu
 1002 D1:DC63 -  -  -  -  MulFunctionXXX:
 1003 D1:DC63 DD 7E FC -  	ld	a, (ix-4)
 1004 D1:DC66 B7 -  -  -  	or	a, a
 1005 D1:DC67 28 10 -  -  	jr	z, MulFunctionNumber
 1006 D1:DC69 3D -  -  -  	dec	a
 1007 D1:DC6A 28 18 -  -  	jr	z, MulFunctionVariable
 1008 D1:DC6C 3D -  -  -  	dec	a
 1009 D1:DC6D 28 20 -  -  	jr	z, MulFunctionChainPush
 1010 D1:DC6F 3D -  -  -  	dec	a
 1011 D1:DC70 28 21 -  -  	jr	z, MulFunctionChainAns
 1012 D1:DC72 3D -  -  -  	dec	a
 1013 D1:DC73 28 21 -  -  	jr	z, MulFunctionFunction
 1014 D1:DC75 C3 EA AE D1 	jp	MulError
 1015 D1:DC79 -  -  -  -  MulFunctionNumber:
 1016 D1:DC79 79 -  -  -  	ld	a, c
 1017 D1:DC7A 06 02 -  -  	ld	b, OutputInHL
 1018 D1:DC7C CD 52 AD D1 	call	GetFunction
 1019 D1:DC80 C3 A6 DB D1 	jp	MulChainAnsNumber
 1020 D1:DC84 -  -  -  -  MulFunctionVariable:
 1021 D1:DC84 79 -  -  -  	ld	a, c
 1022 D1:DC85 06 02 -  -  	ld	b, OutputInHL
 1023 D1:DC87 CD 52 AD D1 	call	GetFunction
 1024 D1:DC8B C3 24 DC D1 	jp	MulChainAnsVariable
 1025 D1:DC8F -  -  -  -  MulFunctionChainPush:
 1026 D1:DC8F C3 85 AF D1 	jp	UnknownError
 1027 D1:DC93 -  -  -  -  MulFunctionChainAns:
 1028 D1:DC93 59 -  -  -  	ld	e, c
 1029 D1:DC94 18 A8 -  -  	jr	MulChainAnsFunction
 1030 D1:DC96 -  -  -  -  MulFunctionFunction:
 1031 D1:DC96 7B -  -  -  	ld	a, e
 1032 D1:DC97 06 00 -  -  	ld	b, OutputInBC
 1033 D1:DC99 CD 52 AD D1 	call	GetFunction
 1034 D1:DC9D 79 -  -  -  	ld	a, c
 1035 D1:DC9E 06 02 -  -  	ld	b, OutputInHL
 1036 D1:DCA0 CD 52 AD D1 	call	GetFunction
 1037 D1:DCA4 3E CD -  -  	ld	a, 0CDh
 1038 D1:DCA6 21 54 01 00 	ld	hl, __imulu
 1039 D1:DCAA C3 5A AC D1 	jp	InsertAHL															;	call __imulu
 1040 D1:DCAE -  -  -  -  
 1041 D1:DCAE -  -  -  -  SwapLEToGE:
 1042 D1:DCAE 3E 6E -  -  	ld	a, tGE
 1043 D1:DCB0 18 02 -  -  	jr	$+4	
 1044 D1:DCB2 -  -  -  -  SwapLTToGT:
 1045 D1:DCB2 3E 6C -  -  	ld	a, tGT
 1046 D1:DCB4 C5 -  -  -  	push	bc
 1047 D1:DCB5 E1 -  -  -  	pop	hl
 1048 D1:DCB6 DD 4E FC -  	ld	c, (ix-4)
 1049 D1:DCB9 DD 46 F8 -  	ld	b, (ix-8)
 1050 D1:DCBC DD 70 FC -  	ld	(ix-4), b
 1051 D1:DCBF DD 71 F8 -  	ld	(ix-8), c
 1052 D1:DCC2 EB -  -  -  	ex	de, hl
 1053 D1:DCC3 E5 -  -  -  	push	hl
 1054 D1:DCC4 C1 -  -  -  	pop	bc
 1055 D1:DCC5 C9 -  -  -  	ret
 1056 D1:DCC6 -  -  -  -  
 1057 D1:DCC6 -  -  -  -  GLETNumberXXX:
 1058 D1:DCC6 DD 7E FC -  	ld	a, (ix-4)
 1059 D1:DCC9 B7 -  -  -  	or	a, a
 1060 D1:DCCA 28 10 -  -  	jr	z, GLETNumberNumber
 1061 D1:DCCC 3D -  -  -  	dec	a
 1062 D1:DCCD 28 25 -  -  	jr	z, GLETNumberVariable
 1063 D1:DCCF 3D -  -  -  	dec	a
 1064 D1:DCD0 28 2E -  -  	jr	z, GLETNumberChainPush
 1065 D1:DCD2 3D -  -  -  	dec	a
 1066 D1:DCD3 28 2F -  -  	jr	z, GLETNumberChainAns
 1067 D1:DCD5 3D -  -  -  	dec	a
 1068 D1:DCD6 28 3A -  -  	jr	z, GLETNumberFunction
 1069 D1:DCD8 C3 EE AE D1 	jp	GLETError
 1070 D1:DCDC -  -  -  -  GLETNumberNumber:
 1071 D1:DCDC FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1072 D1:DCE0 C5 -  -  -  	push	bc
 1073 D1:DCE1 E1 -  -  -  	pop	hl
 1074 D1:DCE2 3A F6 31 D0 	ld	a, (tempToken)
 1075 D1:DCE6 FE 6E -  -  	cp	tGE
 1076 D1:DCE8 28 01 -  -  	jr	z, +_
 1077 D1:DCEA 37 -  -  -  	scf
 1078 D1:DCEB ED 52 -  -  _:	sbc	hl, de
 1079 D1:DCED ED 62 -  -  	sbc	hl, hl
 1080 D1:DCEF 23 -  -  -  	inc	hl
 1081 D1:DCF0 DD 2F F9 -  	ld	(ix-7), hl
 1082 D1:DCF3 C9 -  -  -  	ret
 1083 D1:DCF4 -  -  -  -  GLETNumberVariable:
 1084 D1:DCF4 3E 21 -  -  	ld	a, 021h
 1085 D1:DCF6 C5 -  -  -  	push	bc
 1086 D1:DCF7 E1 -  -  -  	pop	hl
 1087 D1:DCF8 CD 5A AC D1 	call	InsertAHL															;	ld hl, *
 1088 D1:DCFC C3 10 DE D1 	jp	GLETChainAnsVariable
 1089 D1:DD00 -  -  -  -  GLETNumberChainPush:
 1090 D1:DD00 C3 85 AF D1 	jp	UnknownError
 1091 D1:DD04 -  -  -  -  GLETNumberChainAns:
 1092 D1:DD04 CD CB AC D1 	call	MaybeChangeHLToDE
 1093 D1:DD08 3E 21 -  -  	ld	a, 021h
 1094 D1:DD0A C5 -  -  -  	push	bc
 1095 D1:DD0B E1 -  -  -  	pop	hl
 1096 D1:DD0C CD 5A AC D1 	call	InsertAHL															;	ld hl, *
 1097 D1:DD10 18 6F -  -  	jr	GLETInsert
 1098 D1:DD12 -  -  -  -  GLETNumberFunction:
 1099 D1:DD12 7B -  -  -  	ld	a, e
 1100 D1:DD13 C5 -  -  -  	push	bc
 1101 D1:DD14 06 01 -  -  	ld	b, OutputInDE
 1102 D1:DD16 CD 52 AD D1 	call	GetFunction
 1103 D1:DD1A 3E 21 -  -  	ld	a, 021h
 1104 D1:DD1C E1 -  -  -  	pop	hl
 1105 D1:DD1D CD 5A AC D1 	call	InsertAHL															;	ld hl, *
 1106 D1:DD21 18 5E -  -  	jr	GLETInsert
 1107 D1:DD23 -  -  -  -  GLETVariableXXX:
 1108 D1:DD23 DD 7E FC -  	ld	a, (ix-4)
 1109 D1:DD26 B7 -  -  -  	or	a, a
 1110 D1:DD27 28 12 -  -  	jr	z, GLETVariableNumber
 1111 D1:DD29 3D -  -  -  	dec	a
 1112 D1:DD2A 28 17 -  -  	jr	z, GLETVariableVariable
 1113 D1:DD2C 3D -  -  -  	dec	a
 1114 D1:DD2D 28 39 -  -  	jr	z, GLETVariableChainPush
 1115 D1:DD2F 3D -  -  -  	dec	a
 1116 D1:DD30 28 3A -  -  	jr	z, GLETVariableChainAns
 1117 D1:DD32 3D -  -  -  	dec	a
 1118 D1:DD33 CA 76 DD D1 	jp	z, GLETVariableFunction
 1119 D1:DD37 C3 EE AE D1 	jp	GLETError
 1120 D1:DD3B -  -  -  -  GLETVariableNumber:
 1121 D1:DD3B CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1122 D1:DD3F C3 F6 DD D1 	jp	GLETChainAnsNumber
 1123 D1:DD43 -  -  -  -  GLETVariableVariable:
 1124 D1:DD43 79 -  -  -  	ld	a, c
 1125 D1:DD44 BB -  -  -  	cp	e
 1126 D1:DD45 20 19 -  -  	jr	nz, ++_
 1127 D1:DD47 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1128 D1:DD4B 3A F6 31 D0 	ld	a, (tempToken)
 1129 D1:DD4F D6 6C -  -  	sub	tGT
 1130 D1:DD51 28 02 -  -  	jr	z, +_
 1131 D1:DD53 3E 01 -  -  	ld	a, 1
 1132 D1:DD55 11 00 00 00 _:	ld	de, 0
 1133 D1:DD59 5F -  -  -  	ld	e, a
 1134 D1:DD5A 36 00 -  -  	ld	(hl), typeNumber
 1135 D1:DD5C 23 -  -  -  	inc	hl
 1136 D1:DD5D ED 1F -  -  	ld	(hl), de
 1137 D1:DD5F C9 -  -  -  	ret
 1138 D1:DD60 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1139 D1:DD64 C3 10 DE D1 	jp	GLETChainAnsVariable
 1140 D1:DD68 -  -  -  -  GLETVariableChainPush:
 1141 D1:DD68 C3 85 AF D1 	jp	UnknownError
 1142 D1:DD6C -  -  -  -  GLETVariableChainAns:
 1143 D1:DD6C CD CB AC D1 	call	MaybeChangeHLToDE
 1144 D1:DD70 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1145 D1:DD74 18 0B -  -  	jr	GLETInsert
 1146 D1:DD76 -  -  -  -  GLETVariableFunction:
 1147 D1:DD76 7B -  -  -  	ld	a, e
 1148 D1:DD77 06 01 -  -  	ld	b, OutputInDE
 1149 D1:DD79 CD 52 AD D1 	call	GetFunction
 1150 D1:DD7D CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1151 D1:DD81 -  -  -  -  GLETInsert:
 1152 D1:DD81 11 37 ED 52 	ld	de, 052ED37h
 1153 D1:DD85 21 ED 62 23 	ld	hl, 02362EDh
 1154 D1:DD89 3A F6 31 D0 	ld	a, (tempToken)
 1155 D1:DD8D FE 6C -  -  	cp	tGT
 1156 D1:DD8F 28 02 -  -  	jr	z, +_
 1157 D1:DD91 1E B7 -  -  	ld	e, 0B7h
 1158 D1:DD93 C3 AA AC D1 _:	jp	InsertDEHL															;	scf/or a \ sbc hl, de \ sbc hl, hl \ inc hl
 1159 D1:DD97 -  -  -  -  GLETChainPushXXX:
 1160 D1:DD97 DD 7E FC -  	ld	a, (ix-4)
 1161 D1:DD9A B7 -  -  -  	or	a, a
 1162 D1:DD9B 28 12 -  -  	jr	z, GLETChainPushNumber
 1163 D1:DD9D 3D -  -  -  	dec	a
 1164 D1:DD9E 28 17 -  -  	jr	z, GLETChainPushVariable
 1165 D1:DDA0 3D -  -  -  	dec	a
 1166 D1:DDA1 28 1C -  -  	jr	z, GLETChainPushChainPush
 1167 D1:DDA3 3D -  -  -  	dec	a
 1168 D1:DDA4 28 1D -  -  	jr	z, GLETChainPushChainAns
 1169 D1:DDA6 3D -  -  -  	dec	a
 1170 D1:DDA7 CA CF DD D1 	jp	z, GLETChainPushFunction
 1171 D1:DDAB C3 EE AE D1 	jp	GLETError
 1172 D1:DDAF -  -  -  -  GLETChainPushNumber:
 1173 D1:DDAF 3E E1 -  -  	ld	a, 0E1h
 1174 D1:DDB1 CD 26 AD D1 	call	InsertA															;	pop hl
 1175 D1:DDB5 18 3F -  -  	jr	GLETChainAnsNumber
 1176 D1:DDB7 -  -  -  -  GLETChainPushVariable:
 1177 D1:DDB7 3E E1 -  -  	ld	a, 0E1h
 1178 D1:DDB9 CD 26 AD D1 	call	InsertA															;	pop hl
 1179 D1:DDBD 18 51 -  -  	jr	GLETChainAnsVariable
 1180 D1:DDBF -  -  -  -  GLETChainPushChainPush:
 1181 D1:DDBF C3 85 AF D1 	jp	UnknownError
 1182 D1:DDC3 -  -  -  -  GLETChainPushChainAns:
 1183 D1:DDC3 CD CB AC D1 	call	MaybeChangeHLToDE
 1184 D1:DDC7 3E E1 -  -  	ld	a, 0E1h
 1185 D1:DDC9 CD 26 AD D1 	call	InsertA															;	pop hl
 1186 D1:DDCD 18 B2 -  -  	jr	GLETInsert
 1187 D1:DDCF -  -  -  -  GLETChainPushFunction:
 1188 D1:DDCF 7B -  -  -  	ld	a, e
 1189 D1:DDD0 06 01 -  -  	ld	b, OutputInDE
 1190 D1:DDD2 CD 52 AD D1 	call	GetFunction
 1191 D1:DDD6 3E E1 -  -  	ld	a, 0E1h
 1192 D1:DDD8 CD 26 AD D1 	call	InsertA															;	pop hl
 1193 D1:DDDC 18 A3 -  -  _:	jr	GLETInsert
 1194 D1:DDDE -  -  -  -  GLETChainAnsXXX:
 1195 D1:DDDE DD 7E FC -  	ld	a, (ix-4)
 1196 D1:DDE1 B7 -  -  -  	or	a, a
 1197 D1:DDE2 28 12 -  -  	jr	z, GLETChainAnsNumber
 1198 D1:DDE4 3D -  -  -  	dec	a
 1199 D1:DDE5 28 29 -  -  	jr	z, GLETChainAnsVariable
 1200 D1:DDE7 3D -  -  -  	dec	a
 1201 D1:DDE8 28 30 -  -  	jr	z, GLETChainAnsChainPush
 1202 D1:DDEA 3D -  -  -  	dec	a
 1203 D1:DDEB 28 31 -  -  	jr	z, GLETChainAnsChainAns
 1204 D1:DDED 3D -  -  -  	dec	a
 1205 D1:DDEE CA 22 DE D1 	jp	z, GLETChainAnsFunction
 1206 D1:DDF2 C3 EE AE D1 	jp	GLETError
 1207 D1:DDF6 -  -  -  -  GLETChainAnsNumber:
 1208 D1:DDF6 CD D5 AC D1 	call	MaybeChangeDEToHL
 1209 D1:DDFA 21 F6 31 D0 	ld	hl, tempToken
 1210 D1:DDFE 7E -  -  -  	ld	a, (hl)
 1211 D1:DDFF FE 6C -  -  	cp	tGT
 1212 D1:DE01 20 04 -  -  	jr	nz, +_
 1213 D1:DE03 13 -  -  -  	inc	de
 1214 D1:DE04 3E 6E -  -  	ld	a, tGE
 1215 D1:DE06 77 -  -  -  	ld	(hl), a
 1216 D1:DE07 3E 11 -  -  _:	ld	a, 011h
 1217 D1:DE09 EB -  -  -  	ex	de, hl
 1218 D1:DE0A CD 5A AC D1 	call	InsertAHL															;	ld de, *
 1219 D1:DE0E 18 CC -  -  	jr	--_
 1220 D1:DE10 -  -  -  -  GLETChainAnsVariable:
 1221 D1:DE10 CD D5 AC D1 	call	MaybeChangeDEToHL
 1222 D1:DE14 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1223 D1:DE18 18 C2 -  -  	jr	--_
 1224 D1:DE1A -  -  -  -  GLETChainAnsChainPush:
 1225 D1:DE1A C3 85 AF D1 	jp	UnknownError
 1226 D1:DE1E -  -  -  -  GLETChainAnsChainAns:
 1227 D1:DE1E C3 85 AF D1 	jp	UnknownError
 1228 D1:DE22 -  -  -  -  GLETChainAnsFunction:
 1229 D1:DE22 3A D9 EC D1 	ld	a, (ExprOutput)
 1230 D1:DE26 87 -  -  -  	add	a, a
 1231 D1:DE27 87 -  -  -  	add	a, a
 1232 D1:DE28 87 -  -  -  	add	a, a
 1233 D1:DE29 87 -  -  -  	add	a, a
 1234 D1:DE2A C6 D5 -  -  	add	a, 0D5h
 1235 D1:DE2C CD 26 AD D1 	call	InsertA															;	push hl/de
 1236 D1:DE30 7B -  -  -  	ld	a, e
 1237 D1:DE31 06 01 -  -  	ld	b, OutputInDE
 1238 D1:DE33 CD 52 AD D1 	call	GetFunction
 1239 D1:DE37 3E E1 -  -  	ld	a, 0E1h
 1240 D1:DE39 CD 26 AD D1 	call	InsertA															;	pop hl
 1241 D1:DE3D 18 C8 -  -  _:	jr	--_
 1242 D1:DE3F -  -  -  -  GLETFunctionXXX:
 1243 D1:DE3F DD 7E FC -  	ld	a, (ix-4)
 1244 D1:DE42 B7 -  -  -  	or	a, a
 1245 D1:DE43 28 10 -  -  	jr	z, GLETFunctionNumber
 1246 D1:DE45 3D -  -  -  	dec	a
 1247 D1:DE46 28 18 -  -  	jr	z, GLETFunctionVariable
 1248 D1:DE48 3D -  -  -  	dec	a
 1249 D1:DE49 28 20 -  -  	jr	z, GLETFunctionChainPush
 1250 D1:DE4B 3D -  -  -  	dec	a
 1251 D1:DE4C 28 21 -  -  	jr	z, GLETFunctionChainAns
 1252 D1:DE4E 3D -  -  -  	dec	a
 1253 D1:DE4F 28 3B -  -  	jr	z, GLETFunctionFunction
 1254 D1:DE51 C3 EE AE D1 	jp	GLETError
 1255 D1:DE55 -  -  -  -  GLETFunctionNumber:
 1256 D1:DE55 79 -  -  -  	ld	a, c
 1257 D1:DE56 06 02 -  -  	ld	b, OutputInHL
 1258 D1:DE58 CD 52 AD D1 	call	GetFunction
 1259 D1:DE5C C3 F6 DD D1 	jp	GLETChainAnsNumber
 1260 D1:DE60 -  -  -  -  GLETFunctionVariable:
 1261 D1:DE60 79 -  -  -  	ld	a, c
 1262 D1:DE61 06 02 -  -  	ld	b, OutputInHL
 1263 D1:DE63 CD 52 AD D1 	call	GetFunction
 1264 D1:DE67 C3 10 DE D1 	jp	GLETChainAnsVariable
 1265 D1:DE6B -  -  -  -  GLETFunctionChainPush:
 1266 D1:DE6B C3 85 AF D1 	jp	UnknownError
 1267 D1:DE6F -  -  -  -  GLETFunctionChainAns:
 1268 D1:DE6F 3A D9 EC D1 	ld	a, (ExprOutput)
 1269 D1:DE73 87 -  -  -  	add	a, a
 1270 D1:DE74 87 -  -  -  	add	a, a
 1271 D1:DE75 87 -  -  -  	add	a, a
 1272 D1:DE76 87 -  -  -  	add	a, a
 1273 D1:DE77 C6 D5 -  -  	add	a, 0D5h
 1274 D1:DE79 CD 26 AD D1 	call	InsertA															;	push hl/de
 1275 D1:DE7D 79 -  -  -  	ld	a, c
 1276 D1:DE7E 06 02 -  -  	ld	b, OutputInHL
 1277 D1:DE80 CD 52 AD D1 	call	GetFunction
 1278 D1:DE84 3E D1 -  -  	ld	a, 0D1h
 1279 D1:DE86 CD 26 AD D1 	call	InsertA															;	pop de
 1280 D1:DE8A 18 B1 -  -  	jr	-_
 1281 D1:DE8C -  -  -  -  GLETFunctionFunction:
 1282 D1:DE8C 7B -  -  -  	ld	a, e
 1283 D1:DE8D 06 01 -  -  	ld	b, OutputInDE
 1284 D1:DE8F CD 52 AD D1 	call	GetFunction
 1285 D1:DE93 79 -  -  -  	ld	a, c
 1286 D1:DE94 06 02 -  -  	ld	b, OutputInHL
 1287 D1:DE96 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1288 D1:DE9A CD 52 AD D1 	call	GetFunction
 1289 D1:DE9E 18 9D -  -  	jr	-_
 1290 D1:DEA0 -  -  -  -  	
 1291 D1:DEA0 -  -  -  -  NEQNumberXXX:
 1292 D1:DEA0 DD 7E FC -  	ld	a, (ix-4)
 1293 D1:DEA3 B7 -  -  -  	or	a, a
 1294 D1:DEA4 28 10 -  -  	jr	z, NEQNumberNumber
 1295 D1:DEA6 3D -  -  -  	dec	a
 1296 D1:DEA7 28 33 -  -  	jr	z, NEQNumberVariable
 1297 D1:DEA9 3D -  -  -  	dec	a
 1298 D1:DEAA 28 37 -  -  	jr	z, NEQNumberChainPush
 1299 D1:DEAC 3D -  -  -  	dec	a
 1300 D1:DEAD 28 38 -  -  	jr	z, NEQNumberChainAns
 1301 D1:DEAF 3D -  -  -  	dec	a
 1302 D1:DEB0 28 3B -  -  	jr	z, NEQNumberFunction
 1303 D1:DEB2 C3 08 AF D1 	jp	NEQError
 1304 D1:DEB6 -  -  -  -  NEQNumberNumber:
 1305 D1:DEB6 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1306 D1:DEBA EB -  -  -  	ex	de, hl
 1307 D1:DEBB 3A F6 31 D0 	ld	a, (tempToken)
 1308 D1:DEBF FE 6A -  -  	cp	tEq
 1309 D1:DEC1 28 0C -  -  	jr	z, +_
 1310 D1:DEC3 B7 -  -  -  	or	a, a
 1311 D1:DEC4 ED 42 -  -  	sbc	hl, bc
 1312 D1:DEC6 21 00 00 00 	ld	hl, 0
 1313 D1:DECA 28 01 -  -  	jr	z, $+3
 1314 D1:DECC 23 -  -  -  	inc	hl
 1315 D1:DECD 18 09 -  -  	jr	++_
 1316 D1:DECF ED 42 -  -  _:	sbc	hl, bc
 1317 D1:DED1 21 00 00 00 	ld	hl, 0
 1318 D1:DED5 20 01 -  -  	jr	nz, $+3
 1319 D1:DED7 23 -  -  -  	inc	hl
 1320 D1:DED8 DD 2F F9 -  _:	ld	(ix-7), hl
 1321 D1:DEDB C9 -  -  -  	ret
 1322 D1:DEDC -  -  -  -  NEQNumberVariable:
 1323 D1:DEDC C5 -  -  -  	push	bc
 1324 D1:DEDD E1 -  -  -  	pop	hl
 1325 D1:DEDE EB -  -  -  	ex	de, hl
 1326 D1:DEDF E5 -  -  -  	push	hl
 1327 D1:DEE0 C1 -  -  -  	pop	bc
 1328 D1:DEE1 18 2B -  -  	jr	NEQVariableNumber
 1329 D1:DEE3 -  -  -  -  NEQNumberChainPush:
 1330 D1:DEE3 C3 85 AF D1 	jp	UnknownError
 1331 D1:DEE7 -  -  -  -  NEQNumberChainAns:
 1332 D1:DEE7 C5 -  -  -  	push	bc
 1333 D1:DEE8 D1 -  -  -  	pop	de
 1334 D1:DEE9 C3 D3 DF D1 	jp	NEQChainAnsNumber
 1335 D1:DEED -  -  -  -  NEQNumberFunction:
 1336 D1:DEED C5 -  -  -  	push	bc
 1337 D1:DEEE E1 -  -  -  	pop	hl
 1338 D1:DEEF EB -  -  -  	ex	de, hl
 1339 D1:DEF0 E5 -  -  -  	push	hl
 1340 D1:DEF1 C1 -  -  -  	pop	bc
 1341 D1:DEF2 C3 50 E0 D1 	jp	NEQFunctionNumber
 1342 D1:DEF6 -  -  -  -  NEQVariableXXX:
 1343 D1:DEF6 DD 7E FC -  	ld	a, (ix-4)
 1344 D1:DEF9 B7 -  -  -  	or	a, a
 1345 D1:DEFA 28 12 -  -  	jr	z, NEQVariableNumber
 1346 D1:DEFC 3D -  -  -  	dec	a
 1347 D1:DEFD 28 17 -  -  	jr	z, NEQVariableVariable
 1348 D1:DEFF 3D -  -  -  	dec	a
 1349 D1:DF00 28 39 -  -  	jr	z, NEQVariableChainPush
 1350 D1:DF02 3D -  -  -  	dec	a
 1351 D1:DF03 28 3A -  -  	jr	z, NEQVariableChainAns
 1352 D1:DF05 3D -  -  -  	dec	a
 1353 D1:DF06 CA 44 DF D1 	jp	z, NEQVariableFunction
 1354 D1:DF0A C3 08 AF D1 	jp	NEQError
 1355 D1:DF0E -  -  -  -  NEQVariableNumber:
 1356 D1:DF0E CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1357 D1:DF12 C3 D3 DF D1 	jp	NEQChainAnsNumber
 1358 D1:DF16 -  -  -  -  NEQVariableVariable:
 1359 D1:DF16 79 -  -  -  	ld	a, c
 1360 D1:DF17 BB -  -  -  	cp	e
 1361 D1:DF18 20 19 -  -  	jr	nz, ++_
 1362 D1:DF1A FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1363 D1:DF1E 3A F6 31 D0 	ld	a, (tempToken)
 1364 D1:DF22 D6 6F -  -  	sub	tNE
 1365 D1:DF24 28 02 -  -  	jr	z, +_
 1366 D1:DF26 3E 01 -  -  	ld	a, 1
 1367 D1:DF28 11 00 00 00 _:	ld	de, 0
 1368 D1:DF2C 5F -  -  -  	ld	e, a
 1369 D1:DF2D 36 00 -  -  	ld	(hl), typeNumber
 1370 D1:DF2F 23 -  -  -  	inc	hl
 1371 D1:DF30 ED 1F -  -  	ld	(hl), de
 1372 D1:DF32 C9 -  -  -  	ret
 1373 D1:DF33 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1374 D1:DF37 C3 F7 DF D1 	jp	NEQChainAnsVariable
 1375 D1:DF3B -  -  -  -  NEQVariableChainPush:
 1376 D1:DF3B C3 85 AF D1 	jp	UnknownError
 1377 D1:DF3F -  -  -  -  NEQVariableChainAns:
 1378 D1:DF3F 59 -  -  -  	ld	e, c
 1379 D1:DF40 C3 F7 DF D1 	jp	NEQChainAnsVariable
 1380 D1:DF44 -  -  -  -  NEQVariableFunction:
 1381 D1:DF44 7B -  -  -  	ld	a, e
 1382 D1:DF45 06 01 -  -  	ld	b, OutputInDE
 1383 D1:DF47 CD 52 AD D1 	call	GetFunction
 1384 D1:DF4B CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1385 D1:DF4F -  -  -  -  NEQInsert:
 1386 D1:DF4F 21 B7 ED 52 	ld	hl, 052EDB7h
 1387 D1:DF53 CD 5E AC D1 	call	InsertHL															;	or a \ sbc hl, de
 1388 D1:DF57 11 00 00 00 	ld	de, 0
 1389 D1:DF5B 21 20 01 23 	ld	hl, 0230120h
 1390 D1:DF5F 3A F6 31 D0 	ld	a, (tempToken)
 1391 D1:DF63 FE 6A -  -  	cp	tEq
 1392 D1:DF65 28 02 -  -  	jr	z, +_
 1393 D1:DF67 2E 28 -  -  	ld	l, 028h
 1394 D1:DF69 3E 21 -  -  _:	ld	a, 021h
 1395 D1:DF6B C3 A6 AC D1 	jp	InsertADEHL															;	ld hl, 0 \ jr [n]z, $+3 \ inc hl
 1396 D1:DF6F -  -  -  -  NEQChainPushXXX:
 1397 D1:DF6F DD 7E FC -  	ld	a, (ix-4)
 1398 D1:DF72 B7 -  -  -  	or	a, a
 1399 D1:DF73 28 12 -  -  	jr	z, NEQChainPushNumber
 1400 D1:DF75 3D -  -  -  	dec	a
 1401 D1:DF76 28 17 -  -  	jr	z, NEQChainPushVariable
 1402 D1:DF78 3D -  -  -  	dec	a
 1403 D1:DF79 28 1C -  -  	jr	z, NEQChainPushChainPush
 1404 D1:DF7B 3D -  -  -  	dec	a
 1405 D1:DF7C 28 1D -  -  	jr	z, NEQChainPushChainAns
 1406 D1:DF7E 3D -  -  -  	dec	a
 1407 D1:DF7F CA AC DF D1 	jp	z, NEQChainPushFunction
 1408 D1:DF83 C3 08 AF D1 	jp	NEQError
 1409 D1:DF87 -  -  -  -  NEQChainPushNumber:
 1410 D1:DF87 3E E1 -  -  	ld	a, 0E1h
 1411 D1:DF89 CD 26 AD D1 	call	InsertA															;	pop hl
 1412 D1:DF8D 18 44 -  -  	jr	NEQChainAnsNumber
 1413 D1:DF8F -  -  -  -  NEQChainPushVariable:
 1414 D1:DF8F 3E E1 -  -  	ld	a, 0E1h
 1415 D1:DF91 CD 26 AD D1 	call	InsertA															;	pop hl
 1416 D1:DF95 18 60 -  -  	jr	NEQChainAnsVariable
 1417 D1:DF97 -  -  -  -  NEQChainPushChainPush:
 1418 D1:DF97 C3 85 AF D1 	jp	UnknownError
 1419 D1:DF9B -  -  -  -  NEQChainPushChainAns:
 1420 D1:DF9B 3A D9 EC D1 	ld	a, (ExprOutput)
 1421 D1:DF9F B7 -  -  -  	or	a, a
 1422 D1:DFA0 3E D1 -  -  	ld	a, 0D1h
 1423 D1:DFA2 20 02 -  -  	jr	nz, +_
 1424 D1:DFA4 3E E1 -  -  	ld	a, 0E1h
 1425 D1:DFA6 CD 26 AD D1 _:	call	InsertA															;	pop hl/de
 1426 D1:DFAA 18 A3 -  -  	jr	NEQInsert
 1427 D1:DFAC -  -  -  -  NEQChainPushFunction:
 1428 D1:DFAC 7B -  -  -  	ld	a, e
 1429 D1:DFAD 06 02 -  -  	ld	b, OutputInHL
 1430 D1:DFAF CD 52 AD D1 	call	GetFunction
 1431 D1:DFB3 3E D1 -  -  	ld	a, 0D1h
 1432 D1:DFB5 CD 26 AD D1 	call	InsertA															;	pop de
 1433 D1:DFB9 18 94 -  -  _:	jr	NEQInsert
 1434 D1:DFBB -  -  -  -  NEQChainAnsXXX:
 1435 D1:DFBB DD 7E FC -  	ld	a, (ix-4)
 1436 D1:DFBE B7 -  -  -  	or	a, a
 1437 D1:DFBF 28 12 -  -  	jr	z, NEQChainAnsNumber
 1438 D1:DFC1 3D -  -  -  	dec	a
 1439 D1:DFC2 28 33 -  -  	jr	z, NEQChainAnsVariable
 1440 D1:DFC4 3D -  -  -  	dec	a
 1441 D1:DFC5 28 4C -  -  	jr	z, NEQChainAnsChainPush
 1442 D1:DFC7 3D -  -  -  	dec	a
 1443 D1:DFC8 28 4D -  -  	jr	z, NEQChainAnsChainAns
 1444 D1:DFCA 3D -  -  -  	dec	a
 1445 D1:DFCB CA 1B E0 D1 	jp	z, NEQChainAnsFunction
 1446 D1:DFCF C3 08 AF D1 	jp	NEQError
 1447 D1:DFD3 -  -  -  -  NEQChainAnsNumber:
 1448 D1:DFD3 FD CB C0 5E 	bit	op_is_last_one, (iy+fExpression1)
 1449 D1:DFD7 28 0C -  -  	jr	z, +_
 1450 D1:DFD9 3A F6 31 D0 	ld	a, (tempToken)
 1451 D1:DFDD FE 6F -  -  	cp	tNE
 1452 D1:DFDF 20 04 -  -  	jr	nz, +_
 1453 D1:DFE1 FD CB C0 AE 	res	ans_set_z_flag, (iy+fExpression1)
 1454 D1:DFE5 3A D9 EC D1 _:	ld	a, (ExprOutput)
 1455 D1:DFE9 B7 -  -  -  	or	a, a
 1456 D1:DFEA 3E 11 -  -  	ld	a, 011h
 1457 D1:DFEC 20 02 -  -  	jr	nz, $+4
 1458 D1:DFEE 3E 21 -  -  	ld	a, 021h
 1459 D1:DFF0 EB -  -  -  	ex	de, hl
 1460 D1:DFF1 CD 5A AC D1 	call	InsertAHL															;	ld hl/de, *
 1461 D1:DFF5 18 C2 -  -  	jr	--_
 1462 D1:DFF7 -  -  -  -  NEQChainAnsVariable:
 1463 D1:DFF7 26 17 -  -  	ld	h, 017h
 1464 D1:DFF9 16 03 -  -  	ld	d, 3
 1465 D1:DFFB ED 5C -  -  	mlt	de
 1466 D1:DFFD 7B -  -  -  	ld	a, e
 1467 D1:DFFE 2E DD -  -  	ld	l, 0DDh
 1468 D1:E000 CD 70 1D 02 	call	_SetHLUToA
 1469 D1:E004 3A D9 EC D1 	ld	a, (ExprOutput)
 1470 D1:E008 B7 -  -  -  	or	a, a
 1471 D1:E009 20 02 -  -  	jr	nz, $+4
 1472 D1:E00B 26 27 -  -  	ld	h, 027h
 1473 D1:E00D CD 5E AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1474 D1:E011 18 A6 -  -  	jr	--_
 1475 D1:E013 -  -  -  -  NEQChainAnsChainPush:
 1476 D1:E013 C3 85 AF D1 	jp	UnknownError
 1477 D1:E017 -  -  -  -  NEQChainAnsChainAns:
 1478 D1:E017 C3 85 AF D1 	jp	UnknownError
 1479 D1:E01B -  -  -  -  NEQChainAnsFunction:
 1480 D1:E01B 3A D9 EC D1 	ld	a, (ExprOutput)
 1481 D1:E01F 87 -  -  -  	add	a, a
 1482 D1:E020 87 -  -  -  	add	a, a
 1483 D1:E021 87 -  -  -  	add	a, a
 1484 D1:E022 87 -  -  -  	add	a, a
 1485 D1:E023 C6 D5 -  -  	add	a, 0D5h
 1486 D1:E025 CD 26 AD D1 	call	InsertA															;	push hl/de
 1487 D1:E029 7B -  -  -  	ld	a, e
 1488 D1:E02A 06 02 -  -  	ld	b, OutputInHL
 1489 D1:E02C CD 52 AD D1 	call	GetFunction
 1490 D1:E030 3E D1 -  -  	ld	a, 0D1h
 1491 D1:E032 CD 26 AD D1 	call	InsertA															;	pop de
 1492 D1:E036 C3 4F DF D1 _:	jp	NEQInsert
 1493 D1:E03A -  -  -  -  NEQFunctionXXX:
 1494 D1:E03A DD 7E FC -  	ld	a, (ix-4)
 1495 D1:E03D B7 -  -  -  	or	a, a
 1496 D1:E03E 28 10 -  -  	jr	z, NEQFunctionNumber
 1497 D1:E040 3D -  -  -  	dec	a
 1498 D1:E041 28 18 -  -  	jr	z, NEQFunctionVariable
 1499 D1:E043 3D -  -  -  	dec	a
 1500 D1:E044 28 1C -  -  	jr	z, NEQFunctionChainPush
 1501 D1:E046 3D -  -  -  	dec	a
 1502 D1:E047 28 1D -  -  	jr	z, NEQFunctionChainAns
 1503 D1:E049 3D -  -  -  	dec	a
 1504 D1:E04A 28 1D -  -  	jr	z, NEQFunctionFunction
 1505 D1:E04C C3 08 AF D1 	jp	NEQError
 1506 D1:E050 -  -  -  -  NEQFunctionNumber:
 1507 D1:E050 79 -  -  -  	ld	a, c
 1508 D1:E051 06 02 -  -  	ld	b, OutputInHL
 1509 D1:E053 CD 52 AD D1 	call	GetFunction
 1510 D1:E057 C3 D3 DF D1 	jp	NEQChainAnsNumber
 1511 D1:E05B -  -  -  -  NEQFunctionVariable:
 1512 D1:E05B 79 -  -  -  	ld	a, c
 1513 D1:E05C 4B -  -  -  	ld	c, e
 1514 D1:E05D 5F -  -  -  	ld	e, a
 1515 D1:E05E C3 44 DF D1 	jp	NEQVariableFunction
 1516 D1:E062 -  -  -  -  NEQFunctionChainPush:
 1517 D1:E062 C3 85 AF D1 	jp	UnknownError
 1518 D1:E066 -  -  -  -  NEQFunctionChainAns:
 1519 D1:E066 59 -  -  -  	ld	e, c
 1520 D1:E067 18 B2 -  -  	jr	NEQChainAnsFunction
 1521 D1:E069 -  -  -  -  NEQFunctionFunction:
 1522 D1:E069 7B -  -  -  	ld	a, e
 1523 D1:E06A 06 01 -  -  	ld	b, OutputInDE
 1524 D1:E06C CD 52 AD D1 	call	GetFunction
 1525 D1:E070 79 -  -  -  	ld	a, c
 1526 D1:E071 06 02 -  -  	ld	b, OutputInHL
 1527 D1:E073 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1528 D1:E077 CD 52 AD D1 	call	GetFunction
 1529 D1:E07B 18 B9 -  -  	jr	-_
 1530 D1:E07D -  -  -  -  
 1531 D1:E07D -  -  -  -  XORANDNumberXXX:
 1532 D1:E07D DD 7E FC -  	ld	a, (ix-4)
 1533 D1:E080 B7 -  -  -  	or	a, a
 1534 D1:E081 28 10 -  -  	jr	z, XORANDNumberNumber
 1535 D1:E083 3D -  -  -  	dec	a
 1536 D1:E084 28 59 -  -  	jr	z, XORANDNumberVariable
 1537 D1:E086 3D -  -  -  	dec	a
 1538 D1:E087 28 5D -  -  	jr	z, XORANDNumberChainPush
 1539 D1:E089 3D -  -  -  	dec	a
 1540 D1:E08A 28 5E -  -  	jr	z, XORANDNumberChainAns
 1541 D1:E08C 3D -  -  -  	dec	a
 1542 D1:E08D 28 61 -  -  	jr	z, XORANDNumberFunction
 1543 D1:E08F C3 16 AF D1 	jp	XORANDError
 1544 D1:E093 -  -  -  -  XORANDNumberNumber:
 1545 D1:E093 FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1546 D1:E097 B7 -  -  -  	or	a, a
 1547 D1:E098 ED 62 -  -  	sbc	hl, hl
 1548 D1:E09A 3A F6 31 D0 	ld	a, (tempToken)
 1549 D1:E09E FE 3D -  -  	cp	tXor
 1550 D1:E0A0 28 22 -  -  	jr	z, ++_
 1551 D1:E0A2 FE 3C -  -  	cp	tOr
 1552 D1:E0A4 28 0F -  -  	jr	z, +_
 1553 D1:E0A6 CD 48 1D 02 	call	_ChkBCIs0
 1554 D1:E0AA 28 2F -  -  	jr	z, +++_
 1555 D1:E0AC CD 4C 1D 02 	call	_ChkDEIs0
 1556 D1:E0B0 28 29 -  -  	jr	z, +++_
 1557 D1:E0B2 23 -  -  -  	inc	hl
 1558 D1:E0B3 18 26 -  -  	jr	+++_
 1559 D1:E0B5 CD 48 1D 02 _:	call	_ChkBCIs0
 1560 D1:E0B9 47 -  -  -  	ld	b, a
 1561 D1:E0BA CD 4C 1D 02 	call	_ChkDEIs0
 1562 D1:E0BE B0 -  -  -  	or	a, b
 1563 D1:E0BF 28 1A -  -  	jr	z, ++_
 1564 D1:E0C1 23 -  -  -  	inc	hl
 1565 D1:E0C2 18 17 -  -  	jr	++_
 1566 D1:E0C4 CD 4C 1D 02 _:	call	_ChkDEIs0
 1567 D1:E0C8 11 00 00 00 	ld	de, 0
 1568 D1:E0CC 28 01 -  -  	jr	z, $+3
 1569 D1:E0CE 13 -  -  -  	inc	de
 1570 D1:E0CF CD 48 1D 02 	call	_ChkBCIs0
 1571 D1:E0D3 3E 00 -  -  	ld	a, 0
 1572 D1:E0D5 28 01 -  -  	jr	z, $+3
 1573 D1:E0D7 3C -  -  -  	inc	a
 1574 D1:E0D8 AB -  -  -  	xor	e
 1575 D1:E0D9 5F -  -  -  	ld	e, a
 1576 D1:E0DA EB -  -  -  	ex	de, hl
 1577 D1:E0DB DD 2F F9 -  _:	ld	(ix-7), hl
 1578 D1:E0DE C9 -  -  -  	ret
 1579 D1:E0DF -  -  -  -  XORANDNumberVariable:
 1580 D1:E0DF C5 -  -  -  	push	bc
 1581 D1:E0E0 E1 -  -  -  	pop	hl
 1582 D1:E0E1 EB -  -  -  	ex	de, hl
 1583 D1:E0E2 E5 -  -  -  	push	hl
 1584 D1:E0E3 C1 -  -  -  	pop	bc
 1585 D1:E0E4 18 2B -  -  	jr	XORANDVariableNumber
 1586 D1:E0E6 -  -  -  -  XORANDNumberChainPush:
 1587 D1:E0E6 C3 85 AF D1 	jp	UnknownError
 1588 D1:E0EA -  -  -  -  XORANDNumberChainAns:
 1589 D1:E0EA C5 -  -  -  	push	bc
 1590 D1:E0EB D1 -  -  -  	pop	de
 1591 D1:E0EC C3 D9 E1 D1 	jp	XORANDChainAnsNumber
 1592 D1:E0F0 -  -  -  -  XORANDNumberFunction:
 1593 D1:E0F0 C5 -  -  -  	push	bc
 1594 D1:E0F1 E1 -  -  -  	pop	hl
 1595 D1:E0F2 EB -  -  -  	ex	de, hl
 1596 D1:E0F3 E5 -  -  -  	push	hl
 1597 D1:E0F4 C1 -  -  -  	pop	bc
 1598 D1:E0F5 C3 42 E2 D1 	jp	XORANDFunctionNumber
 1599 D1:E0F9 -  -  -  -  XORANDVariableXXX:
 1600 D1:E0F9 DD 7E FC -  	ld	a, (ix-4)
 1601 D1:E0FC B7 -  -  -  	or	a, a
 1602 D1:E0FD 28 12 -  -  	jr	z, XORANDVariableNumber
 1603 D1:E0FF 3D -  -  -  	dec	a
 1604 D1:E100 28 17 -  -  	jr	z, XORANDVariableVariable
 1605 D1:E102 3D -  -  -  	dec	a
 1606 D1:E103 28 39 -  -  	jr	z, XORANDVariableChainPush
 1607 D1:E105 3D -  -  -  	dec	a
 1608 D1:E106 28 3A -  -  	jr	z, XORANDVariableChainAns
 1609 D1:E108 3D -  -  -  	dec	a
 1610 D1:E109 CA 47 E1 D1 	jp	z, XORANDVariableFunction
 1611 D1:E10D C3 16 AF D1 	jp	XORANDError
 1612 D1:E111 -  -  -  -  XORANDVariableNumber:
 1613 D1:E111 CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1614 D1:E115 C3 D9 E1 D1 	jp	XORANDChainAnsNumber
 1615 D1:E119 -  -  -  -  XORANDVariableVariable:
 1616 D1:E119 79 -  -  -  	ld	a, c
 1617 D1:E11A BB -  -  -  	cp	e
 1618 D1:E11B 20 19 -  -  	jr	nz, ++_
 1619 D1:E11D FD CB C0 E6 	set	output_is_number, (iy+fExpression1)
 1620 D1:E121 3A F6 31 D0 	ld	a, (tempToken)
 1621 D1:E125 D6 6F -  -  	sub	tNE
 1622 D1:E127 28 02 -  -  	jr	z, +_
 1623 D1:E129 3E 01 -  -  	ld	a, 1
 1624 D1:E12B 11 00 00 00 _:	ld	de, 0
 1625 D1:E12F 5F -  -  -  	ld	e, a
 1626 D1:E130 36 00 -  -  	ld	(hl), typeNumber
 1627 D1:E132 23 -  -  -  	inc	hl
 1628 D1:E133 ED 1F -  -  	ld	(hl), de
 1629 D1:E135 C9 -  -  -  	ret
 1630 D1:E136 CD 80 AC D1 _:	call	InsertHIXC															;	ld hl, (ix+*)
 1631 D1:E13A C3 EB E1 D1 	jp	XORANDChainAnsVariable
 1632 D1:E13E -  -  -  -  XORANDVariableChainPush:
 1633 D1:E13E C3 85 AF D1 	jp	UnknownError
 1634 D1:E142 -  -  -  -  XORANDVariableChainAns:
 1635 D1:E142 59 -  -  -  	ld	e, c
 1636 D1:E143 C3 EB E1 D1 	jp	XORANDChainAnsVariable
 1637 D1:E147 -  -  -  -  XORANDVariableFunction:
 1638 D1:E147 7B -  -  -  	ld	a, e
 1639 D1:E148 06 01 -  -  	ld	b, OutputInDE
 1640 D1:E14A CD 52 AD D1 	call	GetFunction
 1641 D1:E14E CD 80 AC D1 	call	InsertHIXC															;	ld hl, (ix+*)
 1642 D1:E152 -  -  -  -  XORANDInsert:
 1643 D1:E152 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
 1644 D1:E157 21 53 F0 D1 	ld	hl, XORANDData
 1645 D1:E15B 06 A2 -  -  	ld	b, 0A2h
 1646 D1:E15D 3A F6 31 D0 	ld	a, (tempToken)
 1647 D1:E161 FE 3D -  -  	cp	tXor
 1648 D1:E163 20 02 -  -  	jr	nz, +_
 1649 D1:E165 06 AA -  -  	ld	b, 0AAh
 1650 D1:E167 FE 3C -  -  _:	cp	tOr
 1651 D1:E169 20 02 -  -  	jr	nz, +_
 1652 D1:E16B 06 B2 -  -  	ld	b, 0B2h
 1653 D1:E16D 78 -  -  -  _:	ld	a, b
 1654 D1:E16E 32 5D F0 D1 	ld	(XORANDSMC), a
 1655 D1:E172 01 10 00 00 	ld	bc, 16
 1656 D1:E176 ED B0 -  -  	ldir
 1657 D1:E178 ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
 1658 D1:E17D C9 -  -  -  	ret
 1659 D1:E17E -  -  -  -  XORANDChainPushXXX:
 1660 D1:E17E DD 7E FC -  	ld	a, (ix-4)
 1661 D1:E181 B7 -  -  -  	or	a, a
 1662 D1:E182 28 12 -  -  	jr	z, XORANDChainPushNumber
 1663 D1:E184 3D -  -  -  	dec	a
 1664 D1:E185 28 17 -  -  	jr	z, XORANDChainPushVariable
 1665 D1:E187 3D -  -  -  	dec	a
 1666 D1:E188 28 1C -  -  	jr	z, XORANDChainPushChainPush
 1667 D1:E18A 3D -  -  -  	dec	a
 1668 D1:E18B 28 1D -  -  	jr	z, XORANDChainPushChainAns
 1669 D1:E18D 3D -  -  -  	dec	a
 1670 D1:E18E CA B2 E1 D1 	jp	z, XORANDChainPushFunction
 1671 D1:E192 C3 16 AF D1 	jp	XORANDError
 1672 D1:E196 -  -  -  -  XORANDChainPushNumber:
 1673 D1:E196 3E E1 -  -  	ld	a, 0E1h
 1674 D1:E198 CD 26 AD D1 	call	InsertA															;	pop hl
 1675 D1:E19C 18 3B -  -  	jr	XORANDChainAnsNumber
 1676 D1:E19E -  -  -  -  XORANDChainPushVariable:
 1677 D1:E19E 3E E1 -  -  	ld	a, 0E1h
 1678 D1:E1A0 CD 26 AD D1 	call	InsertA															;	pop hl
 1679 D1:E1A4 18 45 -  -  	jr	XORANDChainAnsVariable
 1680 D1:E1A6 -  -  -  -  XORANDChainPushChainPush:
 1681 D1:E1A6 C3 85 AF D1 	jp	UnknownError
 1682 D1:E1AA -  -  -  -  XORANDChainPushChainAns:
 1683 D1:E1AA 3E D1 -  -  	ld	a, 0D1h
 1684 D1:E1AC CD 26 AD D1 	call	InsertA															;	pop de
 1685 D1:E1B0 18 A0 -  -  	jr	XORANDInsert
 1686 D1:E1B2 -  -  -  -  XORANDChainPushFunction:
 1687 D1:E1B2 7B -  -  -  	ld	a, e
 1688 D1:E1B3 06 02 -  -  	ld	b, OutputInHL
 1689 D1:E1B5 CD 52 AD D1 	call	GetFunction
 1690 D1:E1B9 3E D1 -  -  	ld	a, 0D1h
 1691 D1:E1BB CD 26 AD D1 	call	InsertA															;	pop de
 1692 D1:E1BF 18 91 -  -  _:	jr	XORANDInsert
 1693 D1:E1C1 -  -  -  -  XORANDChainAnsXXX:
 1694 D1:E1C1 DD 7E FC -  	ld	a, (ix-4)
 1695 D1:E1C4 B7 -  -  -  	or	a, a
 1696 D1:E1C5 28 12 -  -  	jr	z, XORANDChainAnsNumber
 1697 D1:E1C7 3D -  -  -  	dec	a
 1698 D1:E1C8 28 21 -  -  	jr	z, XORANDChainAnsVariable
 1699 D1:E1CA 3D -  -  -  	dec	a
 1700 D1:E1CB 28 3A -  -  	jr	z, XORANDChainAnsChainPush
 1701 D1:E1CD 3D -  -  -  	dec	a
 1702 D1:E1CE 28 3B -  -  	jr	z, XORANDChainAnsChainAns
 1703 D1:E1D0 3D -  -  -  	dec	a
 1704 D1:E1D1 CA 0F E2 D1 	jp	z, XORANDChainAnsFunction
 1705 D1:E1D5 C3 16 AF D1 	jp	XORANDError
 1706 D1:E1D9 -  -  -  -  XORANDChainAnsNumber:
 1707 D1:E1D9 3A D9 EC D1 	ld	a, (ExprOutput)
 1708 D1:E1DD B7 -  -  -  	or	a, a
 1709 D1:E1DE 3E 11 -  -  	ld	a, 011h
 1710 D1:E1E0 20 02 -  -  	jr	nz, +_
 1711 D1:E1E2 3E 21 -  -  	ld	a, 021h
 1712 D1:E1E4 EB -  -  -  _:	ex	de, hl
 1713 D1:E1E5 CD 5A AC D1 	call	InsertAHL															;	ld hl/de, *
 1714 D1:E1E9 18 D4 -  -  	jr	--_
 1715 D1:E1EB -  -  -  -  XORANDChainAnsVariable:
 1716 D1:E1EB 26 17 -  -  	ld	h, 017h
 1717 D1:E1ED 16 03 -  -  	ld	d, 3
 1718 D1:E1EF ED 5C -  -  	mlt	de
 1719 D1:E1F1 7B -  -  -  	ld	a, e
 1720 D1:E1F2 2E DD -  -  	ld	l, 0DDh
 1721 D1:E1F4 CD 70 1D 02 	call	_SetHLUToA
 1722 D1:E1F8 3A D9 EC D1 	ld	a, (ExprOutput)
 1723 D1:E1FC B7 -  -  -  	or	a, a
 1724 D1:E1FD 20 02 -  -  	jr	nz, $+4
 1725 D1:E1FF 26 27 -  -  	ld	h, 027h
 1726 D1:E201 CD 5E AC D1 	call	InsertHL															;	ld hl/de, (ix+*)
 1727 D1:E205 18 B8 -  -  	jr	--_
 1728 D1:E207 -  -  -  -  XORANDChainAnsChainPush:
 1729 D1:E207 C3 85 AF D1 	jp	UnknownError
 1730 D1:E20B -  -  -  -  XORANDChainAnsChainAns:
 1731 D1:E20B C3 85 AF D1 	jp	UnknownError
 1732 D1:E20F -  -  -  -  XORANDChainAnsFunction:
 1733 D1:E20F 3A D9 EC D1 	ld	a, (ExprOutput)
 1734 D1:E213 87 -  -  -  	add	a, a
 1735 D1:E214 87 -  -  -  	add	a, a
 1736 D1:E215 87 -  -  -  	add	a, a
 1737 D1:E216 87 -  -  -  	add	a, a
 1738 D1:E217 C6 D5 -  -  	add	a, 0D5h
 1739 D1:E219 CD 26 AD D1 	call	InsertA															;	push hl/de
 1740 D1:E21D 7B -  -  -  	ld	a, e
 1741 D1:E21E 06 02 -  -  	ld	b, OutputInHL
 1742 D1:E220 CD 52 AD D1 	call	GetFunction
 1743 D1:E224 3E D1 -  -  	ld	a, 0D1h
 1744 D1:E226 CD 26 AD D1 	call	InsertA															;	pop de
 1745 D1:E22A 18 93 -  -  _:	jr	---_
 1746 D1:E22C -  -  -  -  XORANDFunctionXXX:
 1747 D1:E22C DD 7E FC -  	ld	a, (ix-4)
 1748 D1:E22F B7 -  -  -  	or	a, a
 1749 D1:E230 28 10 -  -  	jr	z, XORANDFunctionNumber
 1750 D1:E232 3D -  -  -  	dec	a
 1751 D1:E233 28 18 -  -  	jr	z, XORANDFunctionVariable
 1752 D1:E235 3D -  -  -  	dec	a
 1753 D1:E236 28 1C -  -  	jr	z, XORANDFunctionChainPush
 1754 D1:E238 3D -  -  -  	dec	a
 1755 D1:E239 28 1D -  -  	jr	z, XORANDFunctionChainAns
 1756 D1:E23B 3D -  -  -  	dec	a
 1757 D1:E23C 28 1D -  -  	jr	z, XORANDFunctionFunction
 1758 D1:E23E C3 16 AF D1 	jp	XORANDError
 1759 D1:E242 -  -  -  -  XORANDFunctionNumber:
 1760 D1:E242 79 -  -  -  	ld	a, c
 1761 D1:E243 06 02 -  -  	ld	b, OutputInHL
 1762 D1:E245 CD 52 AD D1 	call	GetFunction
 1763 D1:E249 C3 D9 E1 D1 	jp	XORANDChainAnsNumber
 1764 D1:E24D -  -  -  -  XORANDFunctionVariable:
 1765 D1:E24D 79 -  -  -  	ld	a, c
 1766 D1:E24E 4B -  -  -  	ld	c, e
 1767 D1:E24F 5F -  -  -  	ld	e, a
 1768 D1:E250 C3 47 E1 D1 	jp	XORANDVariableFunction
 1769 D1:E254 -  -  -  -  XORANDFunctionChainPush:
 1770 D1:E254 C3 85 AF D1 	jp	UnknownError
 1771 D1:E258 -  -  -  -  XORANDFunctionChainAns:
 1772 D1:E258 59 -  -  -  	ld	e, c
 1773 D1:E259 18 B4 -  -  	jr	XORANDChainAnsFunction
 1774 D1:E25B -  -  -  -  XORANDFunctionFunction:
 1775 D1:E25B 7B -  -  -  	ld	a, e
 1776 D1:E25C 06 01 -  -  	ld	b, OutputInDE
 1777 D1:E25E CD 52 AD D1 	call	GetFunction
 1778 D1:E262 79 -  -  -  	ld	a, c
 1779 D1:E263 06 02 -  -  	ld	b, OutputInHL
 1780 D1:E265 FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1781 D1:E269 CD 52 AD D1 	call	GetFunction
 1782 D1:E26D 18 BB -  -  	jr	-_
 1783 D1:E26F -  -  -  -  	
 1784 D1:E26F -  -  -  -  StoNumberXXX:
 1785 D1:E26F DD 7E FC -  	ld	a, (ix-4)
 1786 D1:E272 FE 03 -  -  	cp	typeChainAns
 1787 D1:E274 28 0A -  -  	jr	z, +_
 1788 D1:E276 FE 01 -  -  	cp	typeVariable
 1789 D1:E278 CA A3 E2 D1 	jp	z, ++_
 1790 D1:E27C C3 85 AF D1 	jp	UnknownError
 1791 D1:E280 CD F6 E3 D1 _:	call	StoTestStoToListElement
 1792 D1:E284 C2 85 AF D1 	jp	nz, UnknownError
 1793 D1:E288 3E 11 -  -  	ld	a, 011h
 1794 D1:E28A C5 -  -  -  	push	bc
 1795 D1:E28B E1 -  -  -  	pop	hl
 1796 D1:E28C CD 5A AC D1 	call	InsertAHL															;	ld de, *
 1797 D1:E290 3E ED -  -  	ld	a, 0EDh
 1798 D1:E292 CD 26 AD D1 	call	InsertA															;	ld (hl), de (1)
 1799 D1:E296 3E 1F -  -  	ld	a, 01Fh
 1800 D1:E298 CD 26 AD D1 	call	InsertA															;	ld (hl), de (2)
 1801 D1:E29C 3E 00 -  -  	ld	a, OutputIsInDE
 1802 D1:E29E 32 DA EC D1 	ld	(ExprOutput2), a
 1803 D1:E2A2 C9 -  -  -  	ret
 1804 D1:E2A3 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1805 D1:E2A7 16 03 -  -  	ld	d, 3
 1806 D1:E2A9 ED 5C -  -  	mlt	de
 1807 D1:E2AB 7B -  -  -  	ld	a, e
 1808 D1:E2AC CD 70 1D 02 	call	_SetHLUToA
 1809 D1:E2B0 C5 -  -  -  	push	bc
 1810 D1:E2B1 D1 -  -  -  	pop	de
 1811 D1:E2B2 CD 48 1D 02 	call	_ChkBCIs0
 1812 D1:E2B6 3E 21 -  -  	ld	a, 021h
 1813 D1:E2B8 20 08 -  -  	jr	nz, +_
 1814 D1:E2BA 11 B7 ED 62 	ld	de, 062EDB7h
 1815 D1:E2BE C3 AA AC D1 	jp	InsertDEHL															;	or a \ sbc hl, hl \ ld (ix+*), hl
 1816 D1:E2C2 C3 A6 AC D1 _:	jp	InsertADEHL															;	ld hl, * \ ld (ix+*), hl
 1817 D1:E2C6 -  -  -  -  StoVariableXXX:
 1818 D1:E2C6 DD 7E FC -  	ld	a, (ix-4)
 1819 D1:E2C9 FE 03 -  -  	cp	typeChainAns
 1820 D1:E2CB 28 0A -  -  	jr	z, +_
 1821 D1:E2CD FE 01 -  -  	cp	typeVariable
 1822 D1:E2CF CA F7 E2 D1 	jp	z, ++_
 1823 D1:E2D3 C3 85 AF D1 	jp	UnknownError
 1824 D1:E2D7 CD F6 E3 D1 _:	call	StoTestStoToListElement
 1825 D1:E2DB C2 85 AF D1 	jp	nz, UnknownError
 1826 D1:E2DF 59 -  -  -  	ld	e, c
 1827 D1:E2E0 CD 89 AC D1 	call	InsertIXE															;	ld de, (ix+*)
 1828 D1:E2E4 3E ED -  -  	ld	a, 0EDh
 1829 D1:E2E6 CD 26 AD D1 	call	InsertA															;	ld (hl), de (1)
 1830 D1:E2EA 3E 1F -  -  	ld	a, 01Fh
 1831 D1:E2EC CD 26 AD D1 	call	InsertA															;	ld (hl), de (2)
 1832 D1:E2F0 3E 00 -  -  	ld	a, OutputIsInDE
 1833 D1:E2F2 32 DA EC D1 	ld	(ExprOutput2), a
 1834 D1:E2F6 C9 -  -  -  	ret
 1835 D1:E2F7 CD 80 AC D1 _:	call	InsertHIXC
 1836 D1:E2FB 21 DD 2F 00 	ld	hl, 0002FDDh
 1837 D1:E2FF 16 03 -  -  	ld	d, 3
 1838 D1:E301 ED 5C -  -  	mlt	de
 1839 D1:E303 7B -  -  -  	ld	a, e
 1840 D1:E304 CD 70 1D 02 	call	_SetHLUToA
 1841 D1:E308 C3 5E AC D1 	jp	InsertHL																;	ld ld (ix+*), hl
 1842 D1:E30C -  -  -  -  StoChainPushXXX:
 1843 D1:E30C DD 7E FC -  	ld	a, (ix-4)
 1844 D1:E30F FE 03 -  -  	cp	typeChainAns
 1845 D1:E311 C2 85 AF D1 _:	jp	nz, UnknownError
 1846 D1:E315 CD F6 E3 D1 	call	StoTestStoToListElement
 1847 D1:E319 20 F6 -  -  	jr	nz, -_
 1848 D1:E31B 21 D1 ED 1F 	ld	hl, 01FEDD1h
 1849 D1:E31F CD 5E AC D1 	call	InsertHL															;	pop de \ ld (hl), de
 1850 D1:E323 3E 00 -  -  	ld	a, OutputIsInDE
 1851 D1:E325 32 DA EC D1 	ld	(ExprOutput2), a
 1852 D1:E329 C9 -  -  -  	ret
 1853 D1:E32A -  -  -  -  StoChainAnsXXX:
 1854 D1:E32A DD 7E FC -  	ld	a, (ix-4)
 1855 D1:E32D FE 01 -  -  	cp	typeVariable
 1856 D1:E32F C2 2A AF D1 	jp	nz, StoError
 1857 D1:E333 21 DD 2F 00 _:	ld	hl, 0002FDDh
 1858 D1:E337 16 03 -  -  	ld	d, 3
 1859 D1:E339 ED 5C -  -  	mlt	de
 1860 D1:E33B 7B -  -  -  	ld	a, e
 1861 D1:E33C CD 70 1D 02 	call	_SetHLUToA
 1862 D1:E340 3A D9 EC D1 	ld	a, (ExprOutput)
 1863 D1:E344 B7 -  -  -  	or	a, a
 1864 D1:E345 20 02 -  -  	jr	nz, $+4
 1865 D1:E347 26 1F -  -  	ld	h, 01Fh
 1866 D1:E349 32 DA EC D1 	ld	(ExprOutput2), a
 1867 D1:E34D C3 5E AC D1 	jp	InsertHL																;	ld (ix+*), hl/de
 1868 D1:E351 -  -  -  -  StoFunctionXXX:
 1869 D1:E351 DD 7E FC -  	ld	a, (ix-4)
 1870 D1:E354 FE 03 -  -  	cp	typeChainAns
 1871 D1:E356 28 0A -  -  	jr	z, +_
 1872 D1:E358 FE 01 -  -  	cp	typeVariable
 1873 D1:E35A CA 88 E3 D1 	jp	z, ++_
 1874 D1:E35E C3 85 AF D1 	jp	UnknownError
 1875 D1:E362 CD F6 E3 D1 _:	call	StoTestStoToListElement
 1876 D1:E366 C2 85 AF D1 	jp	nz, UnknownError
 1877 D1:E36A 79 -  -  -  	ld	a, c
 1878 D1:E36B 06 01 -  -  	ld	b, OutputInDE
 1879 D1:E36D FD CB C0 F6 	set	need_push, (iy+fExpression1)
 1880 D1:E371 CD 52 AD D1 	call	GetFunction
 1881 D1:E375 3E ED -  -  	ld	a, 0EDh
 1882 D1:E377 CD 26 AD D1 	call	InsertA															;	ld (hl), de (1)
 1883 D1:E37B 3E 1F -  -  	ld	a, 01Fh
 1884 D1:E37D CD 26 AD D1 	call	InsertA															;	ld (hl), de (2)
 1885 D1:E381 3E 00 -  -  	ld	a, OutputIsInDE
 1886 D1:E383 32 DA EC D1 	ld	(ExprOutput2), a
 1887 D1:E387 C9 -  -  -  	ret
 1888 D1:E388 79 -  -  -  _:	ld	a, c
 1889 D1:E389 06 02 -  -  	ld	b, OutputInHL
 1890 D1:E38B CD 52 AD D1 	call	GetFunction
 1891 D1:E38F 21 DD 2F 00 	ld	hl, 0002FDDh
 1892 D1:E393 16 03 -  -  	ld	d, 3
 1893 D1:E395 ED 5C -  -  	mlt	de
 1894 D1:E397 7B -  -  -  	ld	a, e
 1895 D1:E398 CD 70 1D 02 	call	_SetHLUToA
 1896 D1:E39C C3 5E AC D1 	jp	InsertHL																;	ld (ix+*), hl
 1897 D1:E3A0 -  -  -  -  StoListXXX:
 1898 D1:E3A0 DD 7E FC -  	ld	a, (ix-4)
 1899 D1:E3A3 FE 06 -  -  	cp	typeOSList
 1900 D1:E3A5 C2 2A AF D1 	jp	nz, StoError
 1901 D1:E3A9 3E 21 -  -  	ld	a, 021h
 1902 D1:E3AB CD 26 AD D1 	call	InsertA															;	ld hl, *
 1903 D1:E3AF CD 3D AD D1 	call	InsertProgramPtrToDataOffset
 1904 D1:E3B3 2A CA EC D1 	ld	hl, (programDataDataPtr)
 1905 D1:E3B7 CD 5E AC D1 	call	InsertHL															;	ld hl, RANDOM
 1906 D1:E3BB 3E 11 -  -  	ld	a, 011h
 1907 D1:E3BD D5 -  -  -  	push	de
 1908 D1:E3BE E1 -  -  -  	pop	hl
 1909 D1:E3BF CD 5A AC D1 	call	InsertAHL															;	ld de, OSList
 1910 D1:E3C3 3E 01 -  -  	ld	a, 01h
 1911 D1:E3C5 CD 26 AD D1 	call	InsertA															;	ld bc, *
 1912 D1:E3C9 C5 -  -  -  	push	bc
 1913 D1:E3CA E1 -  -  -  	pop	hl
 1914 D1:E3CB 22 DD E3 D1 	ld	(StartData), hl
 1915 D1:E3CF ED 27 -  -  	ld	hl, (hl)
 1916 D1:E3D1 E5 -  -  -  	push	hl
 1917 D1:E3D2 C1 -  -  -  	pop	bc
 1918 D1:E3D3 CD 5E AC D1 	call	InsertHL															;	ld bc, LENGTH
 1919 D1:E3D7 ED 5B CA EC 
              D1 -  -  -  	ld	de, (programDataDataPtr)
 1920 D1:E3DC -  -  -  -  StartData = $+1
 1921 D1:E3DC 21 00 00 00 	ld	hl, 0
 1922 D1:E3E0 23 -  -  -  	inc	hl
 1923 D1:E3E1 23 -  -  -  	inc	hl
 1924 D1:E3E2 23 -  -  -  	inc	hl
 1925 D1:E3E3 ED B0 -  -  	ldir
 1926 D1:E3E5 ED 53 CA EC 
              D1 -  -  -  	ld	(programDataDataPtr), de
 1927 D1:E3EA 3E ED -  -  	ld	a, 0EDh
 1928 D1:E3EC CD 26 AD D1 	call	InsertA															;	ldir (1)
 1929 D1:E3F0 3E B0 -  -  	ld	a, 0B0h
 1930 D1:E3F2 C3 26 AD D1 	jp	InsertA																;	ldir (2)
 1931 D1:E3F6 -  -  -  -  	
 1932 D1:E3F6 -  -  -  -  StoTestStoToListElement:
 1933 D1:E3F6 2A B5 EC D1 	ld	hl, (programPtr)
 1934 D1:E3FA 2B -  -  -  	dec	hl
 1935 D1:E3FB 7E -  -  -  	ld	a, (hl)
 1936 D1:E3FC FE 27 -  -  	cp	027h
 1937 D1:E3FE 20 0B -  -  	jr	nz, StoLastOpcodeNotHLHL
 1938 D1:E400 2B -  -  -  	dec	hl
 1939 D1:E401 7E -  -  -  	ld	a, (hl)
 1940 D1:E402 FE ED -  -  	cp	0EDh
 1941 D1:E404 20 05 -  -  	jr	nz, StoLastOpcodeNotHLHL
 1942 D1:E406 22 B5 EC D1 	ld	(programPtr), hl
 1943 D1:E40A C9 -  -  -  	ret
 1944 D1:E40B -  -  -  -  StoLastOpcodeNotHLHL:
 1945 D1:E40B 2A B5 EC D1 	ld	hl, (programPtr)
 1946 D1:E40F 2B -  -  -  	dec	hl
 1947 D1:E410 2B -  -  -  	dec	hl
 1948 D1:E411 2B -  -  -  	dec	hl
 1949 D1:E412 2B -  -  -  	dec	hl
 1950 D1:E413 7E -  -  -  	ld	a, (hl)
 1951 D1:E414 FE 2A -  -  	cp	02Ah
 1952 D1:E416 C0 -  -  -  	ret	nz
 1953 D1:E417 36 21 -  -  	ld	(hl), 021h
 1954 D1:E419 C9 -  -  -  	ret
 1955 D1:E41A 00 -  -  -  	nop
 1956 D1:E41B 00 -  -  -  	nop
 1957 D1:E41C 00 -  -  -  	nop
Listing for file "ice.asm"
  460 D1:E41D -  -  -  -  #include "operators functions/function_for.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\operators functions\function_for.asm"
    1 D1:E41D -  -  -  -  functionFor:
    2 D1:E41D 21 D5 EC D1 	ld	hl, amountOfEnds
    3 D1:E421 34 -  -  -  	inc	(hl)
    4 D1:E422 3E 01 -  -  	ld	a, 1
    5 D1:E424 32 D2 EC D1 	ld	(openedParensF), a
    6 D1:E428 FD 36 AF 00 	ld	(iy+fFunction2), 0
    7 D1:E42C CD 28 10 02 	call	_IncFetch
    8 D1:E430 D6 41 -  -  	sub	tA
    9 D1:E432 DA A2 E6 D1 	jp	c, functionForSmall
   10 D1:E436 FE 1B -  -  	cp	ttheta+1-tA
   11 D1:E438 D2 A2 E6 D1 	jp	nc, functionForSmall
   12 D1:E43C -  -  -  -  ;    loop variable
   13 D1:E43C 47 -  -  -  	ld	b, a
   14 D1:E43D 87 -  -  -  	add	a, a
   15 D1:E43E 80 -  -  -  	add	a, b
   16 D1:E43F 32 77 E4 D1 	ld	(ForVariable1), a
   17 D1:E443 6F -  -  -  	ld	l, a
   18 D1:E444 E5 -  -  -  	push	hl
   19 D1:E445 CD 28 10 02 	call	_IncFetch
   20 D1:E449 DA 4B AF D1 _:	jp	c, ErrorSyntax
   21 D1:E44D FE 2B -  -  	cp	tComma
   22 D1:E44F C2 4B AF D1 	jp	nz, ErrorSyntax
   23 D1:E453 CD 28 10 02 	call	_IncFetch
   24 D1:E457 -  -  -  -  ;    loop start point
   25 D1:E457 2A B5 EC D1 	ld	hl, (programPtr)
   26 D1:E45B E5 -  -  -  	push	hl
   27 D1:E45C 21 B7 24 D1 	ld	hl, tempArg1
   28 D1:E460 22 B5 EC D1 	ld	(programPtr), hl
   29 D1:E464 CD 9D B2 D1 	call	ParseExpression
   30 D1:E468 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   31 D1:E46C FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   32 D1:E470 CA 4B AF D1 	jp	z, ErrorSyntax
   33 D1:E474 -  -  -  -  ForVariable1 = $+3
   34 D1:E474 21 DD 2F 00 	ld	hl, 0002FDDh
   35 D1:E478 CD 5E AC D1 	call	InsertHL                                        ;    ld (ix+*), hl
   36 D1:E47C CD 28 10 02 	call	_IncFetch
   37 D1:E480 38 C7 -  -  	jr	c, -_
   38 D1:E482 2A B5 EC D1 	ld	hl, (programPtr)
   39 D1:E486 11 B7 24 D1 	ld	de, tempArg1
   40 D1:E48A B7 -  -  -  	or	a, a
   41 D1:E48B ED 52 -  -  	sbc	hl, de
   42 D1:E48D EB -  -  -  	ex	de, hl
   43 D1:E48E E1 -  -  -  	pop	hl
   44 D1:E48F 22 B5 EC D1 	ld	(programPtr), hl
   45 D1:E493 D5 -  -  -  	push	de
   46 D1:E494 -  -  -  -  ;    loop end point
   47 D1:E494 CD 9D B2 D1 	call	ParseExpression
   48 D1:E498 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   49 D1:E49C 20 14 -  -  	jr	nz, ForEndPointIsNumber
   50 D1:E49E -  -  -  -  ForEndPointIsExpression:
   51 D1:E49E 3E 22 -  -  	ld	a, 022h
   52 D1:E4A0 CD 26 AD D1 	call	InsertA                                        ;    ld (******), hl
   53 D1:E4A4 2A B5 EC D1 	ld	hl, (programPtr)
   54 D1:E4A8 22 9A E5 D1 	ld	(ForEndPointExpression), hl
   55 D1:E4AC CD 5E AC D1 	call	InsertHL                                        ;    ld (RANDOM), hl
   56 D1:E4B0 18 17 -  -  	jr	ForGetStep
   57 D1:E4B2 -  -  -  -  ForEndPointIsNumber:
   58 D1:E4B2 FD CB AF D6 	set	end_point_is_number, (iy+fFunction2)
   59 D1:E4B6 2A B5 EC D1 	ld	hl, (programPtr)
   60 D1:E4BA 2B -  -  -  	dec	hl
   61 D1:E4BB 2B -  -  -  	dec	hl
   62 D1:E4BC 2B -  -  -  	dec	hl
   63 D1:E4BD ED 17 -  -  	ld	de, (hl)
   64 D1:E4BF 2B -  -  -  	dec	hl
   65 D1:E4C0 22 B5 EC D1 	ld	(programPtr), hl
   66 D1:E4C4 ED 53 A8 E5 
              D1 -  -  -  	ld	(ForFixedEndPoint), de
   67 D1:E4C9 -  -  -  -  ForGetStep:
   68 D1:E4C9 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   69 D1:E4CD FD CB BE 86 	res	triggered_a_comma, (iy+fExpression3)
   70 D1:E4D1 20 0B -  -  	jr	nz, +_
   71 D1:E4D3 -  -  -  -  ;    loop step
   72 D1:E4D3 FD CB AF CE 	set	for_step_is_number, (iy+fFunction2)
   73 D1:E4D7 21 01 00 00 	ld	hl, 1
   74 D1:E4DB E5 -  -  -  	push	hl
   75 D1:E4DC 18 76 -  -  	jr	ForStart
   76 D1:E4DE CD 28 10 02 _:	call	_IncFetch
   77 D1:E4E2 DA 4B AF D1 	jp	c, ErrorSyntax
   78 D1:E4E6 FE B0 -  -  	cp	tChs
   79 D1:E4E8 20 0C -  -  	jr	nz, +_
   80 D1:E4EA FD CB AF C6 	set	negative_for_step, (iy+fFunction2)
   81 D1:E4EE CD 28 10 02 	call	_IncFetch
   82 D1:E4F2 DA 4B AF D1 	jp	c, ErrorSyntax
   83 D1:E4F6 FE 41 -  -  _:	cp	a, tA
   84 D1:E4F8 38 34 -  -  	jr	c, ForGetStepNumber
   85 D1:E4FA FE 5C -  -  	cp	ttheta+1
   86 D1:E4FC D2 2E E5 D1 	jp	nc, ForGetStepNumber
   87 D1:E500 -  -  -  -  ForGetStepVariable:
   88 D1:E500 FD CB AF 8E 	res	for_step_is_number, (iy+fFunction2)
   89 D1:E504 CD 2C 10 02 	call	_CurFetch
   90 D1:E508 D6 41 -  -  	sub	a, tA
   91 D1:E50A 4F -  -  -  	ld	c, a
   92 D1:E50B CD 80 AC D1 	call	InsertHIXC                                        ;    ld hl, (ix+*)
   93 D1:E50F CD C0 0F 02 	call	_NxtFetch
   94 D1:E513 DA 4B AF D1 	jp	c, ErrorSyntax
   95 D1:E517 FE 3F -  -  	cp	tEnter
   96 D1:E519 C2 4B AF D1 	jp	nz, ErrorSyntax
   97 D1:E51D 3E 22 -  -  	ld	a, 022h
   98 D1:E51F CD 26 AD D1 	call	InsertA                                        ;    ld (*), hl
   99 D1:E523 2A B5 EC D1 	ld	hl, (programPtr)
  100 D1:E527 E5 -  -  -  	push	hl
  101 D1:E528 CD 5E AC D1 	call	InsertHL                                    ;    ld (RANDOM), hl
  102 D1:E52C 18 26 -  -  	jr	ForStart
  103 D1:E52E -  -  -  -  ForGetStepNumber:
  104 D1:E52E FD CB AF CE 	set	for_step_is_number, (iy+fFunction2)
  105 D1:E532 CD 9D B2 D1 	call	ParseExpression
  106 D1:E536 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  107 D1:E53A 20 BA -  -  	jr	nz, -_
  108 D1:E53C FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  109 D1:E540 CA 4B AF D1 	jp	z, ErrorSyntax
  110 D1:E544 2A B5 EC D1 	ld	hl, (programPtr)
  111 D1:E548 2B -  -  -  	dec	hl
  112 D1:E549 2B -  -  -  	dec	hl
  113 D1:E54A 2B -  -  -  	dec	hl
  114 D1:E54B 2B -  -  -  	dec	hl
  115 D1:E54C 22 B5 EC D1 	ld	(programPtr), hl
  116 D1:E550 23 -  -  -  	inc	hl
  117 D1:E551 ED 27 -  -  	ld	hl, (hl)
  118 D1:E553 E5 -  -  -  	push	hl
  119 D1:E554 -  -  -  -  ForStart:
  120 D1:E554 E1 -  -  -  	pop	hl
  121 D1:E555 D1 -  -  -  	pop	de
  122 D1:E556 E5 -  -  -  	push	hl
  123 D1:E557 2A B5 EC D1 	ld	hl, (programPtr)
  124 D1:E55B 19 -  -  -  	add	hl, de
  125 D1:E55C E5 -  -  -  	push	hl
  126 D1:E55D D5 -  -  -  	push	de
  127 D1:E55E C1 -  -  -  	pop	bc
  128 D1:E55F ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  129 D1:E564 21 B7 24 D1 	ld	hl, tempArg1
  130 D1:E568 ED B0 -  -  	ldir
  131 D1:E56A ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  132 D1:E56F FD CB AF 56 	bit	end_point_is_number, (iy+fFunction2)
  133 D1:E573 20 30 -  -  	jr	nz, ForInsertEndPointNumber
  134 D1:E575 -  -  -  -  ForInsertEndPointExpression:
  135 D1:E575 3E B7 -  -  	ld	a, 0B7h
  136 D1:E577 FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  137 D1:E57B 20 08 -  -  	jr	nz, +_
  138 D1:E57D FD CB AF 56 	bit	end_point_is_number, (iy+fFunction2)
  139 D1:E581 20 02 -  -  	jr	nz, +_
  140 D1:E583 3E 37 -  -  	ld	a, 037h
  141 D1:E585 32 B7 E5 D1 _:	ld	(ForSetCarryFlag), a
  142 D1:E589 3E 11 -  -  	ld	a, 011h
  143 D1:E58B CD 26 AD D1 	call	InsertA                                        ;    ld de, *
  144 D1:E58F 2A B5 EC D1 	ld	hl, (programPtr)
  145 D1:E593 11 81 7C FC 	ld	de, UserMem-program
  146 D1:E597 19 -  -  -  	add	hl, de
  147 D1:E598 EB -  -  -  	ex	de, hl
  148 D1:E599 -  -  -  -  ForEndPointExpression = $+1
  149 D1:E599 21 00 00 00 	ld	hl, 0
  150 D1:E59D ED 1F -  -  	ld	(hl), de
  151 D1:E59F CD 5E AC D1 	call	InsertHL                                        ;    ld de, RANDOM
  152 D1:E5A3 18 11 -  -  	jr	ForSkip
  153 D1:E5A5 -  -  -  -  ForInsertEndPointNumber:
  154 D1:E5A5 3E 11 -  -  	ld	a, 011h
  155 D1:E5A7 -  -  -  -  ForFixedEndPoint = $+1
  156 D1:E5A7 21 00 00 00 	ld	hl, 0
  157 D1:E5AB FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  158 D1:E5AF 20 01 -  -  	jr	nz, +_
  159 D1:E5B1 23 -  -  -  	inc	hl
  160 D1:E5B2 CD 5A AC D1 _:	call	InsertAHL                                        ;    ld de, *
  161 D1:E5B6 -  -  -  -  ForSkip:
  162 D1:E5B6 -  -  -  -  ForSetCarryFlag = $+1
  163 D1:E5B6 21 B7 ED 52 	ld	hl, 052EDB7h
  164 D1:E5BA CD 5E AC D1 	call	InsertHL                                        ;    or a \ sbc hl, de
  165 D1:E5BE 3E D2 -  -  	ld	a, 0D2h
  166 D1:E5C0 FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  167 D1:E5C4 28 02 -  -  	jr	z, +_
  168 D1:E5C6 C6 08 -  -  	add	a, 8
  169 D1:E5C8 CD 26 AD D1 _:	call	InsertA                                        ;    jp [n]c, *
  170 D1:E5CC 2A B5 EC D1 	ld	hl, (programPtr)
  171 D1:E5D0 E5 -  -  -  	push	hl
  172 D1:E5D1 CD 5E AC D1 	call	InsertHL                                    ;    jp [n]c, RANDOM
  173 D1:E5D5 FD 46 AF -  	ld	b, (iy+fFunction2)
  174 D1:E5D8 C5 -  -  -  	push	bc
  175 D1:E5D9 CD A7 AA D1 	call	ParseProgramUntilEnd
  176 D1:E5DD C1 -  -  -  	pop	bc
  177 D1:E5DE FD 70 AF -  	ld	(iy+fFunction2), b
  178 D1:E5E1 FE D0 -  -  	cp	a, tElse
  179 D1:E5E3 CA 4B AF D1 	jp	z, ErrorSyntax
  180 D1:E5E7 DD 21 00 00 
              00 -  -  -  	ld	ix, 0
  181 D1:E5EC DD 39 -  -  	add	ix, sp
  182 D1:E5EE DD 7E 09 -  	ld	a, (ix+9)
  183 D1:E5F1 21 DD 27 00 	ld	hl, 00027DDh
  184 D1:E5F5 CD 70 1D 02 	call	_SetHLUToA
  185 D1:E5F9 CD 5E AC D1 	call	InsertHL                                    ;    ld hl, (ix+*)
  186 D1:E5FD C1 -  -  -  	pop	bc
  187 D1:E5FE D1 -  -  -  	pop	de
  188 D1:E5FF E1 -  -  -  	pop	hl
  189 D1:E600 D5 -  -  -  	push	de
  190 D1:E601 C5 -  -  -  	push	bc
  191 D1:E602 FD CB AF 4E 	bit	for_step_is_number, (iy+fFunction2)
  192 D1:E606 28 19 -  -  	jr	z, InsertVariableChange
  193 D1:E608 -  -  -  -  InsertNumberChange:
  194 D1:E608 EB -  -  -  	ex	de, hl
  195 D1:E609 3E 01 -  -  	ld	a, 1
  196 D1:E60B 32 D9 EC D1 	ld	(ExprOutput), a
  197 D1:E60F FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  198 D1:E613 28 06 -  -  	jr	z, $+8
  199 D1:E615 CD 11 D6 D1 	call	SubChainAnsNumber
  200 D1:E619 18 04 -  -  	jr	$+6
  201 D1:E61B CD D9 D7 D1 	call	AddChainAnsNumber
  202 D1:E61F 18 29 -  -  	jr	InsertStop
  203 D1:E621 -  -  -  -  InsertVariableChange:
  204 D1:E621 EB -  -  -  	ex	de, hl
  205 D1:E622 3E 11 -  -  	ld	a, 011h
  206 D1:E624 CD 26 AD D1 	call	InsertA                                        ;    ld de, *
  207 D1:E628 2A B5 EC D1 	ld	hl, (programPtr)
  208 D1:E62C 01 81 7C FC 	ld	bc, UserMem-program
  209 D1:E630 09 -  -  -  	add	hl, bc
  210 D1:E631 EB -  -  -  	ex	de, hl
  211 D1:E632 ED 1F -  -  	ld	(hl), de
  212 D1:E634 CD 5E AC D1 	call	InsertHL                                        ;    ld de, RANDOM
  213 D1:E638 3E 19 -  -  	ld	a, 019h
  214 D1:E63A 21 B7 ED 52 	ld	hl, 052EDB7h
  215 D1:E63E FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  216 D1:E642 C4 5E AC D1 	call	nz, InsertHL                                    ;    or a \ sbc hl, de
  217 D1:E646 CC 26 AD D1 	call	z, InsertA                                        ;    add hl, de
  218 D1:E64A -  -  -  -  InsertStop:
  219 D1:E64A C1 -  -  -  	pop	bc
  220 D1:E64B D1 -  -  -  	pop	de
  221 D1:E64C E1 -  -  -  	pop	hl
  222 D1:E64D 7D -  -  -  	ld	a, l
  223 D1:E64E 21 DD 2F 00 	ld	hl, 0002FDDh
  224 D1:E652 CD 70 1D 02 	call	_SetHLUToA
  225 D1:E656 CD 5E AC D1 	call	InsertHL                                                    ;    ld (ix+*), hl
  226 D1:E65A B7 -  -  -  	or	a, a
  227 D1:E65B ED 52 -  -  	sbc	hl, de
  228 D1:E65D 7C -  -  -  	ld	a, h
  229 D1:E65E B7 -  -  -  	or	a, a
  230 D1:E65F 20 07 -  -  	jr	nz, ForBigLoop
  231 D1:E661 7D -  -  -  	ld	a, l
  232 D1:E662 2F -  -  -  	cpl
  233 D1:E663 3D -  -  -  	dec	a
  234 D1:E664 FE 80 -  -  	cp	a, 010000000b
  235 D1:E666 30 15 -  -  	jr	nc, ForSmallLoop
  236 D1:E668 -  -  -  -  ForBigLoop:
  237 D1:E668 3E C3 -  -  	ld	a, 0C3h
  238 D1:E66A FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  239 D1:E66E 28 02 -  -  	jr	z, $+4
  240 D1:E670 3E D2 -  -  	ld	a, 0D2h
  241 D1:E672 21 81 7C FC 	ld	hl, UserMem-program
  242 D1:E676 19 -  -  -  	add	hl, de
  243 D1:E677 CD 5A AC D1 	call	InsertAHL                                                    ;    jp [nc], ******
  244 D1:E67B 18 1A -  -  	jr	ForLoopInsert
  245 D1:E67D -  -  -  -  ForSmallLoop:
  246 D1:E67D DD 6F -  -  	ld	ixl, a
  247 D1:E67F 3E 18 -  -  	ld	a, 018h
  248 D1:E681 FD CB AF 46 	bit	negative_for_step, (iy+fFunction2)
  249 D1:E685 28 02 -  -  	jr	z, $+4
  250 D1:E687 3E 30 -  -  	ld	a, 030h
  251 D1:E689 CD 26 AD D1 	call	InsertA                                                    ;    jr [nc], **
  252 D1:E68D DD 7D -  -  	ld	a, ixl
  253 D1:E68F CD 26 AD D1 	call	InsertA                                                    ;    jr [nc], **
  254 D1:E693 2A B5 EC D1 	ld	hl, (programPtr)
  255 D1:E697 -  -  -  -  ForLoopInsert:
  256 D1:E697 11 81 7C FC 	ld	de, UserMem-program
  257 D1:E69B 19 -  -  -  	add	hl, de
  258 D1:E69C EB -  -  -  	ex	de, hl
  259 D1:E69D C5 -  -  -  	push	bc
  260 D1:E69E E1 -  -  -  	pop	hl
  261 D1:E69F ED 1F -  -  	ld	(hl), de
  262 D1:E6A1 C9 -  -  -  	ret
  263 D1:E6A2 -  -  -  -  
  264 D1:E6A2 -  -  -  -  functionForSmall:
  265 D1:E6A2 CD 9D B2 D1 	call	ParseExpression
  266 D1:E6A6 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  267 D1:E6AA 28 10 -  -  	jr	z, +_
  268 D1:E6AC 2A B5 EC D1 	ld	hl, (programPtr)
  269 D1:E6B0 2B -  -  -  	dec	hl
  270 D1:E6B1 2B -  -  -  	dec	hl
  271 D1:E6B2 22 B5 EC D1 	ld	(programPtr), hl
  272 D1:E6B6 2B -  -  -  	dec	hl
  273 D1:E6B7 2B -  -  -  	dec	hl
  274 D1:E6B8 36 06 -  -  	ld	(hl), 06h                                                     ;    ld b, *
  275 D1:E6BA 18 06 -  -  	jr	++_
  276 D1:E6BC 3E 45 -  -  _:	ld	a, 045h
  277 D1:E6BE CD 26 AD D1 	call	InsertA                                                    ;    ld b, l
  278 D1:E6C2 2A B5 EC D1 _:	ld	hl, (programPtr)
  279 D1:E6C6 E5 -  -  -  	push	hl
  280 D1:E6C7 3E C5 -  -  	ld	a, 0C5h
  281 D1:E6C9 CD 26 AD D1 	call	InsertA                                                ;    push bc
  282 D1:E6CD CD A7 AA D1 	call	ParseProgramUntilEnd
  283 D1:E6D1 3E C1 -  -  	ld	a, 0C1h
  284 D1:E6D3 CD 26 AD D1 	call	InsertA                                                ;    pop bc
  285 D1:E6D7 D1 -  -  -  	pop	de
  286 D1:E6D8 2A B5 EC D1 	ld	hl, (programPtr)
  287 D1:E6DC B7 -  -  -  	or	a, a
  288 D1:E6DD ED 52 -  -  	sbc	hl, de
  289 D1:E6DF 7C -  -  -  	ld	a, h
  290 D1:E6E0 B7 -  -  -  	or	a, a
  291 D1:E6E1 C2 9D AF D1 _:	jp	nz, ErrorTooLargeLoop
  292 D1:E6E5 7D -  -  -  	ld	a, l
  293 D1:E6E6 2F -  -  -  	cpl
  294 D1:E6E7 3D -  -  -  	dec	a
  295 D1:E6E8 FE 80 -  -  	cp	a, 010000000b
  296 D1:E6EA DA E1 E6 D1 	jp	c, -_
  297 D1:E6EE 47 -  -  -  	ld	b, a
  298 D1:E6EF 3E 10 -  -  	ld	a, 010h
  299 D1:E6F1 CD 26 AD D1 	call	InsertA                                                    ;    djnz *
  300 D1:E6F5 78 -  -  -  	ld	a, b
  301 D1:E6F6 C3 26 AD D1 	jp	InsertA                                                        ;    djnz *
Listing for file "ice.asm"
  461 D1:E6FA -  -  -  -  #include "operators functions/function_C.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\operators functions\function_C.asm"
    1 D1:E6FA -  -  -  -  CFunction0Args:
    2 D1:E6FA FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
    3 D1:E6FE C2 4B AF D1 	jp	nz, ErrorSyntax
    4 D1:E702 06 00 -  -  	ld	b, 0
    5 D1:E704 -  -  -  -  CInsertCallPops:
    6 D1:E704 FD CB AE CE 	set	modified_iy, (iy+fAlways1)
    7 D1:E708 21 E8 EA D1 	ld	hl, usedCroutines
    8 D1:E70C -  -  -  -  CFunctionArgsSMC = $+1
    9 D1:E70C 11 00 00 00 	ld	de, 0
   10 D1:E710 7B -  -  -  	ld	a, e
   11 D1:E711 B7 -  -  -  	or	a
   12 D1:E712 20 0B -  -  	jr	nz, +_
   13 D1:E714 E5 -  -  -  	push	hl
   14 D1:E715 21 2E 27 E5 	ld	hl, 0E5272Eh
   15 D1:E719 CD 5E AC D1 	call	InsertHL                                ; ld l, lcdBpp8 \ push hl
   16 D1:E71D 04 -  -  -  	inc	b
   17 D1:E71E E1 -  -  -  	pop	hl
   18 D1:E71F 19 -  -  -  _:	add	hl, de
   19 D1:E720 5E -  -  -  	ld	e, (hl)
   20 D1:E721 16 04 -  -  	ld	d, 4
   21 D1:E723 ED 5C -  -  	mlt	de
   22 D1:E725 21 F6 A8 D1 	ld	hl, CData2-CData+UserMem-4
   23 D1:E729 19 -  -  -  	add	hl, de
   24 D1:E72A CD 7C AC D1 	call	InsertCallHL                                    ; call *
   25 D1:E72E 78 -  -  -  	ld	a, b
   26 D1:E72F B7 -  -  -  	or	a, a
   27 D1:E730 C8 -  -  -  	ret	z
   28 D1:E731 3E E1 -  -  	ld	a, 0E1h
   29 D1:E733 CD 26 AD D1 _:	call	InsertA
   30 D1:E737 10 FA -  -  	djnz	-_
   31 D1:E739 C9 -  -  -  	ret	; pop hl
   32 D1:E73A -  -  -  -      
   33 D1:E73A -  -  -  -  CFunction1Arg:
   34 D1:E73A FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   35 D1:E73E CA 4B AF D1 	jp	z, ErrorSyntax
   36 D1:E742 2A B5 EC D1 	ld	hl, (programPtr)
   37 D1:E746 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   38 D1:E74A CD DD AC D1 	call	CGetArgumentLast
   39 D1:E74E 06 01 -  -  	ld	b, 1
   40 D1:E750 18 B2 -  -  	jr	CInsertCallPops
   41 D1:E752 -  -  -  -          
   42 D1:E752 -  -  -  -  CFunction2Args:
   43 D1:E752 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   44 D1:E756 CA 4B AF D1 	jp	z, ErrorSyntax
   45 D1:E75A 2A B5 EC D1 	ld	hl, (programPtr)
   46 D1:E75E 22 70 E7 D1 	ld	(CFunction2ArgsSMC2), hl
   47 D1:E762 21 B7 24 D1 	ld	hl, tempArg1
   48 D1:E766 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   49 D1:E76A CD E1 AC D1 	call	CGetArgument
   50 D1:E76E E5 -  -  -  	push	hl
   51 D1:E76F -  -  -  -  CFunction2ArgsSMC2 = $+1
   52 D1:E76F 21 00 00 00 	ld	hl, 0
   53 D1:E773 FD CB B0 5E 	bit	arg2_is_small, (iy+fFunction1)
   54 D1:E777 CD DD AC D1 	call	CGetArgumentLast
   55 D1:E77B ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
   56 D1:E780 E1 -  -  -  	pop	hl
   57 D1:E781 01 B7 24 D1 	ld	bc, tempArg1
   58 D1:E785 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
   59 D1:E789 CD 33 AD D1 	call	CAddArgument
   60 D1:E78D ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
   61 D1:E792 06 02 -  -  	ld	b, 2
   62 D1:E794 C3 04 E7 D1 	jp	CInsertCallPops
   63 D1:E798 -  -  -  -      
   64 D1:E798 -  -  -  -  CFunction3Args:
   65 D1:E798 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
   66 D1:E79C CA 4B AF D1 	jp	z, ErrorSyntax
   67 D1:E7A0 2A B5 EC D1 	ld	hl, (programPtr)
   68 D1:E7A4 22 CD E7 D1 	ld	(CFunction3ArgsSMC2), hl
   69 D1:E7A8 21 B7 24 D1 	ld	hl, tempArg1
   70 D1:E7AC FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
   71 D1:E7B0 CD E1 AC D1 	call	CGetArgument
   72 D1:E7B4 FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
   73 D1:E7B8 F5 -  -  -  	push	af
   74 D1:E7B9 FD CB C0 7E 	bit	output_is_string, (iy+fExpression1)
   75 D1:E7BD F5 -  -  -  	push	af
   76 D1:E7BE E5 -  -  -  	push	hl
   77 D1:E7BF 21 9F 28 D1 	ld	hl, tempArg2
   78 D1:E7C3 FD CB B0 5E 	bit	arg2_is_small, (iy+fFunction1)
   79 D1:E7C7 CD E1 AC D1 	call	CGetArgument
   80 D1:E7CB E5 -  -  -  	push	hl
   81 D1:E7CC -  -  -  -  CFunction3ArgsSMC2 = $+1
   82 D1:E7CC 21 00 00 00 	ld	hl, 0
   83 D1:E7D0 FD CB B0 56 	bit	arg3_is_small, (iy+fFunction1)
   84 D1:E7D4 CD DD AC D1 	call	CGetArgumentLast
   85 D1:E7D8 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
   86 D1:E7DD E1 -  -  -  	pop	hl
   87 D1:E7DE 01 9F 28 D1 	ld	bc, tempArg2
   88 D1:E7E2 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
   89 D1:E7E6 CD 33 AD D1 	call	CAddArgument
   90 D1:E7EA E1 -  -  -  	pop	hl
   91 D1:E7EB 01 B7 24 D1 	ld	bc, tempArg1
   92 D1:E7EF CD 73 EA D1 	call	CCheckIfPrevArgIsSame
   93 D1:E7F3 B7 -  -  -  	or	a, a
   94 D1:E7F4 ED 42 -  -  	sbc	hl, bc
   95 D1:E7F6 E5 -  -  -  	push	hl
   96 D1:E7F7 C1 -  -  -  	pop	bc
   97 D1:E7F8 21 B7 24 D1 	ld	hl, tempArg1
   98 D1:E7FC ED A0 -  -  	ldi
   99 D1:E7FE F1 -  -  -  	pop	af
  100 D1:E7FF 28 0B -  -  	jr	z, +_
  101 D1:E801 E5 -  -  -  	push	hl
  102 D1:E802 2A C1 EC D1 	ld	hl, (programDataOffsetPtr)
  103 D1:E806 2B -  -  -  	dec	hl
  104 D1:E807 2B -  -  -  	dec	hl
  105 D1:E808 2B -  -  -  	dec	hl
  106 D1:E809 ED 1F -  -  	ld	(hl), de
  107 D1:E80B E1 -  -  -  	pop	hl
  108 D1:E80C ED B0 -  -  _:	ldir
  109 D1:E80E ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  110 D1:E813 06 03 -  -  	ld	b, 3
  111 D1:E815 CD 04 E7 D1 	call	CInsertCallPops
  112 D1:E819 3A 0D E7 D1 	ld	a, (CFunctionArgsSMC)
  113 D1:E81D FE 3B -  -  	cp	a, 59
  114 D1:E81F 28 0C -  -  	jr	z, CInsertSprite
  115 D1:E821 FE 3C -  -  	cp	a, 60
  116 D1:E823 28 08 -  -  	jr	z, CInsertSprite
  117 D1:E825 F1 -  -  -  	pop	af
  118 D1:E826 C9 -  -  -  	ret
  119 D1:E827 -  -  -  -      
  120 D1:E827 -  -  -  -  CInsertSpriteScaled:
  121 D1:E827 01 F3 FF FF 	ld	bc, -13
  122 D1:E82B 18 04 -  -  	jr	+_
  123 D1:E82D -  -  -  -  CInsertSprite:
  124 D1:E82D 01 F5 FF FF 	ld	bc, -11
  125 D1:E831 F1 -  -  -  _:	pop	af
  126 D1:E832 2A B5 EC D1 	ld	hl, (programPtr)
  127 D1:E836 28 1B -  -  	jr	z, +_
  128 D1:E838 09 -  -  -  	add	hl, bc
  129 D1:E839 E5 -  -  -  	push	hl
  130 D1:E83A ED 27 -  -  	ld	hl, (hl)
  131 D1:E83C E5 -  -  -  	push	hl
  132 D1:E83D D1 -  -  -  	pop	de
  133 D1:E83E 29 -  -  -  	add	hl, hl
  134 D1:E83F 19 -  -  -  	add	hl, de
  135 D1:E840 ED 5B 0A 32 
              D0 -  -  -  	ld	de, (PrevProgramPtr)
  136 D1:E845 19 -  -  -  	add	hl, de
  137 D1:E846 11 81 7C FC 	ld	de, UserMem - program
  138 D1:E84A 19 -  -  -  	add	hl, de
  139 D1:E84B EB -  -  -  	ex	de, hl
  140 D1:E84C E1 -  -  -  	pop	hl
  141 D1:E84D ED 1F -  -  	ld	(hl), de
  142 D1:E84F 2B -  -  -  	dec	hl
  143 D1:E850 36 2A -  -  	ld	(hl), 02Ah                                    ; ld hl, (XXXXXX)
  144 D1:E852 C9 -  -  -  	ret
  145 D1:E853 03 -  -  -  _:	inc	bc
  146 D1:E854 03 -  -  -  	inc	bc
  147 D1:E855 03 -  -  -  	inc	bc
  148 D1:E856 09 -  -  -  	add	hl, bc
  149 D1:E857 22 B5 EC D1 	ld	(programPtr), hl
  150 D1:E85B 23 -  -  -  	inc	hl
  151 D1:E85C 23 -  -  -  	inc	hl
  152 D1:E85D ED 27 -  -  	ld	hl, (hl)
  153 D1:E85F E5 -  -  -  	push	hl
  154 D1:E860 3E E5 -  -  	ld	a, 0E5h
  155 D1:E862 CD 26 AD D1 	call	InsertA                                    ; push hl
  156 D1:E866 3E D1 -  -  	ld	a, 0D1h
  157 D1:E868 21 29 19 11 	ld	hl, 0111929h
  158 D1:E86C CD 5A AC D1 	call	InsertAHL                                ; pop de \ add hl, hl \ add hl, de \ ld de, ******
  159 D1:E870 2A 0A 32 D0 	ld	hl, (PrevProgramPtr)
  160 D1:E874 11 81 7C FC 	ld	de, UserMem - program
  161 D1:E878 19 -  -  -  	add	hl, de
  162 D1:E879 CD 5E AC D1 	call	InsertHL                                ; ld de, XXXXXX
  163 D1:E87D 3E 19 -  -  	ld	a, 019h
  164 D1:E87F 21 ED 27 E5 	ld	hl, 0E527EDh
  165 D1:E883 CD 5A AC D1 	call	InsertAHL                                ; add hl, de \ ld hl, (hl) \ push hl
  166 D1:E887 E1 -  -  -  	pop	hl
  167 D1:E888 CD 7C AC D1 	call	InsertCallHL                                    ; call ******
  168 D1:E88C 21 E1 E1 E1 	ld	hl, 0E1E1E1h
  169 D1:E890 CD 5E AC D1 	call	InsertHL                                    ; pop hl \ pop hl \ pop hl
  170 D1:E894 3A 0D E7 D1 	ld	a, (CFunctionArgsSMC)
  171 D1:E898 FE 3E -  -  	cp	a, 62
  172 D1:E89A D8 -  -  -  	ret	c
  173 D1:E89B 3E E1 -  -  	ld	a, 0E1h
  174 D1:E89D CD 26 AD D1 	call	InsertA                                        ; pop hl
  175 D1:E8A1 C3 26 AD D1 	jp	InsertA                                        ; pop hl
  176 D1:E8A5 -  -  -  -      
  177 D1:E8A5 -  -  -  -  CFunction4Args:
  178 D1:E8A5 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  179 D1:E8A9 CA 4B AF D1 	jp	z, ErrorSyntax
  180 D1:E8AD 2A B5 EC D1 	ld	hl, (programPtr)
  181 D1:E8B1 22 DD E8 D1 	ld	(CFunction4ArgsSMC2), hl
  182 D1:E8B5 21 B7 24 D1 	ld	hl, tempArg1
  183 D1:E8B9 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  184 D1:E8BD CD E1 AC D1 	call	CGetArgument
  185 D1:E8C1 E5 -  -  -  	push	hl
  186 D1:E8C2 21 9F 28 D1 	ld	hl, tempArg2
  187 D1:E8C6 FD CB B0 5E 	bit	arg2_is_small, (iy+fFunction1)
  188 D1:E8CA CD E1 AC D1 	call	CGetArgument
  189 D1:E8CE E5 -  -  -  	push	hl
  190 D1:E8CF 21 87 2C D1 	ld	hl, tempArg3
  191 D1:E8D3 FD CB B0 56 	bit	arg3_is_small, (iy+fFunction1)
  192 D1:E8D7 CD E1 AC D1 	call	CGetArgument
  193 D1:E8DB E5 -  -  -  	push	hl
  194 D1:E8DC -  -  -  -  CFunction4ArgsSMC2 = $+1
  195 D1:E8DC 21 00 00 00 	ld	hl, 0
  196 D1:E8E0 FD CB B0 4E 	bit	arg4_is_small, (iy+fFunction1)
  197 D1:E8E4 CD DD AC D1 	call	CGetArgumentLast
  198 D1:E8E8 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  199 D1:E8ED E1 -  -  -  	pop	hl
  200 D1:E8EE 01 87 2C D1 	ld	bc, tempArg3
  201 D1:E8F2 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  202 D1:E8F6 CD 33 AD D1 	call	CAddArgument
  203 D1:E8FA E1 -  -  -  	pop	hl
  204 D1:E8FB 01 9F 28 D1 	ld	bc, tempArg2
  205 D1:E8FF CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  206 D1:E903 CD 33 AD D1 	call	CAddArgument
  207 D1:E907 E1 -  -  -  	pop	hl
  208 D1:E908 01 B7 24 D1 	ld	bc, tempArg1
  209 D1:E90C CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  210 D1:E910 CD 33 AD D1 	call	CAddArgument
  211 D1:E914 ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  212 D1:E919 06 04 -  -  	ld	b, 4
  213 D1:E91B C3 04 E7 D1 	jp	CInsertCallPops
  214 D1:E91F -  -  -  -      
  215 D1:E91F -  -  -  -  CFunction5Args:
  216 D1:E91F FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  217 D1:E923 CA 4B AF D1 	jp	z, ErrorSyntax
  218 D1:E927 2A B5 EC D1 	ld	hl, (programPtr)
  219 D1:E92B 22 69 E9 D1 	ld	(CFunction5ArgsSMC2), hl
  220 D1:E92F 21 B7 24 D1 	ld	hl, tempArg1
  221 D1:E933 FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  222 D1:E937 CD E1 AC D1 	call	CGetArgument
  223 D1:E93B FD CB C0 66 	bit	output_is_number, (iy+fExpression1)
  224 D1:E93F F5 -  -  -  	push	af
  225 D1:E940 E5 -  -  -  	push	hl
  226 D1:E941 21 9F 28 D1 	ld	hl, tempArg2
  227 D1:E945 FD CB B0 5E 	bit	arg2_is_small, (iy+fFunction1)
  228 D1:E949 CD E1 AC D1 	call	CGetArgument
  229 D1:E94D E5 -  -  -  	push	hl
  230 D1:E94E 21 87 2C D1 	ld	hl, tempArg3
  231 D1:E952 FD CB B0 56 	bit	arg3_is_small, (iy+fFunction1)
  232 D1:E956 CD E1 AC D1 	call	CGetArgument
  233 D1:E95A E5 -  -  -  	push	hl
  234 D1:E95B 21 6F 30 D1 	ld	hl, tempArg4
  235 D1:E95F FD CB B0 4E 	bit	arg4_is_small, (iy+fFunction1)
  236 D1:E963 CD E1 AC D1 	call	CGetArgument
  237 D1:E967 E5 -  -  -  	push	hl
  238 D1:E968 -  -  -  -  CFunction5ArgsSMC2 = $+1
  239 D1:E968 21 00 00 00 	ld	hl, 0
  240 D1:E96C FD CB B0 46 	bit	arg5_is_small, (iy+fFunction1)
  241 D1:E970 CD DD AC D1 	call	CGetArgumentLast
  242 D1:E974 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  243 D1:E979 E1 -  -  -  	pop	hl
  244 D1:E97A 01 6F 30 D1 	ld	bc, tempArg4
  245 D1:E97E CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  246 D1:E982 CD 33 AD D1 	call	CAddArgument
  247 D1:E986 E1 -  -  -  	pop	hl
  248 D1:E987 01 87 2C D1 	ld	bc, tempArg3
  249 D1:E98B CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  250 D1:E98F CD 33 AD D1 	call	CAddArgument
  251 D1:E993 E1 -  -  -  	pop	hl
  252 D1:E994 01 9F 28 D1 	ld	bc, tempArg2
  253 D1:E998 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  254 D1:E99C CD 33 AD D1 	call	CAddArgument
  255 D1:E9A0 E1 -  -  -  	pop	hl
  256 D1:E9A1 01 B7 24 D1 	ld	bc, tempArg1
  257 D1:E9A5 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  258 D1:E9A9 CD 33 AD D1 	call	CAddArgument
  259 D1:E9AD ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  260 D1:E9B2 06 05 -  -  	ld	b, 5
  261 D1:E9B4 CD 04 E7 D1 	call	CInsertCallPops
  262 D1:E9B8 3A 0D E7 D1 	ld	a, (CFunctionArgsSMC)
  263 D1:E9BC FE 3E -  -  	cp	a, 62
  264 D1:E9BE CA 27 E8 D1 _:	jp	z, CInsertSpriteScaled
  265 D1:E9C2 FE 3F -  -  	cp	a, 63
  266 D1:E9C4 28 F8 -  -  	jr	z, -_
  267 D1:E9C6 F1 -  -  -  	pop	af
  268 D1:E9C7 C9 -  -  -  	ret
  269 D1:E9C8 -  -  -  -      
  270 D1:E9C8 -  -  -  -  CFunction6Args:
  271 D1:E9C8 FD CB BE 46 	bit	triggered_a_comma, (iy+fExpression3)
  272 D1:E9CC CA 4B AF D1 	jp	z, ErrorSyntax
  273 D1:E9D0 2A B5 EC D1 	ld	hl, (programPtr)
  274 D1:E9D4 22 1A EA D1 	ld	(CFunction6ArgsSMC2), hl
  275 D1:E9D8 21 B7 24 D1 	ld	hl, tempArg1
  276 D1:E9DC FD CB B0 66 	bit	arg1_is_small, (iy+fFunction1)
  277 D1:E9E0 CD E1 AC D1 	call	CGetArgument
  278 D1:E9E4 E5 -  -  -  	push	hl
  279 D1:E9E5 21 9F 28 D1 	ld	hl, tempArg2
  280 D1:E9E9 FD CB B0 5E 	bit	arg2_is_small, (iy+fFunction1)
  281 D1:E9ED CD E1 AC D1 	call	CGetArgument
  282 D1:E9F1 E5 -  -  -  	push	hl
  283 D1:E9F2 21 87 2C D1 	ld	hl, tempArg3
  284 D1:E9F6 FD CB B0 56 	bit	arg3_is_small, (iy+fFunction1)
  285 D1:E9FA CD E1 AC D1 	call	CGetArgument
  286 D1:E9FE E5 -  -  -  	push	hl
  287 D1:E9FF 21 6F 30 D1 	ld	hl, tempArg4
  288 D1:EA03 FD CB B0 4E 	bit	arg4_is_small, (iy+fFunction1)
  289 D1:EA07 CD E1 AC D1 	call	CGetArgument
  290 D1:EA0B E5 -  -  -  	push	hl
  291 D1:EA0C 21 57 34 D1 	ld	hl, tempArg5
  292 D1:EA10 FD CB B0 46 	bit	arg5_is_small, (iy+fFunction1)
  293 D1:EA14 CD E1 AC D1 	call	CGetArgument
  294 D1:EA18 E5 -  -  -  	push	hl
  295 D1:EA19 -  -  -  -  CFunction6ArgsSMC2 = $+1
  296 D1:EA19 21 00 00 00 	ld	hl, 0
  297 D1:EA1D BF -  -  -  	cp	a, a                    ;    reset zero flag
  298 D1:EA1E CD DD AC D1 	call	CGetArgumentLast
  299 D1:EA22 ED 5B B5 EC 
              D1 -  -  -  	ld	de, (programPtr)
  300 D1:EA27 E1 -  -  -  	pop	hl
  301 D1:EA28 01 57 34 D1 	ld	bc, tempArg5
  302 D1:EA2C CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  303 D1:EA30 CD 33 AD D1 	call	CAddArgument
  304 D1:EA34 E1 -  -  -  	pop	hl
  305 D1:EA35 01 6F 30 D1 	ld	bc, tempArg4
  306 D1:EA39 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  307 D1:EA3D CD 33 AD D1 	call	CAddArgument
  308 D1:EA41 E1 -  -  -  	pop	hl
  309 D1:EA42 01 87 2C D1 	ld	bc, tempArg3
  310 D1:EA46 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  311 D1:EA4A CD 33 AD D1 	call	CAddArgument
  312 D1:EA4E E1 -  -  -  	pop	hl
  313 D1:EA4F 01 9F 28 D1 	ld	bc, tempArg2
  314 D1:EA53 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  315 D1:EA57 CD 33 AD D1 	call	CAddArgument
  316 D1:EA5B E1 -  -  -  	pop	hl
  317 D1:EA5C 01 B7 24 D1 	ld	bc, tempArg1
  318 D1:EA60 CD 73 EA D1 	call	CCheckIfPrevArgIsSame
  319 D1:EA64 CD 33 AD D1 	call	CAddArgument
  320 D1:EA68 ED 53 B5 EC 
              D1 -  -  -  	ld	(programPtr), de
  321 D1:EA6D 06 06 -  -  	ld	b, 6
  322 D1:EA6F C3 04 E7 D1 	jp	CInsertCallPops
  323 D1:EA73 -  -  -  -      
  324 D1:EA73 -  -  -  -  CCheckIfPrevArgIsSame:                          ; This routine is broken, 0x5
  325 D1:EA73 E5 -  -  -  	push	hl
  326 D1:EA74 D5 -  -  -  	push	de
  327 D1:EA75 C5 -  -  -  	push	bc
  328 D1:EA76 B7 -  -  -  	or	a, a
  329 D1:EA77 ED 42 -  -  	sbc	hl, bc
  330 D1:EA79 EB -  -  -  	ex	de, hl
  331 D1:EA7A ED 52 -  -  	sbc	hl, de
  332 D1:EA7C D1 -  -  -  	pop	de
  333 D1:EA7D 1A -  -  -  _:	ld	a, (de)
  334 D1:EA7E BE -  -  -  	cp	a, (hl)
  335 D1:EA7F 23 -  -  -  	inc	hl
  336 D1:EA80 13 -  -  -  	inc	de
  337 D1:EA81 28 FA -  -  	jr	z, -_
  338 D1:EA83 D1 -  -  -  	pop	de
  339 D1:EA84 E1 -  -  -  	pop	hl
  340 D1:EA85 C0 -  -  -  	ret	nz
  341 D1:EA86 E5 -  -  -  	push	hl
  342 D1:EA87 C1 -  -  -  	pop	bc
  343 D1:EA88 0B -  -  -  	dec	bc
  344 D1:EA89 C9 -  -  -  	ret
Listing for file "ice.asm"
  462 D1:EA8A -  -  -  -  #include "clibs/graphics.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\clibs\graphics.asm"
    1 D1:EA8A -  -  -  -  ; Byte:                                                                 . . . . . . . .
    2 D1:EA8A -  -  -  -  ;   <---> <------->
    3 D1:EA8A -  -  -  -  ;   First 3 bits = amount of arguments
    4 D1:EA8A -  -  -  -  ;   Last  5 bits = argument is small (expects uint8_t)
    5 D1:EA8A -  -  -  -  ;   Special case: 
    6 D1:EA8A -  -  -  -  ;     11100000: special function which needs a separate function
    7 D1:EA8A -  -  -  -  ;     11110000: not implemented (yet)
    8 D1:EA8A -  -  -  -  
    9 D1:EA8A -  -  -  -  CFunctionsArguments:
   10 D1:EA8A 00 -  -  -  Begin:                         .db 000000000b
   11 D1:EA8B 00 -  -  -  End_:                          .db 000000000b
   12 D1:EA8C 30 -  -  -  SetColor:                      .db 000110000b
   13 D1:EA8D 00 -  -  -  SetDefaultPalette:             .db 000000000b
   14 D1:EA8E E0 -  -  -  SetPalette:                    .db 011100000b
   15 D1:EA8F 30 -  -  -  FillScreen:                    .db 000110000b
   16 D1:EA90 48 -  -  -  SetPixel:                      .db 001001000b
   17 D1:EA91 E0 -  -  -  GetPixel:                      .db 011100000b
   18 D1:EA92 E0 -  -  -  GetDraw:                       .db 011100000b
   19 D1:EA93 30 -  -  -  SetDraw:                       .db 000110000b
   20 D1:EA94 00 -  -  -  SwapDraw:                      .db 000000000b
   21 D1:EA95 30 -  -  -  Blit:                          .db 000110000b
   22 D1:EA96 7C -  -  -  BlitLines:                     .db 001111100b
   23 D1:EA97 B5 -  -  -  BlitArea:                      .db 010110101b
   24 D1:EA98 30 -  -  -  PrintChar:                     .db 000110000b
   25 D1:EA99 48 -  -  -  PrintInt:                      .db 001001000b
   26 D1:EA9A 48 -  -  -  PrintUInt:                     .db 001001000b
   27 D1:EA9B 20 -  -  -  PrintString_:                  .db 000100000b
   28 D1:EA9C 60 -  -  -  PrintStringXY:                 .db 001100000b
   29 D1:EA9D 48 -  -  -  SetTextXY:                     .db 001001000b
   30 D1:EA9E 30 -  -  -  SetTextBGColor:                .db 000110000b
   31 D1:EA9F 30 -  -  -  SetTextFGColor:                .db 000110000b
   32 D1:EAA0 30 -  -  -  SetTextTransparentColor:       .db 000110000b
   33 D1:EAA1 E0 -  -  -  SetCustomFontData:             .db 011100000b
   34 D1:EAA2 E0 -  -  -  SetCustomFontSpacing:          .db 011100000b
   35 D1:EAA3 30 -  -  -  SetMonospaceFont:              .db 000110000b
   36 D1:EAA4 E0 -  -  -  GetStringWidth:                .db 011100000b
   37 D1:EAA5 E0 -  -  -  GetCharWidth:                  .db 011100000b
   38 D1:EAA6 E0 -  -  -  GetTextX:                      .db 011100000b
   39 D1:EAA7 E0 -  -  -  GetTextY:                      .db 011100000b
   40 D1:EAA8 80 -  -  -  Line:                          .db 010000000b
   41 D1:EAA9 60 -  -  -  HorizLine:                     .db 001100000b
   42 D1:EAAA 60 -  -  -  VertLine:                      .db 001100000b
   43 D1:EAAB 60 -  -  -  Circle:                        .db 001100000b
   44 D1:EAAC 60 -  -  -  FillCircle:                    .db 001100000b
   45 D1:EAAD 80 -  -  -  Rectangle:                     .db 010000000b
   46 D1:EAAE 80 -  -  -  FillRectangle:                 .db 010000000b
   47 D1:EAAF 80 -  -  -  LineNoClip:                    .db 010000000b
   48 D1:EAB0 60 -  -  -  HorizLineNoClip:               .db 001100000b
   49 D1:EAB1 60 -  -  -  VertLineNoClip:                .db 001100000b
   50 D1:EAB2 60 -  -  -  FillCircleNoClip:              .db 001100000b
   51 D1:EAB3 80 -  -  -  RectangleNoClip:               .db 010000000b
   52 D1:EAB4 80 -  -  -  FillRectangleNoClip:           .db 010000000b
   53 D1:EAB5 82 -  -  -  SetClipRegion:                 .db 010000010b
   54 D1:EAB6 E0 -  -  -  GetClipRegion:                 .db 011100000b
   55 D1:EAB7 20 -  -  -  ShiftDown:                     .db 000100000b
   56 D1:EAB8 20 -  -  -  ShiftUp:                       .db 000100000b
   57 D1:EAB9 20 -  -  -  ShiftLeft:                     .db 000100000b
   58 D1:EABA 20 -  -  -  ShiftRight:                    .db 000100000b
   59 D1:EABB E0 -  -  -  Tilemap:                       .db 011100000b
   60 D1:EABC E0 -  -  -  TilemapNoClip:                 .db 011100000b
   61 D1:EABD E0 -  -  -  TransparentTilemap:            .db 011100000b
   62 D1:EABE E0 -  -  -  TransparentTilemapNoClip:      .db 011100000b
   63 D1:EABF E0 -  -  -  TilePtr:                       .db 011100000b
   64 D1:EAC0 E0 -  -  -  TilePtrMapped:                 .db 011100000b
   65 D1:EAC1 E0 -  -  -  LZDecompress:                  .db 011100000b
   66 D1:EAC2 E0 -  -  -  AllocSprite:                   .db 011100000b
   67 D1:EAC3 E0 -  -  -  Sprite:                        .db 011100000b
   68 D1:EAC4 E0 -  -  -  TransparentSprite:             .db 011100000b
   69 D1:EAC5 64 -  -  -  SpriteNoClip:                  .db 001100100b
   70 D1:EAC6 64 -  -  -  TransparentSpriteNoClip:       .db 001100100b
   71 D1:EAC7 E0 -  -  -  GetSpriteNoClip:               .db 011100000b
   72 D1:EAC8 A7 -  -  -  ScaledSpriteNoClip:            .db 010100111b
   73 D1:EAC9 A7 -  -  -  ScaledTransparentSpriteNoClip: .db 010100111b
   74 D1:EACA E0 -  -  -  FlipSpriteY:                   .db 011100000b
   75 D1:EACB E0 -  -  -  FlipSpriteX:                   .db 011100000b
   76 D1:EACC E0 -  -  -  RotateSpriteC:                 .db 011100000b
   77 D1:EACD E0 -  -  -  RotateSpriteCC:                .db 011100000b
   78 D1:EACE E0 -  -  -  RotateSpriteHalf:              .db 011100000b
   79 D1:EACF E0 -  -  -  Polygon:                       .db 011100000b
   80 D1:EAD0 E0 -  -  -  PolygonNoClip:                 .db 011100000b
   81 D1:EAD1 C0 -  -  -  FillTriangle:                  .db 011000000b
   82 D1:EAD2 C0 -  -  -  FillTriangleNoClip:            .db 011000000b
   83 D1:EAD3 E0 -  -  -  LZDecompressSprite:            .db 011100000b
   84 D1:EAD4 58 -  -  -  SetTextScale:                  .db 001011000b
   85 D1:EAD5 30 -  -  -  SetTransparentColor:           .db 000110000b
   86 D1:EAD6 00 -  -  -  ZeroScreen:                    .db 000000000b
   87 D1:EAD7 30 -  -  -  SetTextConfig:                 .db 000110000b
   88 D1:EAD8 E0 -  -  -  GetSpriteChar:                 .db 011100000b
   89 D1:EAD9 E0 -  -  -  Lighten:                       .db 011100000b
   90 D1:EADA E0 -  -  -  Darken:                        .db 011100000b
   91 D1:EADB 30 -  -  -  SetFontHeight:                 .db 000110000b
   92 D1:EADC E0 -  -  -  ScaleSprite:                   .db 011100000b
   93 D1:EADD 6C -  -  -  FloodFill:                     .db 001101100b
Listing for file "ice.asm"
  463 D1:EADE -  -  -  -  varname:
  464 D1:EADE 06 00 00 00 
              00 00 00 00 
              00 00 -  -  	.db	ProtProgObj, 0,0,0,0,0,0,0,0,0
  465 D1:EAE8 -  -  -  -      
  466 D1:EAE8 -  -  -  -  usedCroutines:
  467 D1:EAE8 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 .fill       AMOUNT_OF_C_FUNCTIONS, 0
  468 D1:EB3C -  -  -  -  ;app_data()
  469 D1:EB3C -  -  -  -  #include "data.asm"
Listing for file "C:\programming\Assembly\ICE\ICE ASM\data.asm"
    1 D1:EB3C -  -  -  -  operators_booleans:
    2 D1:EB3C 04 40 3D 3C 
              6A 6B 6C 6D 
              6E 6F 82 83 
              70 71 00 -  	.db	tStore, tAnd, tXor, tOr, tEQ, tLT, tGT, tLE, tGE, tNE, tMul, tDiv, tAdd, tSub, 0            ;    0 = temp +
    3 D1:EB4B -  -  -  -  operators_special:
    4 D1:EB4B 00 01 02 03 
              04 05 05 05 
              05 04 06 06 
              06 07 -  -  	.db	0, 1, 2, 3, 4, 5, 5, 5, 5, 4, 6, 6, 6, 7
    5 D1:EB59 -  -  -  -      
    6 D1:EB59 -  -  -  -  FunctionsWithReturnValue:
    7 D1:EB59 AD AB 10 -  	.db	tGetKey, trand, tLParen
    8 D1:EB5C -  -  -  -  FunctionsWithReturnValueArguments:
    9 D1:EB5C 21 1A 19 B8 
              EF 0D BC -  	.db	tMean, tMin, tMax, tNot, tExtTok, tSqr, tSqrt
   10 D1:EB63 -  -  -  -  FunctionsWithReturnValueEnd:
   11 D1:EB63 -  -  -  -  
   12 D1:EB63 -  -  -  -  FunctionsWithReturnValueStart:
   13 D1:EB63 BA D2 D1 99 
              D0 D1 04 CD 
              D1 92 CC D1 
              91 CE D1 95 
              CE D1 8D CE 
              D1 -  -  -  	.dl	functionRoot, functionSqrt, functionCE, functionNot, functionMax, functionMin, functionMean
   14 D1:EB78 -  -  -  -  
   15 D1:EB78 -  -  -  -  FunctionsSingle:
   16 D1:EB78 E0 DC E1 D8 
              CE D1 D2 DE 
              D3 D5 62 D6 
              D7 2C B3 5F 	.db	tOutput, tInput, tClLCD, tPause, tIf, tWhile, tRepeat, tDisp, tFor, tReturn, tVarOut, tLbl, tGoto, tii, tDet, tProg
   17 D1:EB88 -  -  -  -  FunctionsSingleEnd:
   18 D1:EB88 -  -  -  -  
   19 D1:EB88 -  -  -  -  FunctionsSingleStart:
   20 D1:EB88 DE C5 D1 02 
              D1 D1 DF C7 
              D1 A9 C7 D1 
              05 C7 D1 5F 
              D1 D1 FA C7 
              D1 1D E4 D1 	.dl	functionPrgm, functionC, functionSkipLine, functionGoto, functionLbl, functionCustom, functionReturn, functionFor
   21 D1:EBA0 B2 C6 D1 2A 
              C8 D1 20 CA 
              D1 31 C9 D1 
              03 CB D1 E7 
              CA D1 C9 CB 
              D1 29 C6 D1 	.dl	functionDisp, functionRepeat, functionWhile, functionIf, functionPause, functionClrHome, functionInput, functionOutput
   22 D1:EBB8 -  -  -  -      
   23 D1:EBB8 -  -  -  -  operator_start:
   24 D1:EBB8 00 D5 D1 56 
              D5 D1 B7 D5 
              D1 F9 D5 D1 
              8B D6 D1 DE 
              AE D1 -  -  	.dl	SubNumberXXX,    SubVariableXXX,    SubChainPushXXX,    SubChainAnsXXX,    SubFunctionXXX,    SubError
   25 D1:EBCA F4 D6 D1 2E 
              D7 D1 78 D7 
              D1 C1 D7 D1 
              61 D8 D1 E2 
              AE D1 -  -  	.dl	AddNumberXXX,    AddVariableXXX,    AddChainPushXXX,    AddChainAnsXXX,    AddFunctionXXX,    AddError
   26 D1:EBDC CA D8 D1 26 
              D9 D1 99 D9 
              D1 E2 D9 D1 
              57 DA D1 E6 
              AE D1 -  -  	.dl	DivNumberXXX,    DivVariableXXX,    DivChainPushXXX,    DivChainAnsXXX,    DivFunctionXXX,    DivError
   27 D1:EBEE B4 DA D1 F1 
              DA D1 3C DB 
              D1 88 DB D1 
              63 DC D1 EA 
              AE D1 -  -  	.dl	MulNumberXXX,    MulVariableXXX,    MulChainPushXXX,    MulChainAnsXXX,    MulFunctionXXX,    MulError
   28 D1:EC00 A0 DE D1 F6 
              DE D1 6F DF 
              D1 BB DF D1 
              3A E0 D1 08 
              AF D1 -  -  	.dl	NEQNumberXXX,    NEQVariableXXX,    NEQChainPushXXX,    NEQChainAnsXXX,    NEQFunctionXXX,    NEQError
   29 D1:EC12 C6 DC D1 23 
              DD D1 97 DD 
              D1 DE DD D1 
              3F DE D1 EE 
              AE D1 -  -  	.dl	GLETNumberXXX,   GLETVariableXXX,   GLETChainPushXXX,   GLETChainAnsXXX,   GLETFunctionXXX,   GLETError
   30 D1:EC24 7D E0 D1 F9 
              E0 D1 7E E1 
              D1 C1 E1 D1 
              2C E2 D1 16 
              AF D1 -  -  	.dl	XORANDNumberXXX, XORANDVariableXXX, XORANDChainPushXXX, XORANDChainAnsXXX, XORANDFunctionXXX, XORANDError
   31 D1:EC36 6F E2 D1 C6 
              E2 D1 0C E3 
              D1 2A E3 D1 
              51 E3 D1 A0 
              E3 D1 -  -  	.dl	StoNumberXXX,    StoVariableXXX,    StoChainPushXXX,    StoChainAnsXXX,    StoFunctionXXX,    StoListXXX
   32 D1:EC48 -  -  -  -      
   33 D1:EC48 -  -  -  -  CArguments:
   34 D1:EC48 FA E6 D1 3A 
              E7 D1 52 E7 
              D1 98 E7 D1 
              A5 E8 D1 1F 
              E9 D1 C8 E9 
              D1 -  -  -  	.dl	CFunction0Args, CFunction1Arg, CFunction2Args, CFunction3Args, CFunction4Args, CFunction5Args, CFunction6Args
   35 D1:EC5D -  -  -  -      
   36 D1:EC5D -  -  -  -  functionCustomStart:
   37 D1:EC5D 7C D1 D1 4A 
              D3 D1 A5 C7 
              D1 CA D3 D1 
              B6 D1 D1 2A 
              D2 D1 -  -  	.dl	functionExecHex, functionDefineSprite, functionCall, functionCompilePrgm, functionSetBASICVar, functionGetBASICVar
   38 D1:EC6F -  -  -  -      
   39 D1:EC6F -  -  -  -  precedence:
   40 D1:EC6F 07 04 04 05 
              05 03 03 03 
              03 03 03 01 
              01 02 00 -  	.db	7, 4,4,5,5,3,3,3,3,3,3,1, 1,  2,  0
   41 D1:EC7E -  -  -  -      ;   t+ - + / * ≠ ≥ ≤ > < = or xor and →
   42 D1:EC7E -  -  -  -  precedence2:
   43 D1:EC7E 00 04 04 05 
              05 03 03 03 
              03 03 03 01 
              01 02 06 -  	.db	0, 4,4,5,5,3,3,3,3,3,3,1, 1,  2,  6
   44 D1:EC8D -  -  -  -  
   45 D1:EC8D -  -  -  -  lists:
   46 D1:EC8D 1F EA D0 96 
              73 D0 C6 52 
              D0 66 94 D0 
              F6 31 D0 2F 
              11 D1 -  -  	.dl	L1, L2, L3, L4, L5, L6
   47 D1:EC9F -  -  -  -      
   48 D1:EC9F -  -  -  -  hexadecimals:
   49 D1:EC9F 46 45 44 43 
              42 41 39 38 
              37 36 35 34 
              33 32 31 30 	.db	tF, tE, tD, tC, tB, tA, t9, t8, t7, t6, t5, t4, t3, t2, t1, t0
   50 D1:ECAF -  -  -  -      
   51 D1:ECAF 5A 32 D0 -  stackPtr:               .dl stack
   52 D1:ECB2 42 36 D0 -  outputPtr:              .dl output
   53 D1:ECB5 00 2C D5 -  programPtr:             .dl program
   54 D1:ECB8 AE 3D D0 -  programNamesPtr:        .dl programNamesStack
   55 D1:ECBB AE 3D D0 -  labelPtr:               .dl labelStack
   56 D1:ECBE 96 41 D0 -  gotoPtr:                .dl gotoStack
   57 D1:ECC1 7E 45 D0 -  programDataOffsetPtr:   .dl programDataOffsetStack
   58 D1:ECC4 5A 4B D0 -  tempStringsPtr:         .dl tempStringsStack
   59 D1:ECC7 36 51 D0 -  tempListsPtr:           .dl tempListsStack
   60 D1:ECCA 76 70 D0 -  programDataDataPtr:     .dl programDataData
   61 D1:ECCD 1B F1 D1 -  debugCodePtr:           .dl InsertDebugCode
   62 D1:ECD0 00 -  -  -  amountOfPrograms        .db 0
   63 D1:ECD1 00 -  -  -  openedParensE           .db 0
   64 D1:ECD2 00 -  -  -  openedParensF           .db 0
   65 D1:ECD3 00 -  -  -  amountOfArguments       .db 0
   66 D1:ECD4 00 -  -  -  amountOfCRoutines       .db 0
   67 D1:ECD5 00 -  -  -  amountOfEnds            .db 0
   68 D1:ECD6 00 -  -  -  amountOfInput           .db 0
   69 D1:ECD7 00 -  -  -  amountOfPause           .db 0
   70 D1:ECD8 00 -  -  -  amountOfRoot            .db 0
   71 D1:ECD9 00 -  -  -  ExprOutput              .db 0
   72 D1:ECDA 00 -  -  -  ExprOutput2             .db 0
   73 D1:ECDB 00 -  -  -  AmountOfSubPrograms     .db 0
   74 D1:ECDC -  -  -  -  
   75 D1:ECDC -  -  -  -  ICEAppvar:
   76 D1:ECDC 15 49 43 45 
              41 50 50 56 
              00 -  -  -  	.db	AppVarObj, "ICEAPPV", 0
   77 D1:ECE5 -  -  -  -  ICEProgram:
   78 D1:ECE5 06 49 43 45 
              00 -  -  -  	.db	ProtProgObj, "ICE", 0
   79 D1:ECEA -  -  -  -  ErrorMessageStandard:
   80 D1:ECEA 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 66 6F 
              72 20 27 00 	.db	"Invalid arguments for '", 0
   81 D1:ED02 -  -  -  -  EndErrorMessage:
   82 D1:ED02 54 6F 6F 20 
              6D 61 6E 79 
              20 45 6E 64 
              73 21 00 -  	.db	"Too many Ends!", 0
   83 D1:ED11 -  -  -  -  GoodCompileMessage:
   84 D1:ED11 53 75 63 63 
              65 73 66 75 
              6C 6C 79 20 
              63 6F 6D 70 
              69 6C 65 64 
              21 00 -  -  	.db	"Succesfully compiled!", 0
   85 D1:ED27 -  -  -  -  NoProgramsMessage:
   86 D1:ED27 4E 6F 20 70 
              72 6F 67 72 
              61 6D 73 20 
              66 6F 75 6E 
              64 21 00 -  	.db	"No programs found!", 0
   87 D1:ED3A -  -  -  -  InvalidTokenMessage:
   88 D1:ED3A 55 6E 73 75 
              70 70 6F 72 
              74 65 64 20 
              74 6F 6B 65 
              6E 21 00 -  	.db	"Unsupported token!", 0
   89 D1:ED4D -  -  -  -  InvalidListArgumentMessage:
   90 D1:ED4D 4F 6E 6C 79 
              20 69 6E 74 
              65 67 65 72 
              73 20 69 6E 
              20 6C 69 73 
              74 73 20 73 
              75 70 70 6F 
              72 74 65 64 
              21 00 -  -  	.db	"Only integers in lists supported!", 0
   91 D1:ED6F -  -  -  -  InvalidNameLengthMessage:
   92 D1:ED6F 50 72 6F 67 
              72 61 6D 20 
              6E 61 6D 65 
              20 74 6F 6F 
              20 6C 6F 6E 
              67 21 00 -  	.db	"Program name too long!", 0
   93 D1:ED86 -  -  -  -  SameNameMessage:
   94 D1:ED86 4F 75 74 70 
              75 74 20 6E 
              61 6D 65 20 
              69 73 20 74 
              68 65 20 73 
              61 6D 65 20 
              61 73 20 69 
              6E 70 75 74 
              20 6E 61 6D 
              65 21 00 -  	.db	"Output name is the same as input name!", 0
   95 D1:EDAD -  -  -  -  WrongSpriteDataMessgae:
   96 D1:EDAD 49 6E 76 61 
              6C 69 64 20 
              73 70 72 69 
              74 65 20 64 
              61 74 61 21 
              00 -  -  -  	.db	"Invalid sprite data!", 0
   97 D1:EDC2 -  -  -  -  FunctionFunctionMessage:
   98 D1:EDC2 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 61 20 
              66 75 6E 63 
              74 69 6F 6E 
              20 69 6E 20 
              61 20 66 75 
              6E 63 74 69 
              6F 6E 21 00 	.db	"You can't use a function in a function!", 0
   99 D1:EDEA -  -  -  -  NotFoundMessage:
  100 D1:EDEA 50 72 6F 67 
              72 61 6D 20 
              6E 6F 74 20 
              66 6F 75 6E 
              64 21 00 -  	.db	"Program not found!", 0
  101 D1:EDFD -  -  -  -  ImplementMessage:
  102 D1:EDFD 54 68 69 73 
              20 66 75 6E 
              63 74 69 6F 
              6E 20 68 61 
              73 20 6E 6F 
              74 20 62 65 
              65 6E 20 69 
              6D 70 6C 65 
              6D 65 6E 74 
              65 64 20 79 
              65 74 21 00 	.db	"This function has not been implemented yet!", 0
  103 D1:EE29 -  -  -  -  SyntaxErrorMessage:
  104 D1:EE29 49 6E 76 61 
              6C 69 64 20 
              61 72 67 75 
              6D 65 6E 74 
              73 20 65 6E 
              74 65 72 65 
              64 21 00 -  	.db	"Invalid arguments entered!", 0
  105 D1:EE44 -  -  -  -  TooLargeLoopMessage:
  106 D1:EE44 54 6F 6F 20 
              6C 61 72 67 
              65 20 61 6E 
              6F 6E 79 6D 
              6F 75 73 20 
              6C 6F 6F 70 
              21 00 -  -  	.db	"Too large anonymous loop!", 0
  107 D1:EE5E -  -  -  -  UsedCodeMessage:
  108 D1:EE5E 59 6F 75 20 
              63 61 6E 27 
              74 20 75 73 
              65 20 63 6F 
              64 65 20 62 
              65 66 6F 72 
              65 20 44 65 
              66 69 6E 65 
              53 70 72 69 
              74 65 28 29 
              21 00 -  -  	.db	"You can't use code before DefineSprite()!", 0
  109 D1:EE88 -  -  -  -  LineNumber:
  110 D1:EE88 45 72 72 6F 
              72 20 6F 6E 
              20 6C 69 6E 
              65 20 00 -  	.db	"Error on line ", 0
  111 D1:EE97 -  -  -  -  MismatchErrorMessage:
  112 D1:EE97 4D 69 73 6D 
              61 74 63 68 
              65 64 20 70 
              61 72 65 6E 
              74 68 65 73 
              69 73 21 00 	.db	"Mismatched parenthesis!", 0
  113 D1:EEAF -  -  -  -  UnknownMessage:
  114 D1:EEAF 53 6F 6D 65 
              74 68 69 6E 
              67 20 77 65 
              6E 74 20 77 
              72 6F 6E 67 
              21 20 50 6C 
              65 61 73 65 
              20 72 65 70 
              6F 72 74 20 
              69 74 21 00 	.db	"Something went wrong! Please report it!", 0
  115 D1:EED7 -  -  -  -  NotEnoughMem:
  116 D1:EED7 4E 6F 74 20 
              65 6E 6F 75 
              67 68 20 66 
              72 65 65 20 
              52 41 4D 21 
              00 -  -  -  	.db	"Not enough free RAM!", 0
  117 D1:EEEC -  -  -  -  LabelErrorMessage:
  118 D1:EEEC 43 61 6E 27 
              74 20 66 69 
              6E 64 20 6C 
              61 62 65 6C 
              20 00 -  -  	.db	"Can't find label ", 0
  119 D1:EEFE -  -  -  -  StartParseMessage:
  120 D1:EEFE 43 6F 6D 70 
              69 6C 69 6E 
              67 20 70 72 
              6F 67 72 61 
              6D 20 00 -  	.db	"Compiling program ", 0
  121 D1:EF11 -  -  -  -  ICEName:
  122 D1:EF11 49 43 45 20 
              43 6F 6D 70 
              69 6C 65 72 
              20 76 31 2E 
              35 20 2D 20 
              42 79 20 50 
              65 74 65 72 
              20 22 50 54 
              5F 22 20 54 
              69 6C 6C 65 
              6D 61 00 -  	.db	"ICE Compiler v1.5 - By Peter \"PT_\" Tillema", 0
  123 D1:EF3C -  -  -  -  PressKey:
  124 D1:EF3C 5B 50 72 65 
              73 73 20 61 
              6E 79 20 6B 
              65 79 20 74 
              6F 20 65 78 
              69 74 5D 00 	.db	"[Press any key to exit]", 0
  125 D1:EF54 -  -  -  -      
  126 D1:EF54 -  -  -  -  ;MulTable:
  127 D1:EF54 -  -  -  -  ;  1 + log2(x) + popcnt(x) - (popcnt(x) == 1)
  128 D1:EF54 -  -  -  -  ; https://gist.github.com/jacobly0/049c51a353632d7fa284364f4b6244b6
  129 D1:EF54 -  -  -  -  ;    .db 1 \ add hl, hl \ .db 0,0,0,0,0,0,0,0                                                                    ; 2
  130 D1:EF54 -  -  -  -  ;    .db 4 \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0,0                                            ; 3
  131 D1:EF54 -  -  -  -  ;    .db 2 \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0,0                                ; 4
  132 D1:EF54 -  -  -  -  ;    .db 5 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0,0                    ; 5
  133 D1:EF54 -  -  -  -  ;    .db 5 \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0,0                    ; 6
  134 D1:EF54 -  -  -  -  ;    .db 6 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0,0            ; 7
  135 D1:EF54 -  -  -  -  ;    .db 3 \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0,0                            ; 8
  136 D1:EF54 -  -  -  -  ;    .db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0,0            ; 9
  137 D1:EF54 -  -  -  -  ;    .db 6 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0,0            ; 10
  138 D1:EF54 -  -  -  -  ;    .db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0,0             ; 11
  139 D1:EF54 -  -  -  -  ;    .db 6 \ add hl, hl \ add hl, hl \ push hl \ pop de \ add hl, hl \ add hl, de \ .db 0,0,0                        ; 12
  140 D1:EF54 -  -  -  -  ;    .db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0        ; 13
  141 D1:EF54 -  -  -  -  ;    .db 7 \ push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 14
  142 D1:EF54 -  -  -  -  ;    .db 8 \    push hl \ pop de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0    ; 15
  143 D1:EF54 -  -  -  -  ;    .db 4 \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ .db 0,0,0,0,0                                       ; 16
  144 D1:EF54 -  -  -  -  ;    .db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ .db 0,0             ; 17
  145 D1:EF54 -  -  -  -  ;    .db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ .db 0,0             ; 18
  146 D1:EF54 -  -  -  -  ;    .db 8 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, de \ .db 0    ; 19
  147 D1:EF54 -  -  -  -  ;    .db 7 \ push hl \ pop de \ add hl, hl \ add hl, hl \ add hl, de \ add hl, hl \ add hl, hl \ .db 0,0             ; 20
  148 D1:EF54 -  -  -  -      
  149 D1:EF54 -  -  -  -  InputRoutine:
  150 D1:EF54 CD 14 08 02 	call	_ClrScrn
  151 D1:EF58 CD 28 08 02 	call	_HomeUp
  152 D1:EF5C AF -  -  -  	xor	a, a
  153 D1:EF5D 32 79 08 D0 	ld	(ioPrompt), a
  154 D1:EF61 32 99 05 D0 	ld	(curUnder), a
  155 D1:EF65 CD 20 13 02 	call	_GetStringInput
  156 D1:EF69 2A 4E 24 D0 	ld	hl, (editSym)
  157 D1:EF6D CD E8 0A 02 	call	_VarNameToOP1HL
  158 D1:EF71 CD 0C 05 02 	call	_ChkFindSym
  159 D1:EF75 1A -  -  -  	ld	a, (de)
  160 D1:EF76 13 -  -  -  	inc	de
  161 D1:EF77 13 -  -  -  	inc	de
  162 D1:EF78 47 -  -  -  	ld	b, a
  163 D1:EF79 ED 62 -  -  	sbc	hl, hl
  164 D1:EF7B C5 -  -  -  _:	push	bc
  165 D1:EF7C 29 -  -  -  	add	hl, hl
  166 D1:EF7D E5 -  -  -  	push	hl
  167 D1:EF7E C1 -  -  -  	pop	bc
  168 D1:EF7F 29 -  -  -  	add	hl, hl
  169 D1:EF80 29 -  -  -  	add	hl, hl
  170 D1:EF81 09 -  -  -  	add	hl, bc
  171 D1:EF82 1A -  -  -  	ld	a, (de)
  172 D1:EF83 D6 30 -  -  	sub	a, t0
  173 D1:EF85 01 00 00 00 	ld	bc, 0
  174 D1:EF89 4F -  -  -  	ld	c, a
  175 D1:EF8A 09 -  -  -  	add	hl, bc
  176 D1:EF8B 13 -  -  -  	inc	de
  177 D1:EF8C C1 -  -  -  	pop	bc
  178 D1:EF8D 10 EC -  -  	djnz	-_
  179 D1:EF8F -  -  -  -  InputOffset = $+2
  180 D1:EF8F DD 2F 00 -  	ld	(ix+0), hl
  181 D1:EF92 C3 78 15 02 	jp	_DeleteTempEditEqu
  182 D1:EF96 -  -  -  -  InputRoutineEnd:
  183 D1:EF96 -  -  -  -  
  184 D1:EF96 -  -  -  -  RandRoutine:
  185 D1:EF96 DD 27 51 -  	ld	hl, (ix+rand1)
  186 D1:EF99 DD 17 54 -  	ld	de, (ix+rand2)
  187 D1:EF9C 44 -  -  -  	ld	b, h
  188 D1:EF9D 4D -  -  -  	ld	c, l
  189 D1:EF9E 29 -  -  -  	add	hl, hl
  190 D1:EF9F CB 13 -  -  	rl	e
  191 D1:EFA1 CB 12 -  -  	rl	d
  192 D1:EFA3 29 -  -  -  	add	hl, hl
  193 D1:EFA4 CB 13 -  -  	rl	e
  194 D1:EFA6 CB 12 -  -  	rl	d
  195 D1:EFA8 2C -  -  -  	inc	l
  196 D1:EFA9 09 -  -  -  	add	hl, bc
  197 D1:EFAA DD 2F 51 -  	ld	(ix+rand1), hl
  198 D1:EFAD ED 5A -  -  	adc	hl, de
  199 D1:EFAF DD 2F 54 -  	ld	(ix+rand2), hl
  200 D1:EFB2 EB -  -  -  	ex	de, hl
  201 D1:EFB3 DD 27 57 -  	ld	hl, (ix+rand3)
  202 D1:EFB6 DD 07 5A -  	ld	bc, (ix+rand4)
  203 D1:EFB9 29 -  -  -  	add	hl, hl
  204 D1:EFBA CB 11 -  -  	rl	c
  205 D1:EFBC CB 10 -  -  	rl	b
  206 D1:EFBE DD 0F 5A -  	ld	(ix+rand4), bc
  207 D1:EFC1 9F -  -  -  	sbc	a, a
  208 D1:EFC2 E6 C5 -  -  	and	a, 011000101b
  209 D1:EFC4 AD -  -  -  	xor	a, l
  210 D1:EFC5 6F -  -  -  	ld	l, a
  211 D1:EFC6 DD 2F 57 -  	ld	(ix+rand3), hl
  212 D1:EFC9 EB -  -  -  	ex	de, hl
  213 D1:EFCA 09 -  -  -  	add	hl, bc
  214 D1:EFCB C9 -  -  -  	ret
  215 D1:EFCC -  -  -  -  RandRoutineEnd:
  216 D1:EFCC -  -  -  -  
  217 D1:EFCC -  -  -  -  DispNumberRoutine:
  218 D1:EFCC 3E 12 -  -  	ld	a, 18
  219 D1:EFCE 32 96 05 D0 	ld	(curCol), a
  220 D1:EFD2 CD E0 1E 02 	call	_DispHL
  221 D1:EFD6 CD F0 07 02 	call	_NewLine
  222 D1:EFDA -  -  -  -      
  223 D1:EFDA -  -  -  -  DispStringRoutine:
  224 D1:EFDA AF -  -  -  	xor	a, a
  225 D1:EFDB 32 96 05 D0 	ld	(curCol), a
  226 D1:EFDF CD C0 07 02 	call	_PutS
  227 D1:EFE3 CD F0 07 02 	call	_NewLine
  228 D1:EFE7 -  -  -  -  
  229 D1:EFE7 -  -  -  -  PauseRoutine:                       ; Time including call/ret: HL*48000000 + 44
  230 D1:EFE7 2B -  -  -  	dec	hl                          ; 4
  231 D1:EFE8 -  -  -  -  PauseRoutine2:
  232 D1:EFE8 0E 6E -  -  	ld	c, 110                      ; 8
  233 D1:EFEA 06 20 -  -  _:	ld	b, 32                       ; 8
  234 D1:EFEC 10 FE -  -  	djnz	$                       ; 13/8      411
  235 D1:EFEE 0D -  -  -  	dec	c                           ; 4
  236 D1:EFEF 20 F9 -  -  	jr	nz, -_                      ; 13/8      47955
  237 D1:EFF1 B7 -  -  -  	or	a, a                        ; 4
  238 D1:EFF2 11 FF FF FF 	ld	de, -1                      ; 16
  239 D1:EFF6 19 -  -  -  	add	hl, de                      ; 4
  240 D1:EFF7 38 EF -  -  	jr	c, PauseRoutine2            ; 13/8
  241 D1:EFF9 C9 -  -  -  	ret	; 21
  242 D1:EFFA -  -  -  -  PauseRoutineEnd:
  243 D1:EFFA -  -  -  -  
  244 D1:EFFA -  -  -  -  MeanRoutine:
  245 D1:EFFA DD 21 00 00 
              00 -  -  -  	ld	ix, 0
  246 D1:EFFF DD 39 -  -  	add	ix, sp
  247 D1:F001 19 -  -  -  	add	hl, de
  248 D1:F002 E5 -  -  -  	push	hl
  249 D1:F003 DD CB FF 1E 	rr	(ix-1)
  250 D1:F007 E1 -  -  -  	pop	hl
  251 D1:F008 CB 1C -  -  	rr	h
  252 D1:F00A CB 1D -  -  	rr	l
  253 D1:F00C DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  254 D1:F011 C9 -  -  -  	ret
  255 D1:F012 -  -  -  -  MeanRoutineEnd:
  256 D1:F012 -  -  -  -  
  257 D1:F012 -  -  -  -  KeypadRoutine:
  258 D1:F012 F3 -  -  -  	di
  259 D1:F013 21 00 00 F5 	ld	hl, 0F50000h
  260 D1:F017 36 02 -  -  	ld	(hl), 2
  261 D1:F019 AF -  -  -  	xor	a, a
  262 D1:F01A BE -  -  -  _:	cp	a, (hl)
  263 D1:F01B 20 FD -  -  	jr	nz, -_
  264 D1:F01D FB -  -  -  	ei
  265 D1:F01E 68 -  -  -  	ld	l, b
  266 D1:F01F 7E -  -  -  	ld	a, (hl)
  267 D1:F020 ED 62 -  -  	sbc	hl, hl
  268 D1:F022 A1 -  -  -  	and	a, c
  269 D1:F023 C8 -  -  -  	ret	z
  270 D1:F024 2C -  -  -  	inc	l
  271 D1:F025 C9 -  -  -  	ret
  272 D1:F026 -  -  -  -  KeypadRoutineEnd:
  273 D1:F026 -  -  -  -  
  274 D1:F026 -  -  -  -  RootRoutine:
  275 D1:F026 F3 -  -  -  	di
  276 D1:F027 3B -  -  -  	dec	sp      ; (sp) = ?
  277 D1:F028 E5 -  -  -  	push	hl      ; (sp) = ?uhl
  278 D1:F029 3B -  -  -  	dec	sp      ; (sp) = ?uhl?
  279 D1:F02A FD E1 -  -  	pop	iy      ; (sp) = ?u, uix = hl?
  280 D1:F02C 3B -  -  -  	dec	sp      ; (sp) = ?u?
  281 D1:F02D F1 -  -  -  	pop	af      ; af = u?
  282 D1:F02E B7 -  -  -  	or	a, a
  283 D1:F02F ED 62 -  -  	sbc	hl, hl
  284 D1:F031 EB -  -  -  	ex	de, hl   ; de = 0
  285 D1:F032 ED 62 -  -  	sbc	hl, hl   ; hl = 0
  286 D1:F034 01 40 0C 00 	ld	bc, 0C40h ; b = 12, c = 0x40
  287 D1:F038 -  -  -  -  Sqrt24Loop:
  288 D1:F038 91 -  -  -  	sub	a, c
  289 D1:F039 ED 52 -  -  	sbc	hl, de
  290 D1:F03B 30 03 -  -  	jr	nc, Sqrt24Skip
  291 D1:F03D 81 -  -  -  	add	a, c
  292 D1:F03E ED 5A -  -  	adc	hl, de
  293 D1:F040 -  -  -  -  Sqrt24Skip:
  294 D1:F040 3F -  -  -  	ccf
  295 D1:F041 CB 13 -  -  	rl	e
  296 D1:F043 CB 12 -  -  	rl	d
  297 D1:F045 FD 29 -  -  	add	iy, iy
  298 D1:F047 17 -  -  -  	rla
  299 D1:F048 ED 6A -  -  	adc	hl, hl
  300 D1:F04A FD 29 -  -  	add	iy, iy
  301 D1:F04C 17 -  -  -  	rla
  302 D1:F04D ED 6A -  -  	adc	hl, hl
  303 D1:F04F 10 E7 -  -  	djnz	Sqrt24Loop
  304 D1:F051 EB -  -  -  	ex	de,hl
  305 D1:F052 C9 -  -  -  	ret
  306 D1:F053 -  -  -  -  RootRoutineEnd:
  307 D1:F053 -  -  -  -  
  308 D1:F053 -  -  -  -  XORANDData:
  309 D1:F053 01 FF FF FF 	ld	bc, -1
  310 D1:F057 09 -  -  -  	add	hl, bc
  311 D1:F058 9F -  -  -  	sbc	a, a
  312 D1:F059 EB -  -  -  	ex	de, hl
  313 D1:F05A 57 -  -  -  	ld	d, a
  314 D1:F05B 09 -  -  -  	add	hl, bc
  315 D1:F05C 9F -  -  -  	sbc	a, a
  316 D1:F05D -  -  -  -  XORANDSMC:
  317 D1:F05D A2 -  -  -  	and	a, d
  318 D1:F05E ED 62 -  -  	sbc	hl, hl
  319 D1:F060 E6 01 -  -  	and	a, 1
  320 D1:F062 6F -  -  -  	ld	l, a
  321 D1:F063 -  -  -  -      
  322 D1:F063 -  -  -  -  StoBASICVar:
  323 D1:F063 E5 -  -  -  	push	hl
  324 D1:F064 CD 84 03 02 	call	_ZeroOP1
  325 D1:F068 21 F9 05 D0 	ld	hl, OP1+1
  326 D1:F06C 70 -  -  -  	ld	(hl), b
  327 D1:F06D CD 78 03 02 	call	_OP2Set0
  328 D1:F071 E1 -  -  -  	pop	hl
  329 D1:F072 19 -  -  -  	add	hl, de
  330 D1:F073 B7 -  -  -  	or	a, a
  331 D1:F074 ED 52 -  -  	sbc	hl, de
  332 D1:F076 28 3E -  -  	jr	z, +++_
  333 D1:F078 06 04 -  -  	ld	b, 4
  334 D1:F07A 11 08 06 D0 	ld	de, OP2+5
  335 D1:F07E 3E 0A -  -  _:	ld	a, 10
  336 D1:F080 CD 90 1D 02 	call	_DivHLByA
  337 D1:F084 4F -  -  -  	ld	c, a
  338 D1:F085 3E 0A -  -  	ld	a, 10
  339 D1:F087 CD 90 1D 02 	call	_DivHLByA
  340 D1:F08B 87 -  -  -  	add	a, a
  341 D1:F08C 87 -  -  -  	add	a, a
  342 D1:F08D 87 -  -  -  	add	a, a
  343 D1:F08E 87 -  -  -  	add	a, a
  344 D1:F08F 81 -  -  -  	add	a, c
  345 D1:F090 12 -  -  -  	ld	(de), a
  346 D1:F091 1B -  -  -  	dec	de
  347 D1:F092 10 EA -  -  	djnz	-_
  348 D1:F094 21 04 06 D0 	ld	hl, OP2+1
  349 D1:F098 36 87 -  -  	ld	(hl), $87
  350 D1:F09A 3A 05 06 D0 _:	ld	a, (OP2M)
  351 D1:F09E FE 10 -  -  	cp	a, $10
  352 D1:F0A0 30 14 -  -  	jr	nc, +_
  353 D1:F0A2 21 08 06 D0 	ld	hl, OP2+5
  354 D1:F0A6 AF -  -  -  	xor	a, a
  355 D1:F0A7 ED 6F -  -  	rld
  356 D1:F0A9 2B -  -  -  	dec	hl
  357 D1:F0AA ED 6F -  -  	rld
  358 D1:F0AC 2B -  -  -  	dec	hl
  359 D1:F0AD ED 6F -  -  	rld
  360 D1:F0AF 2B -  -  -  	dec	hl
  361 D1:F0B0 ED 6F -  -  	rld
  362 D1:F0B2 2B -  -  -  	dec	hl
  363 D1:F0B3 35 -  -  -  	dec	(hl)
  364 D1:F0B4 18 E4 -  -  	jr	-_
  365 D1:F0B6 CD 0C 05 02 _:	call	_ChkFindSym
  366 D1:F0BA D4 34 14 02 	call	nc, _DelVarArc
  367 D1:F0BE CD 34 05 02 	call	_CreateReal
  368 D1:F0C2 21 03 06 D0 	ld	hl, OP2
  369 D1:F0C6 01 09 00 00 	ld	bc, 9
  370 D1:F0CA ED B0 -  -  	ldir
  371 D1:F0CC C9 -  -  -  	ret
  372 D1:F0CD -  -  -  -  StoBASICVarEnd:
  373 D1:F0CD -  -  -  -  
  374 D1:F0CD -  -  -  -  GetBASICVar:
  375 D1:F0CD CD 84 03 02 	call	_ZeroOP1
  376 D1:F0D1 21 F9 05 D0 	ld	hl, OP1+1
  377 D1:F0D5 70 -  -  -  	ld	(hl), b
  378 D1:F0D6 CD 10 05 02 	call	_FindSym
  379 D1:F0DA D4 60 0F 02 	call	nc, _RclVarSym
  380 D1:F0DE CD 70 0F 02 	call	_ConvOP1
  381 D1:F0E2 EB -  -  -  	ex	de, hl
  382 D1:F0E3 C9 -  -  -  	ret
  383 D1:F0E4 -  -  -  -  GetBASICVarEnd:
  384 D1:F0E4 -  -  -  -  
  385 D1:F0E4 -  -  -  -  DebugCode:
  386 D1:F0E4 21 4C 4F 47 	ld	hl, 0474F4Ch
  387 D1:F0E8 22 F9 05 D0 	ld	(OP1+1), hl
  388 D1:F0EC AF -  -  -  	xor	a, a
  389 D1:F0ED 32 FC 05 D0 	ld	(OP1+4), a
  390 D1:F0F1 CD 08 05 02 	call	_FindProgSym
  391 D1:F0F5 D4 34 14 02 	call	nc, _DelVarArc
  392 D1:F0F9 DD 27 5D -  	ld	hl, (ix+debugPtr)
  393 D1:F0FC 11 76 BB D0 	ld	de, debugStart
  394 D1:F100 B7 -  -  -  	or	a, a
  395 D1:F101 ED 52 -  -  	sbc	hl, de
  396 D1:F103 D5 -  -  -  	push	de
  397 D1:F104 E5 -  -  -  	push	hl
  398 D1:F105 CD 68 05 02 	call	_CreateProg
  399 D1:F109 C1 -  -  -  	pop	bc
  400 D1:F10A E1 -  -  -  	pop	hl
  401 D1:F10B 13 -  -  -  	inc	de
  402 D1:F10C 13 -  -  -  	inc	de
  403 D1:F10D 78 -  -  -  	ld	a, b
  404 D1:F10E B1 -  -  -  	or	a, c
  405 D1:F10F 28 02 -  -  	jr	z, $+4
  406 D1:F111 ED B0 -  -  	ldir
  407 D1:F113 C9 -  -  -  	ret
  408 D1:F114 21 76 BB D0 	ld	hl, debugStart
  409 D1:F118 DD 2F 5D -  	ld	(ix+debugPtr), hl
  410 D1:F11B -  -  -  -  DebugCodeEnd:
  411 D1:F11B -  -  -  -  
  412 D1:F11B -  -  -  -  InsertDebugCode:
  413 D1:F11B DD 27 5D -  	ld	hl, (ix+debugPtr)
  414 D1:F11E 77 -  -  -  	ld	(hl), a
  415 D1:F11F 23 -  -  -  	inc	hl
  416 D1:F120 1A -  -  -  _:	ld	a, (de)
  417 D1:F121 B7 -  -  -  	or	a, a
  418 D1:F122 28 05 -  -  	jr	z, +_
  419 D1:F124 77 -  -  -  	ld	(hl), a
  420 D1:F125 23 -  -  -  	inc	hl
  421 D1:F126 13 -  -  -  	inc	de
  422 D1:F127 18 F7 -  -  	jr	-_
  423 D1:F129 36 3F -  -  _:	ld	(hl), tEnter
  424 D1:F12B 23 -  -  -  	inc	hl
  425 D1:F12C DD 2F 5D -  	ld	(ix+debugPtr), hl
  426 D1:F12F C9 -  -  -  	ret
  427 D1:F130 -  -  -  -  InsertDebugCodeEnd:
  428 D1:F130 -  -  -  -  
  429 D1:F130 -  -  -  -  CData:
  430 D1:F130 DD 21 3F 38 
              D1 -  -  -  	ld	ix, L1+20000
  431 D1:F135 21 DA A8 D1 	ld	hl, LibLoadAppVar - CData + UserMem
  432 D1:F139 CD 20 03 02 	call	_Mov9ToOP1
  433 D1:F13D 3E 15 -  -  	ld	a, AppVarObj
  434 D1:F13F 32 F8 05 D0 	ld	(OP1), a
  435 D1:F143 CD 0C 05 02 _:	call	_ChkFindSym
  436 D1:F147 38 24 -  -  	jr	c, NotFound
  437 D1:F149 CD 98 1F 02 	call	_ChkInRAM
  438 D1:F14D 20 0E -  -  	jr	nz, InArc
  439 D1:F14F CD 28 06 02 	call	_PushOP1
  440 D1:F153 CD 48 14 02 	call	_Arc_UnArc
  441 D1:F157 CD C4 05 02 	call	_PopOP1
  442 D1:F15B 18 E6 -  -  	jr	-_
  443 D1:F15D -  -  -  -  InArc:
  444 D1:F15D EB -  -  -  	ex	de, hl
  445 D1:F15E 11 09 00 00 	ld	de, 9
  446 D1:F162 19 -  -  -  	add	hl, de
  447 D1:F163 5E -  -  -  	ld	e, (hl)
  448 D1:F164 19 -  -  -  	add	hl, de
  449 D1:F165 23 -  -  -  	inc	hl
  450 D1:F166 23 -  -  -  	inc	hl
  451 D1:F167 23 -  -  -  	inc	hl
  452 D1:F168 11 F1 A8 D1 	ld	de, RelocationStart - CData + UserMem
  453 D1:F16C E9 -  -  -  	jp	(hl)
  454 D1:F16D -  -  -  -  NotFound:
  455 D1:F16D CD 14 08 02 	call	_ClrScrn
  456 D1:F171 CD 28 08 02 	call	_HomeUp
  457 D1:F175 21 D6 A8 D1 	ld	hl, MissingAppVar - CData + UserMem
  458 D1:F179 CD C0 07 02 	call	_PutS
  459 D1:F17D CD F0 07 02 	call	_NewLine
  460 D1:F181 C3 C0 07 02 	jp	_PutS
  461 D1:F185 -  -  -  -  MissingAppVar:
  462 D1:F185 4E 65 65 64 	.db	"Need"
  463 D1:F189 -  -  -  -  LibLoadAppVar:
  464 D1:F189 20 4C 69 62 
              4C 6F 61 64 
              00 -  -  -  	.db	" LibLoad", 0
  465 D1:F192 74 69 6E 79 
              2E 63 63 2F 
              63 6C 69 62 
              73 00 -  -  	.db	"tiny.cc/clibs", 0
  466 D1:F1A0 -  -  -  -  RelocationStart:
  467 D1:F1A0 C0 47 52 41 
              50 48 58 00 
              05 -  -  -  	.db	0C0h, "GRAPHX", 0, 5
  468 D1:F1A9 -  -  -  -  CData2:
Listing for file "ice.asm"
  470 D1:F1A9 -  -  -  -  ;app_end()
