; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN_CALC.C"
	.assume ADL=1
	SEGMENT BSS
_ice:
	DS	10958
_expr:
	DS	16
_reg:
	DS	28
	SEGMENT STRSECT
L__0:
	DB	"ICE Compiler v2.2.1.0 - By Peter \"PT_\" Tillema"
	DB	0
	SEGMENT DATA
_infoStr:
	DW24	L__0
	SEGMENT BSS
_inputPrograms:
	DS	768
;    1	#include "defines.h"
;    2	#include "main.h"
;    3	
;    4	#ifdef CALCULATOR
;    5	
;    6	#include "ast.h"
;    7	#include "functions.h"
;    8	#include "errors.h"
;    9	#include "stack.h"
;   10	#include "parse.h"
;   11	#include "output.h"
;   12	#include "operator.h"
;   13	#include "routines.h"
;   14	#include "prescan.h"
;   15	
;   16	#define NUMBEROFPROGRAM 256
;   17	#define PROGRAMPERSCREEN 21
;   18	
;   19	ice_t ice;
;   20	expr_t expr;
;   21	reg_t reg;
;   22	
;   23	const char *infoStr = "ICE Compiler v2.2.1.0 - By Peter \"PT_\" Tillema";
;   24	static char *inputPrograms[NUMBEROFPROGRAM];
	SEGMENT CODE
;   25	
;   26	static int myCompare(const void * a, const void * b) {
_myCompare:
	CALL	__frameset0
;   27	    return strcmp(*(const char **)a, *(const char **)b);
	LD	HL,(IX+9)
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strcmp
	POP	BC
	POP	BC
;   28	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _myCompare ***************************
;Name                         Addr/Register   Size   Type
;_strcmp                             IMPORT  -----   function
;b                                     IX+9      3   parameter
;a                                     IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   29	
;   30	void displayProgramList(int beginList, int amountOfProgramsToDisplay) {
_displayProgramList:
	LD	HL,-3
	CALL	__frameset
;   31	    uint24_t i;
;   32	    
;   33	    for (i = 0; i < amountOfProgramsToDisplay; i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_4
L_2:
;   34	        gfx_PrintStringXY(inputPrograms[beginList + i], 10, i * 10 + 13);
	LD	HL,(IX+-3)
	LD	A,10
	CALL	__imul_b
	LD	IY,HL
	LEA	BC,IY+13
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_inputPrograms
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   35	    }
L_4:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_2
;   36	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _displayProgramList ***************************
;Name                         Addr/Register   Size   Type
;_inputPrograms                      STATIC    768   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;i                                     IX-3      3   variable
;amountOfProgramsToDisplay             IX+9      3   parameter
;beginList                             IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   37	
;   38	void clearProgramList() {
_clearProgramList:
	LD	HL,-3
	CALL	__frameset
;   39	    uint24_t i;
;   40	    
;   41	    for (i = 0; i < PROGRAMPERSCREEN; i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_9
L_7:
;   42	        gfx_FillRectangle_NoClip(10, i * 10 + 13, 200, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	B,(IX+-3)
	LD	C,10
	MLT	BC
	LD	A,C
	ADD	A,13
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   43	    }
L_9:
	LD	BC,21
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_7
;   44	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _clearProgramList ***************************
;Name                         Addr/Register   Size   Type
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   45	
;   46	void main(void) {
_main:
	LD	HL,-82
	CALL	__frameset
;   47	    uint8_t selectedProgram, amountOfPrograms, res = VALID, type;
	LD	(IX+-4),255
;   48	    uint24_t programDataSize, offset, totalSize;
;   49	    uint8_t beginList, amountOfProgramsToDisplay;
;   50	    uint8_t relativeSelectedProgram;
;   51	    const char ICEheader[] = {tii, 0};
	LEA	DE,IX+-34
	LD	HL,_0temp11
	LD	BC,2
	LDIR	
;   52	    ti_var_t tempProg;
;   53	    char buf[30], *temp_name = "", var_name[9];
	LD	BC,L__6
	LD	(IX+-11),BC
;   54	    sk_key_t key;
;   55	    void *search_pos = NULL;
	LD	BC,0
	LD	(IX+-37),BC
;   56	    bool didCompile;
;   57	
;   58	    // Install hooks
;   59	    ti_CloseAll();
	CALL	_ti_CloseAll
;   60	    if ((tempProg = ti_Open("ICEHOOKS", "r"))) {
	LD	BC,L__7
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-7),A
	OR	A,A
	JR	Z,L_14
;   61	        ti_SetArchiveStatus(true, tempProg);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
;   62	        SetHooks1(ti_GetDataPtr(tempProg));
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	PUSH	HL
	CALL	_SetHooks1
	POP	BC
;   63	    }
L_14:
;   64	    
;   65	    if ((tempProg = ti_Open("ICEDEBUG", "r"))) {
	LD	BC,L__10
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-7),A
	OR	A,A
	JR	Z,L_15
;   66	        ti_SetArchiveStatus(true, tempProg);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
;   67	        SetHooks2(ti_GetDataPtr(tempProg));
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	PUSH	HL
	CALL	_SetHooks2
	POP	BC
;   68	    }
L_15:
;   69	    
;   70	    // Enable lowercase
;   71	    asm("ld iy, 0D00080h");
ld iy, 0D00080h
;   72	    asm("set 3, (iy+024h)");
set 3, (iy+024h)
;   73	
;   74	    // Yay, GUI! :)
;   75	displayMainScreen:
L_16:
;   76	    gfx_Begin();
	CALL	_gfx_Begin
;   77	
;   78	    gfx_SetColor(189);
	LD	BC,189
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   79	    gfx_FillRectangle_NoClip(0, 0, 320, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   80	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   81	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   82	    gfx_HorizLine_NoClip(0, 10, 320);
	LD	BC,320
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_HorizLine_NoClip
	POP	BC
	POP	BC
	POP	BC
;   83	    gfx_PrintStringXY(infoStr, 12, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,12
	PUSH	BC
	LD	BC,(_infoStr)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   84	
;   85	    // Get all the programs that start with the [i] token
;   86	    selectedProgram = 0;
	LD	(IX+-1),0
;   87	    didCompile = false;
	LD	(IX+-12),0
;   88	    ti_CloseAll();
	CALL	_ti_CloseAll
;   89	    
;   90	    while ((temp_name = ti_DetectAny(&search_pos, ICEheader, &type)) != NULL) {
	JR	L_24
L_25:
;   91	        if (type == TI_PRGM_TYPE || type == TI_PPRGM_TYPE) {
	LD	A,(IX+-13)
	CP	A,5
	JR	Z,L_21
	LD	A,(IX+-13)
	CP	A,6
	JR	NZ,L_23
L_21:
;   92	            if ((uint8_t)(*temp_name) < 64) {
	LD	HL,(IX+-11)
	LD	A,(HL)
	CP	A,64
	JR	NC,L_19
;   93	                *temp_name += 64;
	LD	HL,(IX+-11)
	LD	A,(HL)
	ADD	A,64
	LD	HL,(IX+-11)
	LD	(HL),A
;   94	            }
L_19:
;   95	
;   96	            // Save the program name
;   97	            inputPrograms[selectedProgram] = malloc(9);
	LD	BC,9
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	A,(IX+-1)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_inputPrograms
	ADD	HL,DE
	LD	(HL),BC
;   98	            strcpy(inputPrograms[selectedProgram++], temp_name);
	LD	A,(IX+-1)
	INC	(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	BC,_inputPrograms
	ADD	HL,BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;   99	        }
L_23:
;  100	        
;  101	        if (selectedProgram >= NUMBEROFPROGRAM) {
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,256
	SBC	HL,BC
	JP	P,L_26
;  102	            break;
;  103	        }
;  104	    }
L_24:
	PEA	IX+-13
	PEA	IX+-34
	PEA	IX+-37
	CALL	_ti_DetectAny
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-11),HL
	CALL	__icmpzero
	JR	NZ,L_25
L_26:
;  105	
;  106	    amountOfPrograms = selectedProgram;
	LD	A,(IX+-1)
	LD	(IX+-5),A
;  107	    beginList = 0;
	LD	(IX+-6),0
;  108	    amountOfProgramsToDisplay = (amountOfPrograms > PROGRAMPERSCREEN ? PROGRAMPERSCREEN : amountOfPrograms);
	LD	A,21
	CP	A,(IX+-5)
	JR	NC,L_29
	LD	BC,21
	LD	(IX+-23),BC
	JR	L_30
L_29:
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	LD	(IX+-23),HL
L_30:
	LD	A,(IX+-23)
	LD	(IX+-8),A
;  109	
;  110	    // Check if there are ICE programs
;  111	    if (!amountOfPrograms) {
	LD	A,(IX+-5)
	OR	A,A
	JR	NZ,L_33
;  112	        gfx_PrintStringXY("No programs found!", 10, 13);
	LD	BC,13
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,L__20
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  113	        goto stop;
	JR	L_31
;  114	    }
L_33:
;  115	
;  116	    // Display all the sorted programs
;  117	    qsort(inputPrograms, amountOfPrograms, sizeof(char *), myCompare);
	LD	BC,_myCompare
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,_inputPrograms
	PUSH	BC
	CALL	_qsort
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  118	    displayProgramList(beginList, amountOfProgramsToDisplay);
	LD	A,(IX+-8)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_displayProgramList
	POP	BC
	POP	BC
;  119	    
;  120	    // Display buttons
;  121	    gfx_PrintStringXY("Build", 4, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  122	    printButton(1);
	LD	BC,1
	PUSH	BC
	CALL	_printButton
	POP	BC
;  123	    gfx_PrintStringXY("Debug", 66, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,66
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  124	    printButton(65);
	LD	BC,65
	PUSH	BC
	CALL	_printButton
	POP	BC
;  125	    gfx_PrintStringXY("Quit", 285, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,285
	PUSH	BC
	LD	BC,L__23
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  126	    printButton(279);
	LD	BC,279
	PUSH	BC
	CALL	_printButton
	POP	BC
;  127	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  128	
;  129	    // Select a program
;  130	    selectedProgram = 1;
	LD	(IX+-1),1
;  131	    relativeSelectedProgram = 1;
	LD	(IX+-2),1
;  132	    while ((key = os_GetCSC()) != sk_Enter && key != sk_2nd && key != sk_Yequ && key != sk_Window) {
	JR	L_67
L_68:
;  133	        uint8_t selectionOffset = relativeSelectedProgram * 10 + 3;
	LD	B,10
	LD	C,(IX+-2)
	MLT	BC
	LD	A,C
	ADD	A,3
	LD	(IX+-14),A
;  134	
;  135	        gfx_PrintStringXY(">", 1, selectionOffset);
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,1
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  136	
;  137	        if (key) {
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_67
;  138	            gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  139	            gfx_FillRectangle_NoClip(1, selectionOffset, 8, 8);
	LD	BC,8
	PUSH	BC
	PUSH	BC
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  140	
;  141	            // Stop and quit
;  142	            if (key == sk_Clear || key == sk_Graph) {
	LD	A,(IX+-3)
	CP	A,15
	JR	Z,L_38
	LD	A,(IX+-3)
	CP	A,49
	JR	Z,L_38
;  143	                goto err;
;  144	            }
;  145	
;  146	            // Select the next program
;  147	            if (key == sk_Down) {
	LD	A,(IX+-3)
	CP	A,1
	JR	NZ,L_65
;  148	                if (selectedProgram != amountOfPrograms) {
	LD	A,(IX+-1)
	CP	A,(IX+-5)
	JR	Z,L_46
;  149	                    selectedProgram++;
	INC	(IX+-1)
;  150	                    relativeSelectedProgram++;
	INC	(IX+-2)
;  151	                    if (relativeSelectedProgram > PROGRAMPERSCREEN) {
	LD	A,21
	CP	A,(IX+-2)
	JR	NC,L_65
;  152	                        clearProgramList();
	CALL	_clearProgramList
;  153	                        relativeSelectedProgram--;
	DEC	(IX+-2)
;  154	                        beginList++;
	INC	(IX+-6)
;  155	                        displayProgramList(beginList, amountOfProgramsToDisplay);
	LD	A,(IX+-8)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_displayProgramList
	POP	BC
	POP	BC
;  156	                    }
;  157	                } else {
	JR	L_65
L_46:
;  158	                    clearProgramList();
	CALL	_clearProgramList
;  159	                    selectedProgram = 1;
	LD	(IX+-1),1
;  160	                    relativeSelectedProgram = 1;
	LD	(IX+-2),1
;  161	                    beginList = 0;
	LD	(IX+-6),0
;  162	                    displayProgramList(beginList, amountOfProgramsToDisplay);
	LD	A,(IX+-8)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_displayProgramList
	POP	BC
	POP	BC
;  163	                }
;  164	            }
L_65:
;  165	
;  166	            // Select the previous program
;  167	            if (key == sk_Up) {
	LD	A,(IX+-3)
	CP	A,4
	JR	NZ,L_67
;  168	                if (selectedProgram != 1) {
	LD	A,(IX+-1)
	CP	A,1
	JR	Z,L_63
;  169	                    selectedProgram--;
	DEC	(IX+-1)
;  170	                    relativeSelectedProgram--;
	DEC	(IX+-2)
;  171	                    if(relativeSelectedProgram == 0) {
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_67
;  172	                        clearProgramList();
	CALL	_clearProgramList
;  173	                        relativeSelectedProgram++;
	INC	(IX+-2)
;  174	                        beginList--;
	DEC	(IX+-6)
;  175	                        displayProgramList(beginList, amountOfProgramsToDisplay);
	LD	A,(IX+-8)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_displayProgramList
	POP	BC
	POP	BC
;  176	                    }
;  177	                } else {
	JR	L_67
L_63:
;  178	                    clearProgramList();
	CALL	_clearProgramList
;  179	                    selectedProgram = amountOfPrograms;
	LD	A,(IX+-5)
	LD	(IX+-1),A
;  180	                    relativeSelectedProgram = (amountOfPrograms > PROGRAMPERSCREEN ? PROGRAMPERSCREEN : amountOfPrograms);
	LD	A,21
	CP	A,(IX+-5)
	JR	NC,L_56
	LD	BC,21
	LD	(IX+-29),BC
	JR	L_57
L_56:
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	LD	(IX+-29),HL
L_57:
	LD	A,(IX+-29)
	LD	(IX+-2),A
;  181	                    beginList = (selectedProgram >= PROGRAMPERSCREEN ? selectedProgram - PROGRAMPERSCREEN : 0);
	LD	A,(IX+-5)
	CP	A,21
	JR	C,L_60
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	IY,IY+-21
	LD	(IX+-32),IY
	JR	L_61
L_60:
	LD	BC,0
	LD	(IX+-32),BC
L_61:
	LD	A,(IX+-32)
	LD	(IX+-6),A
;  182	                    displayProgramList(beginList, amountOfProgramsToDisplay);
	LD	A,(IX+-8)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_displayProgramList
	POP	BC
	POP	BC
;  183	                }
;  184	            }
;  185	        }
;  186	    }
L_67:
	CALL	_os_GetCSC
	LD	(IX+-3),A
	CP	A,9
	JR	Z,L_69
	LD	A,(IX+-3)
	CP	A,54
	JR	Z,L_69
	LD	A,(IX+-3)
	CP	A,53
	JR	Z,L_69
	LD	A,(IX+-3)
	CP	A,52
	JR	NZ,L_68
L_69:
;  187	
;  188	    // Erase screen
;  189	    gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  190	    gfx_FillRectangle_NoClip(0, 11, 320, 210);
	LD	BC,210
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,11
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  191	    gfx_FillRectangle_NoClip(0, 220, 270, 20);
	LD	BC,20
	PUSH	BC
	LD	BC,270
	PUSH	BC
	LD	BC,220
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  192	    
;  193	    // Set some vars
;  194	    strcpy(var_name, inputPrograms[selectedProgram - 1]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_inputPrograms
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	PEA	IX+-52
	CALL	_strcpy
	POP	BC
	POP	BC
;  195	    didCompile = true;
	LD	(IX+-12),1
;  196	    memset(&ice, 0, sizeof ice);
	LD	BC,10958
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_ice
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  197	    for (selectedProgram = 0; selectedProgram < amountOfPrograms; selectedProgram++) {
	LD	(IX+-1),0
	JR	L_73
L_71:
;  198	        free(inputPrograms[selectedProgram]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_inputPrograms
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	INC	(IX+-1)
;  199	    }
L_73:
	LD	A,(IX+-1)
	CP	A,(IX+-5)
	JR	C,L_71
;  200	    
;  201	    // Output debug appvar
;  202	    if (key == sk_Window) {
	LD	A,(IX+-3)
	CP	A,52
	JR	NZ,L_76
;  203	        ice.debug = true;
	LD	A,1
	LD	(_ice+10909),A
;  204	    }
L_76:
;  205	
;  206	    gfx_SetTextXY(1, 12);
	LD	BC,12
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  207	    displayMessageLineScroll("Prescanning...");
	LD	BC,L__42
	PUSH	BC
	CALL	_displayMessageLineScroll
	POP	BC
;  208	    displayLoadingBarFrame();
	CALL	_displayLoadingBarFrame
;  209	
;  210	    ice.inPrgm = _open(var_name);
	LD	BC,5
	PUSH	BC
	LD	BC,L__43
	PUSH	BC
	PEA	IX+-52
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
;  211	    _seek(0, SEEK_END, ice.inPrgm);
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	(_ice+10904),A
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  212	    strcpy(ice.currProgName[ice.inPrgm], var_name);
	PEA	IX+-52
	LD	A,(_ice+10904)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_ice+9
	ADD	HL,BC
	PUSH	HL
	CALL	_strcpy
	POP	BC
	POP	BC
;  213	
;  214	    ice.programLength   = _tell(ice.inPrgm);
	LD	A,(_ice+10904)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_Tell
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	(_ice+10901),HL
;  215	    ice.programData     = (uint8_t*)0xD52C00;
	LD	BC,13970432
	LD	(_ice+54),BC
;  216	    ice.programPtr      = ice.programData;
	LD	(_ice+60),BC
;  217	    ice.programDataData = ice.programData + 0xFFFF;
	LD	HL,(_ice+54)
	LD	BC,65535
	ADD	HL,BC
	LD	(_ice+57),HL
;  218	    ice.programDataPtr  = ice.programDataData;
	LD	BC,(_ice+57)
	LD	(_ice+66),BC
;  219	
;  220	    // Check for icon and description before putting the C functions in the output program
;  221	    preScanProgram();
	CALL	_preScanProgram
;  222	    if ((res = getNameIconDescription()) != VALID || (res = parsePrescan()) != VALID) {
	CALL	_getNameIconDescription
	LD	(IX+-4),A
	CP	A,255
	JR	NZ,L_78
	CALL	_parsePrescan
	LD	(IX+-4),A
	CP	A,255
	JR	Z,L_80
L_78:
;  223	        displayError(res);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_displayError
	POP	BC
;  224	        goto stop;
	JR	L_31
;  225	    }
L_80:
;  226	
;  227	    // Allow hidden programs from Cesium
;  228	    if (*var_name < 64) {
	LD	A,(IX+-52)
	SEXT	HL
	LD	L,(IX+-52)
	OR	A,A
	LD	BC,64
	SBC	HL,BC
	JP	P,L_81
;  229	        *var_name += 64;
	LD	A,(IX+-52)
	ADD	A,64
	LD	(IX+-52),A
;  230	    }
L_81:
;  231	    sprintf(buf, "Compiling program %s...", var_name);
	PEA	IX+-52
	LD	BC,L__47
	PUSH	BC
	PEA	IX+-82
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  232	    displayMessageLineScroll(buf);
	PEA	IX+-82
	CALL	_displayMessageLineScroll
	POP	BC
;  233	
;  234	    // Create or empty the output program if parsing succeeded
;  235	    if ((res = parseProgram()) == VALID) {
	CALL	_parseProgram
	LD	(IX+-4),A
	CP	A,255
	JR	NZ,L_99
;  236	        uint24_t previousSize = 0;
	LD	BC,0
	LD	(IX+-20),BC
;  237	
;  238	        // Get the sizes of both stacks
;  239	        ice.programSize = (uintptr_t)ice.programPtr - (uintptr_t)ice.programData;
	LD	HL,(_ice+60)
	LD	BC,(_ice+54)
	OR	A,A
	SBC	HL,BC
	LD	(_ice+3389),HL
;  240	        programDataSize = (uintptr_t)ice.programDataData - (uintptr_t)ice.programDataPtr;
	LD	HL,(_ice+57)
	LD	BC,(_ice+66)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-17),HL
;  241	
;  242	        // Change the pointers to the data as well, but first calculate the offset
;  243	        offset = PRGM_START + ice.programSize - (uintptr_t)ice.programDataPtr;
	LD	HL,(_ice+3389)
	LD	BC,(_ice+66)
	LD	DE,13740162
	ADD	HL,DE
	OR	A,A
	SBC	HL,BC
	LD	(IX+-43),HL
;  244	        while (ice.dataOffsetElements--) {
	JR	L_83
L_84:
;  245	            uint24_t *tempDataOffsetStackPtr = ice.dataOffsetStack[ice.dataOffsetElements];
	LD	HL,(_ice+3077)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_ice+77
	ADD	HL,BC
	LD	BC,(HL)
	LD	(IX+-26),BC
;  246	
;  247	            *tempDataOffsetStackPtr += offset;
	LD	HL,BC
	LD	HL,(HL)
	LD	IY,(IX+-26)
	LD	BC,(IX+-43)
	ADD	HL,BC
	LD	(IY),HL
;  248	        }
L_83:
	LD	HL,(_ice+3077)
	CALL	__icmpzero
	LD	IY,(_ice+3077)
	LEA	BC,IY+-1
	LD	(_ice+3077),BC
	JR	NZ,L_84
;  249	        totalSize = ice.programSize + programDataSize + 3;
	LD	BC,(IX+-17)
	LD	HL,(_ice+3389)
	ADD	HL,BC
	LD	IY,HL
	LEA	IY,IY+3
	LD	(IX+-40),IY
;  250	
;  251	        // Export the program
;  252	        ice.outPrgm = _open(ice.outName);
	LD	BC,5
	PUSH	BC
	LD	BC,L__50
	PUSH	BC
	LD	BC,_ice
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(_ice+10905),A
;  253	        if (ice.outPrgm) {
	OR	A,A
	JR	Z,L_90
;  254	            // This program already exists
;  255	            if ((uint8_t)ti_GetC(ice.outPrgm) != 0xEF || (uint8_t)ti_GetC(ice.outPrgm) != 0x7B) {
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	A,L
	CP	A,239
	JR	NZ,L_87
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetC
	POP	BC
	LD	A,L
	CP	A,123
	JR	Z,L_88
L_87:
;  256	                gfx_SetTextFGColor(224);
	LD	BC,224
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  257	                displayMessageLineScroll("Output program already exists!");
	LD	BC,L__54
	PUSH	BC
	CALL	_displayMessageLineScroll
	POP	BC
;  258	                displayMessageLineScroll("Delete program to continue.");
	LD	BC,L__55
	PUSH	BC
	CALL	_displayMessageLineScroll
	POP	BC
;  259	                didCompile = false;
	LD	(IX+-12),0
;  260	                goto stop;
	JR	L_31
;  261	            }
L_88:
;  262	            
;  263	            previousSize = ti_GetSize(ice.outPrgm);
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_GetSize
	POP	BC
	LD	BC,HL
	CALL	__stoiu
	LD	(IX+-20),HL
;  264	            ti_Close(ice.outPrgm);
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_Close
	POP	BC
;  265	        }
L_90:
;  266	        ice.outPrgm = _new(ice.outName);
	LD	BC,6
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
	LD	BC,_ice
	PUSH	BC
	CALL	_ti_OpenVar
	POP	BC
	POP	BC
	POP	BC
	LD	(_ice+10905),A
;  267	        if (!ice.outPrgm) {
	OR	A,A
	JR	NZ,L_92
;  268	            displayMessageLineScroll("Failed to open output file");
	LD	BC,L__58
	PUSH	BC
	CALL	_displayMessageLineScroll
	POP	BC
;  269	            goto stop;
	JR	L_31
;  270	        }
L_92:
;  271	
;  272	        // Write ASM header
;  273	        ti_PutC(tExtTok, ice.outPrgm);
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,16777199
	PUSH	BC
	CALL	_ti_PutC
	POP	BC
	POP	BC
;  274	        ti_PutC(tAsm84CeCmp, ice.outPrgm);
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,123
	PUSH	BC
	CALL	_ti_PutC
	POP	BC
	POP	BC
;  275	
;  276	        // Write ICE header to be recognized by Cesium
;  277	        ti_PutC(0x7F, ice.outPrgm);
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,127
	PUSH	BC
	CALL	_ti_PutC
	POP	BC
	POP	BC
;  278	
;  279	        // Write the header, main program, and data to output :D
;  280	        ti_Write(ice.programData, ice.programSize, 1, ice.outPrgm);
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(_ice+3389)
	PUSH	BC
	LD	BC,(_ice+54)
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  281	        if (programDataSize) ti_Write(ice.programDataPtr, programDataSize, 1, ice.outPrgm);
	LD	HL,(IX+-17)
	CALL	__icmpzero
	JR	Z,L_94
	LD	A,(_ice+10905)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	LD	BC,(_ice+66)
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_94:
;  282	
;  283	        // Yep, we are really done!
;  284	        gfx_SetTextFGColor(4);
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  285	        displayMessageLineScroll("Successfully compiled!");
	LD	BC,L__60
	PUSH	BC
	CALL	_displayMessageLineScroll
	POP	BC
;  286	
;  287	        // Skip line
;  288	        displayMessageLineScroll(" ");
	LD	BC,L__61
	PUSH	BC
	CALL	_displayMessageLineScroll
	POP	BC
;  289	
;  290	        // Display the size
;  291	        gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  292	        sprintf(buf, "Output size: %u bytes", totalSize);
	LD	BC,(IX+-40)
	PUSH	BC
	LD	BC,L__62
	PUSH	BC
	PEA	IX+-82
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  293	        displayMessageLineScroll(buf);
	PEA	IX+-82
	CALL	_displayMessageLineScroll
	POP	BC
;  294	        if (previousSize) {
	LD	HL,(IX+-20)
	CALL	__icmpzero
	JR	Z,L_96
;  295	            sprintf(buf, "Previous size: %u bytes", previousSize);
	LD	BC,(IX+-20)
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	PEA	IX+-82
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  296	            displayMessageLineScroll(buf);
	PEA	IX+-82
	CALL	_displayMessageLineScroll
	POP	BC
;  297	        }
L_96:
;  298	        sprintf(buf, "Output program: %s", ice.outName);
	LD	BC,_ice
	PUSH	BC
	LD	BC,L__65
	PUSH	BC
	PEA	IX+-82
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  299	        displayMessageLineScroll(buf);
	PEA	IX+-82
	CALL	_displayMessageLineScroll
	POP	BC
;  300	    } else if (res != W_VALID) {
	JR	L_31
L_99:
	LD	A,(IX+-4)
	CP	A,254
	JR	Z,L_31
;  301	        displayError(res);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_displayError
	POP	BC
L_31:
;  302	    }
;  303	
;  304	stop:
;  305	    gfx_SetTextFGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  306	    if (didCompile) {
	LD	A,(IX+-12)
	OR	A,A
	JR	Z,L_107
;  307	        if (res == VALID) {
	LD	A,(IX+-4)
	CP	A,255
	JR	NZ,L_103
;  308	            gfx_PrintStringXY("Run", 9, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,9
	PUSH	BC
	LD	BC,L__69
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  309	            printButton(1);
	LD	BC,1
	PUSH	BC
	CALL	_printButton
	POP	BC
;  310	        } else if (!ti_IsArchived(ice.inPrgm)) {
	JR	L_104
L_103:
	LD	A,(_ice+10904)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_IsArchived
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_104
;  311	            gfx_PrintStringXY("Goto", 222, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,222
	PUSH	BC
	LD	BC,L__71
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  312	            printButton(217);
	LD	BC,217
	PUSH	BC
	CALL	_printButton
	POP	BC
;  313	        }
L_104:
;  314	        gfx_PrintStringXY("Back", 70, 232);
	LD	BC,232
	PUSH	BC
	LD	BC,70
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  315	        printButton(65);
	LD	BC,65
	PUSH	BC
	CALL	_printButton
	POP	BC
;  316	    }
;  317	    while (!(key = os_GetCSC()));
L_107:
	CALL	_os_GetCSC
	LD	(IX+-3),A
	OR	A,A
	JR	Z,L_107
L_38:
;  318	err:
;  319	    gfx_End();
	CALL	_gfx_End
;  320	
;  321	    if (didCompile) {
	LD	A,(IX+-12)
	OR	A,A
	JR	Z,L_119
;  322	        if (key == sk_Yequ && res == VALID) {
	LD	A,(IX+-3)
	CP	A,53
	JR	NZ,L_113
	LD	A,(IX+-4)
	CP	A,255
	JR	NZ,L_113
;  323	            RunPrgm(ice.outName);
	LD	BC,_ice
	PUSH	BC
	CALL	_RunPrgm
	POP	BC
;  324	        }
L_113:
;  325	        if (key == sk_Window) {
	LD	A,(IX+-3)
	CP	A,52
	JR	NZ,L_117
;  326	            // Erase screen
;  327	            gfx_SetColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  328	            gfx_FillRectangle_NoClip(0, 11, 320, 229);
	LD	BC,229
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,11
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  329	
;  330	            goto displayMainScreen;
	JR	L_16
;  331	        }
L_117:
;  332	        if (key == sk_Trace && res != VALID && !ti_IsArchived(ice.inPrgm)) {
	LD	A,(IX+-3)
	CP	A,50
	JR	NZ,L_119
	LD	A,(IX+-4)
	CP	A,255
	JR	Z,L_119
	LD	A,(_ice+10904)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_IsArchived
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_119
;  333	            GotoEditor(ice.currProgName[ice.inPrgm], ti_Tell(ice.inPrgm) - 1);
	LD	A,(_ice+10904)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_ti_Tell
	POP	BC
	DEC	HL
	PUSH	HL
	LD	A,(_ice+10904)
	UEXT	HL
	LD	L,A
	LD	A,9
	CALL	__imul_b
	LD	BC,_ice+9
	ADD	HL,BC
	PUSH	HL
	CALL	_GotoEditor
	POP	BC
	POP	BC
;  334	        }
;  335	    }
L_119:
;  336	    ti_CloseAll();
	CALL	_ti_CloseAll
;  337	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_GotoEditor                         IMPORT  -----   function
;_RunPrgm                            IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_ti_IsArchived                      IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_ti_PutC                            IMPORT  -----   function
;_ti_Close                           IMPORT  -----   function
;_ti_GetSize                         IMPORT  -----   function
;_ti_GetC                            IMPORT  -----   function
;_parseProgram                       IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_displayError                       IMPORT  -----   function
;_parsePrescan                       IMPORT  -----   function
;_getNameIconDescription             IMPORT  -----   function
;_preScanProgram                     IMPORT  -----   function
;_ti_Tell                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_OpenVar                         IMPORT  -----   function
;_displayLoadingBarFrame             IMPORT  -----   function
;_displayMessageLineScroll           IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_free                               IMPORT  -----   function
;_ice                                STATIC  10958   variable
;_memset                             IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_printButton                        IMPORT  -----   function
;_qsort                              IMPORT  -----   function
;_ti_DetectAny                       IMPORT  -----   function
;_strcpy                             IMPORT  -----   function
;_inputPrograms                      STATIC    768   variable
;_malloc                             IMPORT  -----   function
;_infoStr                            STATIC      3   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_HorizLine_NoClip               IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_SetHooks2                          IMPORT  -----   function
;_ti_GetDataPtr                      IMPORT  -----   function
;_SetHooks1                          IMPORT  -----   function
;_ti_SetArchiveStatus                IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_0temp11                            STATIC      2   variable
;buf                                  IX-82     30   variable
;var_name                             IX-52      9   variable
;offset                               IX-43      3   variable
;totalSize                            IX-40      3   variable
;search_pos                           IX-37      3   variable
;ICEheader                            IX-34      2   variable
;temp58                               IX-32      3   variable
;temp54                               IX-29      3   variable
;tempDataOffsetStackPtr               IX-26      3   variable
;temp27                               IX-23      3   variable
;previousSize                         IX-20      3   variable
;programDataSize                      IX-17      3   variable
;selectionOffset                      IX-14      1   variable
;type                                 IX-13      1   variable
;didCompile                           IX-12      1   variable
;temp_name                            IX-11      3   variable
;amountOfProgramsToDisplay             IX-8      1   variable
;tempProg                              IX-7      1   variable
;beginList                             IX-6      1   variable
;amountOfPrograms                      IX-5      1   variable
;res                                   IX-4      1   variable
;key                                   IX-3      1   variable
;relativeSelectedProgram               IX-2      1   variable
;selectedProgram                       IX-1      1   variable


; Stack Frame Size: 88 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__6:
	DB	0
L__7:
	DB	"r"
	DB	0
L__8:
	DB	"ICEHOOKS"
	DB	0
L__10:
	DB	"r"
	DB	0
L__11:
	DB	"ICEDEBUG"
	DB	0
L__20:
	DB	"No programs found!"
	DB	0
L__21:
	DB	"Build"
	DB	0
L__22:
	DB	"Debug"
	DB	0
L__23:
	DB	"Quit"
	DB	0
L__24:
	DB	">"
	DB	0
L__42:
	DB	"Prescanning..."
	DB	0
L__43:
	DB	"r"
	DB	0
L__47:
	DB	"Compiling program %s..."
	DB	0
L__50:
	DB	"r"
	DB	0
L__54:
	DB	"Output program already exists!"
	DB	0
L__55:
	DB	"Delete program to continue."
	DB	0
L__56:
	DB	"w"
	DB	0
L__58:
	DB	"Failed to open output file"
	DB	0
L__60:
	DB	"Successfully compiled!"
	DB	0
L__61:
	DB	" "
	DB	0
L__62:
	DB	"Output size: %u bytes"
	DB	0
L__64:
	DB	"Previous size: %u bytes"
	DB	0
L__65:
	DB	"Output program: %s"
	DB	0
L__69:
	DB	"Run"
	DB	0
L__71:
	DB	"Goto"
	DB	0
L__72:
	DB	"Back"
	DB	0
	SEGMENT TEXT
_0temp11:
	DB	44
	DB	0
	XREF _parsePrescan:ROM
	XREF _getNameIconDescription:ROM
	XREF _preScanProgram:ROM
	XREF _printButton:ROM
	XREF _displayMessageLineScroll:ROM
	XREF _displayLoadingBarFrame:ROM
	XREF _parseProgram:ROM
	XREF _displayError:ROM
	XREF _SetHooks2:ROM
	XREF _SetHooks1:ROM
	XREF _RunPrgm:ROM
	XREF _GotoEditor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_HorizLine_NoClip:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _strcmp:ROM
	XREF _strcpy:ROM
	XREF _memset:ROM
	XREF _sprintf:ROM
	XREF _ti_GetDataPtr:ROM
	XREF _ti_SetArchiveStatus:ROM
	XREF _ti_IsArchived:ROM
	XREF _ti_GetSize:ROM
	XREF _ti_Tell:ROM
	XREF _ti_Seek:ROM
	XREF _ti_GetC:ROM
	XREF _ti_PutC:ROM
	XREF _ti_Write:ROM
	XREF _ti_DetectAny:ROM
	XREF _ti_Close:ROM
	XREF _ti_OpenVar:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _qsort:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF __imulu:ROM
	XREF __stoiu:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _clearProgramList
	XDEF _displayProgramList
	XDEF _infoStr
	XDEF _reg
	XDEF _expr
	XDEF _ice
	END
